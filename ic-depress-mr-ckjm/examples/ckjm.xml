<?xml version="1.0"?>
<ckjm>
	<class>
		<name>org.apache.commons.math3.linear.SchurTransformer$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.MathRuntimeException</name>
		<wmc>4</wmc>
		<dit>4</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>31</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.875</mfa>
		<cam>0.5</cam>
		<ic>1</ic>
		<cbm>2</cbm>
		<amc>6.25</amc>
		<cc>
			<method name="public String getMessage()">1</method>
			<method name="public String getLocalizedMessage()">1</method>
			<method name="public org.apache.commons.math3.exception.util.ExceptionContext getContext()">1</method>
			<method name="public transient void _init_(org.apache.commons.math3.exception.util.Localizable pattern, Object[] args)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>18</rfc>
		<lcom>14</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>6</npm>
		<lcom3>0.761904761904762</lcom3>
		<loc>128</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.425</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.625</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator legendreHighPrecision(int numberOfPoints, double lowerBound, double upperBound)">1</method>
			<method name="private static org.apache.commons.math3.util.Pair getRule(org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory factory, int numberOfPoints)">1</method>
			<method name="public void _init_()">0</method>
			<method name="private static org.apache.commons.math3.util.Pair transform(org.apache.commons.math3.util.Pair rule, double a, double b)">2</method>
			<method name="public org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator legendre(int numberOfPoints)">1</method>
			<method name="public org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator legendreHighPrecision(int numberOfPoints)">1</method>
			<method name="public org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator hermite(int numberOfPoints)">1</method>
			<method name="public org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator legendre(int numberOfPoints, double lowerBound, double upperBound)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.ranking.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>15</rfc>
		<lcom>8</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>8</npm>
		<lcom3>0.6785714285714286</lcom3>
		<loc>91</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.325</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.875</amc>
		<cc>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.Vector2D getLocation()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge getOutgoing()">1</method>
			<method name="public void setIncoming(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge incoming)">1</method>
			<method name="public void setOutgoing(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge outgoing)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge getIncoming()">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.twod.Vector2D location)">0</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.Line sharedLineWith(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex vertex)">2</method>
			<method name="public void bindWith(org.apache.commons.math3.geometry.euclidean.twod.Line line)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.nonstiff.EulerIntegrator</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>30</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.5</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(double step)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$LowerUpperBoundMapper</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>7</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>0.5</lcom3>
		<loc>32</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.0</amc>
		<cc>
			<method name="public double unboundedToBounded(double y)">1</method>
			<method name="public double boundedToUnbounded(double x)">1</method>
			<method name="public void _init_(double lower, double upper)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.WeightedObservedPoints</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>12</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>6</npm>
		<lcom3>0.6</lcom3>
		<loc>49</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.833333333333333</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="public java.util.List toList()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void add(org.apache.commons.math3.fitting.WeightedObservedPoint observed)">1</method>
			<method name="public void add(double x, double y)">1</method>
			<method name="public void add(double weight, double x, double y)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.differentiation.UnivariateFunctionDifferentiator</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction differentiate(org.apache.commons.math3.analysis.UnivariateFunction)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>12</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.5</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.UnivariateFunction getObjectiveFunction()">1</method>
			<method name="public void _init_(org.apache.commons.math3.analysis.UnivariateFunction f)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Min</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public double value(double x, double y)">1</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>13</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.4</lcom3>
		<loc>198</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.666666666666668</amc>
		<cc>
			<method name="public boolean isFeasible(double[] x)">4</method>
			<method name="private double penalty(double[] x, double[] repaired)">3</method>
			<method name="public void _init_(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer)">0</method>
			<method name="private double[] repair(double[] x)">4</method>
			<method name="public org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$ValuePenaltyPair value(double[] point)">4</method>
			<method name="static double[] access$200(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$FitnessFunction x0, double[] x1)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.ParameterJacobianProvider</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void computeParameterJacobian(double, double[], double[], String, double[])">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>12</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>6</npm>
		<lcom3>0.16666666666666666</lcom3>
		<loc>318</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.34285714285714286</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>44.142857142857146</amc>
		<cc>
			<method name="public Object getArray()">1</method>
			<method name="public Object clone()">1</method>
			<method name="private void clone(org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix mdcm)">6</method>
			<method name="public transient org.apache.commons.math3.complex.Complex get(int[] vector)">1</method>
			<method name="public transient org.apache.commons.math3.complex.Complex set(org.apache.commons.math3.complex.Complex magnitude, int[] vector)">1</method>
			<method name="public void _init_(Object multiDimensionalComplexArray)">0</method>
			<method name="public int[] getDimensionSizes()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.linear.Relationship</name>
		<wmc>6</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>10</rfc>
		<lcom>9</lcom>
		<ca>3</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>0.76</lcom3>
		<loc>79</loc>
		<dam>0.4</dam>
		<moa>4</moa>
		<mfa>0.7647058823529411</mfa>
		<cam>0.4</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>11.333333333333334</amc>
		<cc>
			<method name="public static org.apache.commons.math3.optimization.linear.Relationship[] values()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public org.apache.commons.math3.optimization.linear.Relationship oppositeRelationship()">4</method>
			<method name="public static org.apache.commons.math3.optimization.linear.Relationship valueOf(String name)">1</method>
			<method name="public String toString()">1</method>
			<method name="private void _init_(String, int, String stringValue)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet</name>
		<wmc>18</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>27</cbo>
		<rfc>91</rfc>
		<lcom>153</lcom>
		<ca>6</ca>
		<ce>22</ce>
		<npm>13</npm>
		<lcom3>1.0</lcom3>
		<loc>1048</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.2569444444444444</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>57.111111111111114</amc>
		<cc>
			<method name="private static void insertEdges(double hyperplaneThickness, org.apache.commons.math3.geometry.partitioning.BSPTree node, java.util.List edges)">21</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree tree)">1</method>
			<method name="private static transient org.apache.commons.math3.geometry.partitioning.BSPTree verticesToTree(double hyperplaneThickness, org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] vertices)">9</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] getVertices()">11</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(double tolerance)">0</method>
			<method name="private static org.apache.commons.math3.geometry.euclidean.twod.Line[] boxBoundary(double xMin, double xMax, double yMin, double yMax, double tolerance)">3</method>
			<method name="public void _init_(java.util.Collection boundary, double tolerance)">0</method>
			<method name="public void _init_(java.util.Collection boundary)">0</method>
			<method name="private java.util.List followLoop(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node node, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree sorted)">13</method>
			<method name="public void _init_(double xMin, double xMax, double yMin, double yMax)">0</method>
			<method name="public volatile org.apache.commons.math3.geometry.partitioning.Region buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree x0)">1</method>
			<method name="protected void computeGeometricalProperties()">8</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.partitioning.BSPTree tree, double tolerance)">0</method>
			<method name="public void _init_(double xMin, double xMax, double yMin, double yMax, double tolerance)">0</method>
			<method name="public transient void _init_(double hyperplaneThickness, org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] vertices)">0</method>
			<method name="public volatile org.apache.commons.math3.geometry.partitioning.AbstractRegion buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree x0)">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.partitioning.BSPTree tree)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.integration.SimpsonIntegrator</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>16</rfc>
		<lcom>6</lcom>
		<ca>0</ca>
		<ce>9</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>131</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.5</amc>
		<cc>
			<method name="public void _init_(double relativeAccuracy, double absoluteAccuracy, int minimalIterationCount, int maximalIterationCount)">0</method>
			<method name="public void _init_()">0</method>
			<method name="protected double doIntegrate()">1</method>
			<method name="public void _init_(int minimalIterationCount, int maximalIterationCount)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.primes.SmallPrimes</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>15</rfc>
		<lcom>7</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>0.5</lcom3>
		<loc>2278</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>378.3333333333333</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public static java.util.List trialDivision(int n)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static int boundedTrialDivision(int n, int maxFactor, java.util.List factors)">5</method>
			<method name="public static boolean millerRabinPrimeTest(int n)">11</method>
			<method name="public static int smallTrialDivision(int n, java.util.List factors)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Divide</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public double value(double x, double y)">1</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.leastsquares.LeastSquaresOptimizer</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.fitting.leastsquares.LeastSquaresOptimizer$Optimum optimize(org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.neuralnet.MapUtils</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>29</rfc>
		<lcom>21</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>6</npm>
		<lcom3>2.0</lcom3>
		<loc>384</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.40476190476190477</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>53.857142857142854</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public static org.apache.commons.math3.ml.neuralnet.Neuron findBest(double[] features, Iterable neurons, org.apache.commons.math3.ml.distance.DistanceMeasure distance)">2</method>
			<method name="public static double computeQuantizationError(Iterable data, Iterable neurons, org.apache.commons.math3.ml.distance.DistanceMeasure distance)">3</method>
			<method name="public static int[][] computeHitHistogram(Iterable data, org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D map, org.apache.commons.math3.ml.distance.DistanceMeasure distance)">6</method>
			<method name="public static double computeTopographicError(Iterable data, org.apache.commons.math3.ml.neuralnet.Network net, org.apache.commons.math3.ml.distance.DistanceMeasure distance)">3</method>
			<method name="public static double[][] computeU(org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D map, org.apache.commons.math3.ml.distance.DistanceMeasure distance)">4</method>
			<method name="public static org.apache.commons.math3.util.Pair findBestAndSecondBest(double[] features, Iterable neurons, org.apache.commons.math3.ml.distance.DistanceMeasure distance)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.spherical.oned.Arc</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>12</rfc>
		<lcom>0</lcom>
		<ca>5</ca>
		<ce>6</ce>
		<npm>7</npm>
		<lcom3>0.5833333333333334</lcom3>
		<loc>146</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6428571428571429</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.285714285714285</amc>
		<cc>
			<method name="public double getSize()">1</method>
			<method name="public double getTolerance()">1</method>
			<method name="public double getBarycenter()">1</method>
			<method name="public void _init_(double lower, double upper, double tolerance)">0</method>
			<method name="public double getSup()">1</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(double point)">6</method>
			<method name="public double getInf()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer$1</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>81</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.45</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.5</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_(org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer, double[], double[])">0</method>
			<method name="private double weightedResidual(org.apache.commons.math3.optimization.PointVectorValuePair pv)">2</method>
			<method name="public int compare(org.apache.commons.math3.optimization.PointVectorValuePair o1, org.apache.commons.math3.optimization.PointVectorValuePair o2)">4</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>8</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>46</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.0</amc>
		<cc>
			<method name="void _init_(org.apache.commons.math3.geometry.partitioning.RegionFactory x0, org.apache.commons.math3.geometry.partitioning.RegionFactory$1 x1)">0</method>
			<method name="private void _init_(org.apache.commons.math3.geometry.partitioning.RegionFactory)">0</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.BSPTree merge(org.apache.commons.math3.geometry.partitioning.BSPTree leaf, org.apache.commons.math3.geometry.partitioning.BSPTree tree, org.apache.commons.math3.geometry.partitioning.BSPTree parentTree, boolean isPlusChild, boolean leafFromInstance)">4</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.Combinations$LexicographicComparator</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>11</rfc>
		<lcom>2</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>0.5555555555555555</lcom3>
		<loc>128</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>30.25</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="public void _init_(int n, int k)">0</method>
			<method name="public int compare(int[] c1, int[] c2)">5</method>
			<method name="private long lexNorm(int[] c)">4</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.CompositeFormat</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>33</rfc>
		<lcom>36</lcom>
		<ca>7</ca>
		<ce>0</ce>
		<npm>7</npm>
		<lcom3>2.0</lcom3>
		<loc>226</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.25</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.11111111111111</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="private static Number parseNumber(String source, double value, java.text.ParsePosition pos)">3</method>
			<method name="public static StringBuffer formatDouble(double value, java.text.NumberFormat format, StringBuffer toAppendTo, java.text.FieldPosition pos)">3</method>
			<method name="public static char parseNextCharacter(String source, java.text.ParsePosition pos)">5</method>
			<method name="public static void parseAndIgnoreWhitespace(String source, java.text.ParsePosition pos)">1</method>
			<method name="public static java.text.NumberFormat getDefaultNumberFormat(java.util.Locale locale)">1</method>
			<method name="public static Number parseNumber(String source, java.text.NumberFormat format, java.text.ParsePosition pos)">4</method>
			<method name="public static java.text.NumberFormat getDefaultNumberFormat()">1</method>
			<method name="public static boolean parseFixedstring(String source, String expected, java.text.ParsePosition pos)">4</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.MathIllegalNumberException</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>8</noc>
		<cbo>10</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>8</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>1.0</lcom3>
		<loc>30</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.0</amc>
		<cc>
			<method name="public Number getArgument()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="protected transient void _init_(org.apache.commons.math3.exception.util.Localizable pattern, Number wrong, Object[] arguments)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>15</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public void trigger(int max)">1</method>
			<method name="void _init_(org.apache.commons.math3.optim.BaseOptimizer$1 x0)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.special.Gamma</name>
		<wmc>13</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>31</rfc>
		<lcom>74</lcom>
		<ca>8</ca>
		<ce>6</ce>
		<npm>11</npm>
		<lcom3>1.0643939393939394</lcom3>
		<loc>1079</loc>
		<dam>0.9545454545454546</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3888888888888889</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>78.61538461538461</amc>
		<cc>
			<method name="public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)">12</method>
			<method name="private void _init_()">0</method>
			<method name="public static double gamma(double x)">8</method>
			<method name="public static double trigamma(double x)">4</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static double regularizedGammaQ(double a, double x, double epsilon, int maxIterations)">7</method>
			<method name="public static double regularizedGammaP(double a, double x)">1</method>
			<method name="public static double logGamma1p(double x)">1</method>
			<method name="public static double digamma(double x)">4</method>
			<method name="public static double logGamma(double x)">7</method>
			<method name="public static double lanczos(double x)">2</method>
			<method name="public static double invGamma1pm1(double x)">7</method>
			<method name="public static double regularizedGammaQ(double a, double x)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer$LineSearchFunction</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>67</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.5</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer, double[] searchDirection)">0</method>
			<method name="public double value(double x)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.MersenneTwister</name>
		<wmc>9</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>14</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>7</npm>
		<lcom3>0.8125</lcom3>
		<loc>509</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.46875</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>54.888888888888886</amc>
		<cc>
			<method name="protected int next(int bits)">4</method>
			<method name="public void _init_(long seed)">0</method>
			<method name="public void _init_(int seed)">0</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void setSeed(int seed)">2</method>
			<method name="public void _init_(int[] seed)">0</method>
			<method name="public void setSeed(int[] seed)">11</method>
			<method name="public void setSeed(long seed)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.ArithmeticUtils</name>
		<wmc>28</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>55</rfc>
		<lcom>378</lcom>
		<ca>8</ca>
		<ce>8</ce>
		<npm>25</npm>
		<lcom3>2.0</lcom3>
		<loc>1060</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2357142857142857</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>36.857142857142854</amc>
		<cc>
			<method name="public static long factorial(int n)">1</method>
			<method name="public static double binomialCoefficientDouble(int n, int k)">1</method>
			<method name="public static boolean isPowerOfTwo(long n)">3</method>
			<method name="public static long lcm(long a, long b)">1</method>
			<method name="public static int pow(int k, int e)">1</method>
			<method name="public static long subAndCheck(long a, long b)">1</method>
			<method name="private static long addAndCheck(long a, long b, org.apache.commons.math3.exception.util.Localizable pattern)">1</method>
			<method name="public static java.math.BigInteger pow(java.math.BigInteger k, java.math.BigInteger e)">1</method>
			<method name="public static int lcm(int a, int b)">1</method>
			<method name="public static long binomialCoefficient(int n, int k)">1</method>
			<method name="public static int gcd(int p, int q)">1</method>
			<method name="public static int pow(int k, long e)">1</method>
			<method name="private void _init_()">0</method>
			<method name="public static int addAndCheck(int x, int y)">1</method>
			<method name="public static long addAndCheck(long a, long b)">1</method>
			<method name="public static double factorialLog(int n)">1</method>
			<method name="public static int subAndCheck(int x, int y)">1</method>
			<method name="public static long mulAndCheck(long a, long b)">1</method>
			<method name="public static long gcd(long p, long q)">1</method>
			<method name="public static double binomialCoefficientLog(int n, int k)">1</method>
			<method name="public static java.math.BigInteger pow(java.math.BigInteger k, long e)">1</method>
			<method name="public static double factorialDouble(int n)">1</method>
			<method name="private static int gcdPositive(int a, int b)">4</method>
			<method name="public static java.math.BigInteger pow(java.math.BigInteger k, int e)">1</method>
			<method name="public static long pow(long k, long e)">1</method>
			<method name="public static long pow(long k, int e)">1</method>
			<method name="public static long stirlingS2(int n, int k)">1</method>
			<method name="public static int mulAndCheck(int x, int y)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.transform.FastSineTransformer</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>17</rfc>
		<lcom>4</lcom>
		<ca>0</ca>
		<ce>14</ce>
		<npm>3</npm>
		<lcom3>0.8333333333333334</lcom3>
		<loc>253</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.42857142857142855</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>61.75</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.transform.DstNormalization normalization)">0</method>
			<method name="public double[] transform(double[] f, org.apache.commons.math3.transform.TransformType type)">3</method>
			<method name="protected double[] fst(double[] f)">1</method>
			<method name="public double[] transform(org.apache.commons.math3.analysis.UnivariateFunction f, double min, double max, int n, org.apache.commons.math3.transform.TransformType type)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.vector.jacobian.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.util.LocalizedFormats</name>
		<wmc>6</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>215</cbo>
		<rfc>20</rfc>
		<lcom>7</lcom>
		<ca>213</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>0.9974999999999999</lcom3>
		<loc>3882</loc>
		<dam>0.00625</dam>
		<moa>319</moa>
		<mfa>0.7647058823529411</mfa>
		<cam>0.35</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>592.6666666666666</amc>
		<cc>
			<method name="public static org.apache.commons.math3.exception.util.LocalizedFormats valueOf(String name)">1</method>
			<method name="public String getSourceString()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static org.apache.commons.math3.exception.util.LocalizedFormats[] values()">1</method>
			<method name="public String getLocalizedString(java.util.Locale locale)">1</method>
			<method name="private void _init_(String, int, String sourceFormat)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.SparseFieldVector</name>
		<wmc>53</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>19</cbo>
		<rfc>100</rfc>
		<lcom>606</lcom>
		<ca>0</ca>
		<ce>19</ce>
		<npm>48</npm>
		<lcom3>0.4230769230769231</lcom3>
		<loc>1285</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.2018867924528302</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>23.169811320754718</amc>
		<cc>
			<method name="public org.apache.commons.math3.linear.FieldVector mapMultiply(org.apache.commons.math3.FieldElement d)">1</method>
			<method name="public void _init_(org.apache.commons.math3.linear.SparseFieldVector v)">0</method>
			<method name="public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldVectorPreservingVisitor visitor)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldVector getSubVector(int index, int n)">1</method>
			<method name="public void setSubVector(int index, org.apache.commons.math3.linear.FieldVector v)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldVector mapDivideToSelf(org.apache.commons.math3.FieldElement d)">1</method>
			<method name="public void set(org.apache.commons.math3.FieldElement value)">2</method>
			<method name="public org.apache.commons.math3.linear.FieldVector append(org.apache.commons.math3.FieldElement d)">1</method>
			<method name="public void _init_(org.apache.commons.math3.Field field)">0</method>
			<method name="public org.apache.commons.math3.linear.FieldVector mapSubtractToSelf(org.apache.commons.math3.FieldElement d)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldVector mapMultiplyToSelf(org.apache.commons.math3.FieldElement d)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldMatrix outerProduct(org.apache.commons.math3.linear.SparseFieldVector v)">2</method>
			<method name="public org.apache.commons.math3.linear.FieldVector mapInvToSelf()">1</method>
			<method name="public org.apache.commons.math3.FieldElement walkInDefaultOrder(org.apache.commons.math3.linear.FieldVectorPreservingVisitor visitor, int start, int end)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldVector copy()">1</method>
			<method name="public org.apache.commons.math3.linear.FieldVector ebeMultiply(org.apache.commons.math3.linear.FieldVector v)">1</method>
			<method name="public int getDimension()">1</method>
			<method name="private org.apache.commons.math3.util.OpenIntToFieldHashMap getEntries()">1</method>
			<method name="public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldVectorPreservingVisitor visitor, int start, int end)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldVector mapInv()">1</method>
			<method name="public org.apache.commons.math3.linear.FieldVector add(org.apache.commons.math3.linear.SparseFieldVector v)">1</method>
			<method name="public void _init_(org.apache.commons.math3.Field field, int dimension, int expectedSize)">0</method>
			<method name="public org.apache.commons.math3.FieldElement walkInDefaultOrder(org.apache.commons.math3.linear.FieldVectorChangingVisitor visitor, int start, int end)">1</method>
			<method name="public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldVectorChangingVisitor visitor)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldVector projection(org.apache.commons.math3.linear.FieldVector v)">1</method>
			<method name="public org.apache.commons.math3.FieldElement[] getData()">1</method>
			<method name="public org.apache.commons.math3.Field getField()">1</method>
			<method name="public boolean equals(Object obj)">9</method>
			<method name="public org.apache.commons.math3.linear.FieldVector add(org.apache.commons.math3.linear.FieldVector v)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldVector append(org.apache.commons.math3.linear.FieldVector v)">3</method>
			<method name="public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldVectorChangingVisitor visitor, int start, int end)">1</method>
			<method name="public org.apache.commons.math3.FieldElement dotProduct(org.apache.commons.math3.linear.FieldVector v)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldVector append(org.apache.commons.math3.linear.SparseFieldVector v)">2</method>
			<method name="public org.apache.commons.math3.FieldElement getEntry(int index)">1</method>
			<method name="public void _init_(org.apache.commons.math3.Field field, org.apache.commons.math3.FieldElement[] values)">0</method>
			<method name="public org.apache.commons.math3.linear.FieldVector mapSubtract(org.apache.commons.math3.FieldElement d)">1</method>
			<method name="private void checkIndex(int index)">1</method>
			<method name="protected void _init_(org.apache.commons.math3.linear.SparseFieldVector v, int resize)">0</method>
			<method name="public org.apache.commons.math3.linear.FieldVector mapAdd(org.apache.commons.math3.FieldElement d)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldMatrix outerProduct(org.apache.commons.math3.linear.FieldVector v)">3</method>
			<method name="public void _init_(org.apache.commons.math3.Field field, int dimension)">0</method>
			<method name="public org.apache.commons.math3.linear.FieldVector mapDivide(org.apache.commons.math3.FieldElement d)">1</method>
			<method name="public int hashCode()">3</method>
			<method name="public org.apache.commons.math3.FieldElement[] toArray()">2</method>
			<method name="public org.apache.commons.math3.linear.FieldVector subtract(org.apache.commons.math3.linear.FieldVector v)">1</method>
			<method name="public void setEntry(int index, org.apache.commons.math3.FieldElement value)">1</method>
			<method name="public org.apache.commons.math3.FieldElement walkInDefaultOrder(org.apache.commons.math3.linear.FieldVectorChangingVisitor visitor)">2</method>
			<method name="protected void checkVectorDimensions(int n)">1</method>
			<method name="public org.apache.commons.math3.FieldElement walkInDefaultOrder(org.apache.commons.math3.linear.FieldVectorPreservingVisitor visitor)">2</method>
			<method name="public org.apache.commons.math3.linear.FieldVector ebeDivide(org.apache.commons.math3.linear.FieldVector v)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldVector mapAddToSelf(org.apache.commons.math3.FieldElement d)">1</method>
			<method name="private void checkIndices(int start, int end)">1</method>
			<method name="public org.apache.commons.math3.linear.SparseFieldVector subtract(org.apache.commons.math3.linear.SparseFieldVector v)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.linear.AbstractLinearOptimizer</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>7</cbo>
		<rfc>15</rfc>
		<lcom>35</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>0.8857142857142858</lcom3>
		<loc>83</loc>
		<dam>0.8571428571428571</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.24242424242424243</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.909090909090909</amc>
		<cc>
			<method name="public org.apache.commons.math3.optimization.PointValuePair optimize(org.apache.commons.math3.optimization.linear.LinearObjectiveFunction f, java.util.Collection constraints, org.apache.commons.math3.optimization.GoalType goalType, boolean restrictToNonNegative)">1</method>
			<method name="protected void incrementIterationsCounter()">1</method>
			<method name="public void setMaxIterations(int maxIterations)">1</method>
			<method name="protected abstract org.apache.commons.math3.optimization.PointValuePair doOptimize()">1</method>
			<method name="protected void _init_()">0</method>
			<method name="public int getIterations()">1</method>
			<method name="public int getMaxIterations()">1</method>
			<method name="protected org.apache.commons.math3.optimization.GoalType getGoalType()">1</method>
			<method name="protected boolean restrictToNonNegative()">1</method>
			<method name="protected java.util.Collection getConstraints()">1</method>
			<method name="protected org.apache.commons.math3.optimization.linear.LinearObjectiveFunction getFunction()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.OpenIntToDoubleHashMap</name>
		<wmc>28</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>34</rfc>
		<lcom>202</lcom>
		<ca>5</ca>
		<ce>3</ce>
		<npm>11</npm>
		<lcom3>0.8592592592592593</lcom3>
		<loc>737</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.22448979591836735</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.785714285714285</amc>
		<cc>
			<method name="public boolean containsKey(int key)">5</method>
			<method name="private boolean containsKey(int key, int index)">4</method>
			<method name="private static int computeCapacity(int expectedSize)">3</method>
			<method name="static double[] access$300(org.apache.commons.math3.util.OpenIntToDoubleHashMap x0)">1</method>
			<method name="private static int hashOf(int key)">1</method>
			<method name="static int access$100(org.apache.commons.math3.util.OpenIntToDoubleHashMap x0)">1</method>
			<method name="public void _init_(double missingEntries)">0</method>
			<method name="private static int findInsertionIndex(int[] keys, byte[] states, int key, int mask)">12</method>
			<method name="public int size()">1</method>
			<method name="static byte[] access$400(org.apache.commons.math3.util.OpenIntToDoubleHashMap x0)">1</method>
			<method name="private void readObject(java.io.ObjectInputStream stream)">1</method>
			<method name="private static int perturb(int hash)">1</method>
			<method name="public double get(int key)">5</method>
			<method name="private void growTable()">3</method>
			<method name="private static int nextPowerOfTwo(int i)">1</method>
			<method name="public void _init_(int expectedSize)">0</method>
			<method name="private boolean shouldGrowTable()">2</method>
			<method name="public void _init_(int expectedSize, double missingEntries)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public double put(int key, double value)">4</method>
			<method name="public org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator iterator()">1</method>
			<method name="private static int changeIndexSign(int index)">1</method>
			<method name="static int[] access$200(org.apache.commons.math3.util.OpenIntToDoubleHashMap x0)">1</method>
			<method name="private int findInsertionIndex(int key)">1</method>
			<method name="private static int probe(int perturb, int j)">1</method>
			<method name="private double doRemove(int index)">1</method>
			<method name="public double remove(int key)">5</method>
			<method name="public void _init_(org.apache.commons.math3.util.OpenIntToDoubleHashMap source)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.MultidimensionalCounter$Iterator</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>16</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>7</npm>
		<lcom3>0.5357142857142857</lcom3>
		<loc>119</loc>
		<dam>0.75</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4166666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.375</amc>
		<cc>
			<method name="void _init_(org.apache.commons.math3.util.MultidimensionalCounter)">0</method>
			<method name="public int getCount(int dim)">1</method>
			<method name="public int[] getCounts()">1</method>
			<method name="public Integer next()">4</method>
			<method name="public boolean hasNext()">2</method>
			<method name="public void remove()">1</method>
			<method name="public int getCount()">1</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.differentiation.DerivativeStructure$DataTransferObject</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>0.5</lcom3>
		<loc>28</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.0</amc>
		<cc>
			<method name="public void _init_(int variables, int order, double[] data)">0</method>
			<method name="private Object readResolve()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics</name>
		<wmc>31</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>62</rfc>
		<lcom>465</lcom>
		<ca>0</ca>
		<ce>5</ce>
		<npm>31</npm>
		<lcom3>1.0333333333333334</lcom3>
		<loc>136</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.22580645161290322</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.3548387096774195</amc>
		<cc>
			<method name="public synchronized double[] getMean()">1</method>
			<method name="public void _init_(int k, boolean isCovarianceBiasCorrected)">0</method>
			<method name="public synchronized org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic[] getGeoMeanImpl()">1</method>
			<method name="public synchronized double[] getSumSq()">1</method>
			<method name="public synchronized double[] getMin()">1</method>
			<method name="public synchronized double[] getSum()">1</method>
			<method name="public synchronized void setMaxImpl(org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic[] maxImpl)">1</method>
			<method name="public synchronized org.apache.commons.math3.linear.RealMatrix getCovariance()">1</method>
			<method name="public synchronized void setSumImpl(org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic[] sumImpl)">1</method>
			<method name="public synchronized void setMinImpl(org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic[] minImpl)">1</method>
			<method name="public synchronized double[] getGeometricMean()">1</method>
			<method name="public synchronized void setSumLogImpl(org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic[] sumLogImpl)">1</method>
			<method name="public synchronized org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic[] getSumLogImpl()">1</method>
			<method name="public synchronized String toString()">1</method>
			<method name="public synchronized boolean equals(Object object)">1</method>
			<method name="public synchronized org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic[] getMaxImpl()">1</method>
			<method name="public synchronized double[] getMax()">1</method>
			<method name="public synchronized org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic[] getMinImpl()">1</method>
			<method name="public synchronized long getN()">1</method>
			<method name="public synchronized void setSumsqImpl(org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic[] sumsqImpl)">1</method>
			<method name="public synchronized void setGeoMeanImpl(org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic[] geoMeanImpl)">1</method>
			<method name="public synchronized int getDimension()">1</method>
			<method name="public synchronized void clear()">1</method>
			<method name="public synchronized void setMeanImpl(org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic[] meanImpl)">1</method>
			<method name="public synchronized void addValue(double[] value)">1</method>
			<method name="public synchronized int hashCode()">1</method>
			<method name="public synchronized org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic[] getSumImpl()">1</method>
			<method name="public synchronized org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic[] getSumsqImpl()">1</method>
			<method name="public synchronized org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic[] getMeanImpl()">1</method>
			<method name="public synchronized double[] getStandardDeviation()">1</method>
			<method name="public synchronized double[] getSumLog()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.moment.VectorialMean</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>14</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>6</npm>
		<lcom3>0.6</lcom3>
		<loc>133</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>20.833333333333332</amc>
		<cc>
			<method name="public long getN()">2</method>
			<method name="public void increment(double[] v)">1</method>
			<method name="public int hashCode()">1</method>
			<method name="public void _init_(int dimension)">0</method>
			<method name="public double[] getResult()">2</method>
			<method name="public boolean equals(Object obj)">4</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.integration.TrapezoidIntegrator</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>18</rfc>
		<lcom>10</lcom>
		<ca>2</ca>
		<ce>9</ce>
		<npm>3</npm>
		<lcom3>1.0</lcom3>
		<loc>189</loc>
		<dam>0.5</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>36.4</amc>
		<cc>
			<method name="public void _init_(double relativeAccuracy, double absoluteAccuracy, int minimalIterationCount, int maximalIterationCount)">0</method>
			<method name="public void _init_()">0</method>
			<method name="protected double doIntegrate()">1</method>
			<method name="double stage(org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator baseIntegrator, int n)">1</method>
			<method name="public void _init_(int minimalIterationCount, int maximalIterationCount)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.SparseRealVector</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>2</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>10</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>4</npm>
		<lcom3>0.375</lcom3>
		<loc>108</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.2</amc>
		<cc>
			<method name="public void computeDerivatives(double t, double[] y, double[] yDot)">1</method>
			<method name="public int getDimension()">1</method>
			<method name="public void _init_(org.apache.commons.math3.ode.FirstOrderDifferentialEquations ode, double[] hY)">0</method>
			<method name="public void computeMainStateJacobian(double t, double[] y, double[] yDot, double[][] dFdY)">1</method>
			<method name="static org.apache.commons.math3.ode.FirstOrderDifferentialEquations access$000(org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper x0)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.util.DummyLocalizable</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>21</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.75</amc>
		<cc>
			<method name="public String getSourceString()">1</method>
			<method name="public String getLocalizedString(java.util.Locale locale)">1</method>
			<method name="public String toString()">1</method>
			<method name="public void _init_(String source)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.regression.MultipleLinearRegression</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>5</rfc>
		<lcom>10</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>5</npm>
		<lcom3>2.0</lcom3>
		<loc>5</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double[][] estimateRegressionParametersVariance()">1</method>
			<method name="public abstract double[] estimateRegressionParameters()">1</method>
			<method name="public abstract double estimateRegressandVariance()">1</method>
			<method name="public abstract double[] estimateResiduals()">1</method>
			<method name="public abstract double[] estimateRegressionParametersStandardErrors()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.ConvergenceChecker</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>32</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>32</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract boolean converged(int, Object, Object)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Signum</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public double value(double x)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.SingularValueDecomposition</name>
		<wmc>14</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>35</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>13</ce>
		<npm>13</npm>
		<lcom3>0.8653846153846154</lcom3>
		<loc>2032</loc>
		<dam>1.0</dam>
		<moa>5</moa>
		<mfa>0.0</mfa>
		<cam>0.2857142857142857</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>143.28571428571428</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.linear.RealMatrix matrix)">0</method>
			<method name="public int getRank()">3</method>
			<method name="static double[] access$000(org.apache.commons.math3.linear.SingularValueDecomposition x0)">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getVT()">2</method>
			<method name="public double getInverseConditionNumber()">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getS()">2</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getUT()">2</method>
			<method name="public double getConditionNumber()">1</method>
			<method name="public org.apache.commons.math3.linear.DecompositionSolver getSolver()">2</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getU()">1</method>
			<method name="public double getNorm()">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getCovariance(double minSingularValue)">4</method>
			<method name="public double[] getSingularValues()">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getV()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>2</noc>
		<cbo>12</cbo>
		<rfc>9</rfc>
		<lcom>6</lcom>
		<ca>2</ca>
		<ce>10</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>49</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5416666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.25</amc>
		<cc>
			<method name="public org.apache.commons.math3.optimization.PointValuePair optimize(int maxEval, org.apache.commons.math3.analysis.MultivariateFunction f, org.apache.commons.math3.optimization.GoalType goalType, double[] startPoint, double[] lower, double[] upper)">1</method>
			<method name="public org.apache.commons.math3.optimization.PointValuePair optimize(int maxEval, org.apache.commons.math3.analysis.MultivariateFunction f, org.apache.commons.math3.optimization.GoalType goalType, double[] startPoint)">1</method>
			<method name="protected void _init_()">0</method>
			<method name="protected void _init_(org.apache.commons.math3.optimization.ConvergenceChecker checker)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.OptimizationProblem</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>3</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>3</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.util.Incrementor getIterationCounter()">1</method>
			<method name="public abstract org.apache.commons.math3.util.Incrementor getEvaluationCounter()">1</method>
			<method name="public abstract org.apache.commons.math3.optim.ConvergenceChecker getConvergenceChecker()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator</name>
		<wmc>14</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>33</rfc>
		<lcom>63</lcom>
		<ca>3</ca>
		<ce>17</ce>
		<npm>7</npm>
		<lcom3>0.8076923076923077</lcom3>
		<loc>289</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.21428571428571427</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.214285714285715</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction differentiate(org.apache.commons.math3.analysis.UnivariateFunction function)">1</method>
			<method name="static double access$200(org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator x0)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableVectorFunction differentiate(org.apache.commons.math3.analysis.UnivariateVectorFunction function)">1</method>
			<method name="public void _init_(int nbPoints, double stepSize)">0</method>
			<method name="static org.apache.commons.math3.analysis.differentiation.DerivativeStructure access$500(org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator x0, org.apache.commons.math3.analysis.differentiation.DerivativeStructure x1, double x2, double[] x3)">1</method>
			<method name="public double getStepSize()">1</method>
			<method name="public int getNbPoints()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableMatrixFunction differentiate(org.apache.commons.math3.analysis.UnivariateMatrixFunction function)">1</method>
			<method name="static double access$400(org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator x0)">1</method>
			<method name="static double access$300(org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator x0)">1</method>
			<method name="static int access$000(org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator x0)">1</method>
			<method name="static double access$100(org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator x0)">1</method>
			<method name="public void _init_(int nbPoints, double stepSize, double tLower, double tUpper)">0</method>
			<method name="private org.apache.commons.math3.analysis.differentiation.DerivativeStructure evaluate(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t, double t0, double[] y)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.moment.Variance</name>
		<wmc>23</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>21</cbo>
		<rfc>36</rfc>
		<lcom>95</lcom>
		<ca>10</ca>
		<ce>11</ce>
		<npm>23</npm>
		<lcom3>0.48863636363636365</lcom3>
		<loc>521</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.2857142857142857</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.47826086956522</amc>
		<cc>
			<method name="public long getN()">1</method>
			<method name="public void clear()">2</method>
			<method name="public double evaluate(double[] values, double[] weights)">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic copy()">1</method>
			<method name="public double getResult()">4</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(org.apache.commons.math3.stat.descriptive.moment.Variance original)">0</method>
			<method name="public double evaluate(double[] values, int begin, int length)">1</method>
			<method name="public void _init_(org.apache.commons.math3.stat.descriptive.moment.SecondMoment m2)">0</method>
			<method name="public double evaluate(double[] values, double[] weights, double mean)">1</method>
			<method name="public void _init_(boolean isBiasCorrected, org.apache.commons.math3.stat.descriptive.moment.SecondMoment m2)">0</method>
			<method name="public boolean isBiasCorrected()">1</method>
			<method name="public double evaluate(double[] values, double mean, int begin, int length)">1</method>
			<method name="public void _init_(boolean isBiasCorrected)">0</method>
			<method name="public double evaluate(double[] values, double[] weights, int begin, int length)">1</method>
			<method name="public org.apache.commons.math3.stat.descriptive.moment.Variance copy()">1</method>
			<method name="public double evaluate(double[] values, double[] weights, double mean, int begin, int length)">1</method>
			<method name="public double evaluate(double[] values, double mean)">1</method>
			<method name="public void setBiasCorrected(boolean biasCorrected)">1</method>
			<method name="public void increment(double d)">2</method>
			<method name="public double evaluate(double[] values)">1</method>
			<method name="public static void copy(org.apache.commons.math3.stat.descriptive.moment.Variance source, org.apache.commons.math3.stat.descriptive.moment.Variance dest)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.polynomials.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.direct.NelderMeadSimplex</name>
		<wmc>9</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>22</rfc>
		<lcom>24</lcom>
		<ca>0</ca>
		<ce>3</ce>
		<npm>9</npm>
		<lcom3>0.625</lcom3>
		<loc>435</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.38095238095238093</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>46.44444444444444</amc>
		<cc>
			<method name="public void _init_(int n, double rho, double khi, double gamma, double sigma)">0</method>
			<method name="public void _init_(int n, double sideLength, double rho, double khi, double gamma, double sigma)">0</method>
			<method name="public void _init_(int n)">0</method>
			<method name="public void _init_(double[][] referenceSimplex)">0</method>
			<method name="public void _init_(double[] steps, double rho, double khi, double gamma, double sigma)">0</method>
			<method name="public void _init_(double[] steps)">0</method>
			<method name="public void _init_(int n, double sideLength)">0</method>
			<method name="public void iterate(org.apache.commons.math3.analysis.MultivariateFunction evaluationFunction, java.util.Comparator comparator)">16</method>
			<method name="public void _init_(double[][] referenceSimplex, double rho, double khi, double gamma, double sigma)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.BivariateFunction</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>24</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>24</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double value(double, double)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.MatrixUtils$FractionMatrixConverter</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>8</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>4</npm>
		<lcom3>0.25</lcom3>
		<loc>39</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.6</amc>
		<cc>
			<method name="public volatile void visit(int x0, int x1, org.apache.commons.math3.FieldElement x2)">1</method>
			<method name="org.apache.commons.math3.linear.Array2DRowRealMatrix getConvertedMatrix()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public void visit(int row, int column, org.apache.commons.math3.fraction.Fraction value)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.PointVectorValuePair</name>
		<wmc>8</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>12</rfc>
		<lcom>28</lcom>
		<ca>10</ca>
		<ce>3</ce>
		<npm>7</npm>
		<lcom3>1.1428571428571428</lcom3>
		<loc>84</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4583333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.375</amc>
		<cc>
			<method name="public double[] getValue()">2</method>
			<method name="private Object writeReplace()">1</method>
			<method name="public double[] getValueRef()">1</method>
			<method name="public volatile Object getValue()">1</method>
			<method name="public double[] getPointRef()">1</method>
			<method name="public void _init_(double[] point, double[] value)">0</method>
			<method name="public double[] getPoint()">2</method>
			<method name="public void _init_(double[] point, double[] value, boolean copyArray)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D$LazyHolder</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>0.5</lcom3>
		<loc>15</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.6666666666666665</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D access$000()">1</method>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.DifferentiableMultivariateVectorMultiStartOptimizer</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer optimizer, int starts, org.apache.commons.math3.random.RandomVectorGenerator generator)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.solvers.BaseUnivariateSolver</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>8</rfc>
		<lcom>28</lcom>
		<ca>6</ca>
		<ce>3</ce>
		<npm>8</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.53125</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double solve(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double)">1</method>
			<method name="public abstract double getFunctionValueAccuracy()">1</method>
			<method name="public abstract double getAbsoluteAccuracy()">1</method>
			<method name="public abstract double getRelativeAccuracy()">1</method>
			<method name="public abstract int getEvaluations()">1</method>
			<method name="public abstract double solve(int, org.apache.commons.math3.analysis.UnivariateFunction, double)">1</method>
			<method name="public abstract int getMaxEvaluations()">1</method>
			<method name="public abstract double solve(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double, double)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.MultivariateDifferentiableOptimizer</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.ParameterizedWrapper</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>12</rfc>
		<lcom>15</lcom>
		<ca>0</ca>
		<ce>5</ce>
		<npm>7</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>43</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="public void computeDerivatives(double t, double[] y, double[] yDot)">1</method>
			<method name="public int getDimension()">1</method>
			<method name="public void setParameter(String name, double value)">1</method>
			<method name="public double getParameter(String name)">1</method>
			<method name="public java.util.Collection getParametersNames()">1</method>
			<method name="public boolean isSupported(String name)">1</method>
			<method name="public void _init_(org.apache.commons.math3.ode.FirstOrderDifferentialEquations ode)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.Side</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>16</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9333333333333332</lcom3>
		<loc>67</loc>
		<dam>0.2</dam>
		<moa>5</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>14.5</amc>
		<cc>
			<method name="public static org.apache.commons.math3.geometry.partitioning.Side[] values()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static org.apache.commons.math3.geometry.partitioning.Side valueOf(String name)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.linear.NoFeasibleSolutionException</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>18</cbo>
		<rfc>27</rfc>
		<lcom>55</lcom>
		<ca>1</ca>
		<ce>17</ce>
		<npm>9</npm>
		<lcom3>2.0</lcom3>
		<loc>136</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.23484848484848486</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.363636363636363</amc>
		<cc>
			<method name="public static org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem create(org.apache.commons.math3.fitting.leastsquares.MultivariateJacobianFunction model, org.apache.commons.math3.linear.RealVector observed, org.apache.commons.math3.linear.RealVector start, org.apache.commons.math3.optim.ConvergenceChecker checker, int maxEvaluations, int maxIterations, boolean lazyEvaluation)">1</method>
			<method name="public static org.apache.commons.math3.optim.ConvergenceChecker evaluationChecker(org.apache.commons.math3.optim.ConvergenceChecker checker)">1</method>
			<method name="public static org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem weightDiagonal(org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem problem, org.apache.commons.math3.linear.RealVector weights)">1</method>
			<method name="private void _init_()">0</method>
			<method name="private static org.apache.commons.math3.linear.RealMatrix squareRoot(org.apache.commons.math3.linear.RealMatrix m)">3</method>
			<method name="public static org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem create(org.apache.commons.math3.fitting.leastsquares.MultivariateJacobianFunction model, org.apache.commons.math3.linear.RealVector observed, org.apache.commons.math3.linear.RealVector start, org.apache.commons.math3.optim.ConvergenceChecker checker, int maxEvaluations, int maxIterations)">1</method>
			<method name="public static org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem weightMatrix(org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem problem, org.apache.commons.math3.linear.RealMatrix weights)">1</method>
			<method name="public static org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem create(org.apache.commons.math3.analysis.MultivariateVectorFunction model, org.apache.commons.math3.analysis.MultivariateMatrixFunction jacobian, double[] observed, double[] start, org.apache.commons.math3.linear.RealMatrix weight, org.apache.commons.math3.optim.ConvergenceChecker checker, int maxEvaluations, int maxIterations)">1</method>
			<method name="public static org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem create(org.apache.commons.math3.fitting.leastsquares.MultivariateJacobianFunction model, org.apache.commons.math3.linear.RealVector observed, org.apache.commons.math3.linear.RealVector start, org.apache.commons.math3.linear.RealMatrix weight, org.apache.commons.math3.optim.ConvergenceChecker checker, int maxEvaluations, int maxIterations)">1</method>
			<method name="public static org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem countEvaluations(org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem problem, org.apache.commons.math3.util.Incrementor counter)">1</method>
			<method name="public static org.apache.commons.math3.fitting.leastsquares.MultivariateJacobianFunction model(org.apache.commons.math3.analysis.MultivariateVectorFunction value, org.apache.commons.math3.analysis.MultivariateMatrixFunction jacobian)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>31</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>9</ce>
		<npm>5</npm>
		<lcom3>0.5</lcom3>
		<loc>791</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.2857142857142857</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>86.11111111111111</amc>
		<cc>
			<method name="private Object writeReplace()">3</method>
			<method name="public org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(int i, int j)">5</method>
			<method name="private void createLinks()">47</method>
			<method name="public org.apache.commons.math3.ml.neuralnet.Network getNetwork()">1</method>
			<method name="private void readObject(java.io.ObjectInputStream in)">1</method>
			<method name="public int getNumberOfRows()">1</method>
			<method name="void _init_(boolean wrapRowDim, boolean wrapColDim, org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood neighbourhoodType, double[][][] featuresList)">0</method>
			<method name="public int getNumberOfColumns()">1</method>
			<method name="public void _init_(int numRows, boolean wrapRowDim, int numCols, boolean wrapColDim, org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood neighbourhoodType, org.apache.commons.math3.ml.neuralnet.FeatureInitializer[] featureInit)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.linear.Relationship$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>21</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Tan</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>9</rfc>
		<lcom>6</lcom>
		<ca>0</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>17</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.25</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double value(double x)">1</method>
			<method name="public org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.correlation.StorelessBivariateCovariance</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>10</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>6</npm>
		<lcom3>0.31999999999999995</lcom3>
		<loc>186</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>29.166666666666668</amc>
		<cc>
			<method name="public void _init_(boolean biasCorrection)">0</method>
			<method name="public void append(org.apache.commons.math3.stat.correlation.StorelessBivariateCovariance cov)">1</method>
			<method name="public double getResult()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double getN()">1</method>
			<method name="public void increment(double x, double y)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.util.ExceptionContextProvider</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>6</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.exception.util.ExceptionContext getContext()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.SimpleBounds</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>2</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>47</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4166666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.25</amc>
		<cc>
			<method name="public void _init_(double[] lB, double[] uB)">0</method>
			<method name="public static org.apache.commons.math3.optim.SimpleBounds unbounded(int dim)">1</method>
			<method name="public double[] getUpper()">1</method>
			<method name="public double[] getLower()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.interval.BinomialConfidenceInterval</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>5</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.stat.interval.ConfidenceInterval createInterval(int, int, double)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.moment.SemiVariance$Direction</name>
		<wmc>5</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>8</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.8125</lcom3>
		<loc>55</loc>
		<dam>0.5</dam>
		<moa>3</moa>
		<mfa>0.8125</mfa>
		<cam>0.375</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>9.2</amc>
		<cc>
			<method name="public static org.apache.commons.math3.stat.descriptive.moment.SemiVariance$Direction valueOf(String name)">1</method>
			<method name="private void _init_(String, int, boolean b)">0</method>
			<method name="boolean getDirection()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static org.apache.commons.math3.stat.descriptive.moment.SemiVariance$Direction[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.general.ConjugateGradientFormula</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.888888888888889</lcom3>
		<loc>45</loc>
		<dam>0.3333333333333333</dam>
		<moa>3</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>9.5</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public static org.apache.commons.math3.optimization.general.ConjugateGradientFormula valueOf(String name)">1</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static org.apache.commons.math3.optimization.general.ConjugateGradientFormula[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$RecurrenceCoefficientsGenerator</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>6</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.fraction.BigFraction[] generate(int)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>8</rfc>
		<lcom>6</lcom>
		<ca>0</ca>
		<ce>9</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>110</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.25</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm interpolate(double[] x, double[] y)">1</method>
			<method name="public void _init_()">0</method>
			<method name="protected static double[] computeDividedDifference(double[] x, double[] y)">1</method>
			<method name="public volatile org.apache.commons.math3.analysis.UnivariateFunction interpolate(double[] x0, double[] x1)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.ranking.NaNStrategy</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>6</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9444444444444443</lcom3>
		<loc>78</loc>
		<dam>0.16666666666666666</dam>
		<moa>6</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>17.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static org.apache.commons.math3.stat.ranking.NaNStrategy valueOf(String name)">1</method>
			<method name="public static org.apache.commons.math3.stat.ranking.NaNStrategy[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.AbstractWell</name>
		<wmc>8</wmc>
		<dit>0</dit>
		<noc>6</noc>
		<cbo>8</cbo>
		<rfc>14</rfc>
		<lcom>26</lcom>
		<ca>6</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.5357142857142857</lcom3>
		<loc>257</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>30.125</amc>
		<cc>
			<method name="protected void _init_(int k, int m1, int m2, int m3, int[] seed)">0</method>
			<method name="protected void _init_(int k, int m1, int m2, int m3, int seed)">0</method>
			<method name="public void setSeed(int seed)">1</method>
			<method name="protected void _init_(int k, int m1, int m2, int m3, long seed)">0</method>
			<method name="public void setSeed(int[] seed)">4</method>
			<method name="protected abstract int next(int)">1</method>
			<method name="protected void _init_(int k, int m1, int m2, int m3)">0</method>
			<method name="public void setSeed(long seed)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.KolmogorovSmirnovDistribution</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>35</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>15</ce>
		<npm>4</npm>
		<lcom3>0.5833333333333334</lcom3>
		<loc>491</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5357142857142857</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>68.85714285714286</amc>
		<cc>
			<method name="public void _init_(int n)">0</method>
			<method name="private double roundedK(double d)">1</method>
			<method name="private double exactK(double d)">1</method>
			<method name="public double cdf(double d, boolean exact)">1</method>
			<method name="private org.apache.commons.math3.linear.FieldMatrix createH(double d)">1</method>
			<method name="public double cdf(double d)">1</method>
			<method name="public double cdfExact(double d)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.solvers.DifferentiableUnivariateSolver</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.filter.MeasurementModel</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.linear.RealMatrix getMeasurementNoise()">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealMatrix getMeasurementMatrix()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.RealVectorFormat</name>
		<wmc>15</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>45</rfc>
		<lcom>81</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>15</npm>
		<lcom3>0.6785714285714286</lcom3>
		<loc>270</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.333333333333332</amc>
		<cc>
			<method name="public org.apache.commons.math3.linear.ArrayRealVector parse(String source)">2</method>
			<method name="public void _init_()">0</method>
			<method name="public String getSuffix()">1</method>
			<method name="public org.apache.commons.math3.linear.ArrayRealVector parse(String source, java.text.ParsePosition pos)">9</method>
			<method name="public void _init_(String prefix, String suffix, String separator)">0</method>
			<method name="public StringBuffer format(org.apache.commons.math3.linear.RealVector vector, StringBuffer toAppendTo, java.text.FieldPosition pos)">3</method>
			<method name="public String getPrefix()">1</method>
			<method name="public void _init_(String prefix, String suffix, String separator, java.text.NumberFormat format)">0</method>
			<method name="public String getSeparator()">1</method>
			<method name="public void _init_(java.text.NumberFormat format)">0</method>
			<method name="public static org.apache.commons.math3.linear.RealVectorFormat getInstance(java.util.Locale locale)">1</method>
			<method name="public static java.util.Locale[] getAvailableLocales()">1</method>
			<method name="public java.text.NumberFormat getFormat()">1</method>
			<method name="public String format(org.apache.commons.math3.linear.RealVector v)">1</method>
			<method name="public static org.apache.commons.math3.linear.RealVectorFormat getInstance()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.BigRealField$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.linear.LinearObjectiveFunction</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>22</rfc>
		<lcom>7</lcom>
		<ca>3</ca>
		<ce>5</ce>
		<npm>8</npm>
		<lcom3>0.5555555555555556</lcom3>
		<loc>104</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.2714285714285714</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>9.1</amc>
		<cc>
			<method name="private void writeObject(java.io.ObjectOutputStream oos)">1</method>
			<method name="public int hashCode()">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector getCoefficients()">1</method>
			<method name="public double value(double[] point)">1</method>
			<method name="public void _init_(double[] coefficients, double constantTerm)">0</method>
			<method name="private void readObject(java.io.ObjectInputStream ois)">1</method>
			<method name="public double value(org.apache.commons.math3.linear.RealVector point)">1</method>
			<method name="public void _init_(org.apache.commons.math3.linear.RealVector coefficients, double constantTerm)">0</method>
			<method name="public boolean equals(Object other)">5</method>
			<method name="public double getConstantTerm()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.dfp.DfpDec$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>63</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>61.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.BetaDistribution</name>
		<wmc>18</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>29</rfc>
		<lcom>123</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>16</npm>
		<lcom3>0.7647058823529411</lcom3>
		<loc>246</loc>
		<dam>0.8333333333333334</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.333333333333334</amc>
		<cc>
			<method name="protected double getSolverAbsoluteAccuracy()">1</method>
			<method name="public double density(double x)">2</method>
			<method name="public boolean isSupportConnected()">1</method>
			<method name="public boolean isSupportUpperBoundInclusive()">1</method>
			<method name="public double cumulativeProbability(double x)">3</method>
			<method name="public boolean isSupportLowerBoundInclusive()">1</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, double alpha, double beta, double inverseCumAccuracy)">0</method>
			<method name="public void _init_(double alpha, double beta)">0</method>
			<method name="public double getAlpha()">1</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, double alpha, double beta)">0</method>
			<method name="public double getSupportLowerBound()">1</method>
			<method name="public void _init_(double alpha, double beta, double inverseCumAccuracy)">0</method>
			<method name="public double getNumericalVariance()">1</method>
			<method name="public double getNumericalMean()">1</method>
			<method name="private void recomputeZ()">2</method>
			<method name="public double getSupportUpperBound()">1</method>
			<method name="public double getBeta()">1</method>
			<method name="public double logDensity(double x)">7</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>51</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.333333333333334</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_(org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer, org.apache.commons.math3.optim.nonlinear.scalar.GoalType)">0</method>
			<method name="public int compare(org.apache.commons.math3.optim.univariate.UnivariatePointValuePair o1, org.apache.commons.math3.optim.univariate.UnivariatePointValuePair o2)">5</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.FieldMatrix</name>
		<wmc>50</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>28</cbo>
		<rfc>50</rfc>
		<lcom>1225</lcom>
		<ca>14</ca>
		<ce>15</ce>
		<npm>50</npm>
		<lcom3>2.0</lcom3>
		<loc>50</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.226</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.FieldElement[] getRow(int)">1</method>
			<method name="public abstract org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor, int, int, int, int)">1</method>
			<method name="public abstract org.apache.commons.math3.FieldElement walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)">1</method>
			<method name="public abstract org.apache.commons.math3.Field getField()">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldVector operate(org.apache.commons.math3.linear.FieldVector)">1</method>
			<method name="public abstract org.apache.commons.math3.FieldElement[] getColumn(int)">1</method>
			<method name="public abstract void setSubMatrix(org.apache.commons.math3.FieldElement[][], int, int)">1</method>
			<method name="public abstract void setRowVector(int, org.apache.commons.math3.linear.FieldVector)">1</method>
			<method name="public abstract org.apache.commons.math3.FieldElement walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)">1</method>
			<method name="public abstract org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldMatrix getSubMatrix(int, int, int, int)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldVector getColumnVector(int)">1</method>
			<method name="public abstract void copySubMatrix(int[], int[], org.apache.commons.math3.FieldElement[][])">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldVector getRowVector(int)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldMatrix transpose()">1</method>
			<method name="public abstract void setColumnMatrix(int, org.apache.commons.math3.linear.FieldMatrix)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldMatrix multiply(org.apache.commons.math3.linear.FieldMatrix)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldMatrix subtract(org.apache.commons.math3.linear.FieldMatrix)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldMatrix getColumnMatrix(int)">1</method>
			<method name="public abstract org.apache.commons.math3.FieldElement getEntry(int, int)">1</method>
			<method name="public abstract org.apache.commons.math3.FieldElement walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor, int, int, int, int)">1</method>
			<method name="public abstract org.apache.commons.math3.FieldElement getTrace()">1</method>
			<method name="public abstract org.apache.commons.math3.FieldElement[][] getData()">1</method>
			<method name="public abstract void setRow(int, org.apache.commons.math3.FieldElement[])">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldMatrix add(org.apache.commons.math3.linear.FieldMatrix)">1</method>
			<method name="public abstract org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldMatrix getRowMatrix(int)">1</method>
			<method name="public abstract org.apache.commons.math3.FieldElement[] preMultiply(org.apache.commons.math3.FieldElement[])">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldMatrix copy()">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldMatrix power(int)">1</method>
			<method name="public abstract void setColumn(int, org.apache.commons.math3.FieldElement[])">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldMatrix preMultiply(org.apache.commons.math3.linear.FieldMatrix)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldMatrix getSubMatrix(int[], int[])">1</method>
			<method name="public abstract org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor, int, int, int, int)">1</method>
			<method name="public abstract void setRowMatrix(int, org.apache.commons.math3.linear.FieldMatrix)">1</method>
			<method name="public abstract org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor, int, int, int, int)">1</method>
			<method name="public abstract org.apache.commons.math3.FieldElement[] operate(org.apache.commons.math3.FieldElement[])">1</method>
			<method name="public abstract void setColumnVector(int, org.apache.commons.math3.linear.FieldVector)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldVector preMultiply(org.apache.commons.math3.linear.FieldVector)">1</method>
			<method name="public abstract org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor, int, int, int, int)">1</method>
			<method name="public abstract void addToEntry(int, int, org.apache.commons.math3.FieldElement)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldMatrix scalarAdd(org.apache.commons.math3.FieldElement)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldMatrix scalarMultiply(org.apache.commons.math3.FieldElement)">1</method>
			<method name="public abstract org.apache.commons.math3.FieldElement walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor, int, int, int, int)">1</method>
			<method name="public abstract void copySubMatrix(int, int, int, int, org.apache.commons.math3.FieldElement[][])">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldMatrix createMatrix(int, int)">1</method>
			<method name="public abstract void multiplyEntry(int, int, org.apache.commons.math3.FieldElement)">1</method>
			<method name="public abstract org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)">1</method>
			<method name="public abstract org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor)">1</method>
			<method name="public abstract void setEntry(int, int, org.apache.commons.math3.FieldElement)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>1.0</lcom3>
		<loc>81</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>25.666666666666668</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="public int compare(org.apache.commons.math3.fitting.WeightedObservedPoint p1, org.apache.commons.math3.fitting.WeightedObservedPoint p2)">11</method>
			<method name="void _init_(org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node</name>
		<wmc>18</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>22</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>0.47058823529411764</lcom3>
		<loc>770</loc>
		<dam>0.8333333333333334</dam>
		<moa>5</moa>
		<mfa>0.0</mfa>
		<cam>0.3055555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>41.44444444444444</amc>
		<cc>
			<method name="public org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getPrevious()">5</method>
			<method name="public void delete()">17</method>
			<method name="static org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node access$200(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node x0)">1</method>
			<method name="int size()">3</method>
			<method name="org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getSmallest()">2</method>
			<method name="static Comparable access$000(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node x0)">1</method>
			<method name="public Comparable getElement()">1</method>
			<method name="private boolean rebalanceLeftGrown()">8</method>
			<method name="void _init_(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree, Comparable element, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node parent)">0</method>
			<method name="private boolean rebalanceRightShrunk()">9</method>
			<method name="static org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node access$100(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node x0)">1</method>
			<method name="private void rotateCW()">3</method>
			<method name="private boolean rebalanceLeftShrunk()">9</method>
			<method name="private void rotateCCW()">3</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getNext()">5</method>
			<method name="boolean insert(Comparable newElement)">6</method>
			<method name="private boolean rebalanceRightGrown()">8</method>
			<method name="org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getLargest()">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.MatrixUtils$BigFractionMatrixConverter</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>8</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>4</npm>
		<lcom3>0.25</lcom3>
		<loc>39</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.6</amc>
		<cc>
			<method name="public volatile void visit(int x0, int x1, org.apache.commons.math3.FieldElement x2)">1</method>
			<method name="org.apache.commons.math3.linear.Array2DRowRealMatrix getConvertedMatrix()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public void visit(int row, int column, org.apache.commons.math3.fraction.BigFraction value)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.transform.TransformType</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>5</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.888888888888889</lcom3>
		<loc>45</loc>
		<dam>0.3333333333333333</dam>
		<moa>3</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>9.5</amc>
		<cc>
			<method name="public static org.apache.commons.math3.transform.TransformType valueOf(String name)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static org.apache.commons.math3.transform.TransformType[] values()">1</method>
			<method name="private void _init_(String, int)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.MultistepIntegrator$NordsieckInitializer</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>18</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>3</npm>
		<lcom3>0.5</lcom3>
		<loc>282</loc>
		<dam>0.8</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.42857142857142855</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>91.33333333333333</amc>
		<cc>
			<method name="public void init(double t0, double[] y0, double time)">1</method>
			<method name="public void handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator interpolator, boolean isLast)">1</method>
			<method name="public void _init_(org.apache.commons.math3.ode.MultistepIntegrator, int nSteps, int n)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.rank.Max</name>
		<wmc>11</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>15</rfc>
		<lcom>27</lcom>
		<ca>4</ca>
		<ce>6</ce>
		<npm>11</npm>
		<lcom3>0.5</lcom3>
		<loc>133</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2727272727272727</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.818181818181818</amc>
		<cc>
			<method name="public static void copy(org.apache.commons.math3.stat.descriptive.rank.Max source, org.apache.commons.math3.stat.descriptive.rank.Max dest)">1</method>
			<method name="public long getN()">1</method>
			<method name="public void clear()">1</method>
			<method name="public void _init_(org.apache.commons.math3.stat.descriptive.rank.Max original)">0</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic copy()">1</method>
			<method name="public double getResult()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double evaluate(double[] values, int begin, int length)">1</method>
			<method name="public org.apache.commons.math3.stat.descriptive.rank.Max copy()">1</method>
			<method name="public void increment(double d)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.AbstractFieldMatrix$2</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.625</lcom3>
		<loc>38</loc>
		<dam>0.5</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.333333333333334</amc>
		<cc>
			<method name="void _init_(org.apache.commons.math3.linear.AbstractFieldMatrix, org.apache.commons.math3.FieldElement x0, org.apache.commons.math3.FieldElement[][])">0</method>
			<method name="public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public void visit(int row, int column, org.apache.commons.math3.FieldElement value)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.AbstractFieldMatrix$1</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>30</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.7</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.5</amc>
		<cc>
			<method name="public org.apache.commons.math3.FieldElement visit(int row, int column, org.apache.commons.math3.FieldElement value)">1</method>
			<method name="void _init_(org.apache.commons.math3.linear.AbstractFieldMatrix, org.apache.commons.math3.FieldElement x0, int[], int[])">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Sqrt</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>9</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>17</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.25</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double value(double x)">1</method>
			<method name="public org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>10</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>6</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>195</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>94.0</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.analysis.MultivariateFunction bounded, double[] lower, double[] upper, double offset, double[] scale)">0</method>
			<method name="public double value(double[] point)">7</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.AbstractFieldMatrix$3</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>0.5</lcom3>
		<loc>21</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.7</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.5</amc>
		<cc>
			<method name="void _init_(org.apache.commons.math3.linear.AbstractFieldMatrix, org.apache.commons.math3.FieldElement x0, org.apache.commons.math3.linear.FieldMatrix)">0</method>
			<method name="public void visit(int row, int column, org.apache.commons.math3.FieldElement value)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.integration.LegendreGaussIntegrator</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>23</rfc>
		<lcom>7</lcom>
		<ca>0</ca>
		<ce>10</ce>
		<npm>3</npm>
		<lcom3>0.36</lcom3>
		<loc>495</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.7333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>79.83333333333333</amc>
		<cc>
			<method name="private double stage(int n)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(int n, int minimalIterationCount, int maximalIterationCount)">0</method>
			<method name="public void _init_(int n, double relativeAccuracy, double absoluteAccuracy)">0</method>
			<method name="protected double doIntegrate()">1</method>
			<method name="public void _init_(int n, double relativeAccuracy, double absoluteAccuracy, int minimalIterationCount, int maximalIterationCount)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.enclosing.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.UnivariateFunction</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>119</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>119</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double value(double)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.sampling.DummyStepHandler$LazyHolder</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>0.5</lcom3>
		<loc>15</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.6666666666666665</amc>
		<cc>
			<method name="static org.apache.commons.math3.ode.sampling.DummyStepHandler access$000()">1</method>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic</name>
		<wmc>13</wmc>
		<dit>1</dit>
		<noc>3</noc>
		<cbo>12</cbo>
		<rfc>22</rfc>
		<lcom>58</lcom>
		<ca>3</ca>
		<ce>9</ce>
		<npm>8</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>142</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5576923076923077</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.846153846153847</amc>
		<cc>
			<method name="protected boolean test(double[] values, double[] weights, int begin, int length, boolean allowEmpty)">1</method>
			<method name="public abstract double evaluate(double[], int, int)">1</method>
			<method name="protected boolean test(double[] values, double[] weights, int begin, int length)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void setData(double[] values)">2</method>
			<method name="public double[] getData()">2</method>
			<method name="protected double[] getDataRef()">1</method>
			<method name="public abstract org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()">1</method>
			<method name="protected boolean test(double[] values, int begin, int length, boolean allowEmpty)">1</method>
			<method name="protected boolean test(double[] values, int begin, int length)">1</method>
			<method name="public double evaluate()">1</method>
			<method name="public double evaluate(double[] values)">1</method>
			<method name="public void setData(double[] values, int begin, int length)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.ODEIntegrator</name>
		<wmc>13</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>13</rfc>
		<lcom>78</lcom>
		<ca>3</ca>
		<ce>3</ce>
		<npm>13</npm>
		<lcom3>2.0</lcom3>
		<loc>13</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.28205128205128205</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void clearStepHandlers()">1</method>
			<method name="public abstract String getName()">1</method>
			<method name="public abstract void addStepHandler(org.apache.commons.math3.ode.sampling.StepHandler)">1</method>
			<method name="public abstract java.util.Collection getStepHandlers()">1</method>
			<method name="public abstract void addEventHandler(org.apache.commons.math3.ode.events.EventHandler, double, double, int, org.apache.commons.math3.analysis.solvers.UnivariateSolver)">1</method>
			<method name="public abstract void clearEventHandlers()">1</method>
			<method name="public abstract void addEventHandler(org.apache.commons.math3.ode.events.EventHandler, double, double, int)">1</method>
			<method name="public abstract int getEvaluations()">1</method>
			<method name="public abstract double getCurrentSignedStepsize()">1</method>
			<method name="public abstract void setMaxEvaluations(int)">1</method>
			<method name="public abstract int getMaxEvaluations()">1</method>
			<method name="public abstract double getCurrentStepStart()">1</method>
			<method name="public abstract java.util.Collection getEventHandlers()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.FastMathLiteralArrays</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>10</rfc>
		<lcom>11</lcom>
		<ca>3</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>0.8333333333333334</lcom3>
		<loc>33563</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.16666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4793.0</amc>
		<cc>
			<method name="static double[] loadExpIntA()">1</method>
			<method name="private void _init_()">0</method>
			<method name="static double[] loadExpIntB()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="static double[][] loadLnMant()">1</method>
			<method name="static double[] loadExpFracA()">1</method>
			<method name="static double[] loadExpFracB()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.dfp.Dfp</name>
		<wmc>167</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>14</cbo>
		<rfc>165</rfc>
		<lcom>11251</lcom>
		<ca>5</ca>
		<ce>11</ce>
		<npm>149</npm>
		<lcom3>0.8544949026876737</lcom3>
		<loc>6054</loc>
		<dam>0.6923076923076923</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.12482726853984338</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>35.09580838323353</amc>
		<cc>
			<method name="public org.apache.commons.math3.dfp.Dfp sinh()">1</method>
			<method name="public volatile Object abs()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp linearCombination(org.apache.commons.math3.dfp.Dfp a1, org.apache.commons.math3.dfp.Dfp b1, org.apache.commons.math3.dfp.Dfp a2, org.apache.commons.math3.dfp.Dfp b2)">1</method>
			<method name="protected void shiftRight()">2</method>
			<method name="public org.apache.commons.math3.dfp.Dfp acosh()">1</method>
			<method name="public volatile Object copySign(double x0)">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp pow(double p)">1</method>
			<method name="public boolean strictlyPositive()">5</method>
			<method name="protected void _init_(org.apache.commons.math3.dfp.DfpField field, String s)">0</method>
			<method name="public org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp x)">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp power10(int e)">2</method>
			<method name="public volatile Object linearCombination(Object x0, Object x1, Object x2, Object x3, Object x4, Object x5)">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp rint()">1</method>
			<method name="public volatile Object linearCombination(Object x0, Object x1, Object x2, Object x3, Object x4, Object x5, Object x6, Object x7)">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp linearCombination(org.apache.commons.math3.dfp.Dfp a1, org.apache.commons.math3.dfp.Dfp b1, org.apache.commons.math3.dfp.Dfp a2, org.apache.commons.math3.dfp.Dfp b2, org.apache.commons.math3.dfp.Dfp a3, org.apache.commons.math3.dfp.Dfp b3)">1</method>
			<method name="protected void _init_(org.apache.commons.math3.dfp.DfpField field, double x)">0</method>
			<method name="public org.apache.commons.math3.dfp.Dfp acos()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp d)">2</method>
			<method name="public int classify()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp getZero()">1</method>
			<method name="public boolean isNaN()">3</method>
			<method name="public volatile Object remainder(double x0)">1</method>
			<method name="public int intLog10()">4</method>
			<method name="public org.apache.commons.math3.dfp.Dfp copySign(org.apache.commons.math3.dfp.Dfp s)">5</method>
			<method name="public boolean negativeOrNull()">5</method>
			<method name="public int getRadixDigits()">1</method>
			<method name="public volatile Object negate()">1</method>
			<method name="public volatile Object tan()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp dotrap(int type, String what, org.apache.commons.math3.dfp.Dfp oper, org.apache.commons.math3.dfp.Dfp result)">11</method>
			<method name="public volatile Object scalb(int x0)">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp scalb(int n)">1</method>
			<method name="public volatile Object add(Object x0)">1</method>
			<method name="public volatile Object exp()">1</method>
			<method name="public double toDouble()">18</method>
			<method name="public org.apache.commons.math3.dfp.Dfp copySign(double s)">5</method>
			<method name="public long round()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp newInstance(long x)">1</method>
			<method name="public volatile Object reciprocal()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp linearCombination(double a1, org.apache.commons.math3.dfp.Dfp b1, double a2, org.apache.commons.math3.dfp.Dfp b2)">1</method>
			<method name="public void _init_(org.apache.commons.math3.dfp.Dfp d)">0</method>
			<method name="public volatile Object divide(double x0)">1</method>
			<method name="public volatile Object cbrt()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp reciprocal()">1</method>
			<method name="public volatile Object rootN(int x0)">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp multiply(int x)">3</method>
			<method name="public volatile Object atan()">1</method>
			<method name="public volatile Object sqrt()">1</method>
			<method name="protected void _init_(org.apache.commons.math3.dfp.DfpField field, byte sign, byte nans)">0</method>
			<method name="public org.apache.commons.math3.dfp.Dfp cbrt()">1</method>
			<method name="public volatile Object log()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp newInstance()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp remainder(double a)">1</method>
			<method name="protected void _init_(org.apache.commons.math3.dfp.DfpField field, long x)">0</method>
			<method name="public boolean equals(Object other)">6</method>
			<method name="public double getReal()">1</method>
			<method name="protected void _init_(org.apache.commons.math3.dfp.DfpField field, byte x)">0</method>
			<method name="protected void _init_(org.apache.commons.math3.dfp.DfpField field, int x)">0</method>
			<method name="public boolean positiveOrNull()">5</method>
			<method name="private static int compare(org.apache.commons.math3.dfp.Dfp a, org.apache.commons.math3.dfp.Dfp b)">20</method>
			<method name="public int hashCode()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp pow(org.apache.commons.math3.dfp.Dfp e)">1</method>
			<method name="public int log10()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp cos()">1</method>
			<method name="public int intValue()">5</method>
			<method name="public volatile Object add(double x0)">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp log1p()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp cosh()">1</method>
			<method name="protected int complement(int extra)">3</method>
			<method name="public boolean lessThan(org.apache.commons.math3.dfp.Dfp x)">5</method>
			<method name="public volatile Object rint()">1</method>
			<method name="public double[] toSplitDouble()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp atanh()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp tan()">1</method>
			<method name="protected void _init_(org.apache.commons.math3.dfp.DfpField field)">0</method>
			<method name="public volatile Object multiply(Object x0)">1</method>
			<method name="public volatile Object subtract(double x0)">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp power10K(int e)">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp asinh()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp nextAfter(org.apache.commons.math3.dfp.Dfp x)">14</method>
			<method name="public org.apache.commons.math3.dfp.Dfp subtract(double a)">1</method>
			<method name="public boolean isInfinite()">2</method>
			<method name="public org.apache.commons.math3.dfp.Dfp expm1()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp atan()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp newInstance(byte sig, byte code)">1</method>
			<method name="public volatile Object pow(Object x0)">1</method>
			<method name="public volatile Object linearCombination(double x0, Object x1, double x2, Object x3)">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp linearCombination(double[] a, org.apache.commons.math3.dfp.Dfp[] b)">1</method>
			<method name="public int log10K()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp remainder(org.apache.commons.math3.dfp.Dfp d)">2</method>
			<method name="public org.apache.commons.math3.dfp.Dfp add(double a)">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp newInstance(String s)">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp getOne()">1</method>
			<method name="protected void shiftLeft()">2</method>
			<method name="public volatile Object cos()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp getTwo()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp hypot(org.apache.commons.math3.dfp.Dfp y)">1</method>
			<method name="protected String dfp2string()">11</method>
			<method name="public org.apache.commons.math3.dfp.Dfp multiply(double a)">1</method>
			<method name="public volatile Object ceil()">1</method>
			<method name="public volatile Object cosh()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp tanh()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp linearCombination(org.apache.commons.math3.dfp.Dfp[] a, org.apache.commons.math3.dfp.Dfp[] b)">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp sin()">1</method>
			<method name="public volatile Object asin()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp x)">32</method>
			<method name="public org.apache.commons.math3.dfp.Dfp newInstance(double x)">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp divide(int divisor)">10</method>
			<method name="public volatile Object asinh()">1</method>
			<method name="public boolean unequal(org.apache.commons.math3.dfp.Dfp x)">6</method>
			<method name="public org.apache.commons.math3.dfp.Dfp linearCombination(double a1, org.apache.commons.math3.dfp.Dfp b1, double a2, org.apache.commons.math3.dfp.Dfp b2, double a3, org.apache.commons.math3.dfp.Dfp b3, double a4, org.apache.commons.math3.dfp.Dfp b4)">1</method>
			<method name="public volatile Object floor()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp asin()">1</method>
			<method name="public volatile org.apache.commons.math3.Field getField()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp abs()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp newInstance(int x)">1</method>
			<method name="public volatile Object atan2(Object x0)">1</method>
			<method name="public volatile Object tanh()">1</method>
			<method name="public volatile Object subtract(Object x0)">1</method>
			<method name="public volatile Object linearCombination(double x0, Object x1, double x2, Object x3, double x4, Object x5, double x6, Object x7)">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp signum()">4</method>
			<method name="public boolean strictlyNegative()">5</method>
			<method name="public org.apache.commons.math3.dfp.Dfp divide(double a)">1</method>
			<method name="public volatile Object expm1()">1</method>
			<method name="public volatile Object atanh()">1</method>
			<method name="public volatile Object linearCombination(double x0, Object x1, double x2, Object x3, double x4, Object x5)">1</method>
			<method name="public volatile Object divide(Object x0)">1</method>
			<method name="private org.apache.commons.math3.dfp.Dfp multiplyFast(int x)">13</method>
			<method name="public volatile Object copySign(Object x0)">1</method>
			<method name="public volatile Object pow(double x0)">1</method>
			<method name="protected int align(int e)">8</method>
			<method name="protected org.apache.commons.math3.dfp.Dfp trap(int type, String what, org.apache.commons.math3.dfp.Dfp oper, org.apache.commons.math3.dfp.Dfp def, org.apache.commons.math3.dfp.Dfp result)">1</method>
			<method name="public volatile Object pow(int x0)">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp linearCombination(org.apache.commons.math3.dfp.Dfp a1, org.apache.commons.math3.dfp.Dfp b1, org.apache.commons.math3.dfp.Dfp a2, org.apache.commons.math3.dfp.Dfp b2, org.apache.commons.math3.dfp.Dfp a3, org.apache.commons.math3.dfp.Dfp b3, org.apache.commons.math3.dfp.Dfp a4, org.apache.commons.math3.dfp.Dfp b4)">1</method>
			<method name="public volatile Object log1p()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp atan2(org.apache.commons.math3.dfp.Dfp x)">1</method>
			<method name="public volatile Object acos()">1</method>
			<method name="public volatile Object acosh()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp x)">29</method>
			<method name="public volatile Object linearCombination(Object x0, Object x1, Object x2, Object x3)">1</method>
			<method name="public boolean greaterThan(org.apache.commons.math3.dfp.Dfp x)">5</method>
			<method name="public org.apache.commons.math3.dfp.Dfp exp()">1</method>
			<method name="public String toString()">6</method>
			<method name="public org.apache.commons.math3.dfp.Dfp negate()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp rootN(int n)">2</method>
			<method name="public volatile Object linearCombination(double[] x0, Object[] x1)">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp newInstance(byte x)">1</method>
			<method name="public volatile Object remainder(Object x0)">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp floor()">1</method>
			<method name="public volatile Object sin()">1</method>
			<method name="public static org.apache.commons.math3.dfp.Dfp copysign(org.apache.commons.math3.dfp.Dfp x, org.apache.commons.math3.dfp.Dfp y)">1</method>
			<method name="public volatile Object sinh()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp sqrt()">15</method>
			<method name="public org.apache.commons.math3.dfp.DfpField getField()">1</method>
			<method name="protected int round(int n)">21</method>
			<method name="public org.apache.commons.math3.dfp.Dfp log()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp ceil()">1</method>
			<method name="public volatile Object linearCombination(Object[] x0, Object[] x1)">1</method>
			<method name="protected String dfp2sci()">11</method>
			<method name="public volatile Object multiply(int x0)">1</method>
			<method name="public volatile Object hypot(Object x0)">1</method>
			<method name="public boolean isZero()">4</method>
			<method name="public org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp divisor)">38</method>
			<method name="protected org.apache.commons.math3.dfp.Dfp trunc(org.apache.commons.math3.dfp.DfpField$RoundingMode rmode)">16</method>
			<method name="public org.apache.commons.math3.dfp.Dfp pow(int n)">1</method>
			<method name="public volatile Object multiply(double x0)">1</method>
			<method name="public volatile Object signum()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp linearCombination(double a1, org.apache.commons.math3.dfp.Dfp b1, double a2, org.apache.commons.math3.dfp.Dfp b2, double a3, org.apache.commons.math3.dfp.Dfp b3)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.nonstiff.RungeKuttaIntegrator</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>6</noc>
		<cbo>19</cbo>
		<rfc>23</rfc>
		<lcom>0</lcom>
		<ca>6</ca>
		<ce>13</ce>
		<npm>2</npm>
		<lcom3>0.19999999999999996</lcom3>
		<loc>526</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5416666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>172.66666666666666</amc>
		<cc>
			<method name="public double[] singleStep(org.apache.commons.math3.ode.FirstOrderDifferentialEquations equations, double t0, double[] y0, double t)">7</method>
			<method name="protected void _init_(String name, double[] c, double[][] a, double[] b, org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator prototype, double step)">0</method>
			<method name="public void integrate(org.apache.commons.math3.ode.ExpandableStatefulODE equations, double t)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.vector.Weight</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>37</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.0</amc>
		<cc>
			<method name="public org.apache.commons.math3.linear.RealMatrix getWeight()">1</method>
			<method name="public void _init_(double[] weight)">0</method>
			<method name="public void _init_(org.apache.commons.math3.linear.RealMatrix weight)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.direct.CMAESOptimizer$PopulationSize</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>20</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.5</amc>
		<cc>
			<method name="public void _init_(int size)">0</method>
			<method name="public int getPopulationSize()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.TransformerMap</name>
		<wmc>12</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>35</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>3</ce>
		<npm>12</npm>
		<lcom3>0.6060606060606061</lcom3>
		<loc>185</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4166666666666667</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>14.166666666666666</amc>
		<cc>
			<method name="public java.util.Collection transformers()">1</method>
			<method name="public void clear()">1</method>
			<method name="public double transform(Object o)">1</method>
			<method name="public boolean containsClass(Class key)">1</method>
			<method name="public int hashCode()">2</method>
			<method name="public org.apache.commons.math3.util.NumberTransformer putTransformer(Class key, org.apache.commons.math3.util.NumberTransformer transformer)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public org.apache.commons.math3.util.NumberTransformer getTransformer(Class key)">1</method>
			<method name="public boolean containsTransformer(org.apache.commons.math3.util.NumberTransformer value)">1</method>
			<method name="public boolean equals(Object other)">6</method>
			<method name="public org.apache.commons.math3.util.NumberTransformer removeTransformer(Class key)">1</method>
			<method name="public java.util.Set classes()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.GaussianCurveFitter$1</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>41</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.7777777777777778</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.666666666666666</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public transient double[] gradient(double x, double[] p)">1</method>
			<method name="public transient double value(double x, double[] p)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Identity</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>6</rfc>
		<lcom>10</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>5</npm>
		<lcom3>2.0</lcom3>
		<loc>20</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.DifferentiableUnivariateFunction derivative()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public volatile org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
			<method name="public double value(double x)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.genetics.BinaryMutation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>14</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>9</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>50</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public org.apache.commons.math3.genetics.Chromosome mutate(org.apache.commons.math3.genetics.Chromosome original)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.AbstractFieldMatrix</name>
		<wmc>70</wmc>
		<dit>1</dit>
		<noc>3</noc>
		<cbo>26</cbo>
		<rfc>130</rfc>
		<lcom>2109</lcom>
		<ca>6</ca>
		<ce>23</ce>
		<npm>56</npm>
		<lcom3>0.7391304347826086</lcom3>
		<loc>2330</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.1738095238095238</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>32.27142857142857</amc>
		<cc>
			<method name="public abstract int getColumnDimension()">1</method>
			<method name="protected void _init_(org.apache.commons.math3.Field field, int rowDimension, int columnDimension)">0</method>
			<method name="public void setColumnVector(int column, org.apache.commons.math3.linear.FieldVector vector)">1</method>
			<method name="public org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor visitor, int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor visitor)">1</method>
			<method name="protected void checkRowIndex(int row)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldMatrix preMultiply(org.apache.commons.math3.linear.FieldMatrix m)">1</method>
			<method name="public org.apache.commons.math3.FieldElement walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor visitor)">3</method>
			<method name="public org.apache.commons.math3.Field getField()">1</method>
			<method name="public org.apache.commons.math3.FieldElement walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor visitor, int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldMatrix multiply(org.apache.commons.math3.linear.FieldMatrix m)">1</method>
			<method name="public org.apache.commons.math3.FieldElement[] getRow(int row)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldMatrix subtract(org.apache.commons.math3.linear.FieldMatrix m)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldMatrix transpose()">1</method>
			<method name="public org.apache.commons.math3.linear.FieldMatrix getColumnMatrix(int column)">1</method>
			<method name="public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor visitor, int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="protected void checkAdditionCompatible(org.apache.commons.math3.linear.FieldMatrix m)">1</method>
			<method name="public org.apache.commons.math3.FieldElement walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor visitor)">3</method>
			<method name="public org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor visitor, int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public org.apache.commons.math3.FieldElement[] preMultiply(org.apache.commons.math3.FieldElement[] v)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldMatrix getRowMatrix(int row)">1</method>
			<method name="public abstract org.apache.commons.math3.FieldElement getEntry(int, int)">1</method>
			<method name="protected void _init_(org.apache.commons.math3.Field field)">0</method>
			<method name="public void setRowMatrix(int row, org.apache.commons.math3.linear.FieldMatrix matrix)">1</method>
			<method name="protected void checkMultiplicationCompatible(org.apache.commons.math3.linear.FieldMatrix m)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldMatrix scalarAdd(org.apache.commons.math3.FieldElement d)">3</method>
			<method name="public void setSubMatrix(org.apache.commons.math3.FieldElement[][] subMatrix, int row, int column)">1</method>
			<method name="public void copySubMatrix(int[] selectedRows, int[] selectedColumns, org.apache.commons.math3.FieldElement[][] destination)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldVector getRowVector(int row)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldMatrix scalarMultiply(org.apache.commons.math3.FieldElement d)">3</method>
			<method name="protected void checkSubtractionCompatible(org.apache.commons.math3.linear.FieldMatrix m)">1</method>
			<method name="public org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor visitor)">3</method>
			<method name="protected void checkSubMatrixIndex(int[] selectedRows, int[] selectedColumns)">1</method>
			<method name="protected static org.apache.commons.math3.FieldElement[] buildArray(org.apache.commons.math3.Field field, int length)">1</method>
			<method name="protected static org.apache.commons.math3.Field extractField(org.apache.commons.math3.FieldElement[] d)">1</method>
			<method name="public void setRow(int row, org.apache.commons.math3.FieldElement[] array)">1</method>
			<method name="public org.apache.commons.math3.FieldElement walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor visitor, int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldMatrix getSubMatrix(int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldMatrix copy()">1</method>
			<method name="public org.apache.commons.math3.FieldElement getTrace()">1</method>
			<method name="public org.apache.commons.math3.linear.FieldVector preMultiply(org.apache.commons.math3.linear.FieldVector v)">1</method>
			<method name="public String toString()">5</method>
			<method name="public void copySubMatrix(int startRow, int endRow, int startColumn, int endColumn, org.apache.commons.math3.FieldElement[][] destination)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldMatrix add(org.apache.commons.math3.linear.FieldMatrix m)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldVector operate(org.apache.commons.math3.linear.FieldVector v)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldMatrix power(int p)">1</method>
			<method name="public boolean equals(Object object)">8</method>
			<method name="public void setColumnMatrix(int column, org.apache.commons.math3.linear.FieldMatrix matrix)">1</method>
			<method name="public abstract void addToEntry(int, int, org.apache.commons.math3.FieldElement)">1</method>
			<method name="protected static org.apache.commons.math3.FieldElement[][] buildArray(org.apache.commons.math3.Field field, int rows, int columns)">1</method>
			<method name="public void setColumn(int column, org.apache.commons.math3.FieldElement[] array)">1</method>
			<method name="public org.apache.commons.math3.FieldElement[][] getData()">3</method>
			<method name="public boolean isSquare()">2</method>
			<method name="public abstract int getRowDimension()">1</method>
			<method name="public void setRowVector(int row, org.apache.commons.math3.linear.FieldVector vector)">1</method>
			<method name="protected void checkColumnIndex(int column)">1</method>
			<method name="protected void checkSubMatrixIndex(int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldMatrix getSubMatrix(int[] selectedRows, int[] selectedColumns)">1</method>
			<method name="public org.apache.commons.math3.FieldElement[] getColumn(int column)">1</method>
			<method name="public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor visitor, int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor visitor)">3</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldMatrix createMatrix(int, int)">1</method>
			<method name="public int hashCode()">3</method>
			<method name="protected static org.apache.commons.math3.Field extractField(org.apache.commons.math3.FieldElement[][] d)">1</method>
			<method name="protected void _init_()">0</method>
			<method name="public abstract void multiplyEntry(int, int, org.apache.commons.math3.FieldElement)">1</method>
			<method name="public org.apache.commons.math3.FieldElement[] operate(org.apache.commons.math3.FieldElement[] v)">1</method>
			<method name="public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor visitor)">1</method>
			<method name="public abstract void setEntry(int, int, org.apache.commons.math3.FieldElement)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldVector getColumnVector(int column)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.SymmLQ$State</name>
		<wmc>14</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>40</rfc>
		<lcom>37</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>1</npm>
		<lcom3>0.8275058275058276</lcom3>
		<loc>1041</loc>
		<dam>0.9393939393939394</dam>
		<moa>9</moa>
		<mfa>0.0</mfa>
		<cam>0.3384615384615385</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>71.0</amc>
		<cc>
			<method name="private static void checkSymmetry(org.apache.commons.math3.linear.RealLinearOperator l, org.apache.commons.math3.linear.RealVector x, org.apache.commons.math3.linear.RealVector y, org.apache.commons.math3.linear.RealVector z)">1</method>
			<method name="boolean bEqualsNullVector()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void updateNorms()">7</method>
			<method name="public void _init_(org.apache.commons.math3.linear.RealLinearOperator a, org.apache.commons.math3.linear.RealLinearOperator m, org.apache.commons.math3.linear.RealVector b, boolean goodb, double shift, double delta, boolean check)">0</method>
			<method name="void refineSolution(org.apache.commons.math3.linear.RealVector x)">6</method>
			<method name="private static void daxpy(double a, org.apache.commons.math3.linear.RealVector x, org.apache.commons.math3.linear.RealVector y)">2</method>
			<method name="boolean betaEqualsZero()">2</method>
			<method name="double getNormOfResidual()">1</method>
			<method name="boolean hasConverged()">1</method>
			<method name="void update()">4</method>
			<method name="private static void throwNPDLOException(org.apache.commons.math3.linear.RealLinearOperator l, org.apache.commons.math3.linear.RealVector v)">1</method>
			<method name="void init()">10</method>
			<method name="private static void daxpbypz(double a, org.apache.commons.math3.linear.RealVector x, double b, org.apache.commons.math3.linear.RealVector y, org.apache.commons.math3.linear.RealVector z)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.nonstiff.LutherStepInterpolator</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>8</rfc>
		<lcom>8</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>1.0</lcom3>
		<loc>729</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>144.4</amc>
		<cc>
			<method name="protected org.apache.commons.math3.ode.sampling.StepInterpolator doCopy()">1</method>
			<method name="protected void computeInterpolatedStateAndDerivatives(double theta, double oneMinusThetaH)">4</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(org.apache.commons.math3.ode.nonstiff.LutherStepInterpolator interpolator)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$PopulationSize</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>20</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.5</amc>
		<cc>
			<method name="public void _init_(int size)">0</method>
			<method name="public int getPopulationSize()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.dfp.DfpDec</name>
		<wmc>19</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>50</rfc>
		<lcom>169</lcom>
		<ca>0</ca>
		<ce>4</ce>
		<npm>10</npm>
		<lcom3>2.0</lcom3>
		<loc>707</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.27631578947368424</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>36.21052631578947</amc>
		<cc>
			<method name="public org.apache.commons.math3.dfp.Dfp newInstance(byte sign, byte nans)">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp newInstance(byte x)">1</method>
			<method name="protected void _init_(org.apache.commons.math3.dfp.DfpField factory, double x)">0</method>
			<method name="public org.apache.commons.math3.dfp.Dfp newInstance()">1</method>
			<method name="protected int round(int in)">38</method>
			<method name="public org.apache.commons.math3.dfp.Dfp newInstance(double x)">1</method>
			<method name="protected void _init_(org.apache.commons.math3.dfp.DfpField factory)">0</method>
			<method name="protected void _init_(org.apache.commons.math3.dfp.DfpField factory, int x)">0</method>
			<method name="protected void _init_(org.apache.commons.math3.dfp.DfpField factory, byte x)">0</method>
			<method name="public org.apache.commons.math3.dfp.Dfp newInstance(long x)">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp nextAfter(org.apache.commons.math3.dfp.Dfp x)">16</method>
			<method name="protected int getDecimalDigits()">1</method>
			<method name="public void _init_(org.apache.commons.math3.dfp.Dfp d)">0</method>
			<method name="protected void _init_(org.apache.commons.math3.dfp.DfpField factory, byte sign, byte nans)">0</method>
			<method name="public org.apache.commons.math3.dfp.Dfp newInstance(int x)">1</method>
			<method name="protected void _init_(org.apache.commons.math3.dfp.DfpField factory, String s)">0</method>
			<method name="public org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp d)">2</method>
			<method name="protected void _init_(org.apache.commons.math3.dfp.DfpField factory, long x)">0</method>
			<method name="public org.apache.commons.math3.dfp.Dfp newInstance(String s)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.genetics.RandomKeyMutation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>15</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>9</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>48</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>23.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public org.apache.commons.math3.genetics.Chromosome mutate(org.apache.commons.math3.genetics.Chromosome original)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.FieldVector</name>
		<wmc>29</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>16</cbo>
		<rfc>29</rfc>
		<lcom>406</lcom>
		<ca>9</ca>
		<ce>8</ce>
		<npm>29</npm>
		<lcom3>2.0</lcom3>
		<loc>29</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.45689655172413796</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.linear.FieldVector mapInv()">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldVector copy()">1</method>
			<method name="public abstract void setEntry(int, org.apache.commons.math3.FieldElement)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldVector append(org.apache.commons.math3.linear.FieldVector)">1</method>
			<method name="public abstract org.apache.commons.math3.FieldElement dotProduct(org.apache.commons.math3.linear.FieldVector)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldVector append(org.apache.commons.math3.FieldElement)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldVector mapAdd(org.apache.commons.math3.FieldElement)">1</method>
			<method name="public abstract org.apache.commons.math3.Field getField()">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldVector mapMultiplyToSelf(org.apache.commons.math3.FieldElement)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldVector mapDivideToSelf(org.apache.commons.math3.FieldElement)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldVector mapSubtractToSelf(org.apache.commons.math3.FieldElement)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldVector mapSubtract(org.apache.commons.math3.FieldElement)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldVector projection(org.apache.commons.math3.linear.FieldVector)">1</method>
			<method name="public abstract org.apache.commons.math3.FieldElement[] getData()">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldVector mapInvToSelf()">1</method>
			<method name="public abstract void setSubVector(int, org.apache.commons.math3.linear.FieldVector)">1</method>
			<method name="public abstract int getDimension()">1</method>
			<method name="public abstract org.apache.commons.math3.FieldElement[] toArray()">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldVector ebeMultiply(org.apache.commons.math3.linear.FieldVector)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldVector ebeDivide(org.apache.commons.math3.linear.FieldVector)">1</method>
			<method name="public abstract void set(org.apache.commons.math3.FieldElement)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldVector mapMultiply(org.apache.commons.math3.FieldElement)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldVector getSubVector(int, int)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldVector add(org.apache.commons.math3.linear.FieldVector)">1</method>
			<method name="public abstract org.apache.commons.math3.FieldElement getEntry(int)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldVector mapDivide(org.apache.commons.math3.FieldElement)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldVector mapAddToSelf(org.apache.commons.math3.FieldElement)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldVector subtract(org.apache.commons.math3.linear.FieldVector)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldMatrix outerProduct(org.apache.commons.math3.linear.FieldVector)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.IterationManager</name>
		<wmc>12</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>29</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>5</ce>
		<npm>12</npm>
		<lcom3>0.45454545454545453</lcom3>
		<loc>135</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.35</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.083333333333334</amc>
		<cc>
			<method name="public void fireIterationPerformedEvent(org.apache.commons.math3.util.IterationEvent e)">2</method>
			<method name="public void fireIterationStartedEvent(org.apache.commons.math3.util.IterationEvent e)">2</method>
			<method name="public void fireInitializationEvent(org.apache.commons.math3.util.IterationEvent e)">2</method>
			<method name="public void incrementIterationCount()">1</method>
			<method name="public void resetIterationCount()">1</method>
			<method name="public int getIterations()">1</method>
			<method name="public void addIterationListener(org.apache.commons.math3.util.IterationListener listener)">1</method>
			<method name="public void _init_(int maxIterations)">0</method>
			<method name="public int getMaxIterations()">1</method>
			<method name="public void _init_(int maxIterations, org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback callBack)">0</method>
			<method name="public void removeIterationListener(org.apache.commons.math3.util.IterationListener listener)">1</method>
			<method name="public void fireTerminationEvent(org.apache.commons.math3.util.IterationEvent e)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapter</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>10</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>6</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>195</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>94.0</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.analysis.MultivariateFunction bounded, double[] lower, double[] upper, double offset, double[] scale)">0</method>
			<method name="public double value(double[] point)">7</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>12</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>4</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>81</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.55</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.75</amc>
		<cc>
			<method name="public volatile boolean converged(int x0, Object x1, Object x2)">1</method>
			<method name="public boolean converged(int iteration, org.apache.commons.math3.optim.univariate.UnivariatePointValuePair previous, org.apache.commons.math3.optim.univariate.UnivariatePointValuePair current)">5</method>
			<method name="public void _init_(double relativeThreshold, double absoluteThreshold, int maxIter)">0</method>
			<method name="public void _init_(double relativeThreshold, double absoluteThreshold)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.dfp.Dfp$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>63</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>61.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>39</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.0</amc>
		<cc>
			<method name="public double[] value(double[] p)">2</method>
			<method name="void _init_(org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction$2</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>39</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.0</amc>
		<cc>
			<method name="public double[][] value(double[] p)">2</method>
			<method name="void _init_(org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.interval.ConfidenceInterval</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>14</rfc>
		<lcom>1</lcom>
		<ca>6</ca>
		<ce>3</ce>
		<npm>5</npm>
		<lcom3>0.6</lcom3>
		<loc>109</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.666666666666668</amc>
		<cc>
			<method name="public double getUpperBound()">1</method>
			<method name="public double getConfidenceLevel()">1</method>
			<method name="public double getLowerBound()">1</method>
			<method name="public void _init_(double lowerBound, double upperBound, double confidenceLevel)">0</method>
			<method name="public String toString()">1</method>
			<method name="private void checkParameters(double lower, double upper, double confidence)">4</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>8</noc>
		<cbo>10</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>8</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>18</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="protected void _init_(double absoluteAccuracy)">0</method>
			<method name="protected void _init_(double relativeAccuracy, double absoluteAccuracy)">0</method>
			<method name="protected void _init_(double relativeAccuracy, double absoluteAccuracy, double functionValueAccuracy)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.correlation.Covariance</name>
		<wmc>14</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>11</cbo>
		<rfc>27</rfc>
		<lcom>81</lcom>
		<ca>3</ca>
		<ce>8</ce>
		<npm>9</npm>
		<lcom3>0.6153846153846154</lcom3>
		<loc>283</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.42857142857142855</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.071428571428573</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.linear.RealMatrix matrix)">0</method>
			<method name="public double covariance(double[] xArray, double[] yArray, boolean biasCorrected)">1</method>
			<method name="public void _init_(double[][] data, boolean biasCorrected)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public int getN()">1</method>
			<method name="public double covariance(double[] xArray, double[] yArray)">1</method>
			<method name="protected org.apache.commons.math3.linear.RealMatrix computeCovarianceMatrix(double[][] data)">1</method>
			<method name="protected org.apache.commons.math3.linear.RealMatrix computeCovarianceMatrix(org.apache.commons.math3.linear.RealMatrix matrix, boolean biasCorrected)">1</method>
			<method name="public void _init_(double[][] data)">0</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getCovarianceMatrix()">1</method>
			<method name="private void checkSufficientData(org.apache.commons.math3.linear.RealMatrix matrix)">1</method>
			<method name="protected org.apache.commons.math3.linear.RealMatrix computeCovarianceMatrix(double[][] data, boolean biasCorrected)">1</method>
			<method name="protected org.apache.commons.math3.linear.RealMatrix computeCovarianceMatrix(org.apache.commons.math3.linear.RealMatrix matrix)">1</method>
			<method name="public void _init_(org.apache.commons.math3.linear.RealMatrix matrix, boolean biasCorrected)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.TriangularDistribution</name>
		<wmc>14</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>24</rfc>
		<lcom>23</lcom>
		<ca>0</ca>
		<ce>9</ce>
		<npm>13</npm>
		<lcom3>0.6615384615384615</lcom3>
		<loc>429</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.47619047619047616</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>29.285714285714285</amc>
		<cc>
			<method name="protected double getSolverAbsoluteAccuracy()">1</method>
			<method name="public double inverseCumulativeProbability(double p)">1</method>
			<method name="public double density(double x)">7</method>
			<method name="public boolean isSupportConnected()">1</method>
			<method name="public double cumulativeProbability(double x)">7</method>
			<method name="public boolean isSupportUpperBoundInclusive()">1</method>
			<method name="public boolean isSupportLowerBoundInclusive()">1</method>
			<method name="public double getMode()">1</method>
			<method name="public double getSupportLowerBound()">1</method>
			<method name="public void _init_(double a, double c, double b)">0</method>
			<method name="public double getNumericalMean()">1</method>
			<method name="public double getNumericalVariance()">1</method>
			<method name="public double getSupportUpperBound()">1</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, double a, double c, double b)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.univariate.BrentOptimizer</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>9</cbo>
		<rfc>22</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>2</npm>
		<lcom3>0.5625</lcom3>
		<loc>502</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.45</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>98.6</amc>
		<cc>
			<method name="private org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair best(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair a, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair b, boolean isMinim)">6</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(double rel, double abs, org.apache.commons.math3.optimization.ConvergenceChecker checker)">0</method>
			<method name="protected org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair doOptimize()">30</method>
			<method name="public void _init_(double rel, double abs)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>25</rfc>
		<lcom>9</lcom>
		<ca>1</ca>
		<ce>15</ce>
		<npm>6</npm>
		<lcom3>0.2888888888888889</lcom3>
		<loc>259</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.43333333333333335</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>40.666666666666664</amc>
		<cc>
			<method name="public org.apache.commons.math3.geometry.partitioning.SubHyperplane apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane sub, org.apache.commons.math3.geometry.partitioning.Hyperplane original, org.apache.commons.math3.geometry.partitioning.Hyperplane transformed)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.Line apply(org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane)">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.Point apply(org.apache.commons.math3.geometry.Point x0)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.Vector2D apply(org.apache.commons.math3.geometry.Point point)">1</method>
			<method name="public void _init_(java.awt.geom.AffineTransform transform)">0</method>
			<method name="public volatile org.apache.commons.math3.geometry.partitioning.Hyperplane apply(org.apache.commons.math3.geometry.partitioning.Hyperplane x0)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>12</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.5</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.analysis.MultivariateMatrixFunction j)">0</method>
			<method name="public org.apache.commons.math3.analysis.MultivariateMatrixFunction getModelFunctionJacobian()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>21</cbo>
		<rfc>43</rfc>
		<lcom>5</lcom>
		<ca>1</ca>
		<ce>20</ce>
		<npm>5</npm>
		<lcom3>0.5416666666666666</lcom3>
		<loc>269</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.38095238095238093</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>36.857142857142854</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.geometry.partitioning.BSPTree root, double tolerance)">0</method>
			<method name="public java.util.List getEdges()">1</method>
			<method name="public void visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree node)">3</method>
			<method name="public void visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree node)">1</method>
			<method name="private org.apache.commons.math3.geometry.spherical.twod.Edge getFollowingEdge(org.apache.commons.math3.geometry.spherical.twod.Edge previous)">1</method>
			<method name="private void addContribution(org.apache.commons.math3.geometry.spherical.twod.SubCircle sub, boolean reversed, org.apache.commons.math3.geometry.partitioning.BSPTree node)">3</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree node)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.ArrayFieldVector</name>
		<wmc>73</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>25</cbo>
		<rfc>110</rfc>
		<lcom>0</lcom>
		<ca>5</ca>
		<ce>20</ce>
		<npm>69</npm>
		<lcom3>0.46759259259259256</lcom3>
		<loc>2016</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.1980074719800747</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>26.575342465753426</amc>
		<cc>
			<method name="public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldVectorPreservingVisitor visitor)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldVector getSubVector(int index, int n)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldVector mapDivideToSelf(org.apache.commons.math3.FieldElement d)">1</method>
			<method name="public org.apache.commons.math3.linear.ArrayFieldVector append(org.apache.commons.math3.linear.ArrayFieldVector v)">1</method>
			<method name="public void set(int index, org.apache.commons.math3.linear.ArrayFieldVector v)">1</method>
			<method name="public void _init_(org.apache.commons.math3.Field field, org.apache.commons.math3.FieldElement[] v1, org.apache.commons.math3.FieldElement[] v2)">0</method>
			<method name="public org.apache.commons.math3.linear.FieldVector mapInvToSelf()">1</method>
			<method name="public org.apache.commons.math3.FieldElement walkInDefaultOrder(org.apache.commons.math3.linear.FieldVectorPreservingVisitor visitor, int start, int end)">1</method>
			<method name="public org.apache.commons.math3.linear.ArrayFieldVector projection(org.apache.commons.math3.linear.ArrayFieldVector v)">1</method>
			<method name="public org.apache.commons.math3.linear.ArrayFieldVector ebeMultiply(org.apache.commons.math3.linear.ArrayFieldVector v)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldMatrix outerProduct(org.apache.commons.math3.linear.ArrayFieldVector v)">3</method>
			<method name="public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldVectorChangingVisitor visitor)">1</method>
			<method name="public org.apache.commons.math3.Field getField()">1</method>
			<method name="public org.apache.commons.math3.linear.FieldVector projection(org.apache.commons.math3.linear.FieldVector v)">1</method>
			<method name="public void _init_(org.apache.commons.math3.FieldElement[] d, boolean copyArray)">0</method>
			<method name="public org.apache.commons.math3.FieldElement dotProduct(org.apache.commons.math3.linear.FieldVector v)">1</method>
			<method name="public void _init_(org.apache.commons.math3.linear.FieldVector v1, org.apache.commons.math3.FieldElement[] v2)">0</method>
			<method name="public void _init_(org.apache.commons.math3.Field field, org.apache.commons.math3.FieldElement[] d, boolean copyArray)">0</method>
			<method name="private void checkIndex(int index)">1</method>
			<method name="public void _init_(org.apache.commons.math3.linear.ArrayFieldVector v)">0</method>
			<method name="public org.apache.commons.math3.FieldElement dotProduct(org.apache.commons.math3.linear.ArrayFieldVector v)">1</method>
			<method name="public org.apache.commons.math3.linear.ArrayFieldVector subtract(org.apache.commons.math3.linear.ArrayFieldVector v)">1</method>
			<method name="public void _init_(org.apache.commons.math3.FieldElement[] d)">0</method>
			<method name="public org.apache.commons.math3.linear.FieldMatrix outerProduct(org.apache.commons.math3.linear.FieldVector v)">3</method>
			<method name="public org.apache.commons.math3.linear.FieldVector mapDivide(org.apache.commons.math3.FieldElement d)">1</method>
			<method name="public void setEntry(int index, org.apache.commons.math3.FieldElement value)">1</method>
			<method name="protected void checkVectorDimensions(int n)">1</method>
			<method name="public void _init_(org.apache.commons.math3.linear.FieldVector v)">0</method>
			<method name="public org.apache.commons.math3.FieldElement walkInDefaultOrder(org.apache.commons.math3.linear.FieldVectorPreservingVisitor visitor)">2</method>
			<method name="public void _init_(org.apache.commons.math3.linear.ArrayFieldVector v, boolean deep)">0</method>
			<method name="public org.apache.commons.math3.FieldElement[] getDataRef()">1</method>
			<method name="public void _init_(org.apache.commons.math3.FieldElement[] v1, org.apache.commons.math3.FieldElement[] v2)">0</method>
			<method name="public org.apache.commons.math3.linear.FieldVector mapMultiply(org.apache.commons.math3.FieldElement d)">1</method>
			<method name="public void setSubVector(int index, org.apache.commons.math3.linear.FieldVector v)">1</method>
			<method name="public void _init_(org.apache.commons.math3.Field field, org.apache.commons.math3.FieldElement[] d)">0</method>
			<method name="public void set(org.apache.commons.math3.FieldElement value)">1</method>
			<method name="public void _init_(org.apache.commons.math3.Field field)">0</method>
			<method name="public org.apache.commons.math3.linear.FieldVector mapSubtractToSelf(org.apache.commons.math3.FieldElement d)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldVector mapMultiplyToSelf(org.apache.commons.math3.FieldElement d)">1</method>
			<method name="public org.apache.commons.math3.linear.ArrayFieldVector add(org.apache.commons.math3.linear.ArrayFieldVector v)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldVector copy()">1</method>
			<method name="public void _init_(org.apache.commons.math3.Field field, int size)">0</method>
			<method name="public org.apache.commons.math3.linear.FieldVector ebeMultiply(org.apache.commons.math3.linear.FieldVector v)">1</method>
			<method name="public int getDimension()">1</method>
			<method name="public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldVectorPreservingVisitor visitor, int start, int end)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldVector mapInv()">1</method>
			<method name="public org.apache.commons.math3.FieldElement walkInDefaultOrder(org.apache.commons.math3.linear.FieldVectorChangingVisitor visitor, int start, int end)">1</method>
			<method name="public void _init_(org.apache.commons.math3.FieldElement[] d, int pos, int size)">0</method>
			<method name="public void _init_(org.apache.commons.math3.FieldElement[] v1, org.apache.commons.math3.linear.FieldVector v2)">0</method>
			<method name="public org.apache.commons.math3.FieldElement[] getData()">1</method>
			<method name="public void _init_(org.apache.commons.math3.linear.ArrayFieldVector v1, org.apache.commons.math3.FieldElement[] v2)">0</method>
			<method name="public org.apache.commons.math3.linear.FieldVector add(org.apache.commons.math3.linear.FieldVector v)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldVector append(org.apache.commons.math3.linear.FieldVector v)">1</method>
			<method name="public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldVectorChangingVisitor visitor, int start, int end)">1</method>
			<method name="public void _init_(int size, org.apache.commons.math3.FieldElement preset)">0</method>
			<method name="public org.apache.commons.math3.FieldElement getEntry(int index)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldVector mapSubtract(org.apache.commons.math3.FieldElement d)">1</method>
			<method name="public void _init_(org.apache.commons.math3.Field field, org.apache.commons.math3.FieldElement[] d, int pos, int size)">0</method>
			<method name="public boolean equals(Object other)">6</method>
			<method name="public org.apache.commons.math3.linear.FieldVector mapAdd(org.apache.commons.math3.FieldElement d)">1</method>
			<method name="public void _init_(org.apache.commons.math3.FieldElement[] v1, org.apache.commons.math3.linear.ArrayFieldVector v2)">0</method>
			<method name="public org.apache.commons.math3.linear.FieldVector append(org.apache.commons.math3.FieldElement in)">1</method>
			<method name="public org.apache.commons.math3.linear.ArrayFieldVector ebeDivide(org.apache.commons.math3.linear.ArrayFieldVector v)">1</method>
			<method name="public int hashCode()">2</method>
			<method name="public org.apache.commons.math3.FieldElement[] toArray()">1</method>
			<method name="public void _init_(org.apache.commons.math3.linear.ArrayFieldVector v1, org.apache.commons.math3.linear.ArrayFieldVector v2)">0</method>
			<method name="public org.apache.commons.math3.linear.FieldVector subtract(org.apache.commons.math3.linear.FieldVector v)">1</method>
			<method name="public org.apache.commons.math3.FieldElement walkInDefaultOrder(org.apache.commons.math3.linear.FieldVectorChangingVisitor visitor)">2</method>
			<method name="public void _init_(org.apache.commons.math3.linear.FieldVector v1, org.apache.commons.math3.linear.FieldVector v2)">0</method>
			<method name="public org.apache.commons.math3.linear.FieldVector mapAddToSelf(org.apache.commons.math3.FieldElement d)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldVector ebeDivide(org.apache.commons.math3.linear.FieldVector v)">1</method>
			<method name="private void checkIndices(int start, int end)">1</method>
			<method name="protected void checkVectorDimensions(org.apache.commons.math3.linear.FieldVector v)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.util.ExceptionContext</name>
		<wmc>18</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>19</cbo>
		<rfc>46</rfc>
		<lcom>91</lcom>
		<ca>17</ca>
		<ce>2</ce>
		<npm>10</npm>
		<lcom3>0.7058823529411765</lcom3>
		<loc>370</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2222222222222222</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.27777777777778</amc>
		<cc>
			<method name="public Throwable getThrowable()">1</method>
			<method name="private void deSerializeContext(java.io.ObjectInputStream in)">1</method>
			<method name="private void writeObject(java.io.ObjectOutputStream out)">1</method>
			<method name="public transient void addMessage(org.apache.commons.math3.exception.util.Localizable pattern, Object[] arguments)">1</method>
			<method name="private void deSerializeMessages(java.io.ObjectInputStream in)">1</method>
			<method name="public String getLocalizedMessage()">1</method>
			<method name="public String getMessage(java.util.Locale locale, String separator)">1</method>
			<method name="private String nonSerializableReplacement(Object obj)">1</method>
			<method name="private void serializeMessages(java.io.ObjectOutputStream out)">1</method>
			<method name="public Object getValue(String key)">1</method>
			<method name="private void serializeContext(java.io.ObjectOutputStream out)">1</method>
			<method name="public void _init_(Throwable throwable)">0</method>
			<method name="public void setValue(String key, Object value)">1</method>
			<method name="private void readObject(java.io.ObjectInputStream in)">1</method>
			<method name="public String getMessage()">1</method>
			<method name="public String getMessage(java.util.Locale locale)">1</method>
			<method name="public java.util.Set getKeys()">1</method>
			<method name="private String buildMessage(java.util.Locale locale, String separator)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.neuralnet.sofm.util.QuasiSigmoidDecayFunction</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>10</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>87</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>41.5</amc>
		<cc>
			<method name="public void _init_(double initValue, double slope, long numCall)">0</method>
			<method name="public double value(long numCall)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.special.Erf</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>13</rfc>
		<lcom>15</lcom>
		<ca>3</ca>
		<ce>2</ce>
		<npm>5</npm>
		<lcom3>1.2</lcom3>
		<loc>513</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>84.33333333333333</amc>
		<cc>
			<method name="public static double erfcInv(double x)">1</method>
			<method name="public static double erfInv(double x)">4</method>
			<method name="public static double erf(double x)">4</method>
			<method name="private void _init_()">0</method>
			<method name="public static double erf(double x1, double x2)">6</method>
			<method name="public static double erfc(double x)">4</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>12</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>3</npm>
		<lcom3>0.5</lcom3>
		<loc>176</loc>
		<dam>0.75</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4166666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>42.0</amc>
		<cc>
			<method name="static double access$000(org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator x0)">1</method>
			<method name="public org.apache.commons.math3.analysis.UnivariateFunction interpolate(double[] xval, double[] yval)">1</method>
			<method name="public void _init_(org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator interpolator, double period, int extend)">0</method>
			<method name="public void _init_(org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator interpolator, double period)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer</name>
		<wmc>10</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>37</rfc>
		<lcom>15</lcom>
		<ca>0</ca>
		<ce>9</ce>
		<npm>5</npm>
		<lcom3>0.6444444444444444</lcom3>
		<loc>2177</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>215.2</amc>
		<cc>
			<method name="private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3)">29</method>
			<method name="public void _init_(double costRelativeTolerance, double parRelativeTolerance, double orthoTolerance)">0</method>
			<method name="public void _init_(double initialStepBoundFactor, double costRelativeTolerance, double parRelativeTolerance, double orthoTolerance, double threshold)">0</method>
			<method name="private void qrDecomposition(org.apache.commons.math3.linear.RealMatrix jacobian)">1</method>
			<method name="public void _init_(double initialStepBoundFactor, org.apache.commons.math3.optimization.ConvergenceChecker checker, double costRelativeTolerance, double parRelativeTolerance, double orthoTolerance, double threshold)">0</method>
			<method name="public void _init_()">0</method>
			<method name="private void qTy(double[] y)">4</method>
			<method name="private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work)">17</method>
			<method name="protected org.apache.commons.math3.optimization.PointVectorValuePair doOptimize()">40</method>
			<method name="public void _init_(org.apache.commons.math3.optimization.ConvergenceChecker checker)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic</name>
		<wmc>12</wmc>
		<dit>0</dit>
		<noc>14</noc>
		<cbo>23</cbo>
		<rfc>18</rfc>
		<lcom>66</lcom>
		<ca>14</ca>
		<ce>9</ce>
		<npm>12</npm>
		<lcom3>2.0</lcom3>
		<loc>133</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.083333333333334</amc>
		<cc>
			<method name="public abstract double getResult()">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()">1</method>
			<method name="public boolean equals(Object object)">5</method>
			<method name="public int hashCode()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double evaluate(double[] values, int begin, int length)">1</method>
			<method name="public void incrementAll(double[] values)">1</method>
			<method name="public double evaluate(double[] values)">1</method>
			<method name="public abstract void increment(double)">1</method>
			<method name="public abstract org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic copy()">1</method>
			<method name="public void incrementAll(double[] values, int begin, int length)">1</method>
			<method name="public abstract void clear()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>17</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>10</ce>
		<npm>4</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>192</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>46.5</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.analysis.MultivariateFunction bounded, double[] lower, double[] upper)">0</method>
			<method name="public double value(double[] point)">1</method>
			<method name="public double[] unboundedToBounded(double[] point)">2</method>
			<method name="public double[] boundedToUnbounded(double[] point)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizer</name>
		<wmc>8</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>14</rfc>
		<lcom>14</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>3</npm>
		<lcom3>0.5714285714285714</lcom3>
		<loc>62</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.23214285714285715</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.5</amc>
		<cc>
			<method name="private java.util.Comparator getPairComparator()">1</method>
			<method name="static org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer access$000(org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizer x0)">1</method>
			<method name="public org.apache.commons.math3.optim.PointVectorValuePair[] getOptima()">1</method>
			<method name="protected volatile void store(Object x0)">1</method>
			<method name="public volatile Object[] getOptima()">1</method>
			<method name="protected void store(org.apache.commons.math3.optim.PointVectorValuePair optimum)">1</method>
			<method name="public void _init_(org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer optimizer, int starts, org.apache.commons.math3.random.RandomVectorGenerator generator)">0</method>
			<method name="protected void clear()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.fitting.GaussianFitter$ParameterGuesser$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>1.0</lcom3>
		<loc>81</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>25.666666666666668</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_(org.apache.commons.math3.optimization.fitting.GaussianFitter$ParameterGuesser)">0</method>
			<method name="public int compare(org.apache.commons.math3.optimization.fitting.WeightedObservedPoint p1, org.apache.commons.math3.optimization.fitting.WeightedObservedPoint p2)">11</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.spherical.oned.SubLimitAngle</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>11</rfc>
		<lcom>15</lcom>
		<ca>2</ca>
		<ce>9</ce>
		<npm>5</npm>
		<lcom3>2.0</lcom3>
		<loc>65</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.833333333333334</amc>
		<cc>
			<method name="public org.apache.commons.math3.geometry.partitioning.Side side(org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane)">3</method>
			<method name="public double getSize()">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane, org.apache.commons.math3.geometry.partitioning.Region remainingRegion)">0</method>
			<method name="public boolean isEmpty()">1</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane)">2</method>
			<method name="protected org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane, org.apache.commons.math3.geometry.partitioning.Region remainingRegion)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.SummaryStatistics</name>
		<wmc>39</wmc>
		<dit>1</dit>
		<noc>2</noc>
		<cbo>27</cbo>
		<rfc>81</rfc>
		<lcom>389</lcom>
		<ca>7</ca>
		<ce>20</ce>
		<npm>38</npm>
		<lcom3>0.7963988919667591</lcom3>
		<loc>985</loc>
		<dam>1.0</dam>
		<moa>17</moa>
		<mfa>0.0</mfa>
		<cam>0.2564102564102564</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>23.76923076923077</amc>
		<cc>
			<method name="public void clear()">3</method>
			<method name="public double getMax()">1</method>
			<method name="public void addValue(double value)">4</method>
			<method name="public void setSumLogImpl(org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic sumLogImpl)">1</method>
			<method name="public double getVariance()">1</method>
			<method name="public double getSecondMoment()">1</method>
			<method name="public org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic getSumLogImpl()">1</method>
			<method name="public double getStandardDeviation()">3</method>
			<method name="public void setMinImpl(org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic minImpl)">1</method>
			<method name="public org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic getMaxImpl()">1</method>
			<method name="public double getMean()">1</method>
			<method name="public double getPopulationVariance()">1</method>
			<method name="private void checkEmpty()">1</method>
			<method name="public org.apache.commons.math3.stat.descriptive.StatisticalSummary getSummary()">1</method>
			<method name="public org.apache.commons.math3.stat.descriptive.SummaryStatistics copy()">1</method>
			<method name="public double getMin()">1</method>
			<method name="public org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic getMeanImpl()">1</method>
			<method name="public void setSumsqImpl(org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic sumsqImpl)">1</method>
			<method name="public double getSumsq()">1</method>
			<method name="public void setVarianceImpl(org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic varianceImpl)">1</method>
			<method name="public String toString()">1</method>
			<method name="public org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic getSumImpl()">1</method>
			<method name="public double getSumOfLogs()">1</method>
			<method name="public org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic getVarianceImpl()">1</method>
			<method name="public double getSum()">1</method>
			<method name="public long getN()">1</method>
			<method name="public double getGeometricMean()">1</method>
			<method name="public boolean equals(Object object)">11</method>
			<method name="public void setGeoMeanImpl(org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic geoMeanImpl)">1</method>
			<method name="public void setMaxImpl(org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic maxImpl)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(org.apache.commons.math3.stat.descriptive.SummaryStatistics original)">0</method>
			<method name="public void setMeanImpl(org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic meanImpl)">1</method>
			<method name="public org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic getGeoMeanImpl()">1</method>
			<method name="public org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic getMinImpl()">1</method>
			<method name="public int hashCode()">1</method>
			<method name="public void setSumImpl(org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic sumImpl)">1</method>
			<method name="public static void copy(org.apache.commons.math3.stat.descriptive.SummaryStatistics source, org.apache.commons.math3.stat.descriptive.SummaryStatistics dest)">1</method>
			<method name="public org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic getSumsqImpl()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.SimpleValueChecker</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>13</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>4</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>85</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.55</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.75</amc>
		<cc>
			<method name="public boolean converged(int iteration, org.apache.commons.math3.optim.PointValuePair previous, org.apache.commons.math3.optim.PointValuePair current)">5</method>
			<method name="public volatile boolean converged(int x0, Object x1, Object x2)">1</method>
			<method name="public void _init_(double relativeThreshold, double absoluteThreshold, int maxIter)">0</method>
			<method name="public void _init_(double relativeThreshold, double absoluteThreshold)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.solvers.AbstractDifferentiableUnivariateSolver</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>7</cbo>
		<rfc>11</rfc>
		<lcom>8</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>0</npm>
		<lcom3>0.5</lcom3>
		<loc>44</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.56</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.6</amc>
		<cc>
			<method name="protected double computeDerivativeObjectiveValue(double point)">1</method>
			<method name="protected void _init_(double absoluteAccuracy)">0</method>
			<method name="protected volatile void setup(int x0, org.apache.commons.math3.analysis.UnivariateFunction x1, double x2, double x3, double x4)">1</method>
			<method name="protected void setup(int maxEval, org.apache.commons.math3.analysis.DifferentiableUnivariateFunction f, double min, double max, double startValue)">1</method>
			<method name="protected void _init_(double relativeAccuracy, double absoluteAccuracy, double functionValueAccuracy)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>9</rfc>
		<lcom>21</lcom>
		<ca>3</ca>
		<ce>5</ce>
		<npm>4</npm>
		<lcom3>1.1666666666666667</lcom3>
		<loc>25</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.4285714285714284</amc>
		<cc>
			<method name="void _init_(org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D$1 x0)">0</method>
			<method name="public int getDimension()">1</method>
			<method name="private void _init_()">0</method>
			<method name="private Object readResolve()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D getSubSpace()">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.Space getSubSpace()">1</method>
			<method name="public static org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D getInstance()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.FastMath$lnMant</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>0.5</lcom3>
		<loc>12</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.6666666666666665</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static double[][] access$400()">1</method>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.MedianOf3PivotingStrategy</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>69</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>33.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public int pivotIndex(double[] work, int begin, int end)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.FieldDecompositionSolver</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>4</rfc>
		<lcom>6</lcom>
		<ca>3</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract boolean isNonSingular()">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldVector solve(org.apache.commons.math3.linear.FieldVector)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldMatrix solve(org.apache.commons.math3.linear.FieldMatrix)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.FieldMatrix getInverse()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.solvers.LaguerreSolver</name>
		<wmc>8</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>29</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>12</ce>
		<npm>8</npm>
		<lcom3>0.5714285714285714</lcom3>
		<loc>239</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>28.625</amc>
		<cc>
			<method name="public void _init_(double absoluteAccuracy)">0</method>
			<method name="public void _init_(double relativeAccuracy, double absoluteAccuracy, double functionValueAccuracy)">0</method>
			<method name="public double laguerre(double lo, double hi, double fLo, double fHi)">4</method>
			<method name="public void _init_()">0</method>
			<method name="public double doSolve()">1</method>
			<method name="public org.apache.commons.math3.complex.Complex solveComplex(double[] coefficients, double initial)">1</method>
			<method name="public org.apache.commons.math3.complex.Complex[] solveAllComplex(double[] coefficients, double initial)">1</method>
			<method name="public void _init_(double relativeAccuracy, double absoluteAccuracy)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>2</noc>
		<cbo>11</cbo>
		<rfc>22</rfc>
		<lcom>15</lcom>
		<ca>2</ca>
		<ce>9</ce>
		<npm>4</npm>
		<lcom3>0.8333333333333334</lcom3>
		<loc>247</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.2857142857142857</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>33.285714285714285</amc>
		<cc>
			<method name="public transient Object optimize(org.apache.commons.math3.optim.OptimizationData[] optData)">1</method>
			<method name="public abstract Object[] getOptima()">1</method>
			<method name="protected Object doOptimize()">15</method>
			<method name="public void _init_(org.apache.commons.math3.optim.BaseMultivariateOptimizer optimizer, int starts, org.apache.commons.math3.random.RandomVectorGenerator generator)">0</method>
			<method name="public int getEvaluations()">1</method>
			<method name="protected abstract void clear()">1</method>
			<method name="protected abstract void store(Object)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.RegionFactory$IntersectionMerger</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>0.5</lcom3>
		<loc>31</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.0</amc>
		<cc>
			<method name="void _init_(org.apache.commons.math3.geometry.partitioning.RegionFactory x0, org.apache.commons.math3.geometry.partitioning.RegionFactory$1 x1)">0</method>
			<method name="private void _init_(org.apache.commons.math3.geometry.partitioning.RegionFactory)">0</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.BSPTree merge(org.apache.commons.math3.geometry.partitioning.BSPTree leaf, org.apache.commons.math3.geometry.partitioning.BSPTree tree, org.apache.commons.math3.geometry.partitioning.BSPTree parentTree, boolean isPlusChild, boolean leafFromInstance)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.UnitSphereRandomVectorGenerator</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>71</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.0</amc>
		<cc>
			<method name="public double[] nextVector()">3</method>
			<method name="public void _init_(int dimension)">0</method>
			<method name="public void _init_(int dimension, org.apache.commons.math3.random.RandomGenerator rand)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.TDistribution</name>
		<wmc>16</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>24</rfc>
		<lcom>106</lcom>
		<ca>3</ca>
		<ce>9</ce>
		<npm>15</npm>
		<lcom3>0.8266666666666667</lcom3>
		<loc>206</loc>
		<dam>0.8</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5208333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.5625</amc>
		<cc>
			<method name="public void _init_(double degreesOfFreedom, double inverseCumAccuracy)">0</method>
			<method name="protected double getSolverAbsoluteAccuracy()">1</method>
			<method name="public double density(double x)">1</method>
			<method name="public boolean isSupportConnected()">1</method>
			<method name="public boolean isSupportUpperBoundInclusive()">1</method>
			<method name="public double cumulativeProbability(double x)">3</method>
			<method name="public void _init_(double degreesOfFreedom)">0</method>
			<method name="public boolean isSupportLowerBoundInclusive()">1</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, double degreesOfFreedom, double inverseCumAccuracy)">0</method>
			<method name="public double getSupportLowerBound()">1</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, double degreesOfFreedom)">0</method>
			<method name="public double getDegreesOfFreedom()">1</method>
			<method name="public double getNumericalMean()">2</method>
			<method name="public double getNumericalVariance()">4</method>
			<method name="public double getSupportUpperBound()">1</method>
			<method name="public double logDensity(double x)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.transform.RealTransformer</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>3</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double[] transform(org.apache.commons.math3.analysis.UnivariateFunction, double, double, int, org.apache.commons.math3.transform.TransformType)">1</method>
			<method name="public abstract double[] transform(double[], org.apache.commons.math3.transform.TransformType)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>19</rfc>
		<lcom>33</lcom>
		<ca>6</ca>
		<ce>7</ce>
		<npm>8</npm>
		<lcom3>0.8253968253968255</lcom3>
		<loc>364</loc>
		<dam>1.0</dam>
		<moa>5</moa>
		<mfa>0.0</mfa>
		<cam>0.3</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>34.7</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.BivariateFunction partialDerivativeXY()">1</method>
			<method name="public org.apache.commons.math3.analysis.BivariateFunction partialDerivativeYY()">1</method>
			<method name="public double value(double x, double y)">5</method>
			<method name="public void _init_(double[] coeff, boolean initializeDerivatives)">0</method>
			<method name="public org.apache.commons.math3.analysis.BivariateFunction partialDerivativeXX()">1</method>
			<method name="public org.apache.commons.math3.analysis.BivariateFunction partialDerivativeY()">1</method>
			<method name="public void _init_(double[] coeff)">0</method>
			<method name="private double apply(double[] pX, double[] pY, double[][] coeff)">3</method>
			<method name="static double access$000(org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction x0, double[] x1, double[] x2, double[][] x3)">1</method>
			<method name="public org.apache.commons.math3.analysis.BivariateFunction partialDerivativeX()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$RotationTransform</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>18</rfc>
		<lcom>9</lcom>
		<ca>1</ca>
		<ce>12</ce>
		<npm>6</npm>
		<lcom3>0.5</lcom3>
		<loc>142</loc>
		<dam>1.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.3888888888888889</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.0</amc>
		<cc>
			<method name="public org.apache.commons.math3.geometry.partitioning.SubHyperplane apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane sub, org.apache.commons.math3.geometry.partitioning.Hyperplane original, org.apache.commons.math3.geometry.partitioning.Hyperplane transformed)">2</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.threed.Vector3D center, org.apache.commons.math3.geometry.euclidean.threed.Rotation rotation)">0</method>
			<method name="public volatile org.apache.commons.math3.geometry.Point apply(org.apache.commons.math3.geometry.Point x0)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D apply(org.apache.commons.math3.geometry.Point point)">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.partitioning.Hyperplane apply(org.apache.commons.math3.geometry.partitioning.Hyperplane x0)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Plane apply(org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.HypergeometricDistribution</name>
		<wmc>19</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>29</rfc>
		<lcom>133</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>14</npm>
		<lcom3>0.675925925925926</lcom3>
		<loc>401</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5263157894736842</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.789473684210527</amc>
		<cc>
			<method name="public int getSampleSize()">1</method>
			<method name="private int getLowerDomain(int n, int m, int k)">1</method>
			<method name="private int getUpperDomain(int m, int k)">1</method>
			<method name="public double upperCumulativeProbability(int x)">3</method>
			<method name="public boolean isSupportConnected()">1</method>
			<method name="public int getSupportLowerBound()">1</method>
			<method name="private int[] getDomain(int n, int m, int k)">1</method>
			<method name="public int getNumberOfSuccesses()">1</method>
			<method name="private double innerCumulativeProbability(int x0, int x1, int dx)">2</method>
			<method name="public double logProbability(int x)">3</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, int populationSize, int numberOfSuccesses, int sampleSize)">0</method>
			<method name="public int getSupportUpperBound()">1</method>
			<method name="public double getNumericalVariance()">2</method>
			<method name="public double getNumericalMean()">1</method>
			<method name="public double cumulativeProbability(int x)">3</method>
			<method name="protected double calculateNumericalVariance()">1</method>
			<method name="public void _init_(int populationSize, int numberOfSuccesses, int sampleSize)">0</method>
			<method name="public double probability(int x)">2</method>
			<method name="public int getPopulationSize()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.transform.DftNormalization</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>4</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.888888888888889</lcom3>
		<loc>45</loc>
		<dam>0.3333333333333333</dam>
		<moa>3</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>9.5</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static org.apache.commons.math3.transform.DftNormalization[] values()">1</method>
			<method name="public static org.apache.commons.math3.transform.DftNormalization valueOf(String name)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Max</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public double value(double x, double y)">1</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.hull.ConvexHull</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>3</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.geometry.partitioning.Region createRegion()">1</method>
			<method name="public abstract org.apache.commons.math3.geometry.Point[] getVertices()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator$Corrector</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>10</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>4</npm>
		<lcom3>0.5333333333333333</lcom3>
		<loc>154</loc>
		<dam>0.8</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.45</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>36.25</amc>
		<cc>
			<method name="public double end()">4</method>
			<method name="public void visit(int row, int column, double value)">2</method>
			<method name="public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public void _init_(org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator, double[] previous, double[] scaled, double[] state)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.SimpleVectorValueChecker</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>14</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>5</npm>
		<lcom3>0.625</lcom3>
		<loc>104</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.48</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.4</amc>
		<cc>
			<method name="public volatile boolean converged(int x0, Object x1, Object x2)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(double relativeThreshold, double absoluteThreshold, int maxIter)">0</method>
			<method name="public void _init_(double relativeThreshold, double absoluteThreshold)">0</method>
			<method name="public boolean converged(int iteration, org.apache.commons.math3.optimization.PointVectorValuePair previous, org.apache.commons.math3.optimization.PointVectorValuePair current)">6</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.Precision</name>
		<wmc>23</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>49</cbo>
		<rfc>47</rfc>
		<lcom>249</lcom>
		<ca>45</ca>
		<ce>5</ce>
		<npm>20</npm>
		<lcom3>0.890909090909091</lcom3>
		<loc>761</loc>
		<dam>0.8</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.36363636363636365</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.652173913043477</amc>
		<cc>
			<method name="public static boolean equalsIncludingNaN(double x, double y, double eps)">3</method>
			<method name="public static boolean equalsWithRelativeTolerance(double x, double y, double eps)">3</method>
			<method name="private static double roundUnscaled(double unscaled, double sign, int roundingMethod)">1</method>
			<method name="public static float round(float x, int scale, int roundingMethod)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static boolean equalsIncludingNaN(float x, float y, int maxUlps)">6</method>
			<method name="public static boolean equals(double x, double y, double eps)">3</method>
			<method name="public static double representableDelta(double x, double originalDelta)">1</method>
			<method name="public static boolean equals(float x, float y, int maxUlps)">9</method>
			<method name="public static boolean equals(double x, double y)">1</method>
			<method name="public static boolean equalsIncludingNaN(double x, double y)">6</method>
			<method name="private void _init_()">0</method>
			<method name="public static boolean equalsIncludingNaN(double x, double y, int maxUlps)">6</method>
			<method name="public static boolean equalsIncludingNaN(float x, float y)">6</method>
			<method name="public static double round(double x, int scale, int roundingMethod)">3</method>
			<method name="public static boolean equals(float x, float y)">1</method>
			<method name="public static boolean equals(float x, float y, float eps)">3</method>
			<method name="public static boolean equalsIncludingNaN(float x, float y, float eps)">3</method>
			<method name="public static boolean equals(double x, double y, int maxUlps)">9</method>
			<method name="public static double round(double x, int scale)">1</method>
			<method name="public static int compareTo(double x, double y, int maxUlps)">3</method>
			<method name="public static float round(float x, int scale)">1</method>
			<method name="public static int compareTo(double x, double y, double eps)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.ranking.TiesStrategy</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9444444444444443</lcom3>
		<loc>78</loc>
		<dam>0.16666666666666666</dam>
		<moa>6</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>17.0</amc>
		<cc>
			<method name="public static org.apache.commons.math3.stat.ranking.TiesStrategy valueOf(String name)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static org.apache.commons.math3.stat.ranking.TiesStrategy[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.filter.ProcessModel</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>10</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>5</npm>
		<lcom3>2.0</lcom3>
		<loc>5</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.linear.RealVector getInitialStateEstimate()">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealMatrix getInitialErrorCovariance()">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealMatrix getProcessNoise()">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealMatrix getControlMatrix()">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealMatrix getStateTransitionMatrix()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>40</rfc>
		<lcom>17</lcom>
		<ca>0</ca>
		<ce>10</ce>
		<npm>9</npm>
		<lcom3>0.7222222222222222</lcom3>
		<loc>625</loc>
		<dam>1.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.38333333333333336</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>60.9</amc>
		<cc>
			<method name="public int getMaxEvaluations()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp solve(int maxEval, org.apache.commons.math3.dfp.UnivariateDfpFunction f, org.apache.commons.math3.dfp.Dfp min, org.apache.commons.math3.dfp.Dfp max, org.apache.commons.math3.analysis.solvers.AllowedSolution allowedSolution)">1</method>
			<method name="public int getEvaluations()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp getAbsoluteAccuracy()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp getRelativeAccuracy()">1</method>
			<method name="public void _init_(org.apache.commons.math3.dfp.Dfp relativeAccuracy, org.apache.commons.math3.dfp.Dfp absoluteAccuracy, org.apache.commons.math3.dfp.Dfp functionValueAccuracy, int maximalOrder)">0</method>
			<method name="private org.apache.commons.math3.dfp.Dfp guessX(org.apache.commons.math3.dfp.Dfp targetY, org.apache.commons.math3.dfp.Dfp[] x, org.apache.commons.math3.dfp.Dfp[] y, int start, int end)">4</method>
			<method name="public org.apache.commons.math3.dfp.Dfp getFunctionValueAccuracy()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp solve(int maxEval, org.apache.commons.math3.dfp.UnivariateDfpFunction f, org.apache.commons.math3.dfp.Dfp min, org.apache.commons.math3.dfp.Dfp max, org.apache.commons.math3.dfp.Dfp startValue, org.apache.commons.math3.analysis.solvers.AllowedSolution allowedSolution)">1</method>
			<method name="public int getMaximalOrder()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.dfp.DfpField</name>
		<wmc>42</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>63</rfc>
		<lcom>793</lcom>
		<ca>3</ca>
		<ce>4</ce>
		<npm>38</npm>
		<lcom3>0.9426111908177905</lcom3>
		<loc>873</loc>
		<dam>0.8529411764705882</dam>
		<moa>18</moa>
		<mfa>0.0</mfa>
		<cam>0.14814814814814814</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.976190476190474</amc>
		<cc>
			<method name="public org.apache.commons.math3.dfp.Dfp newDfp(long x)">1</method>
			<method name="public void setIEEEFlags(int flags)">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp getSqr3()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp[] getLn5Split()">1</method>
			<method name="public void setRoundingMode(org.apache.commons.math3.dfp.DfpField$RoundingMode mode)">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp getLn10()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp getSqr3Reciprocal()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp getSqr2Reciprocal()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp newDfp(byte x)">1</method>
			<method name="public void clearIEEEFlags()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp getPi()">1</method>
			<method name="public static org.apache.commons.math3.dfp.Dfp computeExp(org.apache.commons.math3.dfp.Dfp a, org.apache.commons.math3.dfp.Dfp one)">3</method>
			<method name="public int getIEEEFlags()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp newDfp()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp getOne()">1</method>
			<method name="public volatile Object getZero()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp getZero()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp getTwo()">1</method>
			<method name="public org.apache.commons.math3.dfp.DfpField$RoundingMode getRoundingMode()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp getLn2()">1</method>
			<method name="public void setIEEEFlagsBits(int bits)">1</method>
			<method name="public void _init_(int decimalDigits)">0</method>
			<method name="public org.apache.commons.math3.dfp.Dfp[] getSqr2Split()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp[] getPiSplit()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp newDfp(byte sign, byte nans)">1</method>
			<method name="public volatile Object getOne()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp newDfp(org.apache.commons.math3.dfp.Dfp d)">1</method>
			<method name="private static void computeStringConstants(int highPrecisionDecimalDigits)">3</method>
			<method name="public org.apache.commons.math3.dfp.Dfp[] getLn2Split()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp newDfp(double x)">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp getE()">1</method>
			<method name="public static org.apache.commons.math3.dfp.Dfp computeLn(org.apache.commons.math3.dfp.Dfp a, org.apache.commons.math3.dfp.Dfp one, org.apache.commons.math3.dfp.Dfp two)">3</method>
			<method name="public org.apache.commons.math3.dfp.Dfp newDfp(String s)">1</method>
			<method name="public int getRadixDigits()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp[] getESplit()">1</method>
			<method name="public Class getRuntimeClass()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp getLn5()">1</method>
			<method name="public org.apache.commons.math3.dfp.Dfp getSqr2()">1</method>
			<method name="private void _init_(int decimalDigits, boolean computeConstants)">0</method>
			<method name="private static org.apache.commons.math3.dfp.Dfp computePi(org.apache.commons.math3.dfp.Dfp one, org.apache.commons.math3.dfp.Dfp two, org.apache.commons.math3.dfp.Dfp three)">3</method>
			<method name="private org.apache.commons.math3.dfp.Dfp[] split(String a)">13</method>
			<method name="public org.apache.commons.math3.dfp.Dfp newDfp(int x)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.neuralnet.oned.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fraction.BigFractionFormat</name>
		<wmc>16</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>7</cbo>
		<rfc>48</rfc>
		<lcom>120</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>15</npm>
		<lcom3>1.0666666666666667</lcom3>
		<loc>268</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2013888888888889</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.6875</amc>
		<cc>
			<method name="public static org.apache.commons.math3.fraction.BigFractionFormat getImproperInstance(java.util.Locale locale)">1</method>
			<method name="public volatile Number parse(String x0)">1</method>
			<method name="public void _init_(java.text.NumberFormat numeratorFormat, java.text.NumberFormat denominatorFormat)">0</method>
			<method name="public static String formatBigFraction(org.apache.commons.math3.fraction.BigFraction f)">1</method>
			<method name="public org.apache.commons.math3.fraction.BigFraction parse(String source)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public StringBuffer format(org.apache.commons.math3.fraction.BigFraction BigFraction, StringBuffer toAppendTo, java.text.FieldPosition pos)">1</method>
			<method name="protected java.math.BigInteger parseNextBigInteger(String source, java.text.ParsePosition pos)">4</method>
			<method name="public static org.apache.commons.math3.fraction.BigFractionFormat getProperInstance(java.util.Locale locale)">1</method>
			<method name="public volatile Number parse(String x0, java.text.ParsePosition x1)">1</method>
			<method name="public StringBuffer format(Object obj, StringBuffer toAppendTo, java.text.FieldPosition pos)">4</method>
			<method name="public org.apache.commons.math3.fraction.BigFraction parse(String source, java.text.ParsePosition pos)">6</method>
			<method name="public static org.apache.commons.math3.fraction.BigFractionFormat getProperInstance()">1</method>
			<method name="public void _init_(java.text.NumberFormat format)">0</method>
			<method name="public static java.util.Locale[] getAvailableLocales()">1</method>
			<method name="public static org.apache.commons.math3.fraction.BigFractionFormat getImproperInstance()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.clustering.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.linear.SimplexTableau</name>
		<wmc>32</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>99</rfc>
		<lcom>224</lcom>
		<ca>1</ca>
		<ce>11</ce>
		<npm>3</npm>
		<lcom3>0.8317972350230415</lcom3>
		<loc>1105</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.13169642857142858</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>33.09375</amc>
		<cc>
			<method name="protected final int getNumDecisionVariables()">1</method>
			<method name="protected void initializeColumnLabels()">6</method>
			<method name="protected org.apache.commons.math3.linear.RealMatrix createTableau(boolean maximize)">13</method>
			<method name="protected void subtractRow(int minuendRow, int subtrahendRow, double multiple)">3</method>
			<method name="protected final int getWidth()">1</method>
			<method name="protected final double[][] getData()">1</method>
			<method name="protected final int getNumSlackVariables()">1</method>
			<method name="protected final int getSlackVariableOffset()">1</method>
			<method name="protected final int getNumObjectiveFunctions()">2</method>
			<method name="protected final void setEntry(int row, int column, double value)">1</method>
			<method name="private int getConstraintTypeCounts(org.apache.commons.math3.optimization.linear.Relationship relationship)">2</method>
			<method name="void _init_(org.apache.commons.math3.optimization.linear.LinearObjectiveFunction f, java.util.Collection constraints, org.apache.commons.math3.optimization.GoalType goalType, boolean restrictToNonNegative, double epsilon)">0</method>
			<method name="protected final int getOriginalNumDecisionVariables()">1</method>
			<method name="protected final int getArtificialVariableOffset()">1</method>
			<method name="public java.util.List normalizeConstraints(java.util.Collection originalConstraints)">2</method>
			<method name="private void writeObject(java.io.ObjectOutputStream oos)">1</method>
			<method name="protected final double getEntry(int row, int column)">1</method>
			<method name="protected org.apache.commons.math3.optimization.PointValuePair getSolution()">11</method>
			<method name="protected final int getHeight()">1</method>
			<method name="protected static double getInvertedCoefficientSum(org.apache.commons.math3.linear.RealVector coefficients)">2</method>
			<method name="public boolean equals(Object other)">12</method>
			<method name="void _init_(org.apache.commons.math3.optimization.linear.LinearObjectiveFunction f, java.util.Collection constraints, org.apache.commons.math3.optimization.GoalType goalType, boolean restrictToNonNegative, double epsilon, int maxUlps)">0</method>
			<method name="protected void dropPhase1Objective()">10</method>
			<method name="protected Integer getBasicRow(int col)">5</method>
			<method name="protected final int getRhsOffset()">1</method>
			<method name="protected final int getNumArtificialVariables()">1</method>
			<method name="protected void divideRow(int dividendRow, double divisor)">2</method>
			<method name="public int hashCode()">1</method>
			<method name="private org.apache.commons.math3.optimization.linear.LinearConstraint normalize(org.apache.commons.math3.optimization.linear.LinearConstraint constraint)">2</method>
			<method name="private void copyArray(double[] src, double[] dest)">1</method>
			<method name="private void readObject(java.io.ObjectInputStream ois)">1</method>
			<method name="boolean isOptimal()">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.threed.SubLine</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>30</rfc>
		<lcom>15</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>6</npm>
		<lcom3>0.5</lcom3>
		<loc>170</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.2857142857142857</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.857142857142858</amc>
		<cc>
			<method name="public java.util.List getSegments()">2</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.threed.Line line, org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet remainingRegion)">0</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.threed.Vector3D start, org.apache.commons.math3.geometry.euclidean.threed.Vector3D end, double tolerance)">0</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.threed.Segment segment)">0</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.threed.Vector3D start, org.apache.commons.math3.geometry.euclidean.threed.Vector3D end)">0</method>
			<method name="private static org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet buildIntervalSet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D start, org.apache.commons.math3.geometry.euclidean.threed.Vector3D end, double tolerance)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine, boolean includeEndPoints)">7</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.MathArrays$OrderDirection</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>5</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.888888888888889</lcom3>
		<loc>45</loc>
		<dam>0.3333333333333333</dam>
		<moa>3</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>9.5</amc>
		<cc>
			<method name="public static org.apache.commons.math3.util.MathArrays$OrderDirection valueOf(String name)">1</method>
			<method name="public static org.apache.commons.math3.util.MathArrays$OrderDirection[] values()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.EnumeratedRealDistribution</name>
		<wmc>14</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>33</rfc>
		<lcom>19</lcom>
		<ca>0</ca>
		<ce>11</ce>
		<npm>14</npm>
		<lcom3>0.6538461538461539</lcom3>
		<loc>345</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>23.5</amc>
		<cc>
			<method name="public double inverseCumulativeProbability(double p)">1</method>
			<method name="public double density(double x)">1</method>
			<method name="public boolean isSupportConnected()">1</method>
			<method name="public double cumulativeProbability(double x)">2</method>
			<method name="public boolean isSupportUpperBoundInclusive()">1</method>
			<method name="public boolean isSupportLowerBoundInclusive()">1</method>
			<method name="public double probability(double x)">1</method>
			<method name="public double getSupportLowerBound()">2</method>
			<method name="public double sample()">1</method>
			<method name="public double getNumericalMean()">2</method>
			<method name="public double getNumericalVariance()">2</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, double[] singletons, double[] probabilities)">0</method>
			<method name="public void _init_(double[] singletons, double[] probabilities)">0</method>
			<method name="public double getSupportUpperBound()">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.nonstiff.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.FunctionUtils</name>
		<wmc>22</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>64</cbo>
		<rfc>48</rfc>
		<lcom>231</lcom>
		<ca>31</ca>
		<ce>33</ce>
		<npm>21</npm>
		<lcom3>2.0</lcom3>
		<loc>185</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.09740259740259741</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.409090909090909</amc>
		<cc>
			<method name="public static transient org.apache.commons.math3.analysis.DifferentiableUnivariateFunction compose(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] f)">1</method>
			<method name="public static transient org.apache.commons.math3.analysis.UnivariateFunction compose(org.apache.commons.math3.analysis.UnivariateFunction[] f)">1</method>
			<method name="public static transient org.apache.commons.math3.analysis.DifferentiableUnivariateFunction add(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] f)">1</method>
			<method name="public static transient org.apache.commons.math3.analysis.UnivariateFunction multiply(org.apache.commons.math3.analysis.UnivariateFunction[] f)">1</method>
			<method name="public static org.apache.commons.math3.analysis.MultivariateFunction collector(org.apache.commons.math3.analysis.BivariateFunction combiner, double initialValue)">1</method>
			<method name="public static transient org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction compose(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction[] f)">1</method>
			<method name="public static transient org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction multiply(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction[] f)">1</method>
			<method name="public static org.apache.commons.math3.analysis.UnivariateFunction combine(org.apache.commons.math3.analysis.BivariateFunction combiner, org.apache.commons.math3.analysis.UnivariateFunction f, org.apache.commons.math3.analysis.UnivariateFunction g)">1</method>
			<method name="public static org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction toUnivariateDifferential(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction f)">1</method>
			<method name="public static transient org.apache.commons.math3.analysis.DifferentiableUnivariateFunction multiply(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] f)">1</method>
			<method name="public static org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction f)">1</method>
			<method name="public static org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(org.apache.commons.math3.analysis.DifferentiableMultivariateFunction f)">1</method>
			<method name="public static transient org.apache.commons.math3.analysis.UnivariateFunction add(org.apache.commons.math3.analysis.UnivariateFunction[] f)">1</method>
			<method name="public static org.apache.commons.math3.analysis.UnivariateFunction fix2ndArgument(org.apache.commons.math3.analysis.BivariateFunction f, double fixed)">1</method>
			<method name="public static org.apache.commons.math3.analysis.DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction f)">1</method>
			<method name="private void _init_()">0</method>
			<method name="public static org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction f)">1</method>
			<method name="public static org.apache.commons.math3.analysis.UnivariateFunction fix1stArgument(org.apache.commons.math3.analysis.BivariateFunction f, double fixed)">1</method>
			<method name="public static transient org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction add(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction[] f)">1</method>
			<method name="public static org.apache.commons.math3.analysis.DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction f)">1</method>
			<method name="public static double[] sample(org.apache.commons.math3.analysis.UnivariateFunction f, double min, double max, int n)">1</method>
			<method name="public static org.apache.commons.math3.analysis.MultivariateFunction collector(org.apache.commons.math3.analysis.BivariateFunction combiner, org.apache.commons.math3.analysis.UnivariateFunction f, double initialValue)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D$LazyHolder</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>0.5</lcom3>
		<loc>15</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.6666666666666665</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="static org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D access$000()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunction</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract int value(long)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.genetics.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.interpolation.BivariateGridInterpolator</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.analysis.BivariateFunction interpolate(double[], double[], double[][])">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$LowerBoundMapper</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>22</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public double unboundedToBounded(double y)">1</method>
			<method name="public double boundedToUnbounded(double x)">1</method>
			<method name="public void _init_(double lower)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.vector.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.linear.NoFeasibleSolutionException</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.FunctionUtils$6$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>41</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.0</amc>
		<cc>
			<method name="void _init_(org.apache.commons.math3.analysis.FunctionUtils$6)">0</method>
			<method name="public double value(double x)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fraction.AbstractFormat</name>
		<wmc>13</wmc>
		<dit>3</dit>
		<noc>2</noc>
		<cbo>5</cbo>
		<rfc>28</rfc>
		<lcom>66</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>6</npm>
		<lcom3>0.8611111111111112</lcom3>
		<loc>139</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.8412698412698413</mfa>
		<cam>0.20512820512820512</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>9.461538461538462</amc>
		<cc>
			<method name="protected static java.text.NumberFormat getDefaultNumberFormat()">1</method>
			<method name="protected static char parseNextCharacter(String source, java.text.ParsePosition pos)">5</method>
			<method name="public void setNumeratorFormat(java.text.NumberFormat format)">2</method>
			<method name="public void setDenominatorFormat(java.text.NumberFormat format)">2</method>
			<method name="protected static java.text.NumberFormat getDefaultNumberFormat(java.util.Locale locale)">1</method>
			<method name="public StringBuffer format(double value, StringBuffer buffer, java.text.FieldPosition position)">1</method>
			<method name="public java.text.NumberFormat getDenominatorFormat()">1</method>
			<method name="public java.text.NumberFormat getNumeratorFormat()">1</method>
			<method name="protected void _init_()">0</method>
			<method name="protected void _init_(java.text.NumberFormat numeratorFormat, java.text.NumberFormat denominatorFormat)">0</method>
			<method name="protected void _init_(java.text.NumberFormat format)">0</method>
			<method name="public StringBuffer format(long value, StringBuffer buffer, java.text.FieldPosition position)">1</method>
			<method name="protected static void parseAndIgnoreWhitespace(String source, java.text.ParsePosition pos)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.PointValuePair</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>25</cbo>
		<rfc>12</rfc>
		<lcom>10</lcom>
		<ca>23</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>1.25</lcom3>
		<loc>55</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.8</amc>
		<cc>
			<method name="private Object writeReplace()">1</method>
			<method name="public void _init_(double[] point, double value)">0</method>
			<method name="public void _init_(double[] point, double value, boolean copyArray)">0</method>
			<method name="public double[] getPointRef()">1</method>
			<method name="public double[] getPoint()">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.transform.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Asin</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>9</rfc>
		<lcom>6</lcom>
		<ca>0</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>17</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.25</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double value(double x)">1</method>
			<method name="public org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.clustering.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.AbstractRandomGenerator</name>
		<wmc>13</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>19</rfc>
		<lcom>72</lcom>
		<ca>0</ca>
		<ce>3</ce>
		<npm>13</npm>
		<lcom3>0.8333333333333334</lcom3>
		<loc>218</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.27692307692307694</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.692307692307692</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void setSeed(int seed)">1</method>
			<method name="public void setSeed(int[] seed)">2</method>
			<method name="public void nextBytes(byte[] bytes)">4</method>
			<method name="public boolean nextBoolean()">2</method>
			<method name="public double nextGaussian()">4</method>
			<method name="public int nextInt()">1</method>
			<method name="public int nextInt(int n)">3</method>
			<method name="public abstract double nextDouble()">1</method>
			<method name="public long nextLong()">1</method>
			<method name="public float nextFloat()">1</method>
			<method name="public abstract void setSeed(long)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.SecondaryEquations</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>4</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void computeDerivatives(double, double[], double[], double[], double[])">1</method>
			<method name="public abstract int getDimension()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fraction.FractionField$LazyHolder</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>0.5</lcom3>
		<loc>15</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.6666666666666665</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="static org.apache.commons.math3.fraction.FractionField access$000()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.AbstractIntegrator</name>
		<wmc>25</wmc>
		<dit>1</dit>
		<noc>2</noc>
		<cbo>28</cbo>
		<rfc>87</rfc>
		<lcom>180</lcom>
		<ca>8</ca>
		<ce>21</ce>
		<npm>17</npm>
		<lcom3>0.8541666666666666</lcom3>
		<loc>669</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.17</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>25.36</amc>
		<cc>
			<method name="protected void sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE equations, double t)">1</method>
			<method name="public int getMaxEvaluations()">1</method>
			<method name="public void setMaxEvaluations(int maxEvaluations)">2</method>
			<method name="public java.util.Collection getStepHandlers()">1</method>
			<method name="public double getCurrentSignedStepsize()">1</method>
			<method name="public abstract void integrate(org.apache.commons.math3.ode.ExpandableStatefulODE, double)">1</method>
			<method name="public void addEventHandler(org.apache.commons.math3.ode.events.EventHandler handler, double maxCheckInterval, double convergence, int maxIterationCount)">1</method>
			<method name="public String getName()">1</method>
			<method name="protected void setStateInitialized(boolean stateInitialized)">1</method>
			<method name="protected org.apache.commons.math3.ode.ExpandableStatefulODE getExpandable()">1</method>
			<method name="public double integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations equations, double t0, double[] y0, double t, double[] y)">1</method>
			<method name="protected double acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator interpolator, double[] y, double[] yDot, double tEnd)">1</method>
			<method name="public void clearEventHandlers()">1</method>
			<method name="public void addStepHandler(org.apache.commons.math3.ode.sampling.StepHandler handler)">1</method>
			<method name="protected void setEquations(org.apache.commons.math3.ode.ExpandableStatefulODE equations)">1</method>
			<method name="protected org.apache.commons.math3.util.Incrementor getEvaluationsCounter()">1</method>
			<method name="public void addEventHandler(org.apache.commons.math3.ode.events.EventHandler handler, double maxCheckInterval, double convergence, int maxIterationCount, org.apache.commons.math3.analysis.solvers.UnivariateSolver solver)">1</method>
			<method name="public double getCurrentStepStart()">1</method>
			<method name="public void computeDerivatives(double t, double[] y, double[] yDot)">1</method>
			<method name="public java.util.Collection getEventHandlers()">2</method>
			<method name="public void clearStepHandlers()">1</method>
			<method name="protected void _init_()">0</method>
			<method name="public int getEvaluations()">1</method>
			<method name="public void _init_(String name)">0</method>
			<method name="protected void initIntegration(double t0, double[] y0, double t)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.general.Preconditioner</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double[] precondition(double[], double[])">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.UnivariateStatistic</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>27</cbo>
		<rfc>3</rfc>
		<lcom>3</lcom>
		<ca>25</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>3</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double evaluate(double[])">1</method>
			<method name="public abstract double evaluate(double[], int, int)">1</method>
			<method name="public abstract org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.dfp.UnivariateDfpFunction</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.dfp.Dfp value(org.apache.commons.math3.dfp.Dfp)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.oned.Vector1DFormat</name>
		<wmc>11</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>21</rfc>
		<lcom>55</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>11</npm>
		<lcom3>2.0</lcom3>
		<loc>112</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.26136363636363635</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.181818181818182</amc>
		<cc>
			<method name="public org.apache.commons.math3.geometry.euclidean.oned.Vector1D parse(String source)">1</method>
			<method name="public static org.apache.commons.math3.geometry.euclidean.oned.Vector1DFormat getInstance(java.util.Locale locale)">1</method>
			<method name="public void _init_(String prefix, String suffix, java.text.NumberFormat format)">0</method>
			<method name="public void _init_(String prefix, String suffix)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public volatile org.apache.commons.math3.geometry.Vector parse(String x0)">1</method>
			<method name="public void _init_(java.text.NumberFormat format)">0</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.oned.Vector1D parse(String source, java.text.ParsePosition pos)">2</method>
			<method name="public StringBuffer format(org.apache.commons.math3.geometry.Vector vector, StringBuffer toAppendTo, java.text.FieldPosition pos)">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.Vector parse(String x0, java.text.ParsePosition x1)">1</method>
			<method name="public static org.apache.commons.math3.geometry.euclidean.oned.Vector1DFormat getInstance()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>21</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.RealVectorPreservingVisitor</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>3</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void visit(int, double)">1</method>
			<method name="public abstract double end()">1</method>
			<method name="public abstract void start(int, int, int)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.FieldMatrixChangingVisitor</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>3</rfc>
		<lcom>3</lcom>
		<ca>5</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>3</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.FieldElement visit(int, int, org.apache.commons.math3.FieldElement)">1</method>
			<method name="public abstract org.apache.commons.math3.FieldElement end()">1</method>
			<method name="public abstract void start(int, int, int, int, int, int)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.spherical.twod.Sphere2D</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>9</rfc>
		<lcom>21</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>4</npm>
		<lcom3>1.1666666666666667</lcom3>
		<loc>25</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.4285714285714284</amc>
		<cc>
			<method name="public int getDimension()">1</method>
			<method name="private void _init_()">0</method>
			<method name="public static org.apache.commons.math3.geometry.spherical.twod.Sphere2D getInstance()">1</method>
			<method name="public org.apache.commons.math3.geometry.spherical.oned.Sphere1D getSubSpace()">1</method>
			<method name="private Object readResolve()">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.Space getSubSpace()">1</method>
			<method name="void _init_(org.apache.commons.math3.geometry.spherical.twod.Sphere2D$1 x0)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics</name>
		<wmc>36</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>21</cbo>
		<rfc>72</rfc>
		<lcom>410</lcom>
		<ca>1</ca>
		<ce>20</ce>
		<npm>31</npm>
		<lcom3>0.7636363636363637</lcom3>
		<loc>789</loc>
		<dam>1.0</dam>
		<moa>8</moa>
		<mfa>0.0</mfa>
		<cam>0.1840277777777778</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>20.61111111111111</amc>
		<cc>
			<method name="public org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic[] getMinImpl()">1</method>
			<method name="public double[] getMax()">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getCovariance()">1</method>
			<method name="public void clear()">2</method>
			<method name="public org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic[] getSumImpl()">1</method>
			<method name="public double[] getStandardDeviation()">4</method>
			<method name="public org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic[] getSumsqImpl()">1</method>
			<method name="public void setMinImpl(org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic[] minImpl)">1</method>
			<method name="public void _init_(int k, boolean isCovarianceBiasCorrected)">0</method>
			<method name="public void setMeanImpl(org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic[] meanImpl)">1</method>
			<method name="private void setImpl(org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic[] newImpl, org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic[] oldImpl)">1</method>
			<method name="private void checkEmpty()">1</method>
			<method name="public org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic[] getMeanImpl()">1</method>
			<method name="public int getDimension()">1</method>
			<method name="public void setMaxImpl(org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic[] maxImpl)">1</method>
			<method name="public double[] getGeometricMean()">1</method>
			<method name="public void setSumImpl(org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic[] sumImpl)">1</method>
			<method name="public void setSumsqImpl(org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic[] sumsqImpl)">1</method>
			<method name="public String toString()">1</method>
			<method name="public double[] getSum()">1</method>
			<method name="public double[] getSumLog()">1</method>
			<method name="public long getN()">1</method>
			<method name="public void addValue(double[] value)">1</method>
			<method name="public boolean equals(Object object)">12</method>
			<method name="private void append(StringBuilder buffer, double[] data, String prefix, String separator, String suffix)">3</method>
			<method name="public double[] getSumSq()">1</method>
			<method name="public void setSumLogImpl(org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic[] sumLogImpl)">1</method>
			<method name="private double[] getResults(org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic[] stats)">2</method>
			<method name="public org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic[] getGeoMeanImpl()">1</method>
			<method name="public double[] getMean()">1</method>
			<method name="public double[] getMin()">1</method>
			<method name="public void setGeoMeanImpl(org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic[] geoMeanImpl)">1</method>
			<method name="public int hashCode()">1</method>
			<method name="private void checkDimension(int dimension)">1</method>
			<method name="public org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic[] getSumLogImpl()">1</method>
			<method name="public org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic[] getMaxImpl()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.JacobiPreconditioner$1</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>0.5</lcom3>
		<loc>34</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="public org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector x)">1</method>
			<method name="public int getRowDimension()">1</method>
			<method name="public int getColumnDimension()">1</method>
			<method name="void _init_(org.apache.commons.math3.linear.JacobiPreconditioner, org.apache.commons.math3.linear.RealVector)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer$Decomposition</name>
		<wmc>6</wmc>
		<dit>2</dit>
		<noc>4</noc>
		<cbo>9</cbo>
		<rfc>13</rfc>
		<lcom>13</lcom>
		<ca>5</ca>
		<ce>8</ce>
		<npm>2</npm>
		<lcom3>0.96</lcom3>
		<loc>74</loc>
		<dam>0.2</dam>
		<moa>5</moa>
		<mfa>0.8125</mfa>
		<cam>0.36666666666666664</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>10.5</amc>
		<cc>
			<method name="public static org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer$Decomposition valueOf(String name)">1</method>
			<method name="public static org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer$Decomposition[] values()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="void _init_(String x0, int x1, org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer$1 x2)">0</method>
			<method name="protected abstract org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealMatrix, org.apache.commons.math3.linear.RealVector)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>9</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void trigger(int)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>4</ce>
		<npm>4</npm>
		<lcom3>0.7777777777777777</lcom3>
		<loc>53</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.5</amc>
		<cc>
			<method name="public double getThreshold()">1</method>
			<method name="public int getRow()">1</method>
			<method name="public void _init_(double wrong, int index, double threshold)">0</method>
			<method name="public int getColumn()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.clustering.Cluster</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>0.7777777777777777</lcom3>
		<loc>30</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.75</amc>
		<cc>
			<method name="public void addPoint(org.apache.commons.math3.stat.clustering.Clusterable point)">1</method>
			<method name="public void _init_(org.apache.commons.math3.stat.clustering.Clusterable center)">0</method>
			<method name="public java.util.List getPoints()">1</method>
			<method name="public org.apache.commons.math3.stat.clustering.Clusterable getCenter()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.direct.BOBYQAOptimizer$PathIsExploredException</name>
		<wmc>1</wmc>
		<dit>4</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>15</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>1.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolator</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>9</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>9</ce>
		<npm>3</npm>
		<lcom3>0.75</lcom3>
		<loc>56</loc>
		<dam>0.5</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.333333333333332</amc>
		<cc>
			<method name="public void _init_(int elements, int exponent)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public org.apache.commons.math3.analysis.MultivariateFunction interpolate(double[][] xval, double[] yval)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.FieldElement</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>35</cbo>
		<rfc>8</rfc>
		<lcom>28</lcom>
		<ca>32</ca>
		<ce>3</ce>
		<npm>8</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5416666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract Object multiply(int)">1</method>
			<method name="public abstract Object divide(Object)">1</method>
			<method name="public abstract Object negate()">1</method>
			<method name="public abstract Object add(Object)">1</method>
			<method name="public abstract org.apache.commons.math3.Field getField()">1</method>
			<method name="public abstract Object subtract(Object)">1</method>
			<method name="public abstract Object multiply(Object)">1</method>
			<method name="public abstract Object reciprocal()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.oned.Vector1D</name>
		<wmc>43</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>23</cbo>
		<rfc>45</rfc>
		<lcom>301</lcom>
		<ca>14</ca>
		<ce>10</ce>
		<npm>42</npm>
		<lcom3>0.8707482993197279</lcom3>
		<loc>431</loc>
		<dam>0.2857142857142857</dam>
		<moa>5</moa>
		<mfa>0.0</mfa>
		<cam>0.24829931972789115</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>8.86046511627907</amc>
		<cc>
			<method name="public volatile org.apache.commons.math3.geometry.Vector scalarMultiply(double x0)">1</method>
			<method name="public double getNormSq()">1</method>
			<method name="public void _init_(double a1, org.apache.commons.math3.geometry.euclidean.oned.Vector1D u1, double a2, org.apache.commons.math3.geometry.euclidean.oned.Vector1D u2)">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.oned.Vector1D getZero()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.oned.Vector1D normalize()">1</method>
			<method name="public org.apache.commons.math3.geometry.Space getSpace()">1</method>
			<method name="public double getX()">1</method>
			<method name="public void _init_(double a1, org.apache.commons.math3.geometry.euclidean.oned.Vector1D u1, double a2, org.apache.commons.math3.geometry.euclidean.oned.Vector1D u2, double a3, org.apache.commons.math3.geometry.euclidean.oned.Vector1D u3, double a4, org.apache.commons.math3.geometry.euclidean.oned.Vector1D u4)">0</method>
			<method name="public double distanceSq(org.apache.commons.math3.geometry.Vector p)">1</method>
			<method name="public static double distanceSq(org.apache.commons.math3.geometry.euclidean.oned.Vector1D p1, org.apache.commons.math3.geometry.euclidean.oned.Vector1D p2)">1</method>
			<method name="public void _init_(double a1, org.apache.commons.math3.geometry.euclidean.oned.Vector1D u1, double a2, org.apache.commons.math3.geometry.euclidean.oned.Vector1D u2, double a3, org.apache.commons.math3.geometry.euclidean.oned.Vector1D u3)">0</method>
			<method name="public void _init_(double a, org.apache.commons.math3.geometry.euclidean.oned.Vector1D u)">0</method>
			<method name="public boolean isInfinite()">3</method>
			<method name="public void _init_(double x)">0</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.oned.Vector1D subtract(double factor, org.apache.commons.math3.geometry.Vector v)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.oned.Vector1D scalarMultiply(double a)">1</method>
			<method name="public String toString(java.text.NumberFormat format)">1</method>
			<method name="public String toString()">1</method>
			<method name="public boolean isNaN()">1</method>
			<method name="public double getNorm1()">1</method>
			<method name="public static double distanceInf(org.apache.commons.math3.geometry.euclidean.oned.Vector1D p1, org.apache.commons.math3.geometry.euclidean.oned.Vector1D p2)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.oned.Vector1D add(double factor, org.apache.commons.math3.geometry.Vector v)">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.Vector getZero()">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.Vector subtract(double x0, org.apache.commons.math3.geometry.Vector x1)">1</method>
			<method name="public double dotProduct(org.apache.commons.math3.geometry.Vector v)">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.Vector add(org.apache.commons.math3.geometry.Vector x0)">1</method>
			<method name="public boolean equals(Object other)">5</method>
			<method name="public double distance(org.apache.commons.math3.geometry.Vector p)">1</method>
			<method name="public double distance1(org.apache.commons.math3.geometry.Vector p)">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.Vector negate()">1</method>
			<method name="public double getNorm()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.oned.Vector1D add(org.apache.commons.math3.geometry.Vector v)">1</method>
			<method name="public static double distance(org.apache.commons.math3.geometry.euclidean.oned.Vector1D p1, org.apache.commons.math3.geometry.euclidean.oned.Vector1D p2)">1</method>
			<method name="public int hashCode()">2</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.oned.Vector1D subtract(org.apache.commons.math3.geometry.Vector p)">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.Vector add(double x0, org.apache.commons.math3.geometry.Vector x1)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.oned.Vector1D negate()">1</method>
			<method name="public double distance(org.apache.commons.math3.geometry.Point p)">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.Vector normalize()">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.Vector subtract(org.apache.commons.math3.geometry.Vector x0)">1</method>
			<method name="public double getNormInf()">1</method>
			<method name="public double distanceInf(org.apache.commons.math3.geometry.Vector p)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>5</npm>
		<lcom3>0.5</lcom3>
		<loc>30</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.6</amc>
		<cc>
			<method name="public boolean minusFound()">1</method>
			<method name="public void rememberPlusFound()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void rememberMinusFound()">1</method>
			<method name="public boolean plusFound()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.spherical.twod.Edge</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>25</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>6</ce>
		<npm>5</npm>
		<lcom3>0.46875</lcom3>
		<loc>284</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.37037037037037035</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>30.11111111111111</amc>
		<cc>
			<method name="void _init_(org.apache.commons.math3.geometry.spherical.twod.Vertex start, org.apache.commons.math3.geometry.spherical.twod.Vertex end, double length, org.apache.commons.math3.geometry.spherical.twod.Circle circle)">0</method>
			<method name="public org.apache.commons.math3.geometry.spherical.twod.Circle getCircle()">1</method>
			<method name="public double getLength()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getPointAt(double alpha)">1</method>
			<method name="void split(org.apache.commons.math3.geometry.spherical.twod.Circle splitCircle, java.util.List outsideList, java.util.List insideList)">6</method>
			<method name="void setNextEdge(org.apache.commons.math3.geometry.spherical.twod.Edge next)">1</method>
			<method name="private org.apache.commons.math3.geometry.spherical.twod.Vertex addSubEdge(org.apache.commons.math3.geometry.spherical.twod.Vertex subStart, org.apache.commons.math3.geometry.spherical.twod.Vertex subEnd, double subLength, java.util.List list, org.apache.commons.math3.geometry.spherical.twod.Circle splitCircle)">2</method>
			<method name="public org.apache.commons.math3.geometry.spherical.twod.Vertex getEnd()">1</method>
			<method name="public org.apache.commons.math3.geometry.spherical.twod.Vertex getStart()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.vector.ModelFunction</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>12</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.5</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.MultivariateVectorFunction getModelFunction()">1</method>
			<method name="public void _init_(org.apache.commons.math3.analysis.MultivariateVectorFunction m)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.univariate.BracketFinder</name>
		<wmc>12</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>26</rfc>
		<lcom>34</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>11</npm>
		<lcom3>0.9</lcom3>
		<loc>426</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.31666666666666665</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>33.666666666666664</amc>
		<cc>
			<method name="private double eval(org.apache.commons.math3.analysis.UnivariateFunction f, double x)">1</method>
			<method name="public int getMaxEvaluations()">1</method>
			<method name="public int getEvaluations()">1</method>
			<method name="public void search(org.apache.commons.math3.analysis.UnivariateFunction func, org.apache.commons.math3.optim.nonlinear.scalar.GoalType goal, double xA, double xB)">22</method>
			<method name="public void _init_(double growLimit, int maxEvaluations)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public double getFMid()">1</method>
			<method name="public double getLo()">1</method>
			<method name="public double getHi()">1</method>
			<method name="public double getFLo()">1</method>
			<method name="public double getFHi()">1</method>
			<method name="public double getMid()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.solvers.MullerSolver2</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>18</rfc>
		<lcom>6</lcom>
		<ca>0</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>262</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>64.25</amc>
		<cc>
			<method name="protected double doSolve()">1</method>
			<method name="public void _init_(double absoluteAccuracy)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(double relativeAccuracy, double absoluteAccuracy)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.primes.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.MaxEval</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>5</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>26</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.333333333333333</amc>
		<cc>
			<method name="public static org.apache.commons.math3.optim.MaxEval unlimited()">1</method>
			<method name="public int getMaxEval()">1</method>
			<method name="public void _init_(int max)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.genetics.ChromosomePair</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>6</rfc>
		<lcom>2</lcom>
		<ca>9</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>36</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.5</amc>
		<cc>
			<method name="public org.apache.commons.math3.genetics.Chromosome getFirst()">1</method>
			<method name="public String toString()">1</method>
			<method name="public org.apache.commons.math3.genetics.Chromosome getSecond()">1</method>
			<method name="public void _init_(org.apache.commons.math3.genetics.Chromosome c1, org.apache.commons.math3.genetics.Chromosome c2)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.ParameterizedODE</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>4</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double getParameter(String)">1</method>
			<method name="public abstract void setParameter(String, double)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.leastsquares.OptimumImpl</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>18</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>9</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>61</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.35</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.8</amc>
		<cc>
			<method name="public org.apache.commons.math3.linear.RealVector getResiduals()">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector getSigma(double covarianceSingularityThreshold)">1</method>
			<method name="public int getEvaluations()">1</method>
			<method name="public double getCost()">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getJacobian()">1</method>
			<method name="public double getRMS()">1</method>
			<method name="public int getIterations()">1</method>
			<method name="void _init_(org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation value, int evaluations, int iterations)">0</method>
			<method name="public org.apache.commons.math3.linear.RealVector getPoint()">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getCovariances(double threshold)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType</name>
		<wmc>10</wmc>
		<dit>2</dit>
		<noc>10</noc>
		<cbo>20</cbo>
		<rfc>29</rfc>
		<lcom>41</lcom>
		<ca>12</ca>
		<ce>18</ce>
		<npm>3</npm>
		<lcom3>0.9722222222222222</lcom3>
		<loc>260</loc>
		<dam>0.16666666666666666</dam>
		<moa>11</moa>
		<mfa>0.65</mfa>
		<cam>0.375</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>23.8</amc>
		<cc>
			<method name="private void _init_(String, int, String type)">0</method>
			<method name="protected abstract double index(double, int)">1</method>
			<method name="protected double evaluate(double[] work, int[] pivotsHeap, double p, org.apache.commons.math3.util.KthSelector kthSelector)">3</method>
			<method name="static void _clinit_()">0</method>
			<method name="String getName()">1</method>
			<method name="protected double estimate(double[] work, int[] pivotsHeap, double pos, int length, org.apache.commons.math3.util.KthSelector kthSelector)">3</method>
			<method name="public double evaluate(double[] work, double p, org.apache.commons.math3.util.KthSelector kthSelector)">1</method>
			<method name="void _init_(String x0, int x1, String x2, org.apache.commons.math3.stat.descriptive.rank.Percentile$1 x3)">0</method>
			<method name="public static org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType[] values()">1</method>
			<method name="public static org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType valueOf(String name)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$BracketingStep</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>12</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.5</amc>
		<cc>
			<method name="public double getBracketingStep()">1</method>
			<method name="public void _init_(double step)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.GammaDistribution</name>
		<wmc>20</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>33</rfc>
		<lcom>86</lcom>
		<ca>2</ca>
		<ce>8</ce>
		<npm>19</npm>
		<lcom3>0.8026315789473685</lcom3>
		<loc>539</loc>
		<dam>0.9166666666666666</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.48333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>25.35</amc>
		<cc>
			<method name="protected double getSolverAbsoluteAccuracy()">1</method>
			<method name="public double getScale()">1</method>
			<method name="public double density(double x)">4</method>
			<method name="public boolean isSupportConnected()">1</method>
			<method name="public boolean isSupportUpperBoundInclusive()">1</method>
			<method name="public double cumulativeProbability(double x)">2</method>
			<method name="public boolean isSupportLowerBoundInclusive()">1</method>
			<method name="public double getAlpha()">1</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, double shape, double scale, double inverseCumAccuracy)">0</method>
			<method name="public double getShape()">1</method>
			<method name="public double getSupportLowerBound()">1</method>
			<method name="public double sample()">7</method>
			<method name="public void _init_(double shape, double scale)">0</method>
			<method name="public double getNumericalVariance()">1</method>
			<method name="public double getNumericalMean()">1</method>
			<method name="public void _init_(double shape, double scale, double inverseCumAccuracy)">0</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, double shape, double scale)">0</method>
			<method name="public double getSupportUpperBound()">1</method>
			<method name="public double getBeta()">1</method>
			<method name="public double logDensity(double x)">4</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.FieldLUDecomposition</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>24</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>7</npm>
		<lcom3>0.5</lcom3>
		<loc>498</loc>
		<dam>1.0</dam>
		<moa>5</moa>
		<mfa>0.0</mfa>
		<cam>0.5714285714285714</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>69.0</amc>
		<cc>
			<method name="public org.apache.commons.math3.linear.FieldMatrix getL()">5</method>
			<method name="public org.apache.commons.math3.linear.FieldDecompositionSolver getSolver()">1</method>
			<method name="public org.apache.commons.math3.linear.FieldMatrix getP()">4</method>
			<method name="public void _init_(org.apache.commons.math3.linear.FieldMatrix matrix)">0</method>
			<method name="public org.apache.commons.math3.FieldElement getDeterminant()">4</method>
			<method name="public org.apache.commons.math3.linear.FieldMatrix getU()">5</method>
			<method name="public int[] getPivot()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Constant</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>8</rfc>
		<lcom>4</lcom>
		<ca>3</ca>
		<ce>4</ce>
		<npm>5</npm>
		<lcom3>0.0</lcom3>
		<loc>33</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.4</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.DifferentiableUnivariateFunction derivative()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="public volatile org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
			<method name="public double value(double x)">1</method>
			<method name="public void _init_(double c)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.inference.OneWayAnova</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>30</rfc>
		<lcom>21</lcom>
		<ca>1</ca>
		<ce>12</ce>
		<npm>5</npm>
		<lcom3>2.0</lcom3>
		<loc>283</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5714285714285714</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>39.42857142857143</amc>
		<cc>
			<method name="public double anovaFValue(java.util.Collection categoryData)">1</method>
			<method name="private org.apache.commons.math3.stat.inference.OneWayAnova$AnovaStats anovaStats(java.util.Collection categoryData, boolean allowOneElementData)">1</method>
			<method name="public boolean anovaTest(java.util.Collection categoryData, double alpha)">1</method>
			<method name="public double anovaPValue(java.util.Collection categoryData)">1</method>
			<method name="public void _init_()">0</method>
			<method name="private org.apache.commons.math3.stat.inference.OneWayAnova$AnovaStats anovaStats(java.util.Collection categoryData)">1</method>
			<method name="public double anovaPValue(java.util.Collection categoryData, boolean allowOneElementData)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.correlation.KendallsCorrelation$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>1.0</lcom3>
		<loc>37</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.0</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_(org.apache.commons.math3.stat.correlation.KendallsCorrelation)">0</method>
			<method name="public int compare(org.apache.commons.math3.util.Pair pair1, org.apache.commons.math3.util.Pair pair2)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>25</rfc>
		<lcom>7</lcom>
		<ca>1</ca>
		<ce>14</ce>
		<npm>3</npm>
		<lcom3>0.4</lcom3>
		<loc>172</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.7333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>27.333333333333332</amc>
		<cc>
			<method name="private double stage(int n)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(int n, int minimalIterationCount, int maximalIterationCount)">0</method>
			<method name="public void _init_(int n, double relativeAccuracy, double absoluteAccuracy)">0</method>
			<method name="protected double doIntegrate()">1</method>
			<method name="public void _init_(int n, double relativeAccuracy, double absoluteAccuracy, int minimalIterationCount, int maximalIterationCount)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>17</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>2</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>476</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.9</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>93.6</amc>
		<cc>
			<method name="public double[] guess()">1</method>
			<method name="private double[] guessAOmega(org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] observations)">9</method>
			<method name="private org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] sortObservations(org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] unsorted)">6</method>
			<method name="private double guessPhi(org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] observations)">2</method>
			<method name="public void _init_(org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] observations)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.genetics.ListPopulation</name>
		<wmc>13</wmc>
		<dit>1</dit>
		<noc>2</noc>
		<cbo>11</cbo>
		<rfc>33</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>8</ce>
		<npm>12</npm>
		<lcom3>0.2916666666666667</lcom3>
		<loc>229</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3076923076923077</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.46153846153846</amc>
		<cc>
			<method name="public org.apache.commons.math3.genetics.Chromosome getFittestChromosome()">2</method>
			<method name="public void addChromosomes(java.util.Collection chromosomeColl)">1</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public void setPopulationLimit(int populationLimit)">1</method>
			<method name="public void setChromosomes(java.util.List chromosomes)">1</method>
			<method name="protected java.util.List getChromosomeList()">1</method>
			<method name="public java.util.List getChromosomes()">1</method>
			<method name="public int getPopulationLimit()">1</method>
			<method name="public void _init_(int populationLimit)">0</method>
			<method name="public String toString()">1</method>
			<method name="public void addChromosome(org.apache.commons.math3.genetics.Chromosome chromosome)">1</method>
			<method name="public void _init_(java.util.List chromosomes, int populationLimit)">0</method>
			<method name="public int getPopulationSize()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.MaxIter</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>26</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.333333333333333</amc>
		<cc>
			<method name="public int getMaxIter()">1</method>
			<method name="public static org.apache.commons.math3.optim.MaxIter unlimited()">1</method>
			<method name="public void _init_(int max)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.regression.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.genetics.CycleCrossover</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>30</rfc>
		<lcom>4</lcom>
		<ca>0</ca>
		<ce>10</ce>
		<npm>4</npm>
		<lcom3>0.0</lcom3>
		<loc>206</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>40.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public org.apache.commons.math3.genetics.ChromosomePair crossover(org.apache.commons.math3.genetics.Chromosome first, org.apache.commons.math3.genetics.Chromosome second)">1</method>
			<method name="public void _init_(boolean randomStart)">0</method>
			<method name="public boolean isRandomStart()">1</method>
			<method name="protected org.apache.commons.math3.genetics.ChromosomePair mate(org.apache.commons.math3.genetics.AbstractListChromosome first, org.apache.commons.math3.genetics.AbstractListChromosome second)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.BigReal</name>
		<wmc>43</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>68</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>42</npm>
		<lcom3>0.5952380952380952</lcom3>
		<loc>497</loc>
		<dam>0.6666666666666666</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.17063492063492064</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>10.418604651162791</amc>
		<cc>
			<method name="public void _init_(char[] in, int offset, int len, java.math.MathContext mc)">0</method>
			<method name="public java.math.RoundingMode getRoundingMode()">1</method>
			<method name="public volatile Object divide(Object x0)">1</method>
			<method name="public org.apache.commons.math3.util.BigReal add(org.apache.commons.math3.util.BigReal a)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public org.apache.commons.math3.util.BigReal multiply(org.apache.commons.math3.util.BigReal a)">1</method>
			<method name="public void _init_(java.math.BigInteger unscaledVal, int scale, java.math.MathContext mc)">0</method>
			<method name="public org.apache.commons.math3.util.BigReal reciprocal()">1</method>
			<method name="public void _init_(long val)">0</method>
			<method name="public org.apache.commons.math3.util.BigReal negate()">1</method>
			<method name="public volatile Object multiply(Object x0)">1</method>
			<method name="public double doubleValue()">1</method>
			<method name="public volatile Object reciprocal()">1</method>
			<method name="public void _init_(int val, java.math.MathContext mc)">0</method>
			<method name="public void _init_(long val, java.math.MathContext mc)">0</method>
			<method name="public void _init_(char[] in, int offset, int len)">0</method>
			<method name="public void _init_(java.math.BigInteger val, java.math.MathContext mc)">0</method>
			<method name="public void setRoundingMode(java.math.RoundingMode roundingMode)">1</method>
			<method name="public void _init_(char[] in, java.math.MathContext mc)">0</method>
			<method name="public int compareTo(org.apache.commons.math3.util.BigReal a)">1</method>
			<method name="public void _init_(double val)">0</method>
			<method name="public org.apache.commons.math3.Field getField()">1</method>
			<method name="public org.apache.commons.math3.util.BigReal divide(org.apache.commons.math3.util.BigReal a)">1</method>
			<method name="public void setScale(int scale)">1</method>
			<method name="public void _init_(double val, java.math.MathContext mc)">0</method>
			<method name="public int getScale()">1</method>
			<method name="public void _init_(java.math.BigInteger val)">0</method>
			<method name="public void _init_(int val)">0</method>
			<method name="public org.apache.commons.math3.util.BigReal multiply(int n)">1</method>
			<method name="public void _init_(char[] in)">0</method>
			<method name="public void _init_(java.math.BigInteger unscaledVal, int scale)">0</method>
			<method name="public org.apache.commons.math3.util.BigReal subtract(org.apache.commons.math3.util.BigReal a)">1</method>
			<method name="public boolean equals(Object other)">3</method>
			<method name="public void _init_(String val, java.math.MathContext mc)">0</method>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="public java.math.BigDecimal bigDecimalValue()">1</method>
			<method name="public volatile Object negate()">1</method>
			<method name="public void _init_(String val)">0</method>
			<method name="public int hashCode()">1</method>
			<method name="public volatile Object multiply(int x0)">1</method>
			<method name="public volatile Object add(Object x0)">1</method>
			<method name="public void _init_(java.math.BigDecimal val)">0</method>
			<method name="public volatile Object subtract(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.interpolation.NevilleInterpolator</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>4</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>3</npm>
		<lcom3>1.5</lcom3>
		<loc>18</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.666666666666667</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm interpolate(double[] x, double[] y)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public volatile org.apache.commons.math3.analysis.UnivariateFunction interpolate(double[] x0, double[] x1)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>18</cbo>
		<rfc>3</rfc>
		<lcom>3</lcom>
		<ca>17</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>3</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)">1</method>
			<method name="public abstract org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)">1</method>
			<method name="public abstract void visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.BaseMultivariateMultiStartOptimizer</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>3</noc>
		<cbo>16</cbo>
		<rfc>19</rfc>
		<lcom>5</lcom>
		<ca>4</ca>
		<ce>13</ce>
		<npm>5</npm>
		<lcom3>0.7777777777777777</lcom3>
		<loc>149</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.30612244897959184</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.428571428571427</amc>
		<cc>
			<method name="public int getMaxEvaluations()">1</method>
			<method name="public org.apache.commons.math3.optimization.PointValuePair optimize(int maxEval, org.apache.commons.math3.analysis.MultivariateFunction f, org.apache.commons.math3.optimization.GoalType goal, double[] startPoint)">4</method>
			<method name="public int getEvaluations()">1</method>
			<method name="protected void _init_(org.apache.commons.math3.optimization.BaseMultivariateOptimizer optimizer, int starts, org.apache.commons.math3.random.RandomVectorGenerator generator)">0</method>
			<method name="public org.apache.commons.math3.optimization.ConvergenceChecker getConvergenceChecker()">1</method>
			<method name="private void sortPairs(org.apache.commons.math3.optimization.GoalType goal)">1</method>
			<method name="public org.apache.commons.math3.optimization.PointValuePair[] getOptima()">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.rank.Min</name>
		<wmc>11</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>15</rfc>
		<lcom>27</lcom>
		<ca>4</ca>
		<ce>6</ce>
		<npm>11</npm>
		<lcom3>0.5</lcom3>
		<loc>133</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2727272727272727</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.818181818181818</amc>
		<cc>
			<method name="public long getN()">1</method>
			<method name="public void clear()">1</method>
			<method name="public static void copy(org.apache.commons.math3.stat.descriptive.rank.Min source, org.apache.commons.math3.stat.descriptive.rank.Min dest)">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic copy()">1</method>
			<method name="public double getResult()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double evaluate(double[] values, int begin, int length)">1</method>
			<method name="public org.apache.commons.math3.stat.descriptive.rank.Min copy()">1</method>
			<method name="public void _init_(org.apache.commons.math3.stat.descriptive.rank.Min original)">0</method>
			<method name="public void increment(double d)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.interpolation.MultivariateInterpolator</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.analysis.MultivariateFunction interpolate(double[][], double[])">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder</name>
		<wmc>13</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>18</rfc>
		<lcom>64</lcom>
		<ca>3</ca>
		<ce>9</ce>
		<npm>13</npm>
		<lcom3>0.8690476190476191</lcom3>
		<loc>101</loc>
		<dam>1.0</dam>
		<moa>5</moa>
		<mfa>0.0</mfa>
		<cam>0.21367521367521367</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.230769230769231</amc>
		<cc>
			<method name="public org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder start(double[] newStart)">1</method>
			<method name="public org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder model(org.apache.commons.math3.analysis.MultivariateVectorFunction value, org.apache.commons.math3.analysis.MultivariateMatrixFunction jacobian)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder target(org.apache.commons.math3.linear.RealVector newTarget)">1</method>
			<method name="public org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder maxIterations(int newMaxIterations)">1</method>
			<method name="public org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder target(double[] newTarget)">1</method>
			<method name="public org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder weight(org.apache.commons.math3.linear.RealMatrix newWeight)">1</method>
			<method name="public org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder checkerPair(org.apache.commons.math3.optim.ConvergenceChecker newChecker)">1</method>
			<method name="public org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem build()">1</method>
			<method name="public org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder checker(org.apache.commons.math3.optim.ConvergenceChecker newChecker)">1</method>
			<method name="public org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder start(org.apache.commons.math3.linear.RealVector newStart)">1</method>
			<method name="public org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder model(org.apache.commons.math3.fitting.leastsquares.MultivariateJacobianFunction newModel)">1</method>
			<method name="public org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder maxEvaluations(int newMaxEvaluations)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.OpenMapRealVector</name>
		<wmc>58</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>84</rfc>
		<lcom>855</lcom>
		<ca>2</ca>
		<ce>12</ce>
		<npm>53</npm>
		<lcom3>0.5333333333333333</lcom3>
		<loc>1256</loc>
		<dam>0.8</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.23275862068965517</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.56896551724138</amc>
		<cc>
			<method name="public void _init_(int dimension, double epsilon)">0</method>
			<method name="public volatile org.apache.commons.math3.linear.RealVector mapAdd(double x0)">1</method>
			<method name="public void _init_(Double[] values, double epsilon)">0</method>
			<method name="public volatile org.apache.commons.math3.linear.RealVector getSubVector(int x0, int x1)">1</method>
			<method name="public void _init_(int dimension)">0</method>
			<method name="public volatile org.apache.commons.math3.linear.RealVector mapAddToSelf(double x0)">1</method>
			<method name="public void _init_(double[] values)">0</method>
			<method name="public boolean isInfinite()">3</method>
			<method name="public double getL1Distance(org.apache.commons.math3.linear.OpenMapRealVector v)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector add(org.apache.commons.math3.linear.RealVector v)">1</method>
			<method name="protected void _init_(org.apache.commons.math3.linear.OpenMapRealVector v, int resize)">0</method>
			<method name="public double getL1Distance(org.apache.commons.math3.linear.RealVector v)">1</method>
			<method name="public org.apache.commons.math3.linear.OpenMapRealVector subtract(org.apache.commons.math3.linear.OpenMapRealVector v)">1</method>
			<method name="static org.apache.commons.math3.util.OpenIntToDoubleHashMap access$000(org.apache.commons.math3.linear.OpenMapRealVector x0)">1</method>
			<method name="public volatile org.apache.commons.math3.linear.RealVector append(double x0)">1</method>
			<method name="public void _init_(double[] values, double epsilon)">0</method>
			<method name="public boolean isNaN()">3</method>
			<method name="public org.apache.commons.math3.linear.OpenMapRealVector append(double d)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double getSparsity()">1</method>
			<method name="protected boolean isDefaultValue(double value)">2</method>
			<method name="public double getDistance(org.apache.commons.math3.linear.RealVector v)">1</method>
			<method name="public void _init_(org.apache.commons.math3.linear.OpenMapRealVector v)">0</method>
			<method name="public org.apache.commons.math3.linear.OpenMapRealVector mapAddToSelf(double d)">2</method>
			<method name="public org.apache.commons.math3.linear.RealVector subtract(org.apache.commons.math3.linear.RealVector v)">1</method>
			<method name="public java.util.Iterator sparseIterator()">1</method>
			<method name="public org.apache.commons.math3.linear.OpenMapRealVector append(org.apache.commons.math3.linear.OpenMapRealVector v)">2</method>
			<method name="public volatile org.apache.commons.math3.linear.RealVector ebeDivide(org.apache.commons.math3.linear.RealVector x0)">1</method>
			<method name="private org.apache.commons.math3.util.OpenIntToDoubleHashMap getEntries()">1</method>
			<method name="public org.apache.commons.math3.linear.OpenMapRealVector mapAdd(double d)">1</method>
			<method name="public org.apache.commons.math3.linear.OpenMapRealVector copy()">1</method>
			<method name="public void setSubVector(int index, org.apache.commons.math3.linear.RealVector v)">1</method>
			<method name="public double dotProduct(org.apache.commons.math3.linear.OpenMapRealVector v)">1</method>
			<method name="public int getDimension()">1</method>
			<method name="public double getLInfDistance(org.apache.commons.math3.linear.RealVector v)">1</method>
			<method name="public void _init_(int dimension, int expectedSize)">0</method>
			<method name="public void _init_(Double[] values)">0</method>
			<method name="public volatile org.apache.commons.math3.linear.RealVector copy()">1</method>
			<method name="private double getLInfDistance(org.apache.commons.math3.linear.OpenMapRealVector v)">1</method>
			<method name="public boolean equals(Object obj)">7</method>
			<method name="public void set(double value)">2</method>
			<method name="public volatile org.apache.commons.math3.linear.RealVector unitVector()">1</method>
			<method name="public org.apache.commons.math3.linear.OpenMapRealVector ebeDivide(org.apache.commons.math3.linear.RealVector v)">1</method>
			<method name="public volatile org.apache.commons.math3.linear.RealVector ebeMultiply(org.apache.commons.math3.linear.RealVector x0)">1</method>
			<method name="public org.apache.commons.math3.linear.OpenMapRealVector getSubVector(int index, int n)">1</method>
			<method name="public volatile org.apache.commons.math3.linear.RealVector append(org.apache.commons.math3.linear.RealVector x0)">1</method>
			<method name="public org.apache.commons.math3.linear.OpenMapRealVector add(org.apache.commons.math3.linear.OpenMapRealVector v)">1</method>
			<method name="public double getDistance(org.apache.commons.math3.linear.OpenMapRealVector v)">1</method>
			<method name="public org.apache.commons.math3.linear.OpenMapRealVector append(org.apache.commons.math3.linear.RealVector v)">3</method>
			<method name="public void unitize()">1</method>
			<method name="public double[] toArray()">2</method>
			<method name="public org.apache.commons.math3.linear.OpenMapRealVector unitVector()">1</method>
			<method name="public int hashCode()">2</method>
			<method name="public double getEntry(int index)">1</method>
			<method name="public org.apache.commons.math3.linear.OpenMapRealVector ebeMultiply(org.apache.commons.math3.linear.RealVector v)">1</method>
			<method name="public void _init_(int dimension, int expectedSize, double epsilon)">0</method>
			<method name="public void _init_(org.apache.commons.math3.linear.RealVector v)">0</method>
			<method name="public void setEntry(int index, double value)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.clustering.DoublePoint</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>10</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>6</npm>
		<lcom3>0.6</lcom3>
		<loc>61</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>8.833333333333334</amc>
		<cc>
			<method name="public int hashCode()">1</method>
			<method name="public void _init_(int[] point)">0</method>
			<method name="public String toString()">1</method>
			<method name="public boolean equals(Object other)">2</method>
			<method name="public void _init_(double[] point)">0</method>
			<method name="public double[] getPoint()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$ValuePenaltyPair</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>0.5</lcom3>
		<loc>20</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4444444444444444</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="static double access$100(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$ValuePenaltyPair x0)">1</method>
			<method name="static double access$000(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$ValuePenaltyPair x0)">1</method>
			<method name="public void _init_(double value, double penalty)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.PointValuePair$DataTransferObject</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.6666666666666667</lcom3>
		<loc>25</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.0</amc>
		<cc>
			<method name="public void _init_(double[] point, double value)">0</method>
			<method name="private Object readResolve()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.DifferentiableUnivariateVectorFunction</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.analysis.UnivariateVectorFunction derivative()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.MultidimensionalCounter</name>
		<wmc>13</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>23</rfc>
		<lcom>22</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>9</npm>
		<lcom3>0.6833333333333332</lcom3>
		<loc>292</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3076923076923077</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.076923076923077</amc>
		<cc>
			<method name="public int[] getCounts(int index)">1</method>
			<method name="public transient void _init_(int[] size)">0</method>
			<method name="public int getSize()">1</method>
			<method name="static int[] access$300(org.apache.commons.math3.util.MultidimensionalCounter x0)">1</method>
			<method name="public org.apache.commons.math3.util.MultidimensionalCounter$Iterator iterator()">1</method>
			<method name="public int getDimension()">1</method>
			<method name="public transient int getCount(int[] c)">1</method>
			<method name="static int access$100(org.apache.commons.math3.util.MultidimensionalCounter x0)">1</method>
			<method name="static int access$200(org.apache.commons.math3.util.MultidimensionalCounter x0)">1</method>
			<method name="public int[] getSizes()">1</method>
			<method name="public String toString()">2</method>
			<method name="static int access$000(org.apache.commons.math3.util.MultidimensionalCounter x0)">1</method>
			<method name="public volatile java.util.Iterator iterator()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHullGenerator2D</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D generate(java.util.Collection)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.PointVectorValuePair</name>
		<wmc>8</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>12</rfc>
		<lcom>28</lcom>
		<ca>11</ca>
		<ce>3</ce>
		<npm>7</npm>
		<lcom3>1.1428571428571428</lcom3>
		<loc>84</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4583333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.375</amc>
		<cc>
			<method name="public double[] getValue()">2</method>
			<method name="private Object writeReplace()">1</method>
			<method name="public double[] getValueRef()">1</method>
			<method name="public volatile Object getValue()">1</method>
			<method name="public double[] getPointRef()">1</method>
			<method name="public void _init_(double[] point, double[] value)">0</method>
			<method name="public double[] getPoint()">2</method>
			<method name="public void _init_(double[] point, double[] value, boolean copyArray)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.events.EventState</name>
		<wmc>15</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>18</cbo>
		<rfc>44</rfc>
		<lcom>27</lcom>
		<ca>3</ca>
		<ce>16</ce>
		<npm>12</npm>
		<lcom3>0.7761904761904762</lcom3>
		<loc>615</loc>
		<dam>1.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.2074074074074074</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>39.0</amc>
		<cc>
			<method name="public double getMaxCheckInterval()">1</method>
			<method name="public boolean stop()">2</method>
			<method name="public boolean evaluateStep(org.apache.commons.math3.ode.sampling.StepInterpolator interpolator)">1</method>
			<method name="static double[] access$000(org.apache.commons.math3.ode.events.EventState x0, org.apache.commons.math3.ode.sampling.StepInterpolator x1)">1</method>
			<method name="public double getConvergence()">1</method>
			<method name="public boolean reset(double t, double[] y)">6</method>
			<method name="public void reinitializeBegin(org.apache.commons.math3.ode.sampling.StepInterpolator interpolator)">1</method>
			<method name="public void stepAccepted(double t, double[] y)">5</method>
			<method name="public void _init_(org.apache.commons.math3.ode.events.EventHandler handler, double maxCheckInterval, double convergence, int maxIterationCount, org.apache.commons.math3.analysis.solvers.UnivariateSolver solver)">0</method>
			<method name="public double getEventTime()">3</method>
			<method name="private double[] getCompleteState(org.apache.commons.math3.ode.sampling.StepInterpolator interpolator)">2</method>
			<method name="static org.apache.commons.math3.ode.events.EventHandler access$100(org.apache.commons.math3.ode.events.EventState x0)">1</method>
			<method name="public void setExpandable(org.apache.commons.math3.ode.ExpandableStatefulODE expandable)">1</method>
			<method name="public int getMaxIterationCount()">1</method>
			<method name="public org.apache.commons.math3.ode.events.EventHandler getEventHandler()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.IntegerDistribution</name>
		<wmc>12</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>12</rfc>
		<lcom>66</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>12</npm>
		<lcom3>2.0</lcom3>
		<loc>12</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract int[] sample(int)">1</method>
			<method name="public abstract double getNumericalVariance()">1</method>
			<method name="public abstract double probability(int)">1</method>
			<method name="public abstract double cumulativeProbability(int)">1</method>
			<method name="public abstract void reseedRandomGenerator(long)">1</method>
			<method name="public abstract int getSupportUpperBound()">1</method>
			<method name="public abstract boolean isSupportConnected()">1</method>
			<method name="public abstract int inverseCumulativeProbability(double)">1</method>
			<method name="public abstract double getNumericalMean()">1</method>
			<method name="public abstract double cumulativeProbability(int, int)">1</method>
			<method name="public abstract int getSupportLowerBound()">1</method>
			<method name="public abstract int sample()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer</name>
		<wmc>12</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>10</cbo>
		<rfc>23</rfc>
		<lcom>36</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>9</npm>
		<lcom3>0.7922077922077922</lcom3>
		<loc>121</loc>
		<dam>1.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.3055555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.5</amc>
		<cc>
			<method name="public org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair optimize(int maxEval, org.apache.commons.math3.analysis.UnivariateFunction f, org.apache.commons.math3.optimization.GoalType goalType, double min, double max)">1</method>
			<method name="public int getMaxEvaluations()">1</method>
			<method name="public double getMax()">1</method>
			<method name="public double getMin()">1</method>
			<method name="protected abstract org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair doOptimize()">1</method>
			<method name="public org.apache.commons.math3.optimization.GoalType getGoalType()">1</method>
			<method name="public int getEvaluations()">1</method>
			<method name="public double getStartValue()">1</method>
			<method name="protected void _init_(org.apache.commons.math3.optimization.ConvergenceChecker checker)">0</method>
			<method name="public org.apache.commons.math3.optimization.ConvergenceChecker getConvergenceChecker()">1</method>
			<method name="public org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair optimize(int maxEval, org.apache.commons.math3.analysis.UnivariateFunction f, org.apache.commons.math3.optimization.GoalType goalType, double min, double max, double startValue)">3</method>
			<method name="protected double computeObjectiveValue(double point)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.neuralnet.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.TooManyIterationsException</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>7</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>12</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.0</amc>
		<cc>
			<method name="public void _init_(Number max)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.interval.AgrestiCoullInterval</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>9</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>69</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>33.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public org.apache.commons.math3.stat.interval.ConfidenceInterval createInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.complex.Complex</name>
		<wmc>57</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>21</cbo>
		<rfc>82</rfc>
		<lcom>176</lcom>
		<ca>11</ca>
		<ce>11</ce>
		<npm>54</npm>
		<lcom3>0.5964285714285714</lcom3>
		<loc>1319</loc>
		<dam>0.5</dam>
		<moa>5</moa>
		<mfa>0.0</mfa>
		<cam>0.2857142857142857</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>21.964912280701753</amc>
		<cc>
			<method name="public static boolean equals(org.apache.commons.math3.complex.Complex x, org.apache.commons.math3.complex.Complex y, double eps)">3</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static boolean equals(org.apache.commons.math3.complex.Complex x, org.apache.commons.math3.complex.Complex y)">1</method>
			<method name="public org.apache.commons.math3.complex.Complex tanh()">5</method>
			<method name="public volatile Object multiply(Object x0)">1</method>
			<method name="public void _init_(double real)">0</method>
			<method name="public java.util.List nthRoot(int n)">1</method>
			<method name="public boolean isInfinite()">1</method>
			<method name="public org.apache.commons.math3.complex.Complex tan()">5</method>
			<method name="public org.apache.commons.math3.complex.Complex pow(org.apache.commons.math3.complex.Complex x)">1</method>
			<method name="public double getArgument()">1</method>
			<method name="protected final Object readResolve()">1</method>
			<method name="public org.apache.commons.math3.complex.Complex sqrt1z()">1</method>
			<method name="public org.apache.commons.math3.complex.ComplexField getField()">1</method>
			<method name="public org.apache.commons.math3.complex.Complex subtract(double subtrahend)">3</method>
			<method name="public boolean isNaN()">1</method>
			<method name="public org.apache.commons.math3.complex.Complex multiply(org.apache.commons.math3.complex.Complex factor)">1</method>
			<method name="public org.apache.commons.math3.complex.Complex sinh()">2</method>
			<method name="public org.apache.commons.math3.complex.Complex add(org.apache.commons.math3.complex.Complex addend)">1</method>
			<method name="public org.apache.commons.math3.complex.Complex subtract(org.apache.commons.math3.complex.Complex subtrahend)">1</method>
			<method name="public org.apache.commons.math3.complex.Complex conjugate()">2</method>
			<method name="public volatile Object negate()">1</method>
			<method name="public volatile org.apache.commons.math3.Field getField()">1</method>
			<method name="public org.apache.commons.math3.complex.Complex divide(double divisor)">6</method>
			<method name="public org.apache.commons.math3.complex.Complex pow(double x)">1</method>
			<method name="public void _init_(double real, double imaginary)">0</method>
			<method name="public volatile Object add(Object x0)">1</method>
			<method name="public volatile Object subtract(Object x0)">1</method>
			<method name="public org.apache.commons.math3.complex.Complex multiply(double factor)">6</method>
			<method name="public double abs()">6</method>
			<method name="public static org.apache.commons.math3.complex.Complex valueOf(double realPart, double imaginaryPart)">3</method>
			<method name="public org.apache.commons.math3.complex.Complex add(double addend)">3</method>
			<method name="public org.apache.commons.math3.complex.Complex multiply(int factor)">4</method>
			<method name="public volatile Object divide(Object x0)">1</method>
			<method name="public static boolean equalsWithRelativeTolerance(org.apache.commons.math3.complex.Complex x, org.apache.commons.math3.complex.Complex y, double eps)">3</method>
			<method name="public volatile Object reciprocal()">1</method>
			<method name="public org.apache.commons.math3.complex.Complex divide(org.apache.commons.math3.complex.Complex divisor)">1</method>
			<method name="public static org.apache.commons.math3.complex.Complex valueOf(double realPart)">2</method>
			<method name="public org.apache.commons.math3.complex.Complex acos()">2</method>
			<method name="public String toString()">1</method>
			<method name="public double getImaginary()">1</method>
			<method name="public org.apache.commons.math3.complex.Complex sin()">2</method>
			<method name="protected org.apache.commons.math3.complex.Complex createComplex(double realPart, double imaginaryPart)">1</method>
			<method name="public static boolean equals(org.apache.commons.math3.complex.Complex x, org.apache.commons.math3.complex.Complex y, int maxUlps)">3</method>
			<method name="public org.apache.commons.math3.complex.Complex negate()">2</method>
			<method name="public org.apache.commons.math3.complex.Complex cosh()">2</method>
			<method name="public boolean equals(Object other)">6</method>
			<method name="public org.apache.commons.math3.complex.Complex asin()">2</method>
			<method name="public double getReal()">1</method>
			<method name="public org.apache.commons.math3.complex.Complex reciprocal()">6</method>
			<method name="public org.apache.commons.math3.complex.Complex sqrt()">5</method>
			<method name="public org.apache.commons.math3.complex.Complex exp()">2</method>
			<method name="public org.apache.commons.math3.complex.Complex log()">2</method>
			<method name="public int hashCode()">2</method>
			<method name="public org.apache.commons.math3.complex.Complex atan()">2</method>
			<method name="public volatile Object multiply(int x0)">1</method>
			<method name="public org.apache.commons.math3.complex.Complex cos()">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.AbstractRealMatrix$1</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>52</loc>
		<dam>0.75</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.0</amc>
		<cc>
			<method name="public double end()">1</method>
			<method name="public void visit(int row, int column, double value)">2</method>
			<method name="void _init_(org.apache.commons.math3.linear.AbstractRealMatrix)">0</method>
			<method name="public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.AbstractRealMatrix$2</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>29</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.75</amc>
		<cc>
			<method name="public double end()">1</method>
			<method name="public void visit(int row, int column, double value)">1</method>
			<method name="void _init_(org.apache.commons.math3.linear.AbstractRealMatrix)">0</method>
			<method name="public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.clustering.MultiKMeansPlusPlusClusterer</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>12</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>7</ce>
		<npm>6</npm>
		<lcom3>0.4</lcom3>
		<loc>76</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.166666666666666</amc>
		<cc>
			<method name="public java.util.List cluster(java.util.Collection points)">1</method>
			<method name="public org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator getClusterEvaluator()">1</method>
			<method name="public org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer getClusterer()">1</method>
			<method name="public void _init_(org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer clusterer, int numTrials, org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator evaluator)">0</method>
			<method name="public int getNumTrials()">1</method>
			<method name="public void _init_(org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer clusterer, int numTrials)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.AbstractRealMatrix$3</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>29</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="void _init_(org.apache.commons.math3.linear.AbstractRealMatrix, int[], int[])">0</method>
			<method name="public double visit(int row, int column, double value)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.AbstractRealMatrix$4</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.625</lcom3>
		<loc>37</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.0</amc>
		<cc>
			<method name="public void visit(int row, int column, double value)">1</method>
			<method name="public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="void _init_(org.apache.commons.math3.linear.AbstractRealMatrix, double[][])">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.AbstractRealMatrix$5</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.5</lcom3>
		<loc>20</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.0</amc>
		<cc>
			<method name="public void visit(int row, int column, double value)">1</method>
			<method name="void _init_(org.apache.commons.math3.linear.AbstractRealMatrix, org.apache.commons.math3.linear.RealMatrix)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.ParetoDistribution</name>
		<wmc>20</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>28</rfc>
		<lcom>102</lcom>
		<ca>0</ca>
		<ce>8</ce>
		<npm>19</npm>
		<lcom3>0.7894736842105263</lcom3>
		<loc>240</loc>
		<dam>0.8</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.75</amc>
		<cc>
			<method name="protected double getSolverAbsoluteAccuracy()">1</method>
			<method name="public double getScale()">1</method>
			<method name="public double density(double x)">2</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean isSupportConnected()">1</method>
			<method name="public boolean isSupportUpperBoundInclusive()">1</method>
			<method name="public double cumulativeProbability(double x)">2</method>
			<method name="public boolean isSupportLowerBoundInclusive()">1</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, double scale, double shape)">0</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, double scale, double shape, double inverseCumAccuracy)">0</method>
			<method name="public double getShape()">1</method>
			<method name="public double getSupportLowerBound()">1</method>
			<method name="public void _init_(double scale, double shape, double inverseCumAccuracy)">0</method>
			<method name="public double sample()">1</method>
			<method name="public double cumulativeProbability(double x0, double x1)">1</method>
			<method name="public double getNumericalVariance()">2</method>
			<method name="public double getNumericalMean()">2</method>
			<method name="public double getSupportUpperBound()">1</method>
			<method name="public void _init_(double scale, double shape)">0</method>
			<method name="public double logDensity(double x)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils</name>
		<wmc>13</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>19</cbo>
		<rfc>32</rfc>
		<lcom>78</lcom>
		<ca>7</ca>
		<ce>12</ce>
		<npm>12</npm>
		<lcom3>2.0</lcom3>
		<loc>500</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>37.46153846153846</amc>
		<cc>
			<method name="public static double midpoint(double a, double b)">1</method>
			<method name="public static double solve(org.apache.commons.math3.analysis.UnivariateFunction function, double x0, double x1, double absoluteAccuracy)">1</method>
			<method name="private void _init_()">0</method>
			<method name="public static double[] bracket(org.apache.commons.math3.analysis.UnivariateFunction function, double initial, double lowerBound, double upperBound)">1</method>
			<method name="public static void verifyBracketing(org.apache.commons.math3.analysis.UnivariateFunction function, double lower, double upper)">1</method>
			<method name="public static double[] bracket(org.apache.commons.math3.analysis.UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations)">1</method>
			<method name="public static double solve(org.apache.commons.math3.analysis.UnivariateFunction function, double x0, double x1)">1</method>
			<method name="public static boolean isSequence(double start, double mid, double end)">3</method>
			<method name="public static boolean isBracketing(org.apache.commons.math3.analysis.UnivariateFunction function, double lower, double upper)">1</method>
			<method name="public static double[] bracket(org.apache.commons.math3.analysis.UnivariateFunction function, double initial, double lowerBound, double upperBound, double q, double r, int maximumIterations)">1</method>
			<method name="public static double forceSide(int maxEval, org.apache.commons.math3.analysis.UnivariateFunction f, org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver bracketing, double baseRoot, double min, double max, org.apache.commons.math3.analysis.solvers.AllowedSolution allowedSolution)">1</method>
			<method name="public static void verifySequence(double lower, double initial, double upper)">1</method>
			<method name="public static void verifyInterval(double lower, double upper)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Ceil</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public double value(double x)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormat</name>
		<wmc>11</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>23</rfc>
		<lcom>55</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>11</npm>
		<lcom3>2.0</lcom3>
		<loc>128</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.26136363636363635</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.636363636363637</amc>
		<cc>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D parse(String source)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D parse(String source, java.text.ParsePosition pos)">2</method>
			<method name="public static org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormat getInstance()">1</method>
			<method name="public void _init_(String prefix, String suffix, String separator, java.text.NumberFormat format)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public static org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormat getInstance(java.util.Locale locale)">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.Vector parse(String x0)">1</method>
			<method name="public void _init_(java.text.NumberFormat format)">0</method>
			<method name="public StringBuffer format(org.apache.commons.math3.geometry.Vector vector, StringBuffer toAppendTo, java.text.FieldPosition pos)">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.Vector parse(String x0, java.text.ParsePosition x1)">1</method>
			<method name="public void _init_(String prefix, String suffix, String separator)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.FieldLUDecomposition$Solver</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>28</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>11</ce>
		<npm>5</npm>
		<lcom3>0.125</lcom3>
		<loc>546</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.30158730158730157</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>76.42857142857143</amc>
		<cc>
			<method name="public org.apache.commons.math3.linear.FieldMatrix getInverse()">2</method>
			<method name="public org.apache.commons.math3.linear.ArrayFieldVector solve(org.apache.commons.math3.linear.ArrayFieldVector b)">8</method>
			<method name="void _init_(org.apache.commons.math3.Field x0, org.apache.commons.math3.FieldElement[][] x1, int[] x2, boolean x3, org.apache.commons.math3.linear.FieldLUDecomposition$1 x4)">0</method>
			<method name="private void _init_(org.apache.commons.math3.Field field, org.apache.commons.math3.FieldElement[][] lu, int[] pivot, boolean singular)">0</method>
			<method name="public org.apache.commons.math3.linear.FieldVector solve(org.apache.commons.math3.linear.FieldVector b)">8</method>
			<method name="public org.apache.commons.math3.linear.FieldMatrix solve(org.apache.commons.math3.linear.FieldMatrix b)">12</method>
			<method name="public boolean isNonSingular()">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>313</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>77.0</amc>
		<cc>
			<method name="protected org.apache.commons.math3.ode.sampling.StepInterpolator doCopy()">1</method>
			<method name="protected void computeInterpolatedStateAndDerivatives(double theta, double oneMinusThetaH)">4</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolator interpolator)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.NotANumberException</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>8</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>10</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.threed.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.integration.gauss.LegendreRuleFactory</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>9</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>323</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>160.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="protected org.apache.commons.math3.util.Pair computeRule(int numberOfPoints)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.SchurTransformer</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>29</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>11</ce>
		<npm>4</npm>
		<lcom3>0.7142857142857143</lcom3>
		<loc>1394</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.35</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>137.7</amc>
		<cc>
			<method name="private int findSmallSubDiagonalElement(int startIdx, double norm)">4</method>
			<method name="public void _init_(org.apache.commons.math3.linear.RealMatrix matrix)">0</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getT()">2</method>
			<method name="private void performDoubleQRStep(int il, int im, int iu, org.apache.commons.math3.linear.SchurTransformer$ShiftInfo shift, double[] hVec)">18</method>
			<method name="private double getNorm()">3</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getP()">2</method>
			<method name="private int initQRStep(int il, int iu, org.apache.commons.math3.linear.SchurTransformer$ShiftInfo shift, double[] hVec)">4</method>
			<method name="private void transform()">10</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getPT()">2</method>
			<method name="private void computeShift(int l, int idx, int iteration, org.apache.commons.math3.linear.SchurTransformer$ShiftInfo shift)">8</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.events.EventFilter</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>16</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>4</ce>
		<npm>5</npm>
		<lcom3>0.6071428571428571</lcom3>
		<loc>273</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.5333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>52.2</amc>
		<cc>
			<method name="public org.apache.commons.math3.ode.events.EventHandler$Action eventOccurred(double t, double[] y, boolean increasing)">1</method>
			<method name="public void resetState(double t, double[] y)">1</method>
			<method name="public void _init_(org.apache.commons.math3.ode.events.EventHandler rawHandler, org.apache.commons.math3.ode.events.FilterType filter)">0</method>
			<method name="public double g(double t, double[] y)">10</method>
			<method name="public void init(double t0, double[] y0, double t)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D$LazyHolder</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>0.5</lcom3>
		<loc>15</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.6666666666666665</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="static org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D access$000()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.AbstractRegion</name>
		<wmc>34</wmc>
		<dit>1</dit>
		<noc>5</noc>
		<cbo>27</cbo>
		<rfc>86</rfc>
		<lcom>425</lcom>
		<ca>7</ca>
		<ce>22</ce>
		<npm>21</npm>
		<lcom3>0.803030303030303</lcom3>
		<loc>824</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.15610859728506787</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>23.11764705882353</amc>
		<cc>
			<method name="protected void setBarycenter(org.apache.commons.math3.geometry.Vector barycenter)">1</method>
			<method name="private void insertCuts(org.apache.commons.math3.geometry.partitioning.BSPTree node, java.util.Collection boundary)">6</method>
			<method name="public boolean isFull()">1</method>
			<method name="private void recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree node, org.apache.commons.math3.geometry.partitioning.SubHyperplane sub, org.apache.commons.math3.geometry.partitioning.AbstractRegion$Sides sides)">25</method>
			<method name="protected void _init_(java.util.Collection boundary, double tolerance)">0</method>
			<method name="public double getBoundarySize()">1</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.Side side(org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane)">4</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.partitioning.Hyperplane[] hyperplanes, double tolerance)">0</method>
			<method name="protected abstract void computeGeometricalProperties()">1</method>
			<method name="public double getSize()">2</method>
			<method name="public volatile org.apache.commons.math3.geometry.partitioning.Region copySelf()">1</method>
			<method name="protected void _init_(double tolerance)">0</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean includeBoundaryAttributes)">4</method>
			<method name="protected void setSize(double size)">1</method>
			<method name="public boolean contains(org.apache.commons.math3.geometry.partitioning.Region region)">1</method>
			<method name="public org.apache.commons.math3.geometry.Point getBarycenter()">2</method>
			<method name="private org.apache.commons.math3.geometry.partitioning.BSPTree recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree node, org.apache.commons.math3.geometry.partitioning.Transform transform)">5</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.Vector point)">1</method>
			<method name="protected void setBarycenter(org.apache.commons.math3.geometry.Point barycenter)">1</method>
			<method name="public boolean isEmpty()">1</method>
			<method name="public boolean isFull(org.apache.commons.math3.geometry.partitioning.BSPTree node)">4</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.BoundaryProjection projectToBoundary(org.apache.commons.math3.geometry.Point point)">1</method>
			<method name="private org.apache.commons.math3.geometry.partitioning.SubHyperplane recurseIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree node, org.apache.commons.math3.geometry.partitioning.SubHyperplane sub)">6</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.AbstractRegion copySelf()">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.partitioning.Region buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree x0)">1</method>
			<method name="public boolean isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree node)">5</method>
			<method name="protected void _init_(org.apache.commons.math3.geometry.partitioning.BSPTree tree, double tolerance)">0</method>
			<method name="public double getTolerance()">1</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.SubHyperplane intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane sub)">1</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.Point point)">1</method>
			<method name="protected org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree node, org.apache.commons.math3.geometry.Point point)">4</method>
			<method name="public abstract org.apache.commons.math3.geometry.partitioning.AbstractRegion buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)">1</method>
			<method name="protected org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.partitioning.BSPTree node, org.apache.commons.math3.geometry.Vector point)">1</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.AbstractRegion applyTransform(org.apache.commons.math3.geometry.partitioning.Transform transform)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Log1p</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>9</rfc>
		<lcom>6</lcom>
		<ca>0</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>17</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.25</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double value(double x)">1</method>
			<method name="public org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>21</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.MathUnsupportedOperationException</name>
		<wmc>5</wmc>
		<dit>5</dit>
		<noc>2</noc>
		<cbo>27</cbo>
		<rfc>10</rfc>
		<lcom>0</lcom>
		<ca>23</ca>
		<ce>4</ce>
		<npm>5</npm>
		<lcom3>0.625</lcom3>
		<loc>38</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.875</mfa>
		<cam>0.4666666666666667</cam>
		<ic>1</ic>
		<cbm>2</cbm>
		<amc>6.2</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public String getMessage()">1</method>
			<method name="public String getLocalizedMessage()">1</method>
			<method name="public org.apache.commons.math3.exception.util.ExceptionContext getContext()">1</method>
			<method name="public transient void _init_(org.apache.commons.math3.exception.util.Localizable pattern, Object[] args)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.integration.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.util.ArgUtils</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>61</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>29.5</amc>
		<cc>
			<method name="public static Object[] flatten(Object[] array)">4</method>
			<method name="private void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$Mapper</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>5</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double boundedToUnbounded(double)">1</method>
			<method name="public abstract double unboundedToBounded(double)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.JacobianMatrices</name>
		<wmc>19</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>39</rfc>
		<lcom>83</lcom>
		<ca>1</ca>
		<ce>13</ce>
		<npm>10</npm>
		<lcom3>0.7611111111111111</lcom3>
		<loc>457</loc>
		<dam>1.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.13333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.526315789473685</amc>
		<cc>
			<method name="static org.apache.commons.math3.ode.ParameterizedODE access$600(org.apache.commons.math3.ode.JacobianMatrices x0)">1</method>
			<method name="static int access$200(org.apache.commons.math3.ode.JacobianMatrices x0)">1</method>
			<method name="static boolean access$400(org.apache.commons.math3.ode.JacobianMatrices x0)">1</method>
			<method name="static org.apache.commons.math3.ode.MainStateJacobianProvider access$500(org.apache.commons.math3.ode.JacobianMatrices x0)">1</method>
			<method name="public transient void _init_(org.apache.commons.math3.ode.FirstOrderDifferentialEquations fode, double[] hY, String[] parameters)">0</method>
			<method name="public void getCurrentParameterJacobian(String pName, double[] dYdP)">3</method>
			<method name="public void setInitialMainStateJacobian(double[][] dYdY0)">1</method>
			<method name="public void addParameterJacobianProvider(org.apache.commons.math3.ode.ParameterJacobianProvider provider)">1</method>
			<method name="public void setParameterStep(String parameter, double hP)">1</method>
			<method name="public void setInitialParameterJacobian(String pName, double[] dYdP)">1</method>
			<method name="static java.util.List access$800(org.apache.commons.math3.ode.JacobianMatrices x0)">1</method>
			<method name="private void checkDimension(int expected, Object array)">1</method>
			<method name="public transient void _init_(org.apache.commons.math3.ode.MainStateJacobianProvider jode, String[] parameters)">0</method>
			<method name="static int access$300(org.apache.commons.math3.ode.JacobianMatrices x0)">1</method>
			<method name="public void registerVariationalEquations(org.apache.commons.math3.ode.ExpandableStatefulODE expandable)">1</method>
			<method name="static org.apache.commons.math3.ode.ParameterConfiguration[] access$700(org.apache.commons.math3.ode.JacobianMatrices x0)">1</method>
			<method name="static boolean access$402(org.apache.commons.math3.ode.JacobianMatrices x0, boolean x1)">1</method>
			<method name="public void setParameterizedODE(org.apache.commons.math3.ode.ParameterizedODE parameterizedOde)">1</method>
			<method name="public void getCurrentMainSetJacobian(double[][] dYdY0)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.FieldLUDecomposition$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>11</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>57</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.25</amc>
		<cc>
			<method name="public void _init_(double[] weights, double[][] means, double[][][] covariances)">0</method>
			<method name="private static java.util.List createComponents(double[] weights, double[][] means, double[][][] covariances)">2</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, java.util.List components)">0</method>
			<method name="public void _init_(java.util.List components)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.MultivariateDifferentiableVectorMultiStartOptimizer</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.optimization.MultivariateDifferentiableVectorOptimizer optimizer, int starts, org.apache.commons.math3.random.RandomVectorGenerator generator)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fraction.FractionFormat</name>
		<wmc>16</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>8</cbo>
		<rfc>44</rfc>
		<lcom>120</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>15</npm>
		<lcom3>1.0666666666666667</lcom3>
		<loc>223</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.18055555555555555</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.875</amc>
		<cc>
			<method name="protected static java.text.NumberFormat getDefaultNumberFormat()">1</method>
			<method name="public volatile Number parse(String x0)">1</method>
			<method name="public void _init_(java.text.NumberFormat numeratorFormat, java.text.NumberFormat denominatorFormat)">0</method>
			<method name="public StringBuffer format(org.apache.commons.math3.fraction.Fraction fraction, StringBuffer toAppendTo, java.text.FieldPosition pos)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public static org.apache.commons.math3.fraction.FractionFormat getImproperInstance()">1</method>
			<method name="public volatile Number parse(String x0, java.text.ParsePosition x1)">1</method>
			<method name="public org.apache.commons.math3.fraction.Fraction parse(String source)">1</method>
			<method name="public static org.apache.commons.math3.fraction.FractionFormat getProperInstance()">1</method>
			<method name="public StringBuffer format(Object obj, StringBuffer toAppendTo, java.text.FieldPosition pos)">1</method>
			<method name="public static String formatFraction(org.apache.commons.math3.fraction.Fraction f)">1</method>
			<method name="public static org.apache.commons.math3.fraction.FractionFormat getImproperInstance(java.util.Locale locale)">1</method>
			<method name="public org.apache.commons.math3.fraction.Fraction parse(String source, java.text.ParsePosition pos)">6</method>
			<method name="public void _init_(java.text.NumberFormat format)">0</method>
			<method name="public static org.apache.commons.math3.fraction.FractionFormat getProperInstance(java.util.Locale locale)">1</method>
			<method name="public static java.util.Locale[] getAvailableLocales()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.FirstOrderDifferentialEquations</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>13</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void computeDerivatives(double, double[], double[])">1</method>
			<method name="public abstract int getDimension()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.spherical.oned.ArcsSet$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.spherical.oned.ArcsSet$Split</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>2</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>26</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="void _init_(org.apache.commons.math3.geometry.spherical.oned.ArcsSet x0, org.apache.commons.math3.geometry.spherical.oned.ArcsSet x1, org.apache.commons.math3.geometry.spherical.oned.ArcsSet$1 x2)">0</method>
			<method name="private void _init_(org.apache.commons.math3.geometry.spherical.oned.ArcsSet plus, org.apache.commons.math3.geometry.spherical.oned.ArcsSet minus)">0</method>
			<method name="public org.apache.commons.math3.geometry.spherical.oned.ArcsSet getMinus()">1</method>
			<method name="public org.apache.commons.math3.geometry.spherical.oned.ArcsSet getPlus()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.RandomPivotingStrategy</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>1.0</lcom3>
		<loc>28</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator random)">0</method>
			<method name="public int pivotIndex(double[] work, int begin, int end)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.RegionFactory$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>6</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.genetics.ElitisticListPopulation</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>17</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>10</ce>
		<npm>5</npm>
		<lcom3>0.0</lcom3>
		<loc>93</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.55</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.4</amc>
		<cc>
			<method name="public void setElitismRate(double elitismRate)">1</method>
			<method name="public org.apache.commons.math3.genetics.Population nextGeneration()">2</method>
			<method name="public void _init_(java.util.List chromosomes, int populationLimit, double elitismRate)">0</method>
			<method name="public void _init_(int populationLimit, double elitismRate)">0</method>
			<method name="public double getElitismRate()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.FunctionUtils$12</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>20</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.0</amc>
		<cc>
			<method name="void _init_(org.apache.commons.math3.analysis.BivariateFunction, double)">0</method>
			<method name="public double value(double x)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction$3</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>67</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.5</amc>
		<cc>
			<method name="public double value(double x, double y)">1</method>
			<method name="void _init_(org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction, double[][])">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.FunctionUtils$11</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>50</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.5</amc>
		<cc>
			<method name="void _init_(org.apache.commons.math3.analysis.BivariateFunction, double, org.apache.commons.math3.analysis.UnivariateFunction)">0</method>
			<method name="public double value(double[] point)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction$4</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>67</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.5</amc>
		<cc>
			<method name="public double value(double x, double y)">1</method>
			<method name="void _init_(org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction, double[][])">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression</name>
		<wmc>22</wmc>
		<dit>1</dit>
		<noc>2</noc>
		<cbo>17</cbo>
		<rfc>44</rfc>
		<lcom>159</lcom>
		<ca>2</ca>
		<ce>15</ce>
		<npm>11</npm>
		<lcom3>0.6984126984126985</lcom3>
		<loc>465</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.2727272727272727</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.0</amc>
		<cc>
			<method name="protected double calculateYVariance()">1</method>
			<method name="public double estimateErrorVariance()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double[] estimateRegressionParametersStandardErrors()">2</method>
			<method name="public double[][] estimateRegressionParametersVariance()">1</method>
			<method name="public double estimateRegressionStandardError()">1</method>
			<method name="public boolean isNoIntercept()">1</method>
			<method name="protected void newYSampleData(double[] y)">3</method>
			<method name="protected org.apache.commons.math3.linear.RealMatrix getX()">1</method>
			<method name="public void setNoIntercept(boolean noIntercept)">1</method>
			<method name="public double estimateRegressandVariance()">1</method>
			<method name="public void newSampleData(double[] data, int nobs, int nvars)">9</method>
			<method name="protected org.apache.commons.math3.linear.RealVector getY()">1</method>
			<method name="protected org.apache.commons.math3.linear.RealVector calculateResiduals()">1</method>
			<method name="public double[] estimateRegressionParameters()">1</method>
			<method name="protected double calculateErrorVariance()">1</method>
			<method name="public double[] estimateResiduals()">1</method>
			<method name="protected abstract org.apache.commons.math3.linear.RealMatrix calculateBetaVariance()">1</method>
			<method name="protected void validateCovarianceData(double[][] x, double[][] covariance)">4</method>
			<method name="protected void validateSampleData(double[][] x, double[] y)">1</method>
			<method name="protected abstract org.apache.commons.math3.linear.RealVector calculateBeta()">1</method>
			<method name="protected void newXSampleData(double[][] x)">6</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.FunctionUtils$10</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>29</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="void _init_(org.apache.commons.math3.analysis.BivariateFunction, org.apache.commons.math3.analysis.UnivariateFunction, org.apache.commons.math3.analysis.UnivariateFunction)">0</method>
			<method name="public double value(double x)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>71</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>33.5</amc>
		<cc>
			<method name="public double value(double x, double y)">1</method>
			<method name="void _init_(org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction, double[][])">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.transform.TransformUtils</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>15</rfc>
		<lcom>19</lcom>
		<ca>4</ca>
		<ce>5</ce>
		<npm>5</npm>
		<lcom3>0.8333333333333334</lcom3>
		<loc>300</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2222222222222222</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>41.714285714285715</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public static int exactLog2(int n)">1</method>
			<method name="public static org.apache.commons.math3.complex.Complex[] scaleArray(org.apache.commons.math3.complex.Complex[] f, double d)">2</method>
			<method name="public static org.apache.commons.math3.complex.Complex[] createComplexArray(double[][] dataRI)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static double[][] createRealImaginaryArray(org.apache.commons.math3.complex.Complex[] dataC)">2</method>
			<method name="public static double[] scaleArray(double[] f, double d)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.ranking.RankingAlgorithm</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double[] rank(double[])">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction$2</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>71</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>33.5</amc>
		<cc>
			<method name="public double value(double x, double y)">1</method>
			<method name="void _init_(org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction, double[][])">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple</name>
		<wmc>13</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>21</rfc>
		<lcom>48</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>6</npm>
		<lcom3>0.7727272727272728</lcom3>
		<loc>622</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.24358974358974358</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>46.0</amc>
		<cc>
			<method name="private static long mantissa(long bits)">2</method>
			<method name="private static int computeMSB(long l)">3</method>
			<method name="public double[] getComponents()">1</method>
			<method name="private static int computeLSB(long l)">3</method>
			<method name="public int compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple ot)">15</method>
			<method name="private static long sign(long bits)">1</method>
			<method name="public boolean equals(Object other)">4</method>
			<method name="private void encode(int minOffset)">8</method>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="private static int exponent(long bits)">1</method>
			<method name="public int hashCode()">4</method>
			<method name="public transient void _init_(double[] components)">0</method>
			<method name="private int getBit(int i, int k)">8</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>6</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>27</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.875</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.75</amc>
		<cc>
			<method name="public void _init_(double absoluteAccuracy)">0</method>
			<method name="public void _init_(double relativeAccuracy, double absoluteAccuracy, double functionValueAccuracy)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(double relativeAccuracy, double absoluteAccuracy)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.linear.LinearConstraint</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>24</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>9</npm>
		<lcom3>0.55</lcom3>
		<loc>162</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.29545454545454547</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>13.363636363636363</amc>
		<cc>
			<method name="private void writeObject(java.io.ObjectOutputStream oos)">1</method>
			<method name="public org.apache.commons.math3.optimization.linear.Relationship getRelationship()">1</method>
			<method name="public int hashCode()">1</method>
			<method name="public double getValue()">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector getCoefficients()">1</method>
			<method name="public void _init_(org.apache.commons.math3.linear.RealVector coefficients, org.apache.commons.math3.optimization.linear.Relationship relationship, double value)">0</method>
			<method name="private void readObject(java.io.ObjectInputStream ois)">1</method>
			<method name="public void _init_(double[] lhsCoefficients, double lhsConstant, org.apache.commons.math3.optimization.linear.Relationship relationship, double[] rhsCoefficients, double rhsConstant)">0</method>
			<method name="public void _init_(double[] coefficients, org.apache.commons.math3.optimization.linear.Relationship relationship, double value)">0</method>
			<method name="public boolean equals(Object other)">6</method>
			<method name="public void _init_(org.apache.commons.math3.linear.RealVector lhsCoefficients, double lhsConstant, org.apache.commons.math3.optimization.linear.Relationship relationship, org.apache.commons.math3.linear.RealVector rhsCoefficients, double rhsConstant)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex</name>
		<wmc>9</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>22</rfc>
		<lcom>24</lcom>
		<ca>0</ca>
		<ce>3</ce>
		<npm>9</npm>
		<lcom3>0.625</lcom3>
		<loc>435</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.38095238095238093</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>46.44444444444444</amc>
		<cc>
			<method name="public void _init_(int n, double rho, double khi, double gamma, double sigma)">0</method>
			<method name="public void _init_(int n, double sideLength, double rho, double khi, double gamma, double sigma)">0</method>
			<method name="public void _init_(int n)">0</method>
			<method name="public void _init_(double[][] referenceSimplex)">0</method>
			<method name="public void _init_(double[] steps, double rho, double khi, double gamma, double sigma)">0</method>
			<method name="public void _init_(double[] steps)">0</method>
			<method name="public void _init_(int n, double sideLength)">0</method>
			<method name="public void iterate(org.apache.commons.math3.analysis.MultivariateFunction evaluationFunction, java.util.Comparator comparator)">16</method>
			<method name="public void _init_(double[][] referenceSimplex, double rho, double khi, double gamma, double sigma)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fraction.ProperBigFractionFormat</name>
		<wmc>8</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>36</rfc>
		<lcom>26</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>8</npm>
		<lcom3>0.8571428571428571</lcom3>
		<loc>243</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.32142857142857145</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>29.125</amc>
		<cc>
			<method name="public StringBuffer format(org.apache.commons.math3.fraction.BigFraction fraction, StringBuffer toAppendTo, java.text.FieldPosition pos)">3</method>
			<method name="public org.apache.commons.math3.fraction.BigFraction parse(String source, java.text.ParsePosition pos)">13</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(java.text.NumberFormat wholeFormat, java.text.NumberFormat numeratorFormat, java.text.NumberFormat denominatorFormat)">0</method>
			<method name="public void _init_(java.text.NumberFormat format)">0</method>
			<method name="public void setWholeFormat(java.text.NumberFormat format)">2</method>
			<method name="public java.text.NumberFormat getWholeFormat()">1</method>
			<method name="public volatile Number parse(String x0, java.text.ParsePosition x1)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction$5</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>67</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.5</amc>
		<cc>
			<method name="public double value(double x, double y)">1</method>
			<method name="void _init_(org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction, double[][])">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>34</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>2</npm>
		<lcom3>0.625</lcom3>
		<loc>259</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>84.0</amc>
		<cc>
			<method name="public void _init_(double[][] xval, double[] yval, int brightnessExponent, int microsphereElements, org.apache.commons.math3.random.UnitSphereRandomVectorGenerator rand)">0</method>
			<method name="public double value(double[] point)">1</method>
			<method name="private double cosAngle(org.apache.commons.math3.linear.RealVector v, org.apache.commons.math3.linear.RealVector w)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>8</cbo>
		<rfc>19</rfc>
		<lcom>13</lcom>
		<ca>2</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>0.6</lcom3>
		<loc>113</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3055555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.666666666666668</amc>
		<cc>
			<method name="public boolean isBetterScore(double score1, double score2)">2</method>
			<method name="protected org.apache.commons.math3.ml.clustering.Clusterable centroidOf(org.apache.commons.math3.ml.clustering.Cluster cluster)">5</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(org.apache.commons.math3.ml.distance.DistanceMeasure measure)">0</method>
			<method name="public abstract double score(java.util.List)">1</method>
			<method name="protected double distance(org.apache.commons.math3.ml.clustering.Clusterable p1, org.apache.commons.math3.ml.clustering.Clusterable p2)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>14</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.5</amc>
		<cc>
			<method name="void _init_(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer)">0</method>
			<method name="public double value(double[] point)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer$2</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>42</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.333333333333334</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="public int compare(org.apache.commons.math3.optim.PointValuePair o1, org.apache.commons.math3.optim.PointValuePair o2)">2</method>
			<method name="void _init_(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer, boolean)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.FunctionUtils$3$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>45</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.0</amc>
		<cc>
			<method name="void _init_(org.apache.commons.math3.analysis.FunctionUtils$3)">0</method>
			<method name="public double value(double x)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.summary.SumOfLogs</name>
		<wmc>11</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>15</rfc>
		<lcom>27</lcom>
		<ca>4</ca>
		<ce>7</ce>
		<npm>11</npm>
		<lcom3>0.5</lcom3>
		<loc>118</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2727272727272727</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.454545454545455</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="public long getN()">1</method>
			<method name="public static void copy(org.apache.commons.math3.stat.descriptive.summary.SumOfLogs source, org.apache.commons.math3.stat.descriptive.summary.SumOfLogs dest)">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic copy()">1</method>
			<method name="public double getResult()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double evaluate(double[] values, int begin, int length)">1</method>
			<method name="public org.apache.commons.math3.stat.descriptive.summary.SumOfLogs copy()">1</method>
			<method name="public void increment(double d)">1</method>
			<method name="public void _init_(org.apache.commons.math3.stat.descriptive.summary.SumOfLogs original)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.events.EventState$LocalMaxCountExceededException</name>
		<wmc>2</wmc>
		<dit>4</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>1.0</lcom3>
		<loc>13</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.9545454545454546</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.5</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.exception.MaxCountExceededException exception)">0</method>
			<method name="public org.apache.commons.math3.exception.MaxCountExceededException getException()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>7</rfc>
		<lcom>2</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>5</npm>
		<lcom3>0.5</lcom3>
		<loc>33</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.36</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.2</amc>
		<cc>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="public double getValue()">1</method>
			<method name="public int compareTo(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair other)">1</method>
			<method name="public void _init_(double value, int position)">0</method>
			<method name="public int getPosition()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.events.Transformer</name>
		<wmc>6</wmc>
		<dit>2</dit>
		<noc>5</noc>
		<cbo>11</cbo>
		<rfc>14</rfc>
		<lcom>13</lcom>
		<ca>10</ca>
		<ce>6</ce>
		<npm>2</npm>
		<lcom3>0.9666666666666666</lcom3>
		<loc>85</loc>
		<dam>0.16666666666666666</dam>
		<moa>6</moa>
		<mfa>0.8125</mfa>
		<cam>0.4</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>12.166666666666666</amc>
		<cc>
			<method name="public static org.apache.commons.math3.ode.events.Transformer valueOf(String name)">1</method>
			<method name="public static org.apache.commons.math3.ode.events.Transformer[] values()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="void _init_(String x0, int x1, org.apache.commons.math3.ode.events.Transformer$1 x2)">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="protected abstract double transformed(double)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Inverse</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>8</rfc>
		<lcom>6</lcom>
		<ca>0</ca>
		<ce>5</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>18</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double value(double x)">1</method>
			<method name="public org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.correlation.KendallsCorrelation</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>26</rfc>
		<lcom>22</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>7</npm>
		<lcom3>0.5714285714285714</lcom3>
		<loc>429</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.325</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>52.5</amc>
		<cc>
			<method name="private static long sum(long n)">1</method>
			<method name="public void _init_(org.apache.commons.math3.linear.RealMatrix matrix)">0</method>
			<method name="public void _init_(double[][] data)">0</method>
			<method name="public double correlation(double[] xArray, double[] yArray)">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix computeCorrelationMatrix(org.apache.commons.math3.linear.RealMatrix matrix)">3</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getCorrelationMatrix()">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix computeCorrelationMatrix(double[][] matrix)">1</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.DiagonalMatrix</name>
		<wmc>24</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>26</cbo>
		<rfc>48</rfc>
		<lcom>4</lcom>
		<ca>9</ca>
		<ce>18</ce>
		<npm>23</npm>
		<lcom3>0.5434782608695652</lcom3>
		<loc>438</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.23958333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.166666666666668</amc>
		<cc>
			<method name="public double[][] getData()">2</method>
			<method name="public void setEntry(int row, int column, double value)">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix m)">1</method>
			<method name="public double[] preMultiply(double[] v)">1</method>
			<method name="public void _init_(int dimension)">0</method>
			<method name="public void multiplyEntry(int row, int column, double factor)">1</method>
			<method name="public void _init_(double[] d)">0</method>
			<method name="public int getRowDimension()">1</method>
			<method name="public org.apache.commons.math3.linear.DiagonalMatrix subtract(org.apache.commons.math3.linear.DiagonalMatrix m)">1</method>
			<method name="private void ensureZero(double value)">1</method>
			<method name="public int getColumnDimension()">1</method>
			<method name="public double[] getDataRef()">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix copy()">1</method>
			<method name="public org.apache.commons.math3.linear.DiagonalMatrix inverse()">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector preMultiply(org.apache.commons.math3.linear.RealVector v)">1</method>
			<method name="public void addToEntry(int row, int column, double increment)">1</method>
			<method name="public double getEntry(int row, int column)">1</method>
			<method name="public org.apache.commons.math3.linear.DiagonalMatrix inverse(double threshold)">1</method>
			<method name="public org.apache.commons.math3.linear.DiagonalMatrix add(org.apache.commons.math3.linear.DiagonalMatrix m)">1</method>
			<method name="public boolean isSingular(double threshold)">3</method>
			<method name="public double[] operate(double[] v)">1</method>
			<method name="public void _init_(double[] d, boolean copyArray)">0</method>
			<method name="public org.apache.commons.math3.linear.DiagonalMatrix multiply(org.apache.commons.math3.linear.DiagonalMatrix m)">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix createMatrix(int rowDimension, int columnDimension)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.MultistepIntegrator</name>
		<wmc>13</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>21</cbo>
		<rfc>33</rfc>
		<lcom>36</lcom>
		<ca>3</ca>
		<ce>20</ce>
		<npm>8</npm>
		<lcom3>0.8125</lcom3>
		<loc>209</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.32967032967032966</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.461538461538462</amc>
		<cc>
			<method name="protected void start(double t0, double[] y0, double t)">1</method>
			<method name="public org.apache.commons.math3.ode.ODEIntegrator getStarterIntegrator()">1</method>
			<method name="public void setSafety(double safety)">1</method>
			<method name="protected void _init_(String name, int nSteps, int order, double minStep, double maxStep, double[] vecAbsoluteTolerance, double[] vecRelativeTolerance)">0</method>
			<method name="public double getMaxGrowth()">1</method>
			<method name="protected void _init_(String name, int nSteps, int order, double minStep, double maxStep, double scalAbsoluteTolerance, double scalRelativeTolerance)">0</method>
			<method name="public void setStarterIntegrator(org.apache.commons.math3.ode.FirstOrderIntegrator starterIntegrator)">1</method>
			<method name="public double getSafety()">1</method>
			<method name="public double getMinReduction()">1</method>
			<method name="protected double computeStepGrowShrinkFactor(double error)">1</method>
			<method name="public void setMaxGrowth(double maxGrowth)">1</method>
			<method name="protected abstract org.apache.commons.math3.linear.Array2DRowRealMatrix initializeHighOrderDerivatives(double, double[], double[][], double[][])">1</method>
			<method name="public void setMinReduction(double minReduction)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.CombinatoricsUtils</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>30</rfc>
		<lcom>41</lcom>
		<ca>8</ca>
		<ce>8</ce>
		<npm>9</npm>
		<lcom3>0.75</lcom3>
		<loc>715</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>63.81818181818182</amc>
		<cc>
			<method name="public static long factorial(int n)">1</method>
			<method name="public static double binomialCoefficientDouble(int n, int k)">1</method>
			<method name="private void _init_()">0</method>
			<method name="public static double factorialLog(int n)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static double binomialCoefficientLog(int n, int k)">1</method>
			<method name="public static void checkBinomial(int n, int k)">1</method>
			<method name="public static double factorialDouble(int n)">1</method>
			<method name="public static java.util.Iterator combinationsIterator(int n, int k)">1</method>
			<method name="public static long stirlingS2(int n, int k)">1</method>
			<method name="public static long binomialCoefficient(int n, int k)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.threed.RotationOrder</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>7</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>0.9</lcom3>
		<loc>146</loc>
		<dam>0.25</dam>
		<moa>15</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.666666666666668</amc>
		<cc>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getA1()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getA2()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getA3()">1</method>
			<method name="public String toString()">1</method>
			<method name="private void _init_(String name, org.apache.commons.math3.geometry.euclidean.threed.Vector3D a1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D a2, org.apache.commons.math3.geometry.euclidean.threed.Vector3D a3)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.direct.BOBYQAOptimizer</name>
		<wmc>14</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>54</rfc>
		<lcom>23</lcom>
		<ca>1</ca>
		<ce>14</ce>
		<npm>2</npm>
		<lcom3>0.8087318087318087</lcom3>
		<loc>6947</loc>
		<dam>0.918918918918919</dam>
		<moa>16</moa>
		<mfa>0.0</mfa>
		<cam>0.37142857142857144</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>492.57142857142856</amc>
		<cc>
			<method name="private double bobyqb(double[] lowerBound, double[] upperBound)">137</method>
			<method name="private void update(double beta, double denom, int knew)">11</method>
			<method name="private static void printState(int s)">1</method>
			<method name="private static String caller(int n)">1</method>
			<method name="private double[] trsbox(double delta, org.apache.commons.math3.linear.ArrayRealVector gnew, org.apache.commons.math3.linear.ArrayRealVector xbdi, org.apache.commons.math3.linear.ArrayRealVector s, org.apache.commons.math3.linear.ArrayRealVector hs, org.apache.commons.math3.linear.ArrayRealVector hred)">83</method>
			<method name="private double bobyqa(double[] lowerBound, double[] upperBound)">6</method>
			<method name="public void _init_(int numberOfInterpolationPoints)">0</method>
			<method name="private void prelim(double[] lowerBound, double[] upperBound)">30</method>
			<method name="private double[] altmov(int knew, double adelt)">50</method>
			<method name="public void _init_(int numberOfInterpolationPoints, double initialTrustRegionRadius, double stoppingTrustRegionRadius)">0</method>
			<method name="private void setup(double[] lowerBound, double[] upperBound)">6</method>
			<method name="private static void printMethod()">1</method>
			<method name="protected org.apache.commons.math3.optimization.PointValuePair doOptimize()">3</method>
			<method name="static String access$000(int x0)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.LeastSquaresConverter</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>11</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>5</ce>
		<npm>4</npm>
		<lcom3>0.0</lcom3>
		<loc>208</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>50.0</amc>
		<cc>
			<method name="public double value(double[] point)">6</method>
			<method name="public void _init_(org.apache.commons.math3.analysis.MultivariateVectorFunction function, double[] observations, org.apache.commons.math3.linear.RealMatrix scale)">0</method>
			<method name="public void _init_(org.apache.commons.math3.analysis.MultivariateVectorFunction function, double[] observations, double[] weights)">0</method>
			<method name="public void _init_(org.apache.commons.math3.analysis.MultivariateVectorFunction function, double[] observations)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.FastMath$CodyWaite</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>99</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>23.0</amc>
		<cc>
			<method name="double getRemA()">1</method>
			<method name="void _init_(double xa)">0</method>
			<method name="int getK()">1</method>
			<method name="double getRemB()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver</name>
		<wmc>23</wmc>
		<dit>1</dit>
		<noc>4</noc>
		<cbo>14</cbo>
		<rfc>39</rfc>
		<lcom>209</lcom>
		<ca>4</ca>
		<ce>10</ce>
		<npm>11</npm>
		<lcom3>0.8409090909090909</lcom3>
		<loc>187</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4782608695652174</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.695652173913044</amc>
		<cc>
			<method name="public int getMaxEvaluations()">1</method>
			<method name="protected void _init_(double absoluteAccuracy)">0</method>
			<method name="public double getMax()">1</method>
			<method name="public double getRelativeAccuracy()">1</method>
			<method name="protected boolean isSequence(double start, double mid, double end)">1</method>
			<method name="protected void verifySequence(double lower, double initial, double upper)">1</method>
			<method name="public double solve(int maxEval, org.apache.commons.math3.analysis.UnivariateFunction f, double min, double max)">1</method>
			<method name="public double getStartValue()">1</method>
			<method name="protected void _init_(double relativeAccuracy, double absoluteAccuracy)">0</method>
			<method name="protected void setup(int maxEval, org.apache.commons.math3.analysis.UnivariateFunction f, double min, double max, double startValue)">1</method>
			<method name="protected void verifyInterval(double lower, double upper)">1</method>
			<method name="public double getFunctionValueAccuracy()">1</method>
			<method name="protected double computeObjectiveValue(double point)">1</method>
			<method name="public double solve(int maxEval, org.apache.commons.math3.analysis.UnivariateFunction f, double min, double max, double startValue)">1</method>
			<method name="public double getMin()">1</method>
			<method name="public double solve(int maxEval, org.apache.commons.math3.analysis.UnivariateFunction f, double startValue)">1</method>
			<method name="public int getEvaluations()">1</method>
			<method name="protected boolean isBracketing(double lower, double upper)">1</method>
			<method name="protected abstract double doSolve()">1</method>
			<method name="protected void verifyBracketing(double lower, double upper)">1</method>
			<method name="public double getAbsoluteAccuracy()">1</method>
			<method name="protected void incrementEvaluationCount()">1</method>
			<method name="protected void _init_(double relativeAccuracy, double absoluteAccuracy, double functionValueAccuracy)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.ranking.NaturalRanking</name>
		<wmc>17</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>43</rfc>
		<lcom>46</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>9</npm>
		<lcom3>0.6625</lcom3>
		<loc>574</loc>
		<dam>0.6</dam>
		<moa>5</moa>
		<mfa>0.0</mfa>
		<cam>0.28125</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>32.470588235294116</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator randomGenerator)">0</method>
			<method name="private java.util.List getNanPositions(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[] ranks)">3</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(org.apache.commons.math3.stat.ranking.TiesStrategy tiesStrategy)">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="private boolean containsNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[] ranks)">3</method>
			<method name="private void resolveTie(double[] ranks, java.util.List tiesTrace)">4</method>
			<method name="private void restoreNaNs(double[] ranks, java.util.List nanPositions)">3</method>
			<method name="public void _init_(org.apache.commons.math3.stat.ranking.NaNStrategy nanStrategy, org.apache.commons.math3.stat.ranking.TiesStrategy tiesStrategy)">0</method>
			<method name="private void fill(double[] data, java.util.List tiesTrace, double value)">2</method>
			<method name="public org.apache.commons.math3.stat.ranking.TiesStrategy getTiesStrategy()">1</method>
			<method name="private void recodeNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[] ranks, double value)">3</method>
			<method name="private org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[] removeNaNs(org.apache.commons.math3.stat.ranking.NaturalRanking$IntDoublePair[] ranks)">4</method>
			<method name="public org.apache.commons.math3.stat.ranking.NaNStrategy getNanStrategy()">1</method>
			<method name="public double[] rank(double[] data)">9</method>
			<method name="public void _init_(org.apache.commons.math3.stat.ranking.NaNStrategy nanStrategy, org.apache.commons.math3.random.RandomGenerator randomGenerator)">0</method>
			<method name="public void _init_(org.apache.commons.math3.stat.ranking.NaNStrategy nanStrategy)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.fitting.CurveFitter$TheoreticalValuesFunction</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>15</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>126</loc>
		<dam>0.5</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>40.333333333333336</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] point)">4</method>
			<method name="public double[] value(double[] point)">2</method>
			<method name="public void _init_(org.apache.commons.math3.optimization.fitting.CurveFitter, org.apache.commons.math3.analysis.ParametricUnivariateFunction f)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.threed.Line</name>
		<wmc>23</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>16</cbo>
		<rfc>38</rfc>
		<lcom>119</lcom>
		<ca>5</ca>
		<ce>12</ce>
		<npm>23</npm>
		<lcom3>0.5340909090909091</lcom3>
		<loc>333</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.30434782608695654</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.304347826086957</amc>
		<cc>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Line revert()">1</method>
			<method name="public double getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D point)">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.Point toSubSpace(org.apache.commons.math3.geometry.Point x0)">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.Point toSpace(org.apache.commons.math3.geometry.Point x0)">1</method>
			<method name="public void reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D p1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D p2)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Vector vector)">1</method>
			<method name="public double distance(org.apache.commons.math3.geometry.euclidean.threed.Line line)">2</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D pointAt(double abscissa)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point point)">1</method>
			<method name="public boolean isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line line)">4</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getOrigin()">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.threed.Vector3D p1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D p2)">0</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point point)">1</method>
			<method name="public double getTolerance()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getDirection()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line line)">2</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.threed.Vector3D p1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D p2, double tolerance)">0</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.SubLine wholeLine()">1</method>
			<method name="public boolean contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D p)">2</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D intersection(org.apache.commons.math3.geometry.euclidean.threed.Line line)">2</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.threed.Line line)">0</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Vector vector)">1</method>
			<method name="public double distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D p)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.solvers.AllowedSolution</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>9</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9444444444444443</lcom3>
		<loc>78</loc>
		<dam>0.16666666666666666</dam>
		<moa>6</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>17.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public static org.apache.commons.math3.analysis.solvers.AllowedSolution[] values()">1</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static org.apache.commons.math3.analysis.solvers.AllowedSolution valueOf(String name)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.neuralnet.sofm.KohonenTrainingTask</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>32</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.5</amc>
		<cc>
			<method name="public void run()">2</method>
			<method name="public void _init_(org.apache.commons.math3.ml.neuralnet.Network net, java.util.Iterator featuresIterator, org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction updateAction)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.FastMath</name>
		<wmc>73</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>287</cbo>
		<rfc>98</rfc>
		<lcom>2596</lcom>
		<ca>282</ca>
		<ce>6</ce>
		<npm>60</npm>
		<lcom3>0.9876207729468598</lcom3>
		<loc>8320</loc>
		<dam>0.8695652173913043</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.140625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>112.34246575342466</amc>
		<cc>
			<method name="public static float abs(float x)">1</method>
			<method name="public static int max(int a, int b)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static double cos(double x)">7</method>
			<method name="private static double log(double x, double[] hiPrec)">21</method>
			<method name="public static float signum(float a)">3</method>
			<method name="private static double exp(double x, double extra, double[] hiPrec)">12</method>
			<method name="public static double ceil(double x)">4</method>
			<method name="public static double sinh(double x)">10</method>
			<method name="private void _init_()">0</method>
			<method name="private static double expm1(double x, double[] hiPrecOut)">9</method>
			<method name="public static void main(String[] a)">1</method>
			<method name="private static double atan(double xa, double xb, boolean leftPlane)">10</method>
			<method name="public static double hypot(double x, double y)">7</method>
			<method name="public static double acosh(double a)">1</method>
			<method name="public static double pow(double x, double y)">38</method>
			<method name="private static double doubleHighPart(double d)">3</method>
			<method name="public static double max(double a, double b)">5</method>
			<method name="public static double nextAfter(double d, double direction)">11</method>
			<method name="private static void reducePayneHanek(double x, double[] result)">60</method>
			<method name="public static double expm1(double x)">1</method>
			<method name="public static float nextUp(float a)">1</method>
			<method name="public static double atan(double x)">1</method>
			<method name="public static double abs(double x)">1</method>
			<method name="public static float nextAfter(float f, double direction)">11</method>
			<method name="public static double IEEEremainder(double dividend, double divisor)">1</method>
			<method name="public static int round(float x)">1</method>
			<method name="public static double tan(double x)">11</method>
			<method name="public static double atan2(double y, double x)">35</method>
			<method name="public static int getExponent(float f)">1</method>
			<method name="public static long abs(long x)">1</method>
			<method name="public static double atanh(double a)">7</method>
			<method name="public static double log(double base, double x)">1</method>
			<method name="public static double pow(double d, int e)">5</method>
			<method name="public static float scalb(float f, int n)">21</method>
			<method name="public static float max(float a, float b)">5</method>
			<method name="public static double cosh(double x)">7</method>
			<method name="public static double ulp(double x)">2</method>
			<method name="public static double log(double x)">1</method>
			<method name="private static double polySine(double x)">1</method>
			<method name="public static long max(long a, long b)">2</method>
			<method name="public static double signum(double a)">3</method>
			<method name="public static double cbrt(double x)">5</method>
			<method name="public static float copySign(float magnitude, float sign)">2</method>
			<method name="public static float min(float a, float b)">5</method>
			<method name="public static double exp(double x)">1</method>
			<method name="public static double asinh(double a)">7</method>
			<method name="private static double cosQ(double xa, double xb)">1</method>
			<method name="public static double toDegrees(double x)">3</method>
			<method name="public static double random()">1</method>
			<method name="public static int min(int a, int b)">2</method>
			<method name="public static long min(long a, long b)">2</method>
			<method name="public static long round(double x)">1</method>
			<method name="public static double acos(double x)">9</method>
			<method name="public static float ulp(float x)">2</method>
			<method name="public static double sqrt(double a)">1</method>
			<method name="public static double log1p(double x)">6</method>
			<method name="public static int getExponent(double d)">1</method>
			<method name="public static double min(double a, double b)">5</method>
			<method name="public static double rint(double x)">5</method>
			<method name="public static double floor(double x)">7</method>
			<method name="private static double sinQ(double xa, double xb)">2</method>
			<method name="public static int abs(int x)">1</method>
			<method name="public static double tanh(double x)">8</method>
			<method name="public static double asin(double x)">7</method>
			<method name="public static double log10(double x)">2</method>
			<method name="private static double polyCosine(double x)">1</method>
			<method name="public static double nextUp(double a)">1</method>
			<method name="private static double tanQ(double xa, double xb, boolean cotanFlag)">4</method>
			<method name="public static double copySign(double magnitude, double sign)">2</method>
			<method name="public static double sin(double x)">10</method>
			<method name="public static double toRadians(double x)">4</method>
			<method name="public static double scalb(double d, int n)">21</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.PivotingStrategyInterface</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>5</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract int pivotIndex(double[], int, int)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.genetics.AbstractListChromosome</name>
		<wmc>8</wmc>
		<dit>0</dit>
		<noc>2</noc>
		<cbo>11</cbo>
		<rfc>16</rfc>
		<lcom>26</lcom>
		<ca>9</ca>
		<ce>2</ce>
		<npm>6</npm>
		<lcom3>0.2857142857142857</lcom3>
		<loc>59</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.25</amc>
		<cc>
			<method name="protected java.util.List getRepresentation()">1</method>
			<method name="public abstract org.apache.commons.math3.genetics.AbstractListChromosome newFixedLengthChromosome(java.util.List)">1</method>
			<method name="public void _init_(java.util.List representation, boolean copyList)">0</method>
			<method name="protected abstract void checkValidity(java.util.List)">1</method>
			<method name="public void _init_(java.util.List representation)">0</method>
			<method name="public String toString()">1</method>
			<method name="public void _init_(Object[] representation)">0</method>
			<method name="public int getLength()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.FDistribution</name>
		<wmc>18</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>26</rfc>
		<lcom>131</lcom>
		<ca>3</ca>
		<ce>8</ce>
		<npm>16</npm>
		<lcom3>0.8151260504201681</lcom3>
		<loc>266</loc>
		<dam>0.8571428571428571</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.38888888888889</amc>
		<cc>
			<method name="protected double getSolverAbsoluteAccuracy()">1</method>
			<method name="public double density(double x)">1</method>
			<method name="public boolean isSupportConnected()">1</method>
			<method name="public boolean isSupportUpperBoundInclusive()">1</method>
			<method name="public double cumulativeProbability(double x)">2</method>
			<method name="public double getNumeratorDegreesOfFreedom()">1</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, double numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom)">0</method>
			<method name="public void _init_(double numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom)">0</method>
			<method name="public boolean isSupportLowerBoundInclusive()">1</method>
			<method name="public double getDenominatorDegreesOfFreedom()">1</method>
			<method name="public double getSupportLowerBound()">1</method>
			<method name="public double getNumericalMean()">2</method>
			<method name="public double getNumericalVariance()">2</method>
			<method name="public double getSupportUpperBound()">1</method>
			<method name="protected double calculateNumericalVariance()">2</method>
			<method name="public void _init_(double numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom, double inverseCumAccuracy)">0</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, double numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom, double inverseCumAccuracy)">0</method>
			<method name="public double logDensity(double x)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.general.AbstractDifferentiableOptimizer</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>11</rfc>
		<lcom>13</lcom>
		<ca>0</ca>
		<ce>11</ce>
		<npm>0</npm>
		<lcom3>0.2</lcom3>
		<loc>60</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.833333333333334</amc>
		<cc>
			<method name="protected volatile org.apache.commons.math3.optimization.PointValuePair optimizeInternal(int x0, org.apache.commons.math3.analysis.MultivariateFunction x1, org.apache.commons.math3.optimization.GoalType x2, org.apache.commons.math3.optimization.OptimizationData[] x3)">1</method>
			<method name="protected transient org.apache.commons.math3.optimization.PointValuePair optimizeInternal(int maxEval, org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction f, org.apache.commons.math3.optimization.GoalType goalType, org.apache.commons.math3.optimization.OptimizationData[] optData)">1</method>
			<method name="protected org.apache.commons.math3.optimization.PointValuePair optimizeInternal(int maxEval, org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction f, org.apache.commons.math3.optimization.GoalType goalType, double[] startPoint)">1</method>
			<method name="protected void _init_(org.apache.commons.math3.optimization.ConvergenceChecker checker)">0</method>
			<method name="protected volatile org.apache.commons.math3.optimization.PointValuePair optimizeInternal(int x0, org.apache.commons.math3.analysis.MultivariateFunction x1, org.apache.commons.math3.optimization.GoalType x2, double[] x3)">1</method>
			<method name="protected double[] computeObjectiveGradient(double[] evaluationPoint)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.neuralnet.sofm.util.ExponentialDecayFunction</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>74</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>35.0</amc>
		<cc>
			<method name="public void _init_(double initValue, double valueAtNumCall, long numCall)">0</method>
			<method name="public double value(long numCall)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.clustering.CentroidCluster</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>1.0</lcom3>
		<loc>13</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.5</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.ml.clustering.Clusterable center)">0</method>
			<method name="public org.apache.commons.math3.ml.clustering.Clusterable getCenter()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolator</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>26</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>12</ce>
		<npm>4</npm>
		<lcom3>0.22222222222222218</lcom3>
		<loc>422</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>103.75</amc>
		<cc>
			<method name="public org.apache.commons.math3.FieldElement[][] derivatives(org.apache.commons.math3.FieldElement x, int order)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public transient void addSamplePoint(org.apache.commons.math3.FieldElement x, org.apache.commons.math3.FieldElement[][] value)">1</method>
			<method name="public org.apache.commons.math3.FieldElement[] value(org.apache.commons.math3.FieldElement x)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.sampling.StepHandler</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>8</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean)">1</method>
			<method name="public abstract void init(double, double[], double)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Cos</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>9</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>17</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.25</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double value(double x)">1</method>
			<method name="public org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer</name>
		<wmc>8</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>28</rfc>
		<lcom>20</lcom>
		<ca>1</ca>
		<ce>17</ce>
		<npm>5</npm>
		<lcom3>0.6</lcom3>
		<loc>382</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.328125</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>46.125</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.optimization.general.ConjugateGradientFormula updateFormula, org.apache.commons.math3.optimization.ConvergenceChecker checker, org.apache.commons.math3.analysis.solvers.UnivariateSolver lineSearchSolver, org.apache.commons.math3.optimization.general.Preconditioner preconditioner)">0</method>
			<method name="public void _init_(org.apache.commons.math3.optimization.general.ConjugateGradientFormula updateFormula, org.apache.commons.math3.optimization.ConvergenceChecker checker)">0</method>
			<method name="public void _init_(org.apache.commons.math3.optimization.general.ConjugateGradientFormula updateFormula, org.apache.commons.math3.optimization.ConvergenceChecker checker, org.apache.commons.math3.analysis.solvers.UnivariateSolver lineSearchSolver)">0</method>
			<method name="private double findUpperBound(org.apache.commons.math3.analysis.UnivariateFunction f, double a, double h)">3</method>
			<method name="static double[] access$000(org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer x0)">1</method>
			<method name="protected org.apache.commons.math3.optimization.PointValuePair doOptimize()">14</method>
			<method name="public void _init_(org.apache.commons.math3.optimization.general.ConjugateGradientFormula updateFormula)">0</method>
			<method name="public void setInitialStep(double initialStep)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.DifferentiableMultivariateFunction</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>4</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.analysis.MultivariateVectorFunction gradient()">1</method>
			<method name="public abstract org.apache.commons.math3.analysis.MultivariateFunction partialDerivative(int)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.SobolSequenceGenerator</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>27</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>7</ce>
		<npm>5</npm>
		<lcom3>0.7777777777777778</lcom3>
		<loc>514</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>62.125</amc>
		<cc>
			<method name="public double[] skipTo(int index)">1</method>
			<method name="private int initFromStream(java.io.InputStream is)">1</method>
			<method name="public void _init_(int dimension, java.io.InputStream is)">0</method>
			<method name="private void initDirectionVector(int d, int a, int[] m)">4</method>
			<method name="public double[] nextVector()">4</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(int dimension)">0</method>
			<method name="public int getNextIndex()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.univariate.UnivariatePointValuePair</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>8</ca>
		<ce>0</ce>
		<npm>3</npm>
		<lcom3>0.8333333333333334</lcom3>
		<loc>21</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="public double getValue()">1</method>
			<method name="public void _init_(double point, double value)">0</method>
			<method name="public double getPoint()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.Region$Location</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>8</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9166666666666666</lcom3>
		<loc>56</loc>
		<dam>0.25</dam>
		<moa>4</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="public static org.apache.commons.math3.geometry.partitioning.Region$Location valueOf(String name)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static org.apache.commons.math3.geometry.partitioning.Region$Location[] values()">1</method>
			<method name="private void _init_(String, int)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.neuralnet.Neuron$SerializationProxy</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>0.6666666666666667</lcom3>
		<loc>22</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.5</amc>
		<cc>
			<method name="private Object readResolve()">1</method>
			<method name="void _init_(long identifier, double[] features)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.RandomDataGenerator</name>
		<wmc>35</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>31</cbo>
		<rfc>103</rfc>
		<lcom>573</lcom>
		<ca>3</ca>
		<ce>28</ce>
		<npm>32</npm>
		<lcom3>0.6862745098039217</lcom3>
		<loc>807</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.24642857142857144</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.97142857142857</amc>
		<cc>
			<method name="private void initRan()">1</method>
			<method name="public double nextGaussian(double mu, double sigma)">1</method>
			<method name="private org.apache.commons.math3.random.RandomGenerator getSecRan()">2</method>
			<method name="public int nextBinomial(int numberOfTrials, double probabilityOfSuccess)">1</method>
			<method name="public int[] nextPermutation(int n, int k)">1</method>
			<method name="public String nextSecureHexString(int len)">1</method>
			<method name="public double nextUniform(double lower, double upper)">1</method>
			<method name="public long nextLong(long lower, long upper)">1</method>
			<method name="public double nextF(double numeratorDf, double denominatorDf)">1</method>
			<method name="public double nextWeibull(double shape, double scale)">1</method>
			<method name="public void reSeedSecure(long seed)">1</method>
			<method name="public void setSecureAlgorithm(String algorithm, String provider)">1</method>
			<method name="public Object[] nextSample(java.util.Collection c, int k)">1</method>
			<method name="public void reSeed()">1</method>
			<method name="public double nextExponential(double mean)">1</method>
			<method name="public double nextChiSquare(double df)">1</method>
			<method name="public double nextUniform(double lower, double upper, boolean lowerInclusive)">1</method>
			<method name="public int nextSecureInt(int lower, int upper)">1</method>
			<method name="public int nextZipf(int numberOfElements, double exponent)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double nextGamma(double shape, double scale)">1</method>
			<method name="public int nextHypergeometric(int populationSize, int numberOfSuccesses, int sampleSize)">1</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rand)">0</method>
			<method name="public long nextPoisson(double mean)">1</method>
			<method name="public double nextT(double df)">1</method>
			<method name="public long nextSecureLong(long lower, long upper)">1</method>
			<method name="public int nextInt(int lower, int upper)">1</method>
			<method name="public int nextPascal(int r, double p)">1</method>
			<method name="public double nextCauchy(double median, double scale)">1</method>
			<method name="public org.apache.commons.math3.random.RandomGenerator getRandomGenerator()">2</method>
			<method name="public void reSeedSecure()">1</method>
			<method name="public void reSeed(long seed)">1</method>
			<method name="private static long nextLong(org.apache.commons.math3.random.RandomGenerator rng, long n)">1</method>
			<method name="public double nextBeta(double alpha, double beta)">1</method>
			<method name="public String nextHexString(int len)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>8</rfc>
		<lcom>9</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>0.8333333333333334</lcom3>
		<loc>52</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2619047619047619</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.571428571428571</amc>
		<cc>
			<method name="static int[] access$100(org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData x0)">1</method>
			<method name="static double[] access$200(org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData x0)">1</method>
			<method name="static int access$400(org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData x0)">1</method>
			<method name="static double[] access$300(org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData x0)">1</method>
			<method name="static double[] access$500(org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData x0)">1</method>
			<method name="static double[][] access$000(org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData x0)">1</method>
			<method name="void _init_(double[][] weightedJacobian, int[] permutation, int rank, double[] diagR, double[] jacNorm, double[] beta)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics$AggregatingSummaryStatistics</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>8</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>69</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.75</amc>
		<cc>
			<method name="public boolean equals(Object object)">5</method>
			<method name="public void addValue(double value)">1</method>
			<method name="public int hashCode()">1</method>
			<method name="public void _init_(org.apache.commons.math3.stat.descriptive.SummaryStatistics aggregateStatistics)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.JacobianMatrices$MismatchedEquations</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.general.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>17</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>9</ce>
		<npm>4</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>191</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>46.25</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.analysis.MultivariateFunction bounded, double[] lower, double[] upper)">0</method>
			<method name="public double value(double[] point)">1</method>
			<method name="public double[] unboundedToBounded(double[] point)">2</method>
			<method name="public double[] boundedToUnbounded(double[] point)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.RandomDataImpl</name>
		<wmc>34</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>16</cbo>
		<rfc>68</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>12</ce>
		<npm>33</npm>
		<lcom3>0.5151515151515151</lcom3>
		<loc>234</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.20294117647058824</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.823529411764706</amc>
		<cc>
			<method name="public double nextGaussian(double mu, double sigma)">1</method>
			<method name="public int nextBinomial(int numberOfTrials, double probabilityOfSuccess)">1</method>
			<method name="public int[] nextPermutation(int n, int k)">1</method>
			<method name="public String nextSecureHexString(int len)">1</method>
			<method name="public double nextUniform(double lower, double upper)">1</method>
			<method name="public double nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution distribution)">1</method>
			<method name="public long nextLong(long lower, long upper)">1</method>
			<method name="public double nextF(double numeratorDf, double denominatorDf)">1</method>
			<method name="org.apache.commons.math3.random.RandomDataGenerator getDelegate()">1</method>
			<method name="public double nextWeibull(double shape, double scale)">1</method>
			<method name="public void reSeedSecure(long seed)">1</method>
			<method name="public int nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution distribution)">1</method>
			<method name="public void setSecureAlgorithm(String algorithm, String provider)">1</method>
			<method name="public Object[] nextSample(java.util.Collection c, int k)">1</method>
			<method name="public void reSeed()">1</method>
			<method name="public double nextExponential(double mean)">1</method>
			<method name="public double nextChiSquare(double df)">1</method>
			<method name="public double nextUniform(double lower, double upper, boolean lowerInclusive)">1</method>
			<method name="public int nextSecureInt(int lower, int upper)">1</method>
			<method name="public int nextZipf(int numberOfElements, double exponent)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double nextGamma(double shape, double scale)">1</method>
			<method name="public int nextHypergeometric(int populationSize, int numberOfSuccesses, int sampleSize)">1</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rand)">0</method>
			<method name="public long nextPoisson(double mean)">1</method>
			<method name="public double nextT(double df)">1</method>
			<method name="public long nextSecureLong(long lower, long upper)">1</method>
			<method name="public int nextInt(int lower, int upper)">1</method>
			<method name="public double nextCauchy(double median, double scale)">1</method>
			<method name="public int nextPascal(int r, double p)">1</method>
			<method name="public void reSeedSecure()">1</method>
			<method name="public void reSeed(long seed)">1</method>
			<method name="public double nextBeta(double alpha, double beta)">1</method>
			<method name="public String nextHexString(int len)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.genetics.FixedElapsedTime</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>9</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>54</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.333333333333332</amc>
		<cc>
			<method name="public boolean isSatisfied(org.apache.commons.math3.genetics.Population population)">3</method>
			<method name="public void _init_(long maxTime, java.util.concurrent.TimeUnit unit)">0</method>
			<method name="public void _init_(long maxTime)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.interpolation.HermiteInterpolator</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>32</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>11</ce>
		<npm>5</npm>
		<lcom3>0.4444444444444445</lcom3>
		<loc>412</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.34285714285714286</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>57.42857142857143</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] getPolynomials()">1</method>
			<method name="public transient void addSamplePoint(double x, double[][] value)">1</method>
			<method name="private transient org.apache.commons.math3.analysis.polynomials.PolynomialFunction polynomial(double[] c)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure x)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double[] value(double x)">1</method>
			<method name="private void checkInterpolation()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.BSPTree</name>
		<wmc>25</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>41</cbo>
		<rfc>47</rfc>
		<lcom>0</lcom>
		<ca>31</ca>
		<ce>12</ce>
		<npm>19</npm>
		<lcom3>0.3499999999999999</lcom3>
		<loc>951</loc>
		<dam>1.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.17333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>36.84</amc>
		<cc>
			<method name="private void chopOffMinus(org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane)">2</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.BSPTree pruneAroundConvexCell(Object cellAttribute, Object otherLeafsAttributes, Object internalAttributes)">3</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.BSPTree getParent()">1</method>
			<method name="private void chopOffPlus(org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane)">2</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.BSPTree copySelf()">2</method>
			<method name="private org.apache.commons.math3.geometry.partitioning.SubHyperplane fitToCell(org.apache.commons.math3.geometry.partitioning.SubHyperplane sub)">4</method>
			<method name="public boolean insertCut(org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane)">4</method>
			<method name="private void recurseCloseCuts(org.apache.commons.math3.geometry.Point point, double maxOffset, java.util.List close)">4</method>
			<method name="private void condense()">9</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.BSPTree split(org.apache.commons.math3.geometry.partitioning.SubHyperplane sub)">6</method>
			<method name="public Object getAttribute()">1</method>
			<method name="public void visit(org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor visitor)">3</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.BSPTree merge(org.apache.commons.math3.geometry.partitioning.BSPTree tree, org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger leafMerger)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree parentTree, boolean isPlusChild)">6</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.BSPTree getCell(org.apache.commons.math3.geometry.Vector point)">1</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()">1</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()">1</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()">1</method>
			<method name="public void setAttribute(Object attribute)">1</method>
			<method name="public void _init_(Object attribute)">0</method>
			<method name="private org.apache.commons.math3.geometry.partitioning.BSPTree merge(org.apache.commons.math3.geometry.partitioning.BSPTree tree, org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger leafMerger, org.apache.commons.math3.geometry.partitioning.BSPTree parentTree, boolean isPlusChild)">6</method>
			<method name="public java.util.List getCloseCuts(org.apache.commons.math3.geometry.Point point, double maxOffset)">1</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.BSPTree getCell(org.apache.commons.math3.geometry.Point point, double tolerance)">4</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.partitioning.SubHyperplane cut, org.apache.commons.math3.geometry.partitioning.BSPTree plus, org.apache.commons.math3.geometry.partitioning.BSPTree minus, Object attribute)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.GradientMultivariateOptimizer</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>8</cbo>
		<rfc>9</rfc>
		<lcom>8</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>2</npm>
		<lcom3>0.75</lcom3>
		<loc>52</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.2</amc>
		<cc>
			<method name="public transient org.apache.commons.math3.optim.PointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[] optData)">1</method>
			<method name="public volatile Object optimize(org.apache.commons.math3.optim.OptimizationData[] x0)">1</method>
			<method name="protected transient void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[] optData)">3</method>
			<method name="protected void _init_(org.apache.commons.math3.optim.ConvergenceChecker checker)">0</method>
			<method name="protected double[] computeObjectiveGradient(double[] params)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.genetics.BinaryChromosome</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>22</rfc>
		<lcom>10</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>103</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.36</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.6</amc>
		<cc>
			<method name="public static java.util.List randomBinaryRepresentation(int length)">2</method>
			<method name="public void _init_(Integer[] representation)">0</method>
			<method name="public void _init_(java.util.List representation)">0</method>
			<method name="protected void checkValidity(java.util.List chromosomeRepresentation)">1</method>
			<method name="protected boolean isSame(org.apache.commons.math3.genetics.Chromosome another)">5</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.Array2DRowRealMatrix</name>
		<wmc>31</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>50</cbo>
		<rfc>52</rfc>
		<lcom>0</lcom>
		<ca>34</ca>
		<ce>17</ce>
		<npm>29</npm>
		<lcom3>0.55</lcom3>
		<loc>1070</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.22939068100358423</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>33.45161290322581</amc>
		<cc>
			<method name="public double[][] getData()">1</method>
			<method name="public void setSubMatrix(double[][] subMatrix, int row, int column)">1</method>
			<method name="public void setEntry(int row, int column, double value)">1</method>
			<method name="public void multiplyEntry(int row, int column, double factor)">1</method>
			<method name="public void _init_(double[] v)">0</method>
			<method name="public double getEntry(int row, int column)">1</method>
			<method name="public void addToEntry(int row, int column, double increment)">1</method>
			<method name="public void _init_(double[][] d)">0</method>
			<method name="public double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor visitor, int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public org.apache.commons.math3.linear.Array2DRowRealMatrix multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix m)">1</method>
			<method name="public double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor visitor)">3</method>
			<method name="public double walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor visitor, int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public org.apache.commons.math3.linear.Array2DRowRealMatrix subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix m)">1</method>
			<method name="public double walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor visitor, int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double[] preMultiply(double[] v)">1</method>
			<method name="public double walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor visitor)">3</method>
			<method name="public int getRowDimension()">2</method>
			<method name="private double[][] copyOut()">2</method>
			<method name="public int getColumnDimension()">3</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix copy()">1</method>
			<method name="public void _init_(double[][] d, boolean copyArray)">0</method>
			<method name="public double walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor visitor)">3</method>
			<method name="public void _init_(int rowDimension, int columnDimension)">0</method>
			<method name="public double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor visitor)">3</method>
			<method name="private void copyIn(double[][] in)">1</method>
			<method name="public org.apache.commons.math3.linear.Array2DRowRealMatrix add(org.apache.commons.math3.linear.Array2DRowRealMatrix m)">1</method>
			<method name="public double[] operate(double[] v)">1</method>
			<method name="public double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor visitor, int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public double[][] getDataRef()">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix createMatrix(int rowDimension, int columnDimension)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.twod.SubLine</name>
		<wmc>10</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>23</cbo>
		<rfc>51</rfc>
		<lcom>45</lcom>
		<ca>6</ca>
		<ce>18</ce>
		<npm>8</npm>
		<lcom3>1.1111111111111112</lcom3>
		<loc>388</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2875</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>37.7</amc>
		<cc>
			<method name="public org.apache.commons.math3.geometry.partitioning.Side side(org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane)">5</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane, org.apache.commons.math3.geometry.partitioning.Region remainingRegion)">0</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.Vector2D intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine, boolean includeEndPoints)">7</method>
			<method name="public java.util.List getSegments()">2</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane)">7</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.twod.Vector2D start, org.apache.commons.math3.geometry.euclidean.twod.Vector2D end)">0</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.twod.Vector2D start, org.apache.commons.math3.geometry.euclidean.twod.Vector2D end, double tolerance)">0</method>
			<method name="protected org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane, org.apache.commons.math3.geometry.partitioning.Region remainingRegion)">1</method>
			<method name="private static org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D start, org.apache.commons.math3.geometry.euclidean.twod.Vector2D end, double tolerance)">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.twod.Segment segment)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.OpenMapRealVector$OpenMapEntry</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>34</loc>
		<dam>0.5</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="public void setValue(double value)">1</method>
			<method name="public double getValue()">1</method>
			<method name="public int getIndex()">1</method>
			<method name="protected void _init_(org.apache.commons.math3.linear.OpenMapRealVector, org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator iter)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.genetics.CrossoverPolicy</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>6</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.genetics.ChromosomePair crossover(org.apache.commons.math3.genetics.Chromosome, org.apache.commons.math3.genetics.Chromosome)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionRuleFactory</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>19</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>521</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>171.33333333333334</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="protected org.apache.commons.math3.util.Pair computeRule(int numberOfPoints)">1</method>
			<method name="public void _init_(java.math.MathContext mContext)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.differentiation.UnivariateVectorFunctionDifferentiator</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableVectorFunction differentiate(org.apache.commons.math3.analysis.UnivariateVectorFunction)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>37</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>13</ce>
		<npm>3</npm>
		<lcom3>1.5</lcom3>
		<loc>415</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>137.0</amc>
		<cc>
			<method name="public void _init_(int nSteps, double minStep, double maxStep, double[] vecAbsoluteTolerance, double[] vecRelativeTolerance)">0</method>
			<method name="public void integrate(org.apache.commons.math3.ode.ExpandableStatefulODE equations, double t)">1</method>
			<method name="public void _init_(int nSteps, double minStep, double maxStep, double scalAbsoluteTolerance, double scalRelativeTolerance)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizer$1</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>14</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>2</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>75</loc>
		<dam>0.6666666666666666</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.0</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_(org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizer)">0</method>
			<method name="public int compare(org.apache.commons.math3.optim.PointVectorValuePair o1, org.apache.commons.math3.optim.PointVectorValuePair o2)">4</method>
			<method name="private double weightedResidual(org.apache.commons.math3.optim.PointVectorValuePair pv)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.solvers.IllinoisSolver</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>6</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>27</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.875</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.75</amc>
		<cc>
			<method name="public void _init_(double absoluteAccuracy)">0</method>
			<method name="public void _init_(double relativeAccuracy, double absoluteAccuracy, double functionValueAccuracy)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(double relativeAccuracy, double absoluteAccuracy)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.distance.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.MultistepIntegrator$NordsieckTransformer</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.linear.Array2DRowRealMatrix initializeHighOrderDerivatives(double, double[], double[][], double[][])">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.AbstractParameterizable</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>14</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>81</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.45</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.0</amc>
		<cc>
			<method name="public void complainIfNotSupported(String name)">1</method>
			<method name="public java.util.Collection getParametersNames()">1</method>
			<method name="protected transient void _init_(String[] names)">0</method>
			<method name="public boolean isSupported(String name)">2</method>
			<method name="protected void _init_(java.util.Collection names)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.BoundaryProjection</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>6</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>28</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.25</amc>
		<cc>
			<method name="public org.apache.commons.math3.geometry.Point getOriginal()">1</method>
			<method name="public double getOffset()">1</method>
			<method name="public org.apache.commons.math3.geometry.Point getProjected()">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.Point original, org.apache.commons.math3.geometry.Point projected, double offset)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.enclosing.EnclosingBall</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>10</rfc>
		<lcom>0</lcom>
		<ca>6</ca>
		<ce>2</ce>
		<npm>7</npm>
		<lcom3>0.7083333333333334</lcom3>
		<loc>66</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4642857142857143</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.857142857142857</amc>
		<cc>
			<method name="public boolean contains(org.apache.commons.math3.geometry.Point point, double margin)">2</method>
			<method name="public org.apache.commons.math3.geometry.Point[] getSupport()">1</method>
			<method name="public org.apache.commons.math3.geometry.Point getCenter()">1</method>
			<method name="public boolean contains(org.apache.commons.math3.geometry.Point point)">2</method>
			<method name="public int getSupportSize()">1</method>
			<method name="public transient void _init_(org.apache.commons.math3.geometry.Point center, double radius, org.apache.commons.math3.geometry.Point[] support)">0</method>
			<method name="public double getRadius()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.linear.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.AbstractCurveFitter</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>3</noc>
		<cbo>8</cbo>
		<rfc>9</rfc>
		<lcom>6</lcom>
		<ca>3</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>20</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="public double[] fit(java.util.Collection points)">1</method>
			<method name="public void _init_()">0</method>
			<method name="protected abstract org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem getProblem(java.util.Collection)">1</method>
			<method name="protected org.apache.commons.math3.fitting.leastsquares.LeastSquaresOptimizer getOptimizer()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.HarmonicCurveFitter</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>29</rfc>
		<lcom>3</lcom>
		<ca>0</ca>
		<ce>13</ce>
		<npm>3</npm>
		<lcom3>0.4</lcom3>
		<loc>120</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.45</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.5</amc>
		<cc>
			<method name="public static org.apache.commons.math3.fitting.HarmonicCurveFitter create()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public org.apache.commons.math3.fitting.HarmonicCurveFitter withMaxIterations(int newMaxIter)">1</method>
			<method name="private void _init_(double[] initialGuess, int maxIter)">0</method>
			<method name="public org.apache.commons.math3.fitting.HarmonicCurveFitter withStartPoint(double[] newStart)">1</method>
			<method name="protected org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem getProblem(java.util.Collection observations)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.TriDiagonalTransformer</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>18</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>4</npm>
		<lcom3>0.6190476190476192</lcom3>
		<loc>585</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.5625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>71.375</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.linear.RealMatrix matrix)">0</method>
			<method name="double[] getMainDiagonalRef()">1</method>
			<method name="double[] getSecondaryDiagonalRef()">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getQT()">8</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getT()">5</method>
			<method name="private void transform()">11</method>
			<method name="double[][] getHouseholderVectorsRef()">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getQ()">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.AbstractRegion$BoundaryBuilder</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>25</rfc>
		<lcom>15</lcom>
		<ca>1</ca>
		<ce>11</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>208</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.43333333333333335</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>33.666666666666664</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public void visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree node)">9</method>
			<method name="public void visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree node)">1</method>
			<method name="private void characterize(org.apache.commons.math3.geometry.partitioning.BSPTree node, org.apache.commons.math3.geometry.partitioning.SubHyperplane sub, org.apache.commons.math3.geometry.partitioning.SubHyperplane[] characterization)">6</method>
			<method name="void _init_(org.apache.commons.math3.geometry.partitioning.AbstractRegion$1 x0)">0</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree node)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.distance.ChebyshevDistance</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>10</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public double compute(double[] a, double[] b)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.fitting.GaussianFitter</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>9</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>28</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.333333333333334</amc>
		<cc>
			<method name="public double[] fit(double[] initialGuess)">1</method>
			<method name="public void _init_(org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer optimizer)">0</method>
			<method name="public double[] fit()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.ContinuousOutputModel</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>35</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>8</ce>
		<npm>10</npm>
		<lcom3>0.5666666666666667</lcom3>
		<loc>559</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2597402597402597</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>49.27272727272727</amc>
		<cc>
			<method name="private int locatePoint(double time, org.apache.commons.math3.ode.sampling.StepInterpolator interval)">6</method>
			<method name="public double[] getInterpolatedSecondaryState(int secondaryStateIndex)">1</method>
			<method name="public double getInterpolatedTime()">1</method>
			<method name="public double getFinalTime()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void append(org.apache.commons.math3.ode.ContinuousOutputModel model)">1</method>
			<method name="public void handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator interpolator, boolean isLast)">1</method>
			<method name="public void setInterpolatedTime(double time)">11</method>
			<method name="public double getInitialTime()">1</method>
			<method name="public double[] getInterpolatedState()">1</method>
			<method name="public void init(double t0, double[] y0, double t)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.BoundaryProjector</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>33</rfc>
		<lcom>20</lcom>
		<ca>1</ca>
		<ce>13</ce>
		<npm>5</npm>
		<lcom3>0.71875</lcom3>
		<loc>231</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.3492063492063492</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.22222222222222</amc>
		<cc>
			<method name="public org.apache.commons.math3.geometry.partitioning.BoundaryProjection getProjection()">2</method>
			<method name="private java.util.List boundaryRegions(org.apache.commons.math3.geometry.partitioning.BSPTree node)">1</method>
			<method name="public void visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree node)">5</method>
			<method name="private void addRegion(org.apache.commons.math3.geometry.partitioning.SubHyperplane sub, java.util.List list)">3</method>
			<method name="private boolean belongsToPart(org.apache.commons.math3.geometry.Point point, org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane, org.apache.commons.math3.geometry.partitioning.Region part)">2</method>
			<method name="public void visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree node)">2</method>
			<method name="private org.apache.commons.math3.geometry.Point singularProjection(org.apache.commons.math3.geometry.Point point, org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane, org.apache.commons.math3.geometry.partitioning.Region part)">2</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree node)">2</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.Point original)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.TrivariateFunction</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double value(double, double, double)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.differentiation.UnivariateMatrixFunctionDifferentiator</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableMatrixFunction differentiate(org.apache.commons.math3.analysis.UnivariateMatrixFunction)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.integration.RombergIntegrator</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>17</rfc>
		<lcom>6</lcom>
		<ca>0</ca>
		<ce>9</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>170</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>41.25</amc>
		<cc>
			<method name="public void _init_(double relativeAccuracy, double absoluteAccuracy, int minimalIterationCount, int maximalIterationCount)">0</method>
			<method name="public void _init_()">0</method>
			<method name="protected double doIntegrate()">1</method>
			<method name="public void _init_(int minimalIterationCount, int maximalIterationCount)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>21</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.differentiation.DerivativeStructure$1</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>9</rfc>
		<lcom>9</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>5</npm>
		<lcom3>0.2</lcom3>
		<loc>47</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.666666666666667</amc>
		<cc>
			<method name="public Class getRuntimeClass()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure getOne()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure getZero()">1</method>
			<method name="public volatile Object getOne()">1</method>
			<method name="void _init_(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)">0</method>
			<method name="public volatile Object getZero()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.inference.TestUtils</name>
		<wmc>52</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>18</cbo>
		<rfc>108</rfc>
		<lcom>622</lcom>
		<ca>0</ca>
		<ce>18</ce>
		<npm>50</npm>
		<lcom3>0.803921568627451</lcom3>
		<loc>348</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.1532976827094474</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.596153846153846</amc>
		<cc>
			<method name="public static double pairedTTest(double[] sample1, double[] sample2)">1</method>
			<method name="public static double chiSquareTestDataSetsComparison(long[] observed1, long[] observed2)">1</method>
			<method name="public static double kolmogorovSmirnovTest(org.apache.commons.math3.distribution.RealDistribution dist, double[] data, boolean strict)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static double chiSquareTest(long[][] counts)">1</method>
			<method name="public static boolean gTestDataSetsComparison(long[] observed1, long[] observed2, double alpha)">1</method>
			<method name="public static double pairedT(double[] sample1, double[] sample2)">1</method>
			<method name="public static boolean chiSquareTestDataSetsComparison(long[] observed1, long[] observed2, double alpha)">1</method>
			<method name="public static boolean tTest(org.apache.commons.math3.stat.descriptive.StatisticalSummary sampleStats1, org.apache.commons.math3.stat.descriptive.StatisticalSummary sampleStats2, double alpha)">1</method>
			<method name="public static double homoscedasticTTest(double[] sample1, double[] sample2)">1</method>
			<method name="public static double chiSquare(long[][] counts)">1</method>
			<method name="public static boolean tTest(double mu, double[] sample, double alpha)">1</method>
			<method name="public static boolean kolmogorovSmirnovTest(org.apache.commons.math3.distribution.RealDistribution dist, double[] data, double alpha)">1</method>
			<method name="public static double kolmogorovSmirnovStatistic(double[] x, double[] y)">1</method>
			<method name="public static double tTest(double[] sample1, double[] sample2)">1</method>
			<method name="private void _init_()">0</method>
			<method name="public static double t(double mu, org.apache.commons.math3.stat.descriptive.StatisticalSummary sampleStats)">1</method>
			<method name="public static boolean tTest(double mu, org.apache.commons.math3.stat.descriptive.StatisticalSummary sampleStats, double alpha)">1</method>
			<method name="public static boolean pairedTTest(double[] sample1, double[] sample2, double alpha)">1</method>
			<method name="public static double t(double mu, double[] observed)">1</method>
			<method name="public static double t(double[] sample1, double[] sample2)">1</method>
			<method name="public static boolean homoscedasticTTest(double[] sample1, double[] sample2, double alpha)">1</method>
			<method name="public static boolean chiSquareTest(double[] expected, long[] observed, double alpha)">1</method>
			<method name="public static boolean oneWayAnovaTest(java.util.Collection categoryData, double alpha)">1</method>
			<method name="public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)">1</method>
			<method name="public static double g(double[] expected, long[] observed)">1</method>
			<method name="public static boolean chiSquareTest(long[][] counts, double alpha)">1</method>
			<method name="public static double chiSquareTest(double[] expected, long[] observed)">1</method>
			<method name="public static double exactP(double d, int m, int n, boolean strict)">1</method>
			<method name="public static double homoscedasticT(double[] sample1, double[] sample2)">1</method>
			<method name="public static double gDataSetsComparison(long[] observed1, long[] observed2)">1</method>
			<method name="public static double tTest(double mu, org.apache.commons.math3.stat.descriptive.StatisticalSummary sampleStats)">1</method>
			<method name="public static double rootLogLikelihoodRatio(long k11, long k12, long k21, long k22)">1</method>
			<method name="public static double tTest(double mu, double[] sample)">1</method>
			<method name="public static boolean gTest(double[] expected, long[] observed, double alpha)">1</method>
			<method name="public static double kolmogorovSmirnovTest(org.apache.commons.math3.distribution.RealDistribution dist, double[] data)">1</method>
			<method name="public static double homoscedasticT(org.apache.commons.math3.stat.descriptive.StatisticalSummary sampleStats1, org.apache.commons.math3.stat.descriptive.StatisticalSummary sampleStats2)">1</method>
			<method name="public static double tTest(org.apache.commons.math3.stat.descriptive.StatisticalSummary sampleStats1, org.apache.commons.math3.stat.descriptive.StatisticalSummary sampleStats2)">1</method>
			<method name="public static double chiSquareDataSetsComparison(long[] observed1, long[] observed2)">1</method>
			<method name="public static double chiSquare(double[] expected, long[] observed)">1</method>
			<method name="public static double approximateP(double d, int n, int m)">1</method>
			<method name="public static double kolmogorovSmirnovStatistic(org.apache.commons.math3.distribution.RealDistribution dist, double[] data)">1</method>
			<method name="public static double gTestDataSetsComparison(long[] observed1, long[] observed2)">1</method>
			<method name="public static boolean tTest(double[] sample1, double[] sample2, double alpha)">1</method>
			<method name="public static double gTestIntrinsic(double[] expected, long[] observed)">1</method>
			<method name="public static double homoscedasticTTest(org.apache.commons.math3.stat.descriptive.StatisticalSummary sampleStats1, org.apache.commons.math3.stat.descriptive.StatisticalSummary sampleStats2)">1</method>
			<method name="public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict)">1</method>
			<method name="public static double gTest(double[] expected, long[] observed)">1</method>
			<method name="public static double oneWayAnovaPValue(java.util.Collection categoryData)">1</method>
			<method name="public static double oneWayAnovaFValue(java.util.Collection categoryData)">1</method>
			<method name="public static double kolmogorovSmirnovTest(double[] x, double[] y)">1</method>
			<method name="public static double t(org.apache.commons.math3.stat.descriptive.StatisticalSummary sampleStats1, org.apache.commons.math3.stat.descriptive.StatisticalSummary sampleStats2)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>9</rfc>
		<lcom>21</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>4</npm>
		<lcom3>1.1666666666666667</lcom3>
		<loc>25</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.4285714285714284</amc>
		<cc>
			<method name="public int getDimension()">1</method>
			<method name="private void _init_()">0</method>
			<method name="public static org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D getInstance()">1</method>
			<method name="private Object readResolve()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D getSubSpace()">1</method>
			<method name="void _init_(org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D$1 x0)">0</method>
			<method name="public volatile org.apache.commons.math3.geometry.Space getSubSpace()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.InsufficientDataException</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>5</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>14</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.5</amc>
		<cc>
			<method name="public transient void _init_(org.apache.commons.math3.exception.util.Localizable pattern, Object[] arguments)">0</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.distance.CanberraDistance</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>53</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>25.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public double compute(double[] a, double[] b)">4</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>9</cbo>
		<rfc>12</rfc>
		<lcom>13</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>4</npm>
		<lcom3>0.7222222222222223</lcom3>
		<loc>66</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4642857142857143</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.0</amc>
		<cc>
			<method name="public volatile org.apache.commons.math3.geometry.hull.ConvexHull generate(java.util.Collection x0)">1</method>
			<method name="public double getTolerance()">1</method>
			<method name="protected void _init_(boolean includeCollinearPoints, double tolerance)">0</method>
			<method name="public boolean isIncludeCollinearPoints()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D generate(java.util.Collection points)">1</method>
			<method name="protected void _init_(boolean includeCollinearPoints)">0</method>
			<method name="protected abstract java.util.Collection findHullVertices(java.util.Collection)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.clustering.EuclideanDoublePoint</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>17</rfc>
		<lcom>6</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>9</npm>
		<lcom3>0.5625</lcom3>
		<loc>111</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>11.11111111111111</amc>
		<cc>
			<method name="public volatile double distanceFrom(Object x0)">1</method>
			<method name="public double distanceFrom(org.apache.commons.math3.stat.clustering.EuclideanDoublePoint p)">1</method>
			<method name="public int hashCode()">1</method>
			<method name="public volatile Object centroidOf(java.util.Collection x0)">1</method>
			<method name="public String toString()">1</method>
			<method name="public boolean equals(Object other)">2</method>
			<method name="public org.apache.commons.math3.stat.clustering.EuclideanDoublePoint centroidOf(java.util.Collection points)">3</method>
			<method name="public void _init_(double[] point)">0</method>
			<method name="public double[] getPoint()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.Target</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>16</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.5</amc>
		<cc>
			<method name="public double[] getTarget()">1</method>
			<method name="public void _init_(double[] observations)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.EigenDecomposition</name>
		<wmc>21</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>25</cbo>
		<rfc>60</rfc>
		<lcom>62</lcom>
		<ca>6</ca>
		<ce>19</ce>
		<npm>16</npm>
		<lcom3>0.7666666666666666</lcom3>
		<loc>2125</loc>
		<dam>1.0</dam>
		<moa>5</moa>
		<mfa>0.0</mfa>
		<cam>0.23809523809523808</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>99.61904761904762</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.linear.RealMatrix matrix)">0</method>
			<method name="public double[] getRealEigenvalues()">1</method>
			<method name="private void findEigenVectorsFromSchur(org.apache.commons.math3.linear.SchurTransformer schur)">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getVT()">3</method>
			<method name="public double getRealEigenvalue(int i)">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getSquareRoot()">4</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getD()">5</method>
			<method name="public void _init_(org.apache.commons.math3.linear.RealMatrix matrix, double splitTolerance)">0</method>
			<method name="public org.apache.commons.math3.linear.DecompositionSolver getSolver()">2</method>
			<method name="public double getDeterminant()">2</method>
			<method name="public org.apache.commons.math3.linear.RealVector getEigenvector(int i)">1</method>
			<method name="private void findEigenVectors(double[][] householderMatrix)">34</method>
			<method name="public void _init_(double[] main, double[] secondary, double splitTolerance)">0</method>
			<method name="public boolean hasComplexEigenvalues()">3</method>
			<method name="public void _init_(double[] main, double[] secondary)">0</method>
			<method name="public double[] getImagEigenvalues()">1</method>
			<method name="public double getImagEigenvalue(int i)">1</method>
			<method name="private org.apache.commons.math3.linear.SchurTransformer transformToSchur(org.apache.commons.math3.linear.RealMatrix matrix)">4</method>
			<method name="private void transformToTridiagonal(org.apache.commons.math3.linear.RealMatrix matrix)">1</method>
			<method name="private org.apache.commons.math3.complex.Complex cdiv(double xr, double xi, double yr, double yi)">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getV()">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.SchurTransformer$ShiftInfo</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>12</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="void _init_(org.apache.commons.math3.linear.SchurTransformer$1 x0)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.MultivariateDifferentiableVectorOptimizer</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>16</cbo>
		<rfc>4</rfc>
		<lcom>6</lcom>
		<ca>13</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation evaluate(org.apache.commons.math3.linear.RealVector)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealVector getStart()">1</method>
			<method name="public abstract int getParameterSize()">1</method>
			<method name="public abstract int getObservationSize()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>12</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.5</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.analysis.MultivariateFunction f)">0</method>
			<method name="public org.apache.commons.math3.analysis.MultivariateFunction getObjectiveFunction()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.ExpandableStatefulODE$SecondaryComponent</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>8</rfc>
		<lcom>2</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.75</lcom3>
		<loc>45</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.35</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.2</amc>
		<cc>
			<method name="static org.apache.commons.math3.ode.EquationsMapper access$000(org.apache.commons.math3.ode.ExpandableStatefulODE$SecondaryComponent x0)">1</method>
			<method name="static org.apache.commons.math3.ode.SecondaryEquations access$300(org.apache.commons.math3.ode.ExpandableStatefulODE$SecondaryComponent x0)">1</method>
			<method name="static double[] access$100(org.apache.commons.math3.ode.ExpandableStatefulODE$SecondaryComponent x0)">1</method>
			<method name="static double[] access$200(org.apache.commons.math3.ode.ExpandableStatefulODE$SecondaryComponent x0)">1</method>
			<method name="public void _init_(org.apache.commons.math3.ode.SecondaryEquations equation, int firstIndex)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.FunctionUtils$14</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>20</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.333333333333333</amc>
		<cc>
			<method name="public double value(double x)">1</method>
			<method name="public org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
			<method name="void _init_(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunction</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double value(long)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.FunctionUtils$13</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>20</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.0</amc>
		<cc>
			<method name="void _init_(org.apache.commons.math3.analysis.BivariateFunction, double)">0</method>
			<method name="public double value(double x)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.FunctionUtils$16</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>8</rfc>
		<lcom>4</lcom>
		<ca>3</ca>
		<ce>6</ce>
		<npm>3</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>27</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.5</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.MultivariateFunction partialDerivative(int k)">1</method>
			<method name="public org.apache.commons.math3.analysis.MultivariateVectorFunction gradient()">1</method>
			<method name="void _init_(org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction)">0</method>
			<method name="public double value(double[] x)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile</name>
		<wmc>16</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>41</rfc>
		<lcom>16</lcom>
		<ca>0</ca>
		<ce>10</ce>
		<npm>12</npm>
		<lcom3>0.74</lcom3>
		<loc>412</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.31666666666666665</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.125</amc>
		<cc>
			<method name="public long getN()">1</method>
			<method name="public void clear()">1</method>
			<method name="private double maximum()">3</method>
			<method name="void _init_()">0</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()">1</method>
			<method name="public boolean equals(Object o)">11</method>
			<method name="public double getResult()">3</method>
			<method name="private double minimum()">3</method>
			<method name="public void _init_(double p)">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public int hashCode()">3</method>
			<method name="public static org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers newMarkers(java.util.List initialFive, double p)">1</method>
			<method name="public org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic copy()">2</method>
			<method name="public double quantile()">1</method>
			<method name="public String toString()">2</method>
			<method name="public void increment(double observation)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.FunctionUtils$15</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>15</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>98</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.333333333333332</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="public double value(double x)">1</method>
			<method name="void _init_(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.FunctionUtils$18</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>20</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.333333333333333</amc>
		<cc>
			<method name="public double[] value(double[] x)">1</method>
			<method name="public org.apache.commons.math3.analysis.MultivariateMatrixFunction jacobian()">1</method>
			<method name="void _init_(org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.HarmonicOscillator$Parametric</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>9</rfc>
		<lcom>6</lcom>
		<ca>3</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>92</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.0</amc>
		<cc>
			<method name="public transient double value(double x, double[] param)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public transient double[] gradient(double x, double[] param)">1</method>
			<method name="private void validateParameters(double[] param)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.threed.FieldRotation</name>
		<wmc>37</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>87</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>14</ce>
		<npm>33</npm>
		<lcom3>0.39999999999999997</lcom3>
		<loc>5179</loc>
		<dam>1.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.15990990990990991</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>138.83783783783784</amc>
		<cc>
			<method name="public void applyTo(org.apache.commons.math3.RealFieldElement[] in, org.apache.commons.math3.RealFieldElement[] out)">1</method>
			<method name="public org.apache.commons.math3.RealFieldElement getQ0()">1</method>
			<method name="public org.apache.commons.math3.RealFieldElement[][] getMatrix()">1</method>
			<method name="public static org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation r, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D u)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.FieldRotation applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.FieldRotation r)">1</method>
			<method name="public void applyInverseTo(org.apache.commons.math3.RealFieldElement[] in, org.apache.commons.math3.RealFieldElement[] out)">1</method>
			<method name="public org.apache.commons.math3.RealFieldElement getQ3()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.FieldRotation applyTo(org.apache.commons.math3.geometry.euclidean.threed.FieldRotation r)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D u)">1</method>
			<method name="public static org.apache.commons.math3.RealFieldElement distance(org.apache.commons.math3.geometry.euclidean.threed.FieldRotation r1, org.apache.commons.math3.geometry.euclidean.threed.FieldRotation r2)">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.threed.RotationOrder order, org.apache.commons.math3.RealFieldElement alpha1, org.apache.commons.math3.RealFieldElement alpha2, org.apache.commons.math3.RealFieldElement alpha3)">0</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.FieldRotation applyTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation r)">1</method>
			<method name="public org.apache.commons.math3.RealFieldElement getQ2()">1</method>
			<method name="public void applyTo(double[] in, org.apache.commons.math3.RealFieldElement[] out)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D u)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.FieldRotation applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation r)">1</method>
			<method name="public void _init_(org.apache.commons.math3.RealFieldElement[][] m, double threshold)">0</method>
			<method name="private org.apache.commons.math3.RealFieldElement[] mat2quat(org.apache.commons.math3.RealFieldElement[][] ort)">4</method>
			<method name="public static org.apache.commons.math3.geometry.euclidean.threed.FieldRotation applyTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation r1, org.apache.commons.math3.geometry.euclidean.threed.FieldRotation rInner)">1</method>
			<method name="public void applyInverseTo(double[] in, org.apache.commons.math3.RealFieldElement[] out)">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D u, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v)">0</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Rotation toRotation()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D u)">1</method>
			<method name="public org.apache.commons.math3.RealFieldElement[] getAngles(org.apache.commons.math3.geometry.euclidean.threed.RotationOrder order)">1</method>
			<method name="public org.apache.commons.math3.RealFieldElement getQ1()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D u)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.FieldRotation revert()">1</method>
			<method name="private org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D vector(double x, double y, double z)">1</method>
			<method name="private org.apache.commons.math3.RealFieldElement[][] orthogonalizeMatrix(org.apache.commons.math3.RealFieldElement[][] m, double threshold)">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D axis, org.apache.commons.math3.RealFieldElement angle)">0</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D getAxis()">3</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D u1, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D u2, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v1, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v2)">0</method>
			<method name="public void _init_(org.apache.commons.math3.RealFieldElement q0, org.apache.commons.math3.RealFieldElement q1, org.apache.commons.math3.RealFieldElement q2, org.apache.commons.math3.RealFieldElement q3, boolean needsNormalization)">0</method>
			<method name="public org.apache.commons.math3.RealFieldElement getAngle()">4</method>
			<method name="public static org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation r, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D u)">1</method>
			<method name="public static org.apache.commons.math3.geometry.euclidean.threed.FieldRotation applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation rOuter, org.apache.commons.math3.geometry.euclidean.threed.FieldRotation rInner)">1</method>
			<method name="private org.apache.commons.math3.RealFieldElement[] buildArray(org.apache.commons.math3.RealFieldElement a0, org.apache.commons.math3.RealFieldElement a1, org.apache.commons.math3.RealFieldElement a2)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.EmpiricalDistribution$DataAdapter</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>2</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>6</lcom>
		<ca>3</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>15</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="private void _init_(org.apache.commons.math3.random.EmpiricalDistribution)">0</method>
			<method name="public abstract void computeBinStats()">1</method>
			<method name="void _init_(org.apache.commons.math3.random.EmpiricalDistribution x0, org.apache.commons.math3.random.EmpiricalDistribution$1 x1)">0</method>
			<method name="public abstract void computeStats()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.FunctionUtils$17</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>15</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>163</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>53.0</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] t)">1</method>
			<method name="public double value(double[] x)">1</method>
			<method name="void _init_(org.apache.commons.math3.analysis.DifferentiableMultivariateFunction)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.FunctionUtils$19</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>15</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>183</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>59.666666666666664</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] t)">1</method>
			<method name="void _init_(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction)">0</method>
			<method name="public double[] value(double[] x)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.sampling.FixedStepHandler</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.875</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void init(double, double[], double)">1</method>
			<method name="public abstract void handleStep(double, double[], double[], boolean)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.SingularValueDecomposition$Solver</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>11</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>4</npm>
		<lcom3>0.4</lcom3>
		<loc>92</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.40476190476190477</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.0</amc>
		<cc>
			<method name="private void _init_(double[] singularValues, org.apache.commons.math3.linear.RealMatrix uT, org.apache.commons.math3.linear.RealMatrix v, boolean nonSingular, double tol)">0</method>
			<method name="public org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealVector b)">1</method>
			<method name="void _init_(double[] x0, org.apache.commons.math3.linear.RealMatrix x1, org.apache.commons.math3.linear.RealMatrix x2, boolean x3, double x4, org.apache.commons.math3.linear.SingularValueDecomposition$1 x5)">0</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix solve(org.apache.commons.math3.linear.RealMatrix b)">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getInverse()">1</method>
			<method name="public boolean isNonSingular()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.DefaultTransformer</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>10</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>4</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>51</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>11.5</amc>
		<cc>
			<method name="public double transform(Object o)">1</method>
			<method name="public int hashCode()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean equals(Object other)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.complex.Quaternion</name>
		<wmc>30</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>42</rfc>
		<lcom>237</lcom>
		<ca>0</ca>
		<ce>7</ce>
		<npm>29</npm>
		<lcom3>0.6689655172413793</lcom3>
		<loc>711</loc>
		<dam>0.5</dam>
		<moa>5</moa>
		<mfa>0.0</mfa>
		<cam>0.296551724137931</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>22.366666666666667</amc>
		<cc>
			<method name="public org.apache.commons.math3.complex.Quaternion normalize()">2</method>
			<method name="public boolean isUnitQuaternion(double eps)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static org.apache.commons.math3.complex.Quaternion add(org.apache.commons.math3.complex.Quaternion q1, org.apache.commons.math3.complex.Quaternion q2)">1</method>
			<method name="public void _init_(double[] v)">0</method>
			<method name="public double getScalarPart()">1</method>
			<method name="public org.apache.commons.math3.complex.Quaternion multiply(double alpha)">1</method>
			<method name="public org.apache.commons.math3.complex.Quaternion add(org.apache.commons.math3.complex.Quaternion q)">1</method>
			<method name="public double getQ1()">1</method>
			<method name="public org.apache.commons.math3.complex.Quaternion subtract(org.apache.commons.math3.complex.Quaternion q)">1</method>
			<method name="public boolean equals(org.apache.commons.math3.complex.Quaternion q, double eps)">5</method>
			<method name="public String toString()">1</method>
			<method name="public org.apache.commons.math3.complex.Quaternion multiply(org.apache.commons.math3.complex.Quaternion q)">1</method>
			<method name="public double getQ2()">1</method>
			<method name="public double getQ0()">1</method>
			<method name="public static org.apache.commons.math3.complex.Quaternion multiply(org.apache.commons.math3.complex.Quaternion q1, org.apache.commons.math3.complex.Quaternion q2)">1</method>
			<method name="public org.apache.commons.math3.complex.Quaternion getInverse()">2</method>
			<method name="public boolean equals(Object other)">7</method>
			<method name="public void _init_(double a, double b, double c, double d)">0</method>
			<method name="public boolean isPureQuaternion(double eps)">2</method>
			<method name="public void _init_(double scalar, double[] v)">0</method>
			<method name="public double[] getVectorPart()">1</method>
			<method name="public double getNorm()">1</method>
			<method name="public int hashCode()">2</method>
			<method name="public static org.apache.commons.math3.complex.Quaternion subtract(org.apache.commons.math3.complex.Quaternion q1, org.apache.commons.math3.complex.Quaternion q2)">1</method>
			<method name="public org.apache.commons.math3.complex.Quaternion getConjugate()">1</method>
			<method name="public double dotProduct(org.apache.commons.math3.complex.Quaternion q)">1</method>
			<method name="public double getQ3()">1</method>
			<method name="public org.apache.commons.math3.complex.Quaternion getPositivePolarForm()">2</method>
			<method name="public static double dotProduct(org.apache.commons.math3.complex.Quaternion q1, org.apache.commons.math3.complex.Quaternion q2)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.clustering.evaluation.SumOfClusterVariances</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>13</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>56</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>27.0</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.ml.distance.DistanceMeasure measure)">0</method>
			<method name="public double score(java.util.List clusters)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactory</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>3</noc>
		<cbo>10</cbo>
		<rfc>18</rfc>
		<lcom>7</lcom>
		<ca>4</ca>
		<ce>6</ce>
		<npm>2</npm>
		<lcom3>0.6</lcom3>
		<loc>161</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>25.5</amc>
		<cc>
			<method name="protected synchronized org.apache.commons.math3.util.Pair getRuleInternal(int numberOfPoints)">1</method>
			<method name="public void _init_()">0</method>
			<method name="protected void addRule(org.apache.commons.math3.util.Pair rule)">1</method>
			<method name="public org.apache.commons.math3.util.Pair getRule(int numberOfPoints)">1</method>
			<method name="protected abstract org.apache.commons.math3.util.Pair computeRule(int)">1</method>
			<method name="private static org.apache.commons.math3.util.Pair convertToDouble(org.apache.commons.math3.util.Pair rule)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>9</rfc>
		<lcom>4</lcom>
		<ca>3</ca>
		<ce>8</ce>
		<npm>3</npm>
		<lcom3>0.8333333333333334</lcom3>
		<loc>34</loc>
		<dam>0.5</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="public org.apache.commons.math3.optim.nonlinear.vector.ModelFunction getModelFunction()">1</method>
			<method name="public void _init_(org.apache.commons.math3.fitting.CurveFitter, org.apache.commons.math3.analysis.ParametricUnivariateFunction f)">0</method>
			<method name="static org.apache.commons.math3.analysis.ParametricUnivariateFunction access$100(org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction x0)">1</method>
			<method name="public org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian getModelFunctionJacobian()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.oned.Interval</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>11</rfc>
		<lcom>17</lcom>
		<ca>4</ca>
		<ce>1</ce>
		<npm>10</npm>
		<lcom3>0.2222222222222222</lcom3>
		<loc>87</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.5</amc>
		<cc>
			<method name="public double getLength()">1</method>
			<method name="public double getSize()">1</method>
			<method name="public double getLower()">1</method>
			<method name="public double getBarycenter()">1</method>
			<method name="public double getMidPoint()">1</method>
			<method name="public double getSup()">1</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(double point, double tolerance)">5</method>
			<method name="public double getInf()">1</method>
			<method name="public double getUpper()">1</method>
			<method name="public void _init_(double lower, double upper)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.spherical.twod.Circle$CircleTransform</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>13</rfc>
		<lcom>9</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>6</npm>
		<lcom3>0.2</lcom3>
		<loc>58</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.43333333333333335</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.5</amc>
		<cc>
			<method name="public org.apache.commons.math3.geometry.partitioning.SubHyperplane apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane sub, org.apache.commons.math3.geometry.partitioning.Hyperplane original, org.apache.commons.math3.geometry.partitioning.Hyperplane transformed)">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.Point apply(org.apache.commons.math3.geometry.Point x0)">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.threed.Rotation rotation)">0</method>
			<method name="public volatile org.apache.commons.math3.geometry.partitioning.Hyperplane apply(org.apache.commons.math3.geometry.partitioning.Hyperplane x0)">1</method>
			<method name="public org.apache.commons.math3.geometry.spherical.twod.Circle apply(org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane)">1</method>
			<method name="public org.apache.commons.math3.geometry.spherical.twod.S2Point apply(org.apache.commons.math3.geometry.Point point)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.MathUtils</name>
		<wmc>14</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>90</cbo>
		<rfc>30</rfc>
		<lcom>91</lcom>
		<ca>84</ca>
		<ce>6</ce>
		<npm>13</npm>
		<lcom3>1.0769230769230769</lcom3>
		<loc>244</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.11428571428571428</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>16.285714285714285</amc>
		<cc>
			<method name="public static int hash(double value)">1</method>
			<method name="public static long copySign(long magnitude, long sign)">1</method>
			<method name="public static short copySign(short magnitude, short sign)">1</method>
			<method name="public static void checkFinite(double[] val)">1</method>
			<method name="public static double normalizeAngle(double a, double center)">1</method>
			<method name="public static boolean equals(double x, double y)">1</method>
			<method name="public static int copySign(int magnitude, int sign)">1</method>
			<method name="public static void checkFinite(double x)">1</method>
			<method name="private void _init_()">0</method>
			<method name="public static double reduce(double a, double period, double offset)">1</method>
			<method name="public static int hash(double[] value)">1</method>
			<method name="public static transient void checkNotNull(Object o, org.apache.commons.math3.exception.util.Localizable pattern, Object[] args)">1</method>
			<method name="public static byte copySign(byte magnitude, byte sign)">1</method>
			<method name="public static void checkNotNull(Object o)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.correlation.SpearmansCorrelation</name>
		<wmc>12</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>39</rfc>
		<lcom>44</lcom>
		<ca>0</ca>
		<ce>10</ce>
		<npm>9</npm>
		<lcom3>0.5454545454545454</lcom3>
		<loc>317</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.3194444444444444</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>25.166666666666668</amc>
		<cc>
			<method name="private org.apache.commons.math3.linear.RealMatrix rankTransform(org.apache.commons.math3.linear.RealMatrix matrix)">8</method>
			<method name="public void _init_(org.apache.commons.math3.linear.RealMatrix dataMatrix, org.apache.commons.math3.stat.ranking.RankingAlgorithm rankingAlgorithm)">0</method>
			<method name="private double[] removeValues(double[] input, java.util.Set indices)">4</method>
			<method name="public double correlation(double[] xArray, double[] yArray)">5</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix computeCorrelationMatrix(org.apache.commons.math3.linear.RealMatrix matrix)">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getCorrelationMatrix()">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix computeCorrelationMatrix(double[][] matrix)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(org.apache.commons.math3.linear.RealMatrix dataMatrix)">0</method>
			<method name="public org.apache.commons.math3.stat.correlation.PearsonsCorrelation getRankCorrelation()">1</method>
			<method name="public void _init_(org.apache.commons.math3.stat.ranking.RankingAlgorithm rankingAlgorithm)">0</method>
			<method name="private java.util.List getNaNPositions(double[] input)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>8</rfc>
		<lcom>4</lcom>
		<ca>0</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>0.0</lcom3>
		<loc>50</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.0</amc>
		<cc>
			<method name="public volatile boolean converged(int x0, Object x1, Object x2)">1</method>
			<method name="public void _init_(double relTol, double absTol)">0</method>
			<method name="public boolean converged(int iteration, org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation previous, org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation current)">3</method>
			<method name="public void _init_(double tol)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator</name>
		<wmc>10</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>29</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>7</ce>
		<npm>8</npm>
		<lcom3>0.5</lcom3>
		<loc>429</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.22</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>41.3</amc>
		<cc>
			<method name="protected org.apache.commons.math3.ode.sampling.StepInterpolator doCopy()">1</method>
			<method name="public void readExternal(java.io.ObjectInput in)">1</method>
			<method name="protected void computeInterpolatedStateAndDerivatives(double theta, double oneMinusThetaH)">4</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator interpolator)">0</method>
			<method name="public void writeExternal(java.io.ObjectOutput out)">1</method>
			<method name="public void reinitialize(double time, double stepSize, double[] scaledDerivative, org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieckVector)">1</method>
			<method name="public double[] getInterpolatedStateVariation()">1</method>
			<method name="public void rescale(double stepSize)">4</method>
			<method name="public void reinitialize(double[] y, boolean forward, org.apache.commons.math3.ode.EquationsMapper primaryMapper, org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.WeightedObservedPoint</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>16</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>16</ca>
		<ce>0</ce>
		<npm>4</npm>
		<lcom3>0.8333333333333334</lcom3>
		<loc>29</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.25</amc>
		<cc>
			<method name="public void _init_(double weight, double x, double y)">0</method>
			<method name="public double getY()">1</method>
			<method name="public double getWeight()">1</method>
			<method name="public double getX()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.gradient.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.interpolation.TrivariateGridInterpolator</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.analysis.TrivariateFunction interpolate(double[], double[], double[], double[][][])">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.polynomials.PolynomialFunction</name>
		<wmc>17</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>20</cbo>
		<rfc>42</rfc>
		<lcom>0</lcom>
		<ca>9</ca>
		<ce>11</ce>
		<npm>14</npm>
		<lcom3>0.625</lcom3>
		<loc>612</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.24509803921568626</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>34.88235294117647</amc>
		<cc>
			<method name="private static String toString(double coeff)">2</method>
			<method name="public org.apache.commons.math3.analysis.polynomials.PolynomialFunction add(org.apache.commons.math3.analysis.polynomials.PolynomialFunction p)">3</method>
			<method name="public void _init_(double[] c)">0</method>
			<method name="public double value(double x)">1</method>
			<method name="protected static double[] differentiate(double[] coefficients)">1</method>
			<method name="public org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
			<method name="public int degree()">1</method>
			<method name="protected static double evaluate(double[] coefficients, double argument)">1</method>
			<method name="public org.apache.commons.math3.analysis.polynomials.PolynomialFunction subtract(org.apache.commons.math3.analysis.polynomials.PolynomialFunction p)">3</method>
			<method name="public int hashCode()">1</method>
			<method name="public double[] getCoefficients()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="public org.apache.commons.math3.analysis.polynomials.PolynomialFunction negate()">2</method>
			<method name="public org.apache.commons.math3.analysis.polynomials.PolynomialFunction polynomialDerivative()">1</method>
			<method name="public org.apache.commons.math3.analysis.polynomials.PolynomialFunction multiply(org.apache.commons.math3.analysis.polynomials.PolynomialFunction p)">3</method>
			<method name="public boolean equals(Object obj)">4</method>
			<method name="public String toString()">10</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.inference.OneWayAnova$AnovaStats</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>6</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>0.5</lcom3>
		<loc>35</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.4</amc>
		<cc>
			<method name="void _init_(int x0, int x1, double x2, org.apache.commons.math3.stat.inference.OneWayAnova$1 x3)">0</method>
			<method name="static double access$000(org.apache.commons.math3.stat.inference.OneWayAnova$AnovaStats x0)">1</method>
			<method name="private void _init_(int dfbg, int dfwg, double F)">0</method>
			<method name="static int access$200(org.apache.commons.math3.stat.inference.OneWayAnova$AnovaStats x0)">1</method>
			<method name="static int access$100(org.apache.commons.math3.stat.inference.OneWayAnova$AnovaStats x0)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.rank.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.BinomialDistribution</name>
		<wmc>12</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>21</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>12</npm>
		<lcom3>0.4848484848484848</lcom3>
		<loc>181</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4166666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.833333333333334</amc>
		<cc>
			<method name="public void _init_(int trials, double p)">0</method>
			<method name="public double logProbability(int x)">5</method>
			<method name="public boolean isSupportConnected()">1</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, int trials, double p)">0</method>
			<method name="public int getNumberOfTrials()">1</method>
			<method name="public int getSupportUpperBound()">2</method>
			<method name="public double getNumericalVariance()">1</method>
			<method name="public double getNumericalMean()">1</method>
			<method name="public double cumulativeProbability(int x)">3</method>
			<method name="public double getProbabilityOfSuccess()">1</method>
			<method name="public double probability(int x)">2</method>
			<method name="public int getSupportLowerBound()">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.inference.BinomialTest$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>28</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>20</rfc>
		<lcom>14</lcom>
		<ca>1</ca>
		<ce>13</ce>
		<npm>7</npm>
		<lcom3>0.7142857142857143</lcom3>
		<loc>172</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.35714285714285715</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.75</amc>
		<cc>
			<method name="public int getMaxEvaluations()">1</method>
			<method name="public int getEvaluations()">1</method>
			<method name="public void _init_(org.apache.commons.math3.optimization.univariate.BaseUnivariateOptimizer optimizer, int starts, org.apache.commons.math3.random.RandomGenerator generator)">0</method>
			<method name="public org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair optimize(int maxEval, org.apache.commons.math3.analysis.UnivariateFunction f, org.apache.commons.math3.optimization.GoalType goal, double min, double max, double startValue)">4</method>
			<method name="public org.apache.commons.math3.optimization.ConvergenceChecker getConvergenceChecker()">1</method>
			<method name="private void sortPairs(org.apache.commons.math3.optimization.GoalType goal)">1</method>
			<method name="public org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair optimize(int maxEval, org.apache.commons.math3.analysis.UnivariateFunction f, org.apache.commons.math3.optimization.GoalType goal, double min, double max)">1</method>
			<method name="public org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair[] getOptima()">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.dfp.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain</name>
		<wmc>8</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>31</rfc>
		<lcom>28</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>7</npm>
		<lcom3>2.0</lcom3>
		<loc>262</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3125</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.75</amc>
		<cc>
			<method name="public volatile org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D generate(java.util.Collection x0)">1</method>
			<method name="public volatile double getTolerance()">1</method>
			<method name="public void _init_(boolean includeCollinearPoints, double tolerance)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(boolean includeCollinearPoints)">0</method>
			<method name="private void updateHull(org.apache.commons.math3.geometry.euclidean.twod.Vector2D point, java.util.List hull)">11</method>
			<method name="public volatile boolean isIncludeCollinearPoints()">1</method>
			<method name="public java.util.Collection findHullVertices(java.util.Collection points)">7</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.rank.Percentile$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>12</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>35</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>33.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.solvers.UnivariateDifferentiableSolver</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.differentiation.JacobianFunction</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>85</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>41.0</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction f)">0</method>
			<method name="public double[][] value(double[] point)">4</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.BoundaryAttribute</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>11</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>0.5</lcom3>
		<loc>20</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="public org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.partitioning.SubHyperplane plusOutside, org.apache.commons.math3.geometry.partitioning.SubHyperplane plusInside)">0</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.spherical.oned.Sphere1D$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.SecondOrderDifferentialEquations</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract int getDimension()">1</method>
			<method name="public abstract void computeSecondDerivatives(double, double[], double[], double[])">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.NullArgumentException</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>130</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>127</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>14</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.5</amc>
		<cc>
			<method name="public transient void _init_(org.apache.commons.math3.exception.util.Localizable pattern, Object[] arguments)">0</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.StatUtils</name>
		<wmc>35</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>22</cbo>
		<rfc>77</rfc>
		<lcom>521</lcom>
		<ca>1</ca>
		<ce>21</ce>
		<npm>32</npm>
		<lcom3>0.9352941176470588</lcom3>
		<loc>511</loc>
		<dam>1.0</dam>
		<moa>10</moa>
		<mfa>0.0</mfa>
		<cam>0.4117647058823529</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.314285714285715</amc>
		<cc>
			<method name="public static double percentile(double[] values, double p)">1</method>
			<method name="public static double[] normalize(double[] sample)">3</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static double varianceDifference(double[] sample1, double[] sample2, double meanDifference)">1</method>
			<method name="private void _init_()">0</method>
			<method name="public static double max(double[] values, int begin, int length)">1</method>
			<method name="public static double[] mode(double[] sample)">1</method>
			<method name="public static double sumLog(double[] values, int begin, int length)">1</method>
			<method name="private static double[] getMode(double[] values, int begin, int length)">4</method>
			<method name="public static double variance(double[] values)">1</method>
			<method name="public static double percentile(double[] values, int begin, int length, double p)">1</method>
			<method name="public static double sum(double[] values, int begin, int length)">1</method>
			<method name="public static double variance(double[] values, int begin, int length)">1</method>
			<method name="public static double geometricMean(double[] values, int begin, int length)">1</method>
			<method name="public static double populationVariance(double[] values, int begin, int length)">1</method>
			<method name="public static double[] mode(double[] sample, int begin, int length)">4</method>
			<method name="public static double variance(double[] values, double mean)">1</method>
			<method name="public static double mean(double[] values)">1</method>
			<method name="public static double max(double[] values)">1</method>
			<method name="public static double sumSq(double[] values)">1</method>
			<method name="public static double product(double[] values)">1</method>
			<method name="public static double populationVariance(double[] values, double mean, int begin, int length)">1</method>
			<method name="public static double geometricMean(double[] values)">1</method>
			<method name="public static double populationVariance(double[] values, double mean)">1</method>
			<method name="public static double mean(double[] values, int begin, int length)">1</method>
			<method name="public static double sumSq(double[] values, int begin, int length)">1</method>
			<method name="public static double min(double[] values, int begin, int length)">1</method>
			<method name="public static double product(double[] values, int begin, int length)">1</method>
			<method name="public static double sumDifference(double[] sample1, double[] sample2)">1</method>
			<method name="public static double sum(double[] values)">1</method>
			<method name="public static double min(double[] values)">1</method>
			<method name="public static double variance(double[] values, double mean, int begin, int length)">1</method>
			<method name="public static double sumLog(double[] values)">1</method>
			<method name="public static double populationVariance(double[] values)">1</method>
			<method name="public static double meanDifference(double[] sample1, double[] sample2)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D</name>
		<wmc>82</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>125</rfc>
		<lcom>155</lcom>
		<ca>1</ca>
		<ce>11</ce>
		<npm>82</npm>
		<lcom3>0.27469135802469136</lcom3>
		<loc>2107</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.2423780487804878</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>24.646341463414632</amc>
		<cc>
			<method name="public org.apache.commons.math3.RealFieldElement distance1(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v)">1</method>
			<method name="public org.apache.commons.math3.RealFieldElement getNormSq()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D subtract(org.apache.commons.math3.RealFieldElement factor, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D orthogonal()">1</method>
			<method name="public org.apache.commons.math3.RealFieldElement getNormInf()">4</method>
			<method name="public static org.apache.commons.math3.RealFieldElement angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D v1, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v2)">1</method>
			<method name="public static org.apache.commons.math3.RealFieldElement distanceInf(org.apache.commons.math3.geometry.euclidean.threed.Vector3D v1, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v2)">1</method>
			<method name="public org.apache.commons.math3.RealFieldElement distanceSq(org.apache.commons.math3.geometry.euclidean.threed.Vector3D v)">1</method>
			<method name="public static org.apache.commons.math3.RealFieldElement distance1(org.apache.commons.math3.geometry.euclidean.threed.Vector3D v1, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v2)">1</method>
			<method name="public static org.apache.commons.math3.RealFieldElement distanceSq(org.apache.commons.math3.geometry.euclidean.threed.Vector3D v1, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v2)">1</method>
			<method name="public static org.apache.commons.math3.RealFieldElement distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D v1, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v2)">1</method>
			<method name="public boolean isInfinite()">5</method>
			<method name="public org.apache.commons.math3.RealFieldElement getAlpha()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D v)">1</method>
			<method name="public static org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D crossProduct(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v1, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v2)">1</method>
			<method name="public boolean isNaN()">4</method>
			<method name="public static org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D v1, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v2)">1</method>
			<method name="public void _init_(org.apache.commons.math3.RealFieldElement a, org.apache.commons.math3.geometry.euclidean.threed.Vector3D u)">0</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D add(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D subtract(double factor, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v)">1</method>
			<method name="public static org.apache.commons.math3.RealFieldElement angle(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D v2)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D scalarMultiply(org.apache.commons.math3.RealFieldElement a)">1</method>
			<method name="public static org.apache.commons.math3.RealFieldElement distanceSq(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D v2)">1</method>
			<method name="public org.apache.commons.math3.RealFieldElement getDelta()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D subtract(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v)">1</method>
			<method name="public static org.apache.commons.math3.RealFieldElement distanceInf(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v1, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v2)">1</method>
			<method name="public static org.apache.commons.math3.RealFieldElement dotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D v1, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v2)">1</method>
			<method name="public void _init_(double a1, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D u1, double a2, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D u2, double a3, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D u3)">0</method>
			<method name="public void _init_(org.apache.commons.math3.RealFieldElement a1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D u1, org.apache.commons.math3.RealFieldElement a2, org.apache.commons.math3.geometry.euclidean.threed.Vector3D u2)">0</method>
			<method name="public void _init_(double a1, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D u1, double a2, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D u2, double a3, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D u3, double a4, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D u4)">0</method>
			<method name="public void _init_(org.apache.commons.math3.RealFieldElement a1, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D u1, org.apache.commons.math3.RealFieldElement a2, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D u2, org.apache.commons.math3.RealFieldElement a3, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D u3, org.apache.commons.math3.RealFieldElement a4, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D u4)">0</method>
			<method name="public void _init_(org.apache.commons.math3.RealFieldElement[] v)">0</method>
			<method name="public static org.apache.commons.math3.RealFieldElement angle(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v1, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v2)">1</method>
			<method name="public void _init_(org.apache.commons.math3.RealFieldElement a, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D u)">0</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D add(org.apache.commons.math3.geometry.euclidean.threed.Vector3D v)">1</method>
			<method name="public org.apache.commons.math3.RealFieldElement distanceInf(org.apache.commons.math3.geometry.euclidean.threed.Vector3D v)">4</method>
			<method name="public org.apache.commons.math3.RealFieldElement distanceInf(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v)">4</method>
			<method name="public static org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D crossProduct(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D v2)">1</method>
			<method name="public void _init_(org.apache.commons.math3.RealFieldElement a1, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D u1, org.apache.commons.math3.RealFieldElement a2, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D u2)">0</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D subtract(org.apache.commons.math3.RealFieldElement factor, org.apache.commons.math3.geometry.euclidean.threed.Vector3D v)">1</method>
			<method name="public org.apache.commons.math3.RealFieldElement distance1(org.apache.commons.math3.geometry.euclidean.threed.Vector3D v)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D negate()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D scalarMultiply(double a)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D add(double factor, org.apache.commons.math3.geometry.euclidean.threed.Vector3D v)">1</method>
			<method name="public void _init_(org.apache.commons.math3.RealFieldElement x, org.apache.commons.math3.RealFieldElement y, org.apache.commons.math3.RealFieldElement z)">0</method>
			<method name="public org.apache.commons.math3.RealFieldElement getNorm()">1</method>
			<method name="public static org.apache.commons.math3.RealFieldElement distance1(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v1, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v2)">1</method>
			<method name="public void _init_(org.apache.commons.math3.RealFieldElement a1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D u1, org.apache.commons.math3.RealFieldElement a2, org.apache.commons.math3.geometry.euclidean.threed.Vector3D u2, org.apache.commons.math3.RealFieldElement a3, org.apache.commons.math3.geometry.euclidean.threed.Vector3D u3)">0</method>
			<method name="public static org.apache.commons.math3.RealFieldElement distanceInf(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D v2)">1</method>
			<method name="public static org.apache.commons.math3.RealFieldElement dotProduct(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D v2)">1</method>
			<method name="public org.apache.commons.math3.RealFieldElement getX()">1</method>
			<method name="public org.apache.commons.math3.RealFieldElement distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D v)">1</method>
			<method name="public org.apache.commons.math3.RealFieldElement getY()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D toVector3D()">1</method>
			<method name="public org.apache.commons.math3.RealFieldElement distanceSq(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v)">1</method>
			<method name="public org.apache.commons.math3.RealFieldElement getZ()">1</method>
			<method name="public void _init_(org.apache.commons.math3.RealFieldElement a1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D u1, org.apache.commons.math3.RealFieldElement a2, org.apache.commons.math3.geometry.euclidean.threed.Vector3D u2, org.apache.commons.math3.RealFieldElement a3, org.apache.commons.math3.geometry.euclidean.threed.Vector3D u3, org.apache.commons.math3.RealFieldElement a4, org.apache.commons.math3.geometry.euclidean.threed.Vector3D u4)">0</method>
			<method name="public org.apache.commons.math3.RealFieldElement[] toArray()">1</method>
			<method name="public void _init_(double a1, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D u1, double a2, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D u2)">0</method>
			<method name="public org.apache.commons.math3.RealFieldElement distance(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v)">1</method>
			<method name="public void _init_(org.apache.commons.math3.RealFieldElement a1, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D u1, org.apache.commons.math3.RealFieldElement a2, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D u2, org.apache.commons.math3.RealFieldElement a3, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D u3)">0</method>
			<method name="public void _init_(double a, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D u)">0</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D subtract(double factor, org.apache.commons.math3.geometry.euclidean.threed.Vector3D v)">1</method>
			<method name="public String toString(java.text.NumberFormat format)">1</method>
			<method name="public String toString()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D add(org.apache.commons.math3.RealFieldElement factor, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v)">1</method>
			<method name="public static org.apache.commons.math3.RealFieldElement distance(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D v2)">1</method>
			<method name="public static org.apache.commons.math3.RealFieldElement distance(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v1, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v2)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D add(double factor, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D crossProduct(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v)">1</method>
			<method name="public boolean equals(Object other)">7</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D subtract(org.apache.commons.math3.geometry.euclidean.threed.Vector3D v)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D normalize()">1</method>
			<method name="public static org.apache.commons.math3.RealFieldElement distance1(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D v2)">1</method>
			<method name="public int hashCode()">2</method>
			<method name="public static org.apache.commons.math3.RealFieldElement dotProduct(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v1, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v2)">1</method>
			<method name="public org.apache.commons.math3.RealFieldElement dotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D v)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D add(org.apache.commons.math3.RealFieldElement factor, org.apache.commons.math3.geometry.euclidean.threed.Vector3D v)">1</method>
			<method name="public static org.apache.commons.math3.RealFieldElement distanceSq(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v1, org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v2)">1</method>
			<method name="public org.apache.commons.math3.RealFieldElement getNorm1()">1</method>
			<method name="public org.apache.commons.math3.RealFieldElement dotProduct(org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D v)">1</method>
			<method name="public void _init_(org.apache.commons.math3.RealFieldElement alpha, org.apache.commons.math3.RealFieldElement delta)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.complex.ComplexField</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>9</rfc>
		<lcom>36</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>6</npm>
		<lcom3>1.125</lcom3>
		<loc>32</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.4444444444444446</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public Class getRuntimeClass()">1</method>
			<method name="public org.apache.commons.math3.complex.Complex getOne()">1</method>
			<method name="private Object readResolve()">1</method>
			<method name="public org.apache.commons.math3.complex.Complex getZero()">1</method>
			<method name="void _init_(org.apache.commons.math3.complex.ComplexField$1 x0)">0</method>
			<method name="public static org.apache.commons.math3.complex.ComplexField getInstance()">1</method>
			<method name="public volatile Object getOne()">1</method>
			<method name="public volatile Object getZero()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.Point</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>47</cbo>
		<rfc>3</rfc>
		<lcom>3</lcom>
		<ca>46</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>3</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.geometry.Space getSpace()">1</method>
			<method name="public abstract double distance(org.apache.commons.math3.geometry.Point)">1</method>
			<method name="public abstract boolean isNaN()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.RealVector$Entry</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>2</noc>
		<cbo>9</cbo>
		<rfc>8</rfc>
		<lcom>2</lcom>
		<ca>9</ca>
		<ce>1</ce>
		<npm>5</npm>
		<lcom3>0.25</lcom3>
		<loc>36</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.8</amc>
		<cc>
			<method name="public void setValue(double value)">1</method>
			<method name="public void setIndex(int index)">1</method>
			<method name="public double getValue()">1</method>
			<method name="public int getIndex()">1</method>
			<method name="public void _init_(org.apache.commons.math3.linear.RealVector)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>38</rfc>
		<lcom>3</lcom>
		<ca>0</ca>
		<ce>12</ce>
		<npm>3</npm>
		<lcom3>1.5</lcom3>
		<loc>421</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>139.0</amc>
		<cc>
			<method name="public void _init_(int nSteps, double minStep, double maxStep, double[] vecAbsoluteTolerance, double[] vecRelativeTolerance)">0</method>
			<method name="public void integrate(org.apache.commons.math3.ode.ExpandableStatefulODE equations, double t)">1</method>
			<method name="public void _init_(int nSteps, double minStep, double maxStep, double scalAbsoluteTolerance, double scalRelativeTolerance)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>28</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.DifferentiableMultivariateMultiStartOptimizer</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.optimization.DifferentiableMultivariateOptimizer optimizer, int starts, org.apache.commons.math3.random.RandomVectorGenerator generator)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.MathArrays$2</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>21</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_()">0</method>
			<method name="public int compare(org.apache.commons.math3.util.Pair o1, org.apache.commons.math3.util.Pair o2)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.MathArrays$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>21</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_()">0</method>
			<method name="public int compare(org.apache.commons.math3.util.Pair o1, org.apache.commons.math3.util.Pair o2)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.clustering.Clusterable</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>5</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract Object centroidOf(java.util.Collection)">1</method>
			<method name="public abstract double distanceFrom(Object)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.MathArrays$3</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>40</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>37.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.SaddlePointExpansion</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>10</rfc>
		<lcom>8</lcom>
		<ca>3</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>0.5</lcom3>
		<loc>394</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4166666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>77.4</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static double logBinomialProbability(int x, int n, double p, double q)">5</method>
			<method name="static void _clinit_()">0</method>
			<method name="static double getDeviancePart(double x, double mu)">3</method>
			<method name="static double getStirlingError(double z)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.DifferentiableUnivariateMatrixFunction</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.analysis.UnivariateMatrixFunction derivative()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.CholeskyDecomposition$Solver</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>16</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>4</npm>
		<lcom3>0.2</lcom3>
		<loc>304</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.36666666666666664</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>49.5</amc>
		<cc>
			<method name="private void _init_(double[][] lTData)">0</method>
			<method name="void _init_(double[][] x0, org.apache.commons.math3.linear.CholeskyDecomposition$1 x1)">0</method>
			<method name="public org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealVector b)">6</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix solve(org.apache.commons.math3.linear.RealMatrix b)">10</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getInverse()">1</method>
			<method name="public boolean isNonSingular()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>8</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[])">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.PreconditionedIterativeLinearSolver</name>
		<wmc>9</wmc>
		<dit>0</dit>
		<noc>2</noc>
		<cbo>12</cbo>
		<rfc>20</rfc>
		<lcom>36</lcom>
		<ca>2</ca>
		<ce>10</ce>
		<npm>8</npm>
		<lcom3>2.0</lcom3>
		<loc>110</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.222222222222221</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.util.IterationManager manager)">0</method>
			<method name="public org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealLinearOperator a, org.apache.commons.math3.linear.RealVector b)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealLinearOperator a, org.apache.commons.math3.linear.RealLinearOperator m, org.apache.commons.math3.linear.RealVector b, org.apache.commons.math3.linear.RealVector x0)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealVector solveInPlace(org.apache.commons.math3.linear.RealLinearOperator, org.apache.commons.math3.linear.RealLinearOperator, org.apache.commons.math3.linear.RealVector, org.apache.commons.math3.linear.RealVector)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealLinearOperator a, org.apache.commons.math3.linear.RealVector b, org.apache.commons.math3.linear.RealVector x0)">1</method>
			<method name="public void _init_(int maxIterations)">0</method>
			<method name="public org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealLinearOperator a, org.apache.commons.math3.linear.RealLinearOperator m, org.apache.commons.math3.linear.RealVector b)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector solveInPlace(org.apache.commons.math3.linear.RealLinearOperator a, org.apache.commons.math3.linear.RealVector b, org.apache.commons.math3.linear.RealVector x0)">1</method>
			<method name="protected static void checkParameters(org.apache.commons.math3.linear.RealLinearOperator a, org.apache.commons.math3.linear.RealLinearOperator m, org.apache.commons.math3.linear.RealVector b, org.apache.commons.math3.linear.RealVector x0)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.rank.Median</name>
		<wmc>9</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>12</rfc>
		<lcom>36</lcom>
		<ca>0</ca>
		<ce>6</ce>
		<npm>8</npm>
		<lcom3>1.125</lcom3>
		<loc>65</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4222222222222222</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.rank.Percentile withEstimationType(org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType x0)">1</method>
			<method name="public org.apache.commons.math3.stat.descriptive.rank.Median withNaNStrategy(org.apache.commons.math3.stat.ranking.NaNStrategy newNaNStrategy)">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.rank.Percentile withKthSelector(org.apache.commons.math3.util.KthSelector x0)">1</method>
			<method name="public org.apache.commons.math3.stat.descriptive.rank.Median withKthSelector(org.apache.commons.math3.util.KthSelector newKthSelector)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public org.apache.commons.math3.stat.descriptive.rank.Median withEstimationType(org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType newEstimationType)">1</method>
			<method name="public void _init_(org.apache.commons.math3.stat.descriptive.rank.Median original)">0</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.rank.Percentile withNaNStrategy(org.apache.commons.math3.stat.ranking.NaNStrategy x0)">1</method>
			<method name="private void _init_(org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType estimationType, org.apache.commons.math3.stat.ranking.NaNStrategy nanStrategy, org.apache.commons.math3.util.KthSelector kthSelector)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.events.EventState$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>8</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>34</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.0</amc>
		<cc>
			<method name="void _init_(org.apache.commons.math3.ode.events.EventState, org.apache.commons.math3.ode.sampling.StepInterpolator)">0</method>
			<method name="public double value(double t)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$NoBoundsMapper</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>10</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.3333333333333335</amc>
		<cc>
			<method name="public double unboundedToBounded(double y)">1</method>
			<method name="public double boundedToUnbounded(double x)">1</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex</name>
		<wmc>15</wmc>
		<dit>1</dit>
		<noc>2</noc>
		<cbo>14</cbo>
		<rfc>34</rfc>
		<lcom>31</lcom>
		<ca>3</ca>
		<ce>11</ce>
		<npm>7</npm>
		<lcom3>0.6428571428571429</lcom3>
		<loc>495</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.23703703703703705</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.8</amc>
		<cc>
			<method name="private static double[] createHypercubeSteps(int n, double sideLength)">2</method>
			<method name="protected void setPoint(int index, org.apache.commons.math3.optim.PointValuePair point)">3</method>
			<method name="protected void replaceWorstPoint(org.apache.commons.math3.optim.PointValuePair pointValuePair, java.util.Comparator comparator)">3</method>
			<method name="protected void _init_(double[] steps)">0</method>
			<method name="public void evaluate(org.apache.commons.math3.analysis.MultivariateFunction evaluationFunction, java.util.Comparator comparator)">3</method>
			<method name="public int getSize()">1</method>
			<method name="public void build(double[] startPoint)">4</method>
			<method name="protected void _init_(int n)">0</method>
			<method name="public org.apache.commons.math3.optim.PointValuePair[] getPoints()">1</method>
			<method name="public int getDimension()">1</method>
			<method name="protected void _init_(int n, double sideLength)">0</method>
			<method name="public abstract void iterate(org.apache.commons.math3.analysis.MultivariateFunction, java.util.Comparator)">1</method>
			<method name="protected void setPoints(org.apache.commons.math3.optim.PointValuePair[] points)">2</method>
			<method name="public org.apache.commons.math3.optim.PointValuePair getPoint(int index)">3</method>
			<method name="protected void _init_(double[][] referenceSimplex)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.HarmonicCurveFitter$ParameterGuesser</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>22</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>2</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>490</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>96.4</amc>
		<cc>
			<method name="public double[] guess()">1</method>
			<method name="private java.util.List sortObservations(java.util.Collection unsorted)">6</method>
			<method name="public void _init_(java.util.Collection observations)">0</method>
			<method name="private double guessPhi(org.apache.commons.math3.fitting.WeightedObservedPoint[] observations)">2</method>
			<method name="private double[] guessAOmega(org.apache.commons.math3.fitting.WeightedObservedPoint[] observations)">9</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.fitting.CurveFitter$OldTheoreticalValuesFunction$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>11</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>45</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.0</amc>
		<cc>
			<method name="void _init_(org.apache.commons.math3.optimization.fitting.CurveFitter$OldTheoreticalValuesFunction)">0</method>
			<method name="public double[][] value(double[] point)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D$NoSubSpaceException</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>13</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.BaseMultivariateOptimizer</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>10</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.optimization.PointValuePair optimize(int, org.apache.commons.math3.analysis.MultivariateFunction, org.apache.commons.math3.optimization.GoalType, double[])">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Gaussian$Parametric</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>3</noc>
		<cbo>9</cbo>
		<rfc>10</rfc>
		<lcom>6</lcom>
		<ca>4</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>128</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.0</amc>
		<cc>
			<method name="public transient double value(double x, double[] param)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public transient double[] gradient(double x, double[] param)">1</method>
			<method name="private void validateParameters(double[] param)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.VectorFormat</name>
		<wmc>15</wmc>
		<dit>1</dit>
		<noc>3</noc>
		<cbo>6</cbo>
		<rfc>32</rfc>
		<lcom>81</lcom>
		<ca>3</ca>
		<ce>3</ce>
		<npm>9</npm>
		<lcom3>0.7857142857142857</lcom3>
		<loc>212</loc>
		<dam>0.7</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.22962962962962963</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.466666666666667</amc>
		<cc>
			<method name="protected void _init_(String prefix, String suffix, String separator)">0</method>
			<method name="protected transient StringBuffer format(StringBuffer toAppendTo, java.text.FieldPosition pos, double[] coordinates)">3</method>
			<method name="public abstract org.apache.commons.math3.geometry.Vector parse(String)">1</method>
			<method name="public String getSuffix()">1</method>
			<method name="protected void _init_(String prefix, String suffix, String separator, java.text.NumberFormat format)">0</method>
			<method name="public abstract StringBuffer format(org.apache.commons.math3.geometry.Vector, StringBuffer, java.text.FieldPosition)">1</method>
			<method name="public String getPrefix()">1</method>
			<method name="public String format(org.apache.commons.math3.geometry.Vector vector)">1</method>
			<method name="protected void _init_()">0</method>
			<method name="public abstract org.apache.commons.math3.geometry.Vector parse(String, java.text.ParsePosition)">1</method>
			<method name="public String getSeparator()">1</method>
			<method name="protected void _init_(java.text.NumberFormat format)">0</method>
			<method name="protected double[] parseCoordinates(int dimension, String source, java.text.ParsePosition pos)">7</method>
			<method name="public static java.util.Locale[] getAvailableLocales()">1</method>
			<method name="public java.text.NumberFormat getFormat()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Acos</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>9</rfc>
		<lcom>6</lcom>
		<ca>0</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>17</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.25</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double value(double x)">1</method>
			<method name="public org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.BlockFieldMatrix</name>
		<wmc>52</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>22</cbo>
		<rfc>89</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>21</ce>
		<npm>48</npm>
		<lcom3>0.453781512605042</lcom3>
		<loc>4339</loc>
		<dam>0.8571428571428571</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.1891025641025641</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>82.3076923076923</amc>
		<cc>
			<method name="public void setRowMatrix(int row, org.apache.commons.math3.linear.BlockFieldMatrix matrix)">1</method>
			<method name="public void setColumnVector(int column, org.apache.commons.math3.linear.FieldVector vector)">1</method>
			<method name="public org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor visitor, int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor visitor)">5</method>
			<method name="private void copyBlockPart(org.apache.commons.math3.FieldElement[] srcBlock, int srcWidth, int srcStartRow, int srcEndRow, int srcStartColumn, int srcEndColumn, org.apache.commons.math3.FieldElement[] dstBlock, int dstWidth, int dstStartRow, int dstStartColumn)">2</method>
			<method name="public org.apache.commons.math3.linear.FieldMatrix copy()">2</method>
			<method name="public org.apache.commons.math3.linear.FieldMatrix multiply(org.apache.commons.math3.linear.FieldMatrix m)">1</method>
			<method name="public org.apache.commons.math3.FieldElement[] getRow(int row)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldMatrix subtract(org.apache.commons.math3.linear.FieldMatrix m)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldMatrix transpose()">5</method>
			<method name="public org.apache.commons.math3.linear.FieldMatrix getColumnMatrix(int column)">1</method>
			<method name="public void multiplyEntry(int row, int column, org.apache.commons.math3.FieldElement factor)">1</method>
			<method name="private int blockHeight(int blockRow)">2</method>
			<method name="public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor visitor, int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor visitor, int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public org.apache.commons.math3.FieldElement[] preMultiply(org.apache.commons.math3.FieldElement[] v)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldMatrix getRowMatrix(int row)">1</method>
			<method name="public org.apache.commons.math3.FieldElement getEntry(int row, int column)">1</method>
			<method name="private int blockWidth(int blockColumn)">2</method>
			<method name="public void setRowMatrix(int row, org.apache.commons.math3.linear.FieldMatrix matrix)">1</method>
			<method name="public void addToEntry(int row, int column, org.apache.commons.math3.FieldElement increment)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldMatrix scalarAdd(org.apache.commons.math3.FieldElement d)">3</method>
			<method name="public void _init_(org.apache.commons.math3.Field field, int rows, int columns)">0</method>
			<method name="public void setSubMatrix(org.apache.commons.math3.FieldElement[][] subMatrix, int row, int column)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldVector getRowVector(int row)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldMatrix scalarMultiply(org.apache.commons.math3.FieldElement d)">3</method>
			<method name="public org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor visitor)">5</method>
			<method name="public void _init_(org.apache.commons.math3.FieldElement[][] rawData)">0</method>
			<method name="public org.apache.commons.math3.linear.BlockFieldMatrix multiply(org.apache.commons.math3.linear.BlockFieldMatrix m)">1</method>
			<method name="public void setRow(int row, org.apache.commons.math3.FieldElement[] array)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldMatrix getSubMatrix(int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public org.apache.commons.math3.linear.BlockFieldMatrix subtract(org.apache.commons.math3.linear.BlockFieldMatrix m)">1</method>
			<method name="public void _init_(int rows, int columns, org.apache.commons.math3.FieldElement[][] blockData, boolean copyArray)">0</method>
			<method name="public org.apache.commons.math3.linear.FieldMatrix add(org.apache.commons.math3.linear.FieldMatrix m)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldMatrix createMatrix(int rowDimension, int columnDimension)">1</method>
			<method name="public void setColumnMatrix(int column, org.apache.commons.math3.linear.FieldMatrix matrix)">1</method>
			<method name="public void setColumn(int column, org.apache.commons.math3.FieldElement[] array)">1</method>
			<method name="public int getRowDimension()">1</method>
			<method name="public org.apache.commons.math3.FieldElement[][] getData()">4</method>
			<method name="public int getColumnDimension()">1</method>
			<method name="public void setRowVector(int row, org.apache.commons.math3.linear.FieldVector vector)">1</method>
			<method name="void setColumnMatrix(int column, org.apache.commons.math3.linear.BlockFieldMatrix matrix)">1</method>
			<method name="public org.apache.commons.math3.linear.BlockFieldMatrix add(org.apache.commons.math3.linear.BlockFieldMatrix m)">1</method>
			<method name="public org.apache.commons.math3.FieldElement[] getColumn(int column)">1</method>
			<method name="public static org.apache.commons.math3.FieldElement[][] toBlocksLayout(org.apache.commons.math3.FieldElement[][] rawData)">1</method>
			<method name="public void setEntry(int row, int column, org.apache.commons.math3.FieldElement value)">1</method>
			<method name="public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor visitor, int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor visitor)">5</method>
			<method name="public org.apache.commons.math3.FieldElement[] operate(org.apache.commons.math3.FieldElement[] v)">1</method>
			<method name="public static org.apache.commons.math3.FieldElement[][] createBlocksLayout(org.apache.commons.math3.Field field, int rows, int columns)">3</method>
			<method name="public org.apache.commons.math3.FieldElement walkInOptimizedOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor visitor)">5</method>
			<method name="public org.apache.commons.math3.linear.FieldVector getColumnVector(int column)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer</name>
		<wmc>13</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>43</rfc>
		<lcom>46</lcom>
		<ca>0</ca>
		<ce>10</ce>
		<npm>5</npm>
		<lcom3>0.6614583333333334</lcom3>
		<loc>2193</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.36666666666666664</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>166.46153846153845</amc>
		<cc>
			<method name="private void checkParameters()">3</method>
			<method name="private void determineLMParameter(double[] qy, double delta, double[] diag, double[] work1, double[] work2, double[] work3)">29</method>
			<method name="public void _init_(double costRelativeTolerance, double parRelativeTolerance, double orthoTolerance)">0</method>
			<method name="public void _init_(double initialStepBoundFactor, double costRelativeTolerance, double parRelativeTolerance, double orthoTolerance, double threshold)">0</method>
			<method name="private void qrDecomposition(org.apache.commons.math3.linear.RealMatrix jacobian)">1</method>
			<method name="protected volatile Object doOptimize()">1</method>
			<method name="protected org.apache.commons.math3.optim.PointVectorValuePair doOptimize()">40</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void qTy(double[] y)">4</method>
			<method name="private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, double[] work)">17</method>
			<method name="public void _init_(double initialStepBoundFactor, org.apache.commons.math3.optim.ConvergenceChecker checker, double costRelativeTolerance, double parRelativeTolerance, double orthoTolerance, double threshold)">0</method>
			<method name="public void _init_(org.apache.commons.math3.optim.ConvergenceChecker checker)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.regression.UpdatingMultipleLinearRegression</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>7</rfc>
		<lcom>21</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>7</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.34285714285714286</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract boolean hasIntercept()">1</method>
			<method name="public abstract org.apache.commons.math3.stat.regression.RegressionResults regress(int[])">1</method>
			<method name="public abstract long getN()">1</method>
			<method name="public abstract void addObservation(double[], double)">1</method>
			<method name="public abstract org.apache.commons.math3.stat.regression.RegressionResults regress()">1</method>
			<method name="public abstract void addObservations(double[][], double[])">1</method>
			<method name="public abstract void clear()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.spherical.twod.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.GaussianRandomGenerator</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>13</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="public double nextNormalizedDouble()">1</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator generator)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.BaseMultivariateSimpleBoundsOptimizer</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.optimization.PointValuePair optimize(int, org.apache.commons.math3.analysis.MultivariateFunction, org.apache.commons.math3.optimization.GoalType, double[], double[], double[])">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.QRDecomposition$Solver</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>21</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>4</npm>
		<lcom3>0.06666666666666661</lcom3>
		<loc>521</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.35714285714285715</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>85.33333333333333</amc>
		<cc>
			<method name="private void _init_(double[][] qrt, double[] rDiag, double threshold)">0</method>
			<method name="public org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealVector b)">8</method>
			<method name="void _init_(double[][] x0, double[] x1, double x2, org.apache.commons.math3.linear.QRDecomposition$1 x3)">0</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix solve(org.apache.commons.math3.linear.RealMatrix b)">14</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getInverse()">1</method>
			<method name="public boolean isNonSingular()">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.Array2DRowFieldMatrix</name>
		<wmc>34</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>24</cbo>
		<rfc>64</rfc>
		<lcom>0</lcom>
		<ca>6</ca>
		<ce>18</ce>
		<npm>32</npm>
		<lcom3>0.5606060606060606</lcom3>
		<loc>1143</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.2235294117647059</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>32.55882352941177</amc>
		<cc>
			<method name="public org.apache.commons.math3.linear.Array2DRowFieldMatrix subtract(org.apache.commons.math3.linear.Array2DRowFieldMatrix m)">1</method>
			<method name="private org.apache.commons.math3.FieldElement[][] copyOut()">2</method>
			<method name="public org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor visitor)">3</method>
			<method name="public void _init_(org.apache.commons.math3.Field field, org.apache.commons.math3.FieldElement[] v)">0</method>
			<method name="public org.apache.commons.math3.FieldElement walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor visitor, int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public void _init_(org.apache.commons.math3.Field field, int rowDimension, int columnDimension)">0</method>
			<method name="public org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor visitor, int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public void _init_(org.apache.commons.math3.Field field)">0</method>
			<method name="public org.apache.commons.math3.linear.Array2DRowFieldMatrix multiply(org.apache.commons.math3.linear.Array2DRowFieldMatrix m)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldMatrix copy()">1</method>
			<method name="public org.apache.commons.math3.FieldElement walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor visitor)">3</method>
			<method name="public org.apache.commons.math3.FieldElement walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor visitor, int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public void _init_(org.apache.commons.math3.Field field, org.apache.commons.math3.FieldElement[][] d, boolean copyArray)">0</method>
			<method name="public void multiplyEntry(int row, int column, org.apache.commons.math3.FieldElement factor)">1</method>
			<method name="public org.apache.commons.math3.linear.FieldMatrix createMatrix(int rowDimension, int columnDimension)">1</method>
			<method name="public void _init_(org.apache.commons.math3.FieldElement[] v)">0</method>
			<method name="private void copyIn(org.apache.commons.math3.FieldElement[][] in)">1</method>
			<method name="public org.apache.commons.math3.FieldElement[][] getDataRef()">1</method>
			<method name="public org.apache.commons.math3.FieldElement walkInColumnOrder(org.apache.commons.math3.linear.FieldMatrixPreservingVisitor visitor)">3</method>
			<method name="public org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor visitor, int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public org.apache.commons.math3.FieldElement[] preMultiply(org.apache.commons.math3.FieldElement[] v)">1</method>
			<method name="public void _init_(org.apache.commons.math3.FieldElement[][] d)">0</method>
			<method name="public int getRowDimension()">2</method>
			<method name="public org.apache.commons.math3.FieldElement[][] getData()">1</method>
			<method name="public int getColumnDimension()">3</method>
			<method name="public org.apache.commons.math3.FieldElement getEntry(int row, int column)">1</method>
			<method name="public void _init_(org.apache.commons.math3.Field field, org.apache.commons.math3.FieldElement[][] d)">0</method>
			<method name="public void addToEntry(int row, int column, org.apache.commons.math3.FieldElement increment)">1</method>
			<method name="public void _init_(org.apache.commons.math3.FieldElement[][] d, boolean copyArray)">0</method>
			<method name="public void setEntry(int row, int column, org.apache.commons.math3.FieldElement value)">1</method>
			<method name="public org.apache.commons.math3.FieldElement walkInRowOrder(org.apache.commons.math3.linear.FieldMatrixChangingVisitor visitor)">3</method>
			<method name="public org.apache.commons.math3.FieldElement[] operate(org.apache.commons.math3.FieldElement[] v)">1</method>
			<method name="public void setSubMatrix(org.apache.commons.math3.FieldElement[][] subMatrix, int row, int column)">1</method>
			<method name="public org.apache.commons.math3.linear.Array2DRowFieldMatrix add(org.apache.commons.math3.linear.Array2DRowFieldMatrix m)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Exp</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>9</rfc>
		<lcom>6</lcom>
		<ca>0</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>17</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.25</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double value(double x)">1</method>
			<method name="public org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor$BoundaryProjector</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>20</cbo>
		<rfc>35</rfc>
		<lcom>9</lcom>
		<ca>1</ca>
		<ce>20</ce>
		<npm>5</npm>
		<lcom3>0.5333333333333333</lcom3>
		<loc>338</loc>
		<dam>0.6666666666666666</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.3611111111111111</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>54.833333333333336</amc>
		<cc>
			<method name="public void visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree node)">3</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet getProjected()">1</method>
			<method name="public void visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree node)">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor, double tolerance)">0</method>
			<method name="private void addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane facet, boolean reversed)">15</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree node)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.genetics.Chromosome</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>19</cbo>
		<rfc>13</rfc>
		<lcom>15</lcom>
		<ca>18</ca>
		<ce>2</ce>
		<npm>5</npm>
		<lcom3>0.75</lcom3>
		<loc>70</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.42857142857142855</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.714285714285714</amc>
		<cc>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="public int compareTo(org.apache.commons.math3.genetics.Chromosome another)">1</method>
			<method name="public void searchForFitnessUpdate(org.apache.commons.math3.genetics.Population population)">2</method>
			<method name="public double getFitness()">2</method>
			<method name="protected org.apache.commons.math3.genetics.Chromosome findSameChromosome(org.apache.commons.math3.genetics.Population population)">2</method>
			<method name="public void _init_()">0</method>
			<method name="protected boolean isSame(org.apache.commons.math3.genetics.Chromosome another)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.JacobianMatrices$JacobiansSecondaryEquations</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>22</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>11</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>270</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.45</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>66.25</amc>
		<cc>
			<method name="public int getDimension()">1</method>
			<method name="public void computeDerivatives(double t, double[] y, double[] yDot, double[] z, double[] zDot)">1</method>
			<method name="void _init_(org.apache.commons.math3.ode.JacobianMatrices x0, org.apache.commons.math3.ode.JacobianMatrices$1 x1)">0</method>
			<method name="private void _init_(org.apache.commons.math3.ode.JacobianMatrices)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.NonSquareMatrixException</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>18</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>15</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public void _init_(int wrong, int expected)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.UnivariateVectorFunction</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>5</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double[] value(double)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.SimpleValueChecker</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>15</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>4</ce>
		<npm>5</npm>
		<lcom3>0.625</lcom3>
		<loc>92</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.48</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.0</amc>
		<cc>
			<method name="public volatile boolean converged(int x0, Object x1, Object x2)">1</method>
			<method name="public boolean converged(int iteration, org.apache.commons.math3.optimization.PointValuePair previous, org.apache.commons.math3.optimization.PointValuePair current)">5</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(double relativeThreshold, double absoluteThreshold, int maxIter)">0</method>
			<method name="public void _init_(double relativeThreshold, double absoluteThreshold)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.neuralnet.FeatureInitializer</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>5</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double value()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.neuralnet.oned.NeuronString$SerializationProxy</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>0.6666666666666667</lcom3>
		<loc>22</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.5</amc>
		<cc>
			<method name="void _init_(boolean wrap, double[][] featuresList)">0</method>
			<method name="private Object readResolve()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.MathParseException</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>10</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>44</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.875</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.5</amc>
		<cc>
			<method name="public void _init_(String wrong, int position)">0</method>
			<method name="public void _init_(String wrong, int position, Class type)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFP$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>42</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>40.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.spherical.twod.Vertex</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>15</rfc>
		<lcom>8</lcom>
		<ca>4</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.6785714285714286</lcom3>
		<loc>91</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.325</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.875</amc>
		<cc>
			<method name="void bindWith(org.apache.commons.math3.geometry.spherical.twod.Circle circle)">1</method>
			<method name="public org.apache.commons.math3.geometry.spherical.twod.S2Point getLocation()">1</method>
			<method name="public org.apache.commons.math3.geometry.spherical.twod.Edge getIncoming()">1</method>
			<method name="void setOutgoing(org.apache.commons.math3.geometry.spherical.twod.Edge outgoing)">1</method>
			<method name="public org.apache.commons.math3.geometry.spherical.twod.Edge getOutgoing()">1</method>
			<method name="void _init_(org.apache.commons.math3.geometry.spherical.twod.S2Point location)">0</method>
			<method name="void setIncoming(org.apache.commons.math3.geometry.spherical.twod.Edge incoming)">1</method>
			<method name="org.apache.commons.math3.geometry.spherical.twod.Circle sharedCircleWith(org.apache.commons.math3.geometry.spherical.twod.Vertex vertex)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex</name>
		<wmc>10</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>23</rfc>
		<lcom>33</lcom>
		<ca>0</ca>
		<ce>3</ce>
		<npm>9</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>194</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.0</amc>
		<cc>
			<method name="public void _init_(int n)">0</method>
			<method name="public void _init_(double[] steps, double khi, double gamma)">0</method>
			<method name="public void _init_(double[][] referenceSimplex)">0</method>
			<method name="public void _init_(int n, double khi, double gamma)">0</method>
			<method name="public void _init_(double[] steps)">0</method>
			<method name="public void _init_(double[][] referenceSimplex, double khi, double gamma)">0</method>
			<method name="public void _init_(int n, double sideLength, double khi, double gamma)">0</method>
			<method name="private org.apache.commons.math3.optim.PointValuePair evaluateNewSimplex(org.apache.commons.math3.analysis.MultivariateFunction evaluationFunction, org.apache.commons.math3.optim.PointValuePair[] original, double coeff, java.util.Comparator comparator)">3</method>
			<method name="public void _init_(int n, double sideLength)">0</method>
			<method name="public void iterate(org.apache.commons.math3.analysis.MultivariateFunction evaluationFunction, java.util.Comparator comparator)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.NonSelfAdjointOperatorException</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.fitting.GaussianFitter$ParameterGuesser</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>22</rfc>
		<lcom>26</lcom>
		<ca>2</ca>
		<ce>10</ce>
		<npm>2</npm>
		<lcom3>0.8571428571428571</lcom3>
		<loc>351</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.59375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>42.5</amc>
		<cc>
			<method name="private double interpolateXAtY(org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] points, int startIdx, int idxStep, double y)">1</method>
			<method name="private int findMaxY(org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] points)">3</method>
			<method name="public double[] guess()">1</method>
			<method name="private org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] getInterpolationPointsForY(org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] points, int startIdx, int idxStep, double y)">1</method>
			<method name="private org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] sortObservations(org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] unsorted)">1</method>
			<method name="private double[] basicGuess(org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] points)">1</method>
			<method name="private boolean isBetween(double value, double boundary1, double boundary2)">5</method>
			<method name="public void _init_(org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] observations)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$LowerBoundMapper</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>22</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public double unboundedToBounded(double y)">1</method>
			<method name="public double boundedToUnbounded(double x)">1</method>
			<method name="public void _init_(double lower)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.sampling.AbstractStepInterpolator</name>
		<wmc>30</wmc>
		<dit>1</dit>
		<noc>3</noc>
		<cbo>14</cbo>
		<rfc>48</rfc>
		<lcom>135</lcom>
		<ca>9</ca>
		<ce>5</ce>
		<npm>19</npm>
		<lcom3>0.7203065134099617</lcom3>
		<loc>791</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.17</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.766666666666666</amc>
		<cc>
			<method name="protected void reinitialize(double[] y, boolean isForward, org.apache.commons.math3.ode.EquationsMapper primary, org.apache.commons.math3.ode.EquationsMapper[] secondary)">1</method>
			<method name="public double getGlobalCurrentTime()">1</method>
			<method name="private void allocateInterpolatedArrays(int dimension)">4</method>
			<method name="protected void writeBaseExternal(java.io.ObjectOutput out)">1</method>
			<method name="public org.apache.commons.math3.ode.sampling.StepInterpolator copy()">1</method>
			<method name="public void setInterpolatedTime(double time)">1</method>
			<method name="public final void finalizeStep()">1</method>
			<method name="public double getCurrentTime()">1</method>
			<method name="private void evaluateCompleteInterpolatedState()">1</method>
			<method name="public void shift()">1</method>
			<method name="public abstract void writeExternal(java.io.ObjectOutput)">1</method>
			<method name="protected void _init_(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator interpolator)">0</method>
			<method name="public abstract void readExternal(java.io.ObjectInput)">1</method>
			<method name="public void setSoftCurrentTime(double softCurrentTime)">1</method>
			<method name="public double[] getInterpolatedState()">1</method>
			<method name="public double[] getInterpolatedDerivatives()">1</method>
			<method name="public double getInterpolatedTime()">1</method>
			<method name="public void storeTime(double t)">1</method>
			<method name="public boolean isForward()">1</method>
			<method name="protected abstract void computeInterpolatedStateAndDerivatives(double, double)">1</method>
			<method name="public double[] getInterpolatedSecondaryState(int index)">1</method>
			<method name="protected abstract org.apache.commons.math3.ode.sampling.StepInterpolator doCopy()">1</method>
			<method name="public double getPreviousTime()">1</method>
			<method name="protected void _init_()">0</method>
			<method name="public double getGlobalPreviousTime()">1</method>
			<method name="protected void _init_(double[] y, boolean forward, org.apache.commons.math3.ode.EquationsMapper primaryMapper, org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers)">0</method>
			<method name="protected double readBaseExternal(java.io.ObjectInput in)">1</method>
			<method name="public double[] getInterpolatedSecondaryDerivatives(int index)">1</method>
			<method name="protected void doFinalize()">1</method>
			<method name="public void setSoftPreviousTime(double softPreviousTime)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Logistic</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>19</rfc>
		<lcom>9</lcom>
		<ca>2</ca>
		<ce>7</ce>
		<npm>4</npm>
		<lcom3>0.6</lcom3>
		<loc>118</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.666666666666668</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="static double access$000(double x0, double x1, double x2, double x3, double x4, double x5)">1</method>
			<method name="public void _init_(double k, double m, double b, double q, double a, double n)">0</method>
			<method name="public double value(double x)">1</method>
			<method name="public org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
			<method name="private static double value(double mMinusX, double k, double b, double q, double a, double oneOverN)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.FastMathCalc</name>
		<wmc>18</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>28</rfc>
		<lcom>139</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>0.9764705882352942</lcom3>
		<loc>1943</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.24369747899159663</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>106.66666666666667</amc>
		<cc>
			<method name="static double slowCos(double x, double[] result)">5</method>
			<method name="private static void quadMult(double[] a, double[] b, double[] result)">1</method>
			<method name="static double[] slowLog(double xi)">2</method>
			<method name="static double slowSin(double x, double[] result)">5</method>
			<method name="static void _clinit_()">0</method>
			<method name="private static void checkLen(int expectedLen, int actual)">1</method>
			<method name="static double slowexp(double x, double[] result)">3</method>
			<method name="private void _init_()">0</method>
			<method name="static void splitReciprocal(double[] in, double[] result)">4</method>
			<method name="private static void splitMult(double[] a, double[] b, double[] ans)">1</method>
			<method name="static void printarray(java.io.PrintStream out, String name, int expectedLen, double[][] array2d)">3</method>
			<method name="static String format(double d)">3</method>
			<method name="private static void buildSinCosTables(double[] SINE_TABLE_A, double[] SINE_TABLE_B, double[] COSINE_TABLE_A, double[] COSINE_TABLE_B, int SINE_TABLE_LEN, double[] TANGENT_TABLE_A, double[] TANGENT_TABLE_B)">5</method>
			<method name="static void printarray(java.io.PrintStream out, String name, int expectedLen, double[] array)">2</method>
			<method name="static double expint(int p, double[] result)">4</method>
			<method name="private static void split(double d, double[] split)">3</method>
			<method name="private static void resplit(double[] a)">3</method>
			<method name="private static void splitAdd(double[] a, double[] b, double[] ans)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>25</rfc>
		<lcom>19</lcom>
		<ca>0</ca>
		<ce>6</ce>
		<npm>2</npm>
		<lcom3>0.16666666666666666</lcom3>
		<loc>125</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.47619047619047616</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.571428571428573</amc>
		<cc>
			<method name="protected org.apache.commons.math3.linear.RealVector calculateBeta()">1</method>
			<method name="protected org.apache.commons.math3.linear.RealMatrix calculateBetaVariance()">1</method>
			<method name="public void _init_()">0</method>
			<method name="protected void newCovarianceData(double[][] omega)">1</method>
			<method name="protected double calculateErrorVariance()">1</method>
			<method name="protected org.apache.commons.math3.linear.RealMatrix getOmegaInverse()">2</method>
			<method name="public void newSampleData(double[] y, double[][] x, double[][] covariance)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.FunctionUtils$7</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>36</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.5</amc>
		<cc>
			<method name="void _init_(org.apache.commons.math3.analysis.UnivariateFunction[])">0</method>
			<method name="public double value(double x)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>51</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.333333333333334</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="public int compare(org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair o1, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair o2)">5</method>
			<method name="void _init_(org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizer, org.apache.commons.math3.optimization.GoalType)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.FunctionUtils$6</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>42</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.666666666666666</amc>
		<cc>
			<method name="void _init_(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[])">0</method>
			<method name="public double value(double x)">2</method>
			<method name="public org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.FunctionUtils$9</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>42</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.666666666666666</amc>
		<cc>
			<method name="void _init_(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[])">0</method>
			<method name="public double value(double x)">2</method>
			<method name="public org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.FunctionUtils$8</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>64</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.0</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">2</method>
			<method name="void _init_(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction[])">0</method>
			<method name="public double value(double t)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.BigRealField$LazyHolder</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>0.5</lcom3>
		<loc>15</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.6666666666666665</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="static org.apache.commons.math3.util.BigRealField access$000()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.dfp.DfpField$RoundingMode</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>5</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9629629629629629</lcom3>
		<loc>111</loc>
		<dam>0.1111111111111111</dam>
		<moa>9</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>24.5</amc>
		<cc>
			<method name="public static org.apache.commons.math3.dfp.DfpField$RoundingMode valueOf(String name)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static org.apache.commons.math3.dfp.DfpField$RoundingMode[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>40</rfc>
		<lcom>33</lcom>
		<ca>0</ca>
		<ce>11</ce>
		<npm>4</npm>
		<lcom3>0.5555555555555556</lcom3>
		<loc>673</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3125</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>66.1</amc>
		<cc>
			<method name="public java.util.List cluster(java.util.Collection points, int k, int numTrials, int maxIterationsPerTrial)">1</method>
			<method name="private static int getNearestCluster(java.util.Collection clusters, org.apache.commons.math3.stat.clustering.Clusterable point)">3</method>
			<method name="public java.util.List cluster(java.util.Collection points, int k, int maxIterations)">1</method>
			<method name="private org.apache.commons.math3.stat.clustering.Clusterable getFarthestPoint(java.util.Collection clusters)">1</method>
			<method name="private org.apache.commons.math3.stat.clustering.Clusterable getPointFromLargestVarianceCluster(java.util.Collection clusters)">1</method>
			<method name="public void _init_(java.util.Random random)">0</method>
			<method name="public void _init_(java.util.Random random, org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy emptyStrategy)">0</method>
			<method name="private org.apache.commons.math3.stat.clustering.Clusterable getPointFromLargestNumberCluster(java.util.Collection clusters)">1</method>
			<method name="private static java.util.List chooseInitialCenters(java.util.Collection points, int k, java.util.Random random)">15</method>
			<method name="private static int assignPointsToClusters(java.util.List clusters, java.util.Collection points, int[] assignments)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.moment.Skewness</name>
		<wmc>12</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>24</rfc>
		<lcom>10</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>12</npm>
		<lcom3>0.4848484848484848</lcom3>
		<loc>267</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.2361111111111111</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.0</amc>
		<cc>
			<method name="public void clear()">2</method>
			<method name="public long getN()">1</method>
			<method name="public void _init_(org.apache.commons.math3.stat.descriptive.moment.Skewness original)">0</method>
			<method name="public void _init_(org.apache.commons.math3.stat.descriptive.moment.ThirdMoment m3)">0</method>
			<method name="public org.apache.commons.math3.stat.descriptive.moment.Skewness copy()">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic copy()">1</method>
			<method name="public static void copy(org.apache.commons.math3.stat.descriptive.moment.Skewness source, org.apache.commons.math3.stat.descriptive.moment.Skewness dest)">1</method>
			<method name="public double getResult()">3</method>
			<method name="public void _init_()">0</method>
			<method name="public double evaluate(double[] values, int begin, int length)">1</method>
			<method name="public void increment(double d)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.FunctionUtils$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>30</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.5</amc>
		<cc>
			<method name="void _init_(org.apache.commons.math3.analysis.UnivariateFunction[])">0</method>
			<method name="public double value(double x)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.FunctionUtils$3</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>36</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.666666666666666</amc>
		<cc>
			<method name="void _init_(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[])">0</method>
			<method name="public double value(double x)">2</method>
			<method name="public org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.solvers.UnivariateSolver</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>8</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.FunctionUtils$2</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>52</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.0</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">2</method>
			<method name="void _init_(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction[])">0</method>
			<method name="public double value(double t)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Sinc</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>14</rfc>
		<lcom>4</lcom>
		<ca>0</ca>
		<ce>7</ce>
		<npm>5</npm>
		<lcom3>0.75</lcom3>
		<loc>366</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>71.8</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double value(double x)">3</method>
			<method name="public void _init_(boolean normalized)">0</method>
			<method name="public org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.FunctionUtils$5</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>64</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.0</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="void _init_(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction[])">0</method>
			<method name="public double value(double t)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.RealVector$2$1</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>11</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>4</npm>
		<lcom3>0.5833333333333334</lcom3>
		<loc>46</loc>
		<dam>0.3333333333333333</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.6</amc>
		<cc>
			<method name="public org.apache.commons.math3.linear.RealVector$Entry next()">1</method>
			<method name="public boolean hasNext()">1</method>
			<method name="public void remove()">1</method>
			<method name="public volatile Object next()">1</method>
			<method name="void _init_(org.apache.commons.math3.linear.RealVector$2, java.util.Iterator)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.FirstOrderIntegrator</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>6</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double integrate(org.apache.commons.math3.ode.FirstOrderDifferentialEquations, double, double[], double, double[])">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.FunctionUtils$4</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>36</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.5</amc>
		<cc>
			<method name="void _init_(org.apache.commons.math3.analysis.UnivariateFunction[])">0</method>
			<method name="public double value(double x)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.MaxCountExceededException</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>2</noc>
		<cbo>66</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>62</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>0.75</lcom3>
		<loc>35</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.0</amc>
		<cc>
			<method name="public transient void _init_(org.apache.commons.math3.exception.util.Localizable specific, Number max, Object[] args)">0</method>
			<method name="public Number getMax()">1</method>
			<method name="public void _init_(Number max)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.RealVector$2$2</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>11</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>4</npm>
		<lcom3>0.5833333333333334</lcom3>
		<loc>46</loc>
		<dam>0.3333333333333333</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.6</amc>
		<cc>
			<method name="public org.apache.commons.math3.linear.RealVector$Entry next()">1</method>
			<method name="public boolean hasNext()">1</method>
			<method name="public void remove()">1</method>
			<method name="public volatile Object next()">1</method>
			<method name="void _init_(org.apache.commons.math3.linear.RealVector$2, java.util.Iterator)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.LUDecomposition$Solver</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>17</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>4</npm>
		<lcom3>0.1333333333333334</lcom3>
		<loc>350</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.35714285714285715</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>56.833333333333336</amc>
		<cc>
			<method name="private void _init_(double[][] lu, int[] pivot, boolean singular)">0</method>
			<method name="public org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealVector b)">8</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix solve(org.apache.commons.math3.linear.RealMatrix b)">12</method>
			<method name="void _init_(double[][] x0, int[] x1, boolean x2, org.apache.commons.math3.linear.LUDecomposition$1 x3)">0</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getInverse()">1</method>
			<method name="public boolean isNonSingular()">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.direct.AbstractSimplex</name>
		<wmc>15</wmc>
		<dit>1</dit>
		<noc>2</noc>
		<cbo>14</cbo>
		<rfc>34</rfc>
		<lcom>31</lcom>
		<ca>3</ca>
		<ce>11</ce>
		<npm>7</npm>
		<lcom3>0.6428571428571429</lcom3>
		<loc>495</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.23703703703703705</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.8</amc>
		<cc>
			<method name="private static double[] createHypercubeSteps(int n, double sideLength)">2</method>
			<method name="protected void setPoint(int index, org.apache.commons.math3.optimization.PointValuePair point)">3</method>
			<method name="public org.apache.commons.math3.optimization.PointValuePair getPoint(int index)">3</method>
			<method name="protected void _init_(double[] steps)">0</method>
			<method name="public void evaluate(org.apache.commons.math3.analysis.MultivariateFunction evaluationFunction, java.util.Comparator comparator)">3</method>
			<method name="public int getSize()">1</method>
			<method name="public void build(double[] startPoint)">4</method>
			<method name="protected void setPoints(org.apache.commons.math3.optimization.PointValuePair[] points)">2</method>
			<method name="protected void _init_(int n)">0</method>
			<method name="public int getDimension()">1</method>
			<method name="protected void replaceWorstPoint(org.apache.commons.math3.optimization.PointValuePair pointValuePair, java.util.Comparator comparator)">3</method>
			<method name="public org.apache.commons.math3.optimization.PointValuePair[] getPoints()">1</method>
			<method name="protected void _init_(int n, double sideLength)">0</method>
			<method name="public abstract void iterate(org.apache.commons.math3.analysis.MultivariateFunction, java.util.Comparator)">1</method>
			<method name="protected void _init_(double[][] referenceSimplex)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Sinh</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>8</rfc>
		<lcom>10</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>5</npm>
		<lcom3>2.0</lcom3>
		<loc>21</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.2</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.DifferentiableUnivariateFunction derivative()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public volatile org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
			<method name="public double value(double x)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.RRQRDecomposition$Solver</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>14</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>4</npm>
		<lcom3>0.1</lcom3>
		<loc>49</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.43333333333333335</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.833333333333333</amc>
		<cc>
			<method name="public org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealVector b)">1</method>
			<method name="void _init_(org.apache.commons.math3.linear.DecompositionSolver x0, org.apache.commons.math3.linear.RealMatrix x1, org.apache.commons.math3.linear.RRQRDecomposition$1 x2)">0</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix solve(org.apache.commons.math3.linear.RealMatrix b)">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getInverse()">1</method>
			<method name="public boolean isNonSingular()">1</method>
			<method name="private void _init_(org.apache.commons.math3.linear.DecompositionSolver upper, org.apache.commons.math3.linear.RealMatrix p)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.util.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.FastMath$ExpIntTable</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>2</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>18</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static double[] access$000()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="static double[] access$100()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.SynchronizedRandomGenerator</name>
		<wmc>12</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>24</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>12</npm>
		<lcom3>0.0</lcom3>
		<loc>68</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.25</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.583333333333333</amc>
		<cc>
			<method name="public synchronized void setSeed(long seed)">1</method>
			<method name="public synchronized long nextLong()">1</method>
			<method name="public synchronized double nextGaussian()">1</method>
			<method name="public synchronized double nextDouble()">1</method>
			<method name="public synchronized float nextFloat()">1</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng)">0</method>
			<method name="public synchronized void nextBytes(byte[] bytes)">1</method>
			<method name="public synchronized void setSeed(int[] seed)">1</method>
			<method name="public synchronized int nextInt(int n)">1</method>
			<method name="public synchronized void setSeed(int seed)">1</method>
			<method name="public synchronized boolean nextBoolean()">1</method>
			<method name="public synchronized int nextInt()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.fitting.WeightedObservedPoint</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>9</ca>
		<ce>0</ce>
		<npm>4</npm>
		<lcom3>0.8333333333333334</lcom3>
		<loc>29</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.25</amc>
		<cc>
			<method name="public void _init_(double weight, double x, double y)">0</method>
			<method name="public double getY()">1</method>
			<method name="public double getWeight()">1</method>
			<method name="public double getX()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>23</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>8</npm>
		<lcom3>0.7666666666666666</lcom3>
		<loc>1504</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.2909090909090909</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>134.9090909090909</amc>
		<cc>
			<method name="public void _init_(double r, double theta, double phi)">0</method>
			<method name="private Object writeReplace()">1</method>
			<method name="private void computeJacobian()">2</method>
			<method name="public double[][] toCartesianHessian(double[][] sHessian, double[] sGradient)">1</method>
			<method name="public double getTheta()">1</method>
			<method name="public double getPhi()">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.threed.Vector3D v)">0</method>
			<method name="public double[] toCartesianGradient(double[] sGradient)">1</method>
			<method name="public double getR()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getCartesian()">1</method>
			<method name="private void computeHessians()">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>55</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.5</amc>
		<cc>
			<method name="public double value(double alpha)">2</method>
			<method name="void _init_(org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch, int, double[], double[])">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fraction.FractionField$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>19</rfc>
		<lcom>9</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>2</npm>
		<lcom3>0.8</lcom3>
		<loc>210</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.2777777777777778</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>33.5</amc>
		<cc>
			<method name="private boolean pointIsBetween(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] loop, int n, int i)">3</method>
			<method name="static org.apache.commons.math3.geometry.euclidean.threed.Vector3D access$100(org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor x0)">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.threed.Vector3D u, org.apache.commons.math3.geometry.euclidean.threed.Vector3D v)">0</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] getOutline(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet)">6</method>
			<method name="static org.apache.commons.math3.geometry.euclidean.threed.Vector3D access$000(org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor x0)">1</method>
			<method name="static org.apache.commons.math3.geometry.euclidean.threed.Vector3D access$200(org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor x0)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.Well1024a</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>9</rfc>
		<lcom>10</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>1.25</lcom3>
		<loc>147</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.45</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>27.4</amc>
		<cc>
			<method name="protected int next(int bits)">1</method>
			<method name="public void _init_(long seed)">0</method>
			<method name="public void _init_(int seed)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(int[] seed)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.direct.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.solvers.BaseSecantSolver$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>68</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>65.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.fitting.CurveFitter</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>3</noc>
		<cbo>12</cbo>
		<rfc>27</rfc>
		<lcom>0</lcom>
		<ca>6</ca>
		<ce>8</ce>
		<npm>9</npm>
		<lcom3>0.4444444444444444</lcom3>
		<loc>154</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.2222222222222222</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.1</amc>
		<cc>
			<method name="public double[] fit(org.apache.commons.math3.analysis.ParametricUnivariateFunction f, double[] initialGuess)">1</method>
			<method name="public void clearObservations()">1</method>
			<method name="public void addObservedPoint(double weight, double x, double y)">1</method>
			<method name="public void _init_(org.apache.commons.math3.optimization.MultivariateDifferentiableVectorOptimizer optimizer)">0</method>
			<method name="public double[] fit(int maxEval, org.apache.commons.math3.analysis.ParametricUnivariateFunction f, double[] initialGuess)">3</method>
			<method name="static java.util.List access$000(org.apache.commons.math3.optimization.fitting.CurveFitter x0)">1</method>
			<method name="public void addObservedPoint(double x, double y)">1</method>
			<method name="public void _init_(org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer optimizer)">0</method>
			<method name="public org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] getObservations()">1</method>
			<method name="public void addObservedPoint(org.apache.commons.math3.optimization.fitting.WeightedObservedPoint observed)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.Combinations$LexicographicIterator</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>8</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>5</npm>
		<lcom3>0.4375</lcom3>
		<loc>205</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>39.2</amc>
		<cc>
			<method name="public void _init_(int n, int k)">0</method>
			<method name="public int[] next()">7</method>
			<method name="public boolean hasNext()">1</method>
			<method name="public void remove()">1</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.IterativeLinearSolver</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>10</cbo>
		<rfc>18</rfc>
		<lcom>15</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>6</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>100</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.45714285714285713</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.142857142857142</amc>
		<cc>
			<method name="public org.apache.commons.math3.util.IterationManager getIterationManager()">1</method>
			<method name="public void _init_(org.apache.commons.math3.util.IterationManager manager)">0</method>
			<method name="protected static void checkParameters(org.apache.commons.math3.linear.RealLinearOperator a, org.apache.commons.math3.linear.RealVector b, org.apache.commons.math3.linear.RealVector x0)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealLinearOperator a, org.apache.commons.math3.linear.RealVector b)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealLinearOperator a, org.apache.commons.math3.linear.RealVector b, org.apache.commons.math3.linear.RealVector x0)">1</method>
			<method name="public void _init_(int maxIterations)">0</method>
			<method name="public abstract org.apache.commons.math3.linear.RealVector solveInPlace(org.apache.commons.math3.linear.RealLinearOperator, org.apache.commons.math3.linear.RealVector, org.apache.commons.math3.linear.RealVector)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.interval.ClopperPearsonInterval</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>108</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>53.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public org.apache.commons.math3.stat.interval.ConfidenceInterval createInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.CentralPivotingStrategy</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>21</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public int pivotIndex(double[] work, int begin, int end)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.complex.ComplexFormat</name>
		<wmc>20</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>58</rfc>
		<lcom>154</lcom>
		<ca>0</ca>
		<ce>8</ce>
		<npm>19</npm>
		<lcom3>0.6447368421052632</lcom3>
		<loc>454</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.18181818181818182</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.5</amc>
		<cc>
			<method name="public static org.apache.commons.math3.complex.ComplexFormat getInstance(String imaginaryCharacter, java.util.Locale locale)">1</method>
			<method name="public static org.apache.commons.math3.complex.ComplexFormat getInstance(java.util.Locale locale)">1</method>
			<method name="public static org.apache.commons.math3.complex.ComplexFormat getInstance()">1</method>
			<method name="public org.apache.commons.math3.complex.Complex parse(String source, java.text.ParsePosition pos)">8</method>
			<method name="public void _init_()">0</method>
			<method name="public java.text.NumberFormat getRealFormat()">1</method>
			<method name="public void _init_(String imaginaryCharacter, java.text.NumberFormat realFormat, java.text.NumberFormat imaginaryFormat)">0</method>
			<method name="public String format(Double c)">1</method>
			<method name="public StringBuffer format(org.apache.commons.math3.complex.Complex complex, StringBuffer toAppendTo, java.text.FieldPosition pos)">4</method>
			<method name="public void _init_(String imaginaryCharacter, java.text.NumberFormat format)">0</method>
			<method name="public String getImaginaryCharacter()">1</method>
			<method name="public StringBuffer format(Object obj, StringBuffer toAppendTo, java.text.FieldPosition pos)">1</method>
			<method name="public void _init_(String imaginaryCharacter)">0</method>
			<method name="public org.apache.commons.math3.complex.Complex parse(String source)">1</method>
			<method name="public void _init_(java.text.NumberFormat realFormat, java.text.NumberFormat imaginaryFormat)">0</method>
			<method name="public void _init_(java.text.NumberFormat format)">0</method>
			<method name="public String format(org.apache.commons.math3.complex.Complex c)">1</method>
			<method name="private StringBuffer formatImaginary(double absIm, StringBuffer toAppendTo, java.text.FieldPosition pos)">2</method>
			<method name="public static java.util.Locale[] getAvailableLocales()">1</method>
			<method name="public java.text.NumberFormat getImaginaryFormat()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.BiDiagonalTransformer</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>17</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>0.5925925925925926</lcom3>
		<loc>1016</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.55</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>100.0</amc>
		<cc>
			<method name="private void transformToLowerBiDiagonal()">15</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getU()">11</method>
			<method name="public void _init_(org.apache.commons.math3.linear.RealMatrix matrix)">0</method>
			<method name="double[] getMainDiagonalRef()">1</method>
			<method name="double[] getSecondaryDiagonalRef()">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getB()">6</method>
			<method name="boolean isUpperBiDiagonal()">2</method>
			<method name="private void transformToUpperBiDiagonal()">15</method>
			<method name="double[][] getHouseholderVectorsRef()">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getV()">11</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.MathArithmeticException</name>
		<wmc>5</wmc>
		<dit>5</dit>
		<noc>0</noc>
		<cbo>43</cbo>
		<rfc>10</rfc>
		<lcom>0</lcom>
		<ca>39</ca>
		<ce>4</ce>
		<npm>5</npm>
		<lcom3>0.625</lcom3>
		<loc>47</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.875</mfa>
		<cam>0.4666666666666667</cam>
		<ic>1</ic>
		<cbm>2</cbm>
		<amc>8.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public String getMessage()">1</method>
			<method name="public String getLocalizedMessage()">1</method>
			<method name="public org.apache.commons.math3.exception.util.ExceptionContext getContext()">1</method>
			<method name="public transient void _init_(org.apache.commons.math3.exception.util.Localizable pattern, Object[] args)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.MultivariateDifferentiableMultiStartOptimizer</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.optimization.MultivariateDifferentiableOptimizer optimizer, int starts, org.apache.commons.math3.random.RandomVectorGenerator generator)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.MultivariateFunction</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>36</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>36</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double value(double[])">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.FirstOrderConverter</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.3999999999999999</lcom3>
		<loc>83</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>25.0</amc>
		<cc>
			<method name="public void computeDerivatives(double t, double[] y, double[] yDot)">1</method>
			<method name="public int getDimension()">1</method>
			<method name="public void _init_(org.apache.commons.math3.ode.SecondOrderDifferentialEquations equations)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.interpolation.LoessInterpolator</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>27</rfc>
		<lcom>49</lcom>
		<ca>0</ca>
		<ce>17</ce>
		<npm>7</npm>
		<lcom3>0.8857142857142858</lcom3>
		<loc>600</loc>
		<dam>0.5714285714285714</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>52.90909090909091</amc>
		<cc>
			<method name="private static int nextNonzero(double[] weights, int i)">3</method>
			<method name="public final org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction interpolate(double[] xval, double[] yval)">1</method>
			<method name="public void _init_(double bandwidth, int robustnessIters, double accuracy)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public final double[] smooth(double[] xval, double[] yval)">1</method>
			<method name="public void _init_(double bandwidth, int robustnessIters)">0</method>
			<method name="private static void checkAllFiniteReal(double[] values)">2</method>
			<method name="public volatile org.apache.commons.math3.analysis.UnivariateFunction interpolate(double[] x0, double[] x1)">1</method>
			<method name="private static double tricube(double x)">2</method>
			<method name="private static void updateBandwidthInterval(double[] xval, double[] weights, int i, int[] bandwidthInterval)">3</method>
			<method name="public final double[] smooth(double[] xval, double[] yval, double[] weights)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.filter.KalmanFilter</name>
		<wmc>12</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>45</rfc>
		<lcom>18</lcom>
		<ca>0</ca>
		<ce>14</ce>
		<npm>12</npm>
		<lcom3>0.6565656565656566</lcom3>
		<loc>398</loc>
		<dam>1.0</dam>
		<moa>9</moa>
		<mfa>0.0</mfa>
		<cam>0.3</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.416666666666668</amc>
		<cc>
			<method name="public void correct(org.apache.commons.math3.linear.RealVector z)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector getStateEstimationVector()">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getErrorCovarianceMatrix()">1</method>
			<method name="public double[] getStateEstimation()">1</method>
			<method name="public int getStateDimension()">1</method>
			<method name="public int getMeasurementDimension()">1</method>
			<method name="public void _init_(org.apache.commons.math3.filter.ProcessModel process, org.apache.commons.math3.filter.MeasurementModel measurement)">0</method>
			<method name="public void predict(double[] u)">1</method>
			<method name="public double[][] getErrorCovariance()">1</method>
			<method name="public void predict(org.apache.commons.math3.linear.RealVector u)">1</method>
			<method name="public void predict()">1</method>
			<method name="public void correct(double[] z)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.general.GaussNewtonOptimizer</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>31</rfc>
		<lcom>8</lcom>
		<ca>0</ca>
		<ce>17</ce>
		<npm>5</npm>
		<lcom3>0.25</lcom3>
		<loc>262</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>51.2</amc>
		<cc>
			<method name="public org.apache.commons.math3.optimization.PointVectorValuePair doOptimize()">9</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(boolean useLU, org.apache.commons.math3.optimization.ConvergenceChecker checker)">0</method>
			<method name="public void _init_(boolean useLU)">0</method>
			<method name="public void _init_(org.apache.commons.math3.optimization.ConvergenceChecker checker)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.genetics.Population</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>5</rfc>
		<lcom>10</lcom>
		<ca>10</ca>
		<ce>2</ce>
		<npm>5</npm>
		<lcom3>2.0</lcom3>
		<loc>5</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.genetics.Chromosome getFittestChromosome()">1</method>
			<method name="public abstract void addChromosome(org.apache.commons.math3.genetics.Chromosome)">1</method>
			<method name="public abstract int getPopulationLimit()">1</method>
			<method name="public abstract org.apache.commons.math3.genetics.Population nextGeneration()">1</method>
			<method name="public abstract int getPopulationSize()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>21</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>300</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>99.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public org.apache.commons.math3.geometry.enclosing.EnclosingBall ballOnSupport(java.util.List support)">4</method>
			<method name="private org.apache.commons.math3.fraction.BigFraction minor(org.apache.commons.math3.fraction.BigFraction[] c1, org.apache.commons.math3.fraction.BigFraction[] c2)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.SingularOperatorException</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.twod.Segment</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>8</cbo>
		<rfc>11</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>4</ce>
		<npm>5</npm>
		<lcom3>0.5833333333333334</lcom3>
		<loc>119</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.5333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.2</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.twod.Vector2D start, org.apache.commons.math3.geometry.euclidean.twod.Vector2D end, org.apache.commons.math3.geometry.euclidean.twod.Line line)">0</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.Line getLine()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.Vector2D getEnd()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.Vector2D getStart()">1</method>
			<method name="public double distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D p)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.univariate.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.special.Beta</name>
		<wmc>12</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>29</rfc>
		<lcom>60</lcom>
		<ca>5</ca>
		<ce>6</ce>
		<npm>6</npm>
		<lcom3>0.9393939393939394</lcom3>
		<loc>870</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.42424242424242425</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>71.25</amc>
		<cc>
			<method name="public static double logBeta(double a, double b, double epsilon, int maxIterations)">1</method>
			<method name="private void _init_()">0</method>
			<method name="private static double deltaMinusDeltaSum(double a, double b)">1</method>
			<method name="public static double regularizedBeta(double x, double a, double b, double epsilon, int maxIterations)">10</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static double regularizedBeta(double x, double a, double b, int maxIterations)">1</method>
			<method name="public static double logBeta(double p, double q)">18</method>
			<method name="private static double sumDeltaMinusDeltaSum(double p, double q)">4</method>
			<method name="private static double logGammaMinusLogGammaSum(double a, double b)">1</method>
			<method name="private static double logGammaSum(double a, double b)">1</method>
			<method name="public static double regularizedBeta(double x, double a, double b, double epsilon)">1</method>
			<method name="public static double regularizedBeta(double x, double a, double b)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double[] precondition(double[], double[])">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet</name>
		<wmc>24</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>22</cbo>
		<rfc>56</rfc>
		<lcom>276</lcom>
		<ca>3</ca>
		<ce>21</ce>
		<npm>14</npm>
		<lcom3>1.0434782608695652</lcom3>
		<loc>438</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.24074074074074073</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.208333333333332</amc>
		<cc>
			<method name="public org.apache.commons.math3.geometry.partitioning.SubHyperplane firstIntersection(org.apache.commons.math3.geometry.euclidean.threed.Vector3D point, org.apache.commons.math3.geometry.euclidean.threed.Line line)">1</method>
			<method name="public void _init_(double xMin, double xMax, double yMin, double yMax, double zMin, double zMax)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(double tolerance)">0</method>
			<method name="private static org.apache.commons.math3.geometry.partitioning.BSPTree buildBoundary(double xMin, double xMax, double yMin, double yMax, double zMin, double zMax, double tolerance)">4</method>
			<method name="public void _init_(java.util.Collection boundary, double tolerance)">0</method>
			<method name="public void _init_(java.util.Collection boundary)">0</method>
			<method name="static void access$500(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet x0, org.apache.commons.math3.geometry.Point x1)">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.partitioning.Region buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree x0)">1</method>
			<method name="protected void computeGeometricalProperties()">2</method>
			<method name="private org.apache.commons.math3.geometry.partitioning.SubHyperplane boundaryFacet(org.apache.commons.math3.geometry.euclidean.threed.Vector3D point, org.apache.commons.math3.geometry.partitioning.BSPTree node)">5</method>
			<method name="static void access$100(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet x0, org.apache.commons.math3.geometry.Point x1)">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.partitioning.BSPTree tree, double tolerance)">0</method>
			<method name="public volatile org.apache.commons.math3.geometry.partitioning.AbstractRegion buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree x0)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D translation)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree tree)">1</method>
			<method name="private org.apache.commons.math3.geometry.partitioning.SubHyperplane recurseFirstIntersection(org.apache.commons.math3.geometry.partitioning.BSPTree node, org.apache.commons.math3.geometry.euclidean.threed.Vector3D point, org.apache.commons.math3.geometry.euclidean.threed.Line line)">10</method>
			<method name="static void access$400(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet x0, double x1)">1</method>
			<method name="static void access$000(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet x0, double x1)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D center, org.apache.commons.math3.geometry.euclidean.threed.Rotation rotation)">1</method>
			<method name="static void access$300(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet x0, org.apache.commons.math3.geometry.Point x1)">1</method>
			<method name="static void access$200(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet x0, double x1)">1</method>
			<method name="public void _init_(double xMin, double xMax, double yMin, double yMax, double zMin, double zMax, double tolerance)">0</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.partitioning.BSPTree tree)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.BigRealField</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>9</rfc>
		<lcom>36</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>6</npm>
		<lcom3>1.125</lcom3>
		<loc>32</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.4444444444444446</amc>
		<cc>
			<method name="public org.apache.commons.math3.util.BigReal getZero()">1</method>
			<method name="private void _init_()">0</method>
			<method name="public Class getRuntimeClass()">1</method>
			<method name="private Object readResolve()">1</method>
			<method name="public org.apache.commons.math3.util.BigReal getOne()">1</method>
			<method name="public static org.apache.commons.math3.util.BigRealField getInstance()">1</method>
			<method name="void _init_(org.apache.commons.math3.util.BigRealField$1 x0)">0</method>
			<method name="public volatile Object getOne()">1</method>
			<method name="public volatile Object getZero()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.DifferentiableUnivariateFunction</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>44</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>43</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>3</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>34</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.7777777777777778</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.333333333333334</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public transient double[] gradient(double x, double[] parameters)">2</method>
			<method name="public transient double value(double x, double[] parameters)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.FieldMatrixPreservingVisitor</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>3</rfc>
		<lcom>3</lcom>
		<ca>6</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>3</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void visit(int, int, org.apache.commons.math3.FieldElement)">1</method>
			<method name="public abstract org.apache.commons.math3.FieldElement end()">1</method>
			<method name="public abstract void start(int, int, int, int, int, int)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.fitting.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>19</rfc>
		<lcom>8</lcom>
		<ca>0</ca>
		<ce>17</ce>
		<npm>5</npm>
		<lcom3>0.25</lcom3>
		<loc>301</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.55</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>58.4</amc>
		<cc>
			<method name="public volatile org.apache.commons.math3.analysis.BivariateFunction interpolate(double[] x0, double[] x1, double[][] x2)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(int xDegree, int yDegree)">0</method>
			<method name="public void _init_(int degree)">0</method>
			<method name="public org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction interpolate(double[] xval, double[] yval, double[][] fval)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.polynomials.PolynomialsUtils</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>36</rfc>
		<lcom>35</lcom>
		<ca>0</ca>
		<ce>11</ce>
		<npm>6</npm>
		<lcom3>0.8888888888888888</lcom3>
		<loc>465</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.25925925925925924</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>45.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public static org.apache.commons.math3.analysis.polynomials.PolynomialFunction createJacobiPolynomial(int degree, int v, int w)">2</method>
			<method name="public static org.apache.commons.math3.analysis.polynomials.PolynomialFunction createChebyshevPolynomial(int degree)">1</method>
			<method name="public static org.apache.commons.math3.analysis.polynomials.PolynomialFunction createLaguerrePolynomial(int degree)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private static void computeUpToDegree(int degree, int maxDegree, org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$RecurrenceCoefficientsGenerator generator, java.util.List coefficients)">3</method>
			<method name="public static org.apache.commons.math3.analysis.polynomials.PolynomialFunction createHermitePolynomial(int degree)">1</method>
			<method name="public static double[] shift(double[] coefficients, double shift)">6</method>
			<method name="public static org.apache.commons.math3.analysis.polynomials.PolynomialFunction createLegendrePolynomial(int degree)">1</method>
			<method name="private static org.apache.commons.math3.analysis.polynomials.PolynomialFunction buildPolynomial(int degree, java.util.List coefficients, org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$RecurrenceCoefficientsGenerator generator)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.spherical.oned.ArcsSet$SubArcsIterator</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>19</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>5</npm>
		<lcom3>0.35</lcom3>
		<loc>193</loc>
		<dam>0.75</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>30.5</amc>
		<cc>
			<method name="public double[] next()">2</method>
			<method name="private void selectPending()">10</method>
			<method name="public boolean hasNext()">2</method>
			<method name="public void remove()">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.spherical.oned.ArcsSet)">0</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.PointValuePair$DataTransferObject</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.6666666666666667</lcom3>
		<loc>25</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.0</amc>
		<cc>
			<method name="public void _init_(double[] point, double value)">0</method>
			<method name="private Object readResolve()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType$10</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>48</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>23.0</amc>
		<cc>
			<method name="void _init_(String, int, String x0)">0</method>
			<method name="protected double index(double p, int length)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator</name>
		<wmc>13</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>49</rfc>
		<lcom>56</lcom>
		<ca>0</ca>
		<ce>14</ce>
		<npm>9</npm>
		<lcom3>0.7149122807017543</lcom3>
		<loc>2042</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>154.6153846153846</amc>
		<cc>
			<method name="private void extrapolate(int offset, int k, double[][] diag, double[] last)">4</method>
			<method name="public void _init_(double minStep, double maxStep, double[] vecAbsoluteTolerance, double[] vecRelativeTolerance)">0</method>
			<method name="public void setOrderControl(int maximalOrder, double control1, double control2)">7</method>
			<method name="public void setStabilityCheck(boolean performStabilityCheck, int maxNumIter, int maxNumChecks, double stepsizeReductionFactor)">5</method>
			<method name="public void addEventHandler(org.apache.commons.math3.ode.events.EventHandler function, double maxCheckInterval, double convergence, int maxIterationCount, org.apache.commons.math3.analysis.solvers.UnivariateSolver solver)">1</method>
			<method name="private boolean tryStep(double t0, double[] y0, double step, int k, double[] scale, double[][] f, double[] yMiddle, double[] yEnd, double[] yTmp)">1</method>
			<method name="private void rescale(double[] y1, double[] y2, double[] scale)">3</method>
			<method name="public void setControlFactors(double control1, double control2, double control3, double control4)">9</method>
			<method name="public void setInterpolationControl(boolean useInterpolationErrorForControl, int mudifControlParameter)">3</method>
			<method name="public void _init_(double minStep, double maxStep, double scalAbsoluteTolerance, double scalRelativeTolerance)">0</method>
			<method name="private void initializeArrays()">8</method>
			<method name="public void addStepHandler(org.apache.commons.math3.ode.sampling.StepHandler handler)">1</method>
			<method name="public void integrate(org.apache.commons.math3.ode.ExpandableStatefulODE equations, double t)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.util.Localizable</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>224</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>224</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract String getLocalizedString(java.util.Locale)">1</method>
			<method name="public abstract String getSourceString()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.linear.LinearConstraintSet</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>8</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>50</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.333333333333334</amc>
		<cc>
			<method name="public void _init_(java.util.Collection constraints)">0</method>
			<method name="public transient void _init_(org.apache.commons.math3.optim.linear.LinearConstraint[] constraints)">0</method>
			<method name="public java.util.Collection getConstraints()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.AbstractRealDistribution$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>21</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.5</amc>
		<cc>
			<method name="public double value(double x)">1</method>
			<method name="void _init_(org.apache.commons.math3.distribution.AbstractRealDistribution, double)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.events.EventHandler</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>4</rfc>
		<lcom>6</lcom>
		<ca>6</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8125</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void init(double, double[], double)">1</method>
			<method name="public abstract org.apache.commons.math3.ode.events.EventHandler$Action eventOccurred(double, double[], boolean)">1</method>
			<method name="public abstract double g(double, double[])">1</method>
			<method name="public abstract void resetState(double, double[])">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.OpenIntToFieldHashMap</name>
		<wmc>29</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>38</rfc>
		<lcom>226</lcom>
		<ca>3</ca>
		<ce>5</ce>
		<npm>11</npm>
		<lcom3>0.859375</lcom3>
		<loc>764</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.21551724137931033</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.79310344827586</amc>
		<cc>
			<method name="public boolean containsKey(int key)">5</method>
			<method name="private boolean containsKey(int key, int index)">4</method>
			<method name="private static int computeCapacity(int expectedSize)">3</method>
			<method name="public org.apache.commons.math3.FieldElement put(int key, org.apache.commons.math3.FieldElement value)">4</method>
			<method name="public void _init_(org.apache.commons.math3.Field field, int expectedSize, org.apache.commons.math3.FieldElement missingEntries)">0</method>
			<method name="public void _init_(org.apache.commons.math3.Field field)">0</method>
			<method name="public org.apache.commons.math3.FieldElement remove(int key)">5</method>
			<method name="private static int hashOf(int key)">1</method>
			<method name="private static int findInsertionIndex(int[] keys, byte[] states, int key, int mask)">12</method>
			<method name="public int size()">1</method>
			<method name="public org.apache.commons.math3.FieldElement get(int key)">5</method>
			<method name="private void readObject(java.io.ObjectInputStream stream)">1</method>
			<method name="private static int perturb(int hash)">1</method>
			<method name="private void growTable()">3</method>
			<method name="static org.apache.commons.math3.FieldElement[] access$300(org.apache.commons.math3.util.OpenIntToFieldHashMap x0)">1</method>
			<method name="private static int nextPowerOfTwo(int i)">1</method>
			<method name="private boolean shouldGrowTable()">2</method>
			<method name="private org.apache.commons.math3.FieldElement[] buildArray(int length)">1</method>
			<method name="public void _init_(org.apache.commons.math3.Field field, org.apache.commons.math3.FieldElement missingEntries)">0</method>
			<method name="public org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator iterator()">1</method>
			<method name="public void _init_(org.apache.commons.math3.util.OpenIntToFieldHashMap source)">0</method>
			<method name="static byte[] access$400(org.apache.commons.math3.util.OpenIntToFieldHashMap x0)">1</method>
			<method name="private static int changeIndexSign(int index)">1</method>
			<method name="private int findInsertionIndex(int key)">1</method>
			<method name="public void _init_(org.apache.commons.math3.Field field, int expectedSize)">0</method>
			<method name="private static int probe(int perturb, int j)">1</method>
			<method name="static int[] access$200(org.apache.commons.math3.util.OpenIntToFieldHashMap x0)">1</method>
			<method name="private org.apache.commons.math3.FieldElement doRemove(int index)">1</method>
			<method name="static int access$100(org.apache.commons.math3.util.OpenIntToFieldHashMap x0)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.OpenIntToDoubleHashMap$Iterator</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>13</rfc>
		<lcom>0</lcom>
		<ca>5</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>0.25</lcom3>
		<loc>127</loc>
		<dam>0.75</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.5</amc>
		<cc>
			<method name="public double value()">1</method>
			<method name="public int key()">1</method>
			<method name="public void advance()">1</method>
			<method name="public boolean hasNext()">2</method>
			<method name="private void _init_(org.apache.commons.math3.util.OpenIntToDoubleHashMap)">0</method>
			<method name="void _init_(org.apache.commons.math3.util.OpenIntToDoubleHashMap x0, org.apache.commons.math3.util.OpenIntToDoubleHashMap$1 x1)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>21</rfc>
		<lcom>39</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>11</npm>
		<lcom3>0.6571428571428571</lcom3>
		<loc>243</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3181818181818182</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>20.454545454545453</amc>
		<cc>
			<method name="public long getN()">1</method>
			<method name="public void _init_(double mean, double variance, long n, double max, double min, double sum)">0</method>
			<method name="public double getMax()">1</method>
			<method name="public double getMin()">1</method>
			<method name="public boolean equals(Object object)">9</method>
			<method name="public int hashCode()">1</method>
			<method name="public double getVariance()">1</method>
			<method name="public double getStandardDeviation()">1</method>
			<method name="public double getMean()">1</method>
			<method name="public String toString()">1</method>
			<method name="public double getSum()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>12</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>9</ce>
		<npm>1</npm>
		<lcom3>1.0</lcom3>
		<loc>61</loc>
		<dam>0.75</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>27.5</amc>
		<cc>
			<method name="public org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair search(double[] p, double[] d)">1</method>
			<method name="void _init_(org.apache.commons.math3.optimization.direct.PowellOptimizer, double rel, double abs)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$2</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>11</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>45</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.0</amc>
		<cc>
			<method name="void _init_(org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction)">0</method>
			<method name="public double[][] value(double[] point)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>11</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>45</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.0</amc>
		<cc>
			<method name="public double[] value(double[] point)">2</method>
			<method name="void _init_(org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.regression.SimpleRegression</name>
		<wmc>32</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>48</rfc>
		<lcom>78</lcom>
		<ca>1</ca>
		<ce>11</ce>
		<npm>30</npm>
		<lcom3>0.4774193548387097</lcom3>
		<loc>1625</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.20982142857142858</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>49.46875</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="public void addObservation(double[] x, double y)">1</method>
			<method name="public double getRSquare()">1</method>
			<method name="public void removeData(double x, double y)">3</method>
			<method name="public void _init_(boolean includeIntercept)">0</method>
			<method name="public double predict(double x)">2</method>
			<method name="private double getIntercept(double slope)">2</method>
			<method name="public double getSlopeStdErr()">1</method>
			<method name="public double getMeanSquareError()">3</method>
			<method name="public void removeData(double[][] data)">3</method>
			<method name="public double getTotalSumSquares()">2</method>
			<method name="public double getSumOfCrossProducts()">1</method>
			<method name="public void addObservations(double[][] x, double[] y)">1</method>
			<method name="public org.apache.commons.math3.stat.regression.RegressionResults regress(int[] variablesToInclude)">1</method>
			<method name="public double getSignificance()">2</method>
			<method name="public org.apache.commons.math3.stat.regression.RegressionResults regress()">1</method>
			<method name="public long getN()">1</method>
			<method name="public void addData(double[][] data)">1</method>
			<method name="public double getSumSquaredErrors()">1</method>
			<method name="public double getInterceptStdErr()">2</method>
			<method name="public void _init_()">0</method>
			<method name="public double getIntercept()">2</method>
			<method name="public double getSlopeConfidenceInterval(double alpha)">1</method>
			<method name="public double getRegressionSumSquares()">1</method>
			<method name="public void addData(double x, double y)">4</method>
			<method name="public boolean hasIntercept()">1</method>
			<method name="public double getSlope()">3</method>
			<method name="public void append(org.apache.commons.math3.stat.regression.SimpleRegression reg)">3</method>
			<method name="public double getR()">2</method>
			<method name="private double getRegressionSumSquares(double slope)">1</method>
			<method name="public double getSlopeConfidenceInterval()">1</method>
			<method name="public double getXSumSquares()">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.linear.LinearOptimizer</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>4</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract int getMaxIterations()">1</method>
			<method name="public abstract void setMaxIterations(int)">1</method>
			<method name="public abstract int getIterations()">1</method>
			<method name="public abstract org.apache.commons.math3.optimization.PointValuePair optimize(org.apache.commons.math3.optimization.linear.LinearObjectiveFunction, java.util.Collection, org.apache.commons.math3.optimization.GoalType, boolean)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>55</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.5</amc>
		<cc>
			<method name="public double value(double alpha)">2</method>
			<method name="void _init_(org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, int, double[], double[])">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer</name>
		<wmc>18</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>55</rfc>
		<lcom>39</lcom>
		<ca>1</ca>
		<ce>16</ce>
		<npm>13</npm>
		<lcom3>0.5882352941176471</lcom3>
		<loc>2109</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.29411764705882354</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>115.83333333333333</amc>
		<cc>
			<method name="private org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData qrDecomposition(org.apache.commons.math3.linear.RealMatrix jacobian, int solvedCols)">1</method>
			<method name="public org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer withInitialStepBoundFactor(double newInitialStepBoundFactor)">1</method>
			<method name="public double getOrthoTolerance()">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer withOrthoTolerance(double newOrthoTolerance)">1</method>
			<method name="private double determineLMParameter(double[] qy, double delta, double[] diag, org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData internalData, int solvedCols, double[] work1, double[] work2, double[] work3, double[] lmDir, double lmPar)">29</method>
			<method name="public org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer withCostRelativeTolerance(double newCostRelativeTolerance)">1</method>
			<method name="public double getRankingThreshold()">1</method>
			<method name="private void qTy(double[] y, org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData internalData)">4</method>
			<method name="public org.apache.commons.math3.fitting.leastsquares.LeastSquaresOptimizer$Optimum optimize(org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem problem)">40</method>
			<method name="public double getCostRelativeTolerance()">1</method>
			<method name="public void _init_(double initialStepBoundFactor, double costRelativeTolerance, double parRelativeTolerance, double orthoTolerance, double qrRankingThreshold)">0</method>
			<method name="private void determineLMDirection(double[] qy, double[] diag, double[] lmDiag, org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer$InternalData internalData, int solvedCols, double[] work, double[] lmDir)">17</method>
			<method name="public org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer withRankingThreshold(double newQRRankingThreshold)">1</method>
			<method name="public double getParameterRelativeTolerance()">1</method>
			<method name="public org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer withParameterRelativeTolerance(double newParRelativeTolerance)">1</method>
			<method name="public double getInitialStepBoundFactor()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.distance.ManhattanDistance</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>10</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public double compute(double[] a, double[] b)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.JacobiPreconditioner</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>24</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>6</npm>
		<lcom3>0.0</lcom3>
		<loc>120</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.833333333333332</amc>
		<cc>
			<method name="public org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector x)">1</method>
			<method name="public static org.apache.commons.math3.linear.JacobiPreconditioner create(org.apache.commons.math3.linear.RealLinearOperator a)">1</method>
			<method name="public int getRowDimension()">1</method>
			<method name="public int getColumnDimension()">1</method>
			<method name="public void _init_(double[] diag, boolean deep)">0</method>
			<method name="public org.apache.commons.math3.linear.RealLinearOperator sqrt()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer</name>
		<wmc>8</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>16</cbo>
		<rfc>25</rfc>
		<lcom>16</lcom>
		<ca>1</ca>
		<ce>16</ce>
		<npm>5</npm>
		<lcom3>0.6785714285714286</lcom3>
		<loc>249</loc>
		<dam>1.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.2916666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>29.125</amc>
		<cc>
			<method name="private void sortPairs(org.apache.commons.math3.optim.nonlinear.scalar.GoalType goal)">1</method>
			<method name="public volatile Object optimize(org.apache.commons.math3.optim.OptimizationData[] x0)">1</method>
			<method name="protected volatile Object doOptimize()">1</method>
			<method name="public int getEvaluations()">1</method>
			<method name="public void _init_(org.apache.commons.math3.optim.univariate.UnivariateOptimizer optimizer, int starts, org.apache.commons.math3.random.RandomGenerator generator)">0</method>
			<method name="public org.apache.commons.math3.optim.univariate.UnivariatePointValuePair[] getOptima()">2</method>
			<method name="protected org.apache.commons.math3.optim.univariate.UnivariatePointValuePair doOptimize()">9</method>
			<method name="public transient org.apache.commons.math3.optim.univariate.UnivariatePointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[] optData)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.UnknownParameterException</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>5</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>1.0</lcom3>
		<loc>16</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public String getName()">1</method>
			<method name="public void _init_(String name)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.Space</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>12</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract int getDimension()">1</method>
			<method name="public abstract org.apache.commons.math3.geometry.Space getSubSpace()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.direct.CMAESOptimizer$Sigma</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>38</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.5</amc>
		<cc>
			<method name="public void _init_(double[] s)">0</method>
			<method name="public double[] getSigma()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.MathArrays</name>
		<wmc>52</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>89</cbo>
		<rfc>109</rfc>
		<lcom>1326</lcom>
		<ca>62</ca>
		<ce>27</ce>
		<npm>51</npm>
		<lcom3>1.0196078431372548</lcom3>
		<loc>2631</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.1064102564102564</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>49.57692307692308</amc>
		<cc>
			<method name="public static int[] copyOf(int[] source)">1</method>
			<method name="public static double distance(int[] p1, int[] p2)">2</method>
			<method name="public static double[] normalizeArray(double[] values, double normalizedSum)">1</method>
			<method name="public static double distance1(double[] p1, double[] p2)">2</method>
			<method name="public static boolean verifyValues(double[] values, int begin, int length, boolean allowEmpty)">1</method>
			<method name="public static boolean equalsIncludingNaN(double[] x, double[] y)">9</method>
			<method name="public static transient void sortInPlace(double[] x, double[][] yList)">1</method>
			<method name="public static int distanceInf(int[] p1, int[] p2)">2</method>
			<method name="private void _init_()">0</method>
			<method name="public static double distanceInf(double[] p1, double[] p2)">2</method>
			<method name="public static boolean verifyValues(double[] values, double[] weights, int begin, int length, boolean allowEmpty)">1</method>
			<method name="public static Object[] buildArray(org.apache.commons.math3.Field field, int length)">1</method>
			<method name="public static void checkNonNegative(long[][] in)">1</method>
			<method name="public static double[] convolve(double[] x, double[] h)">1</method>
			<method name="public static double[] copyOf(double[] source, int len)">1</method>
			<method name="public static double[] ebeMultiply(double[] a, double[] b)">1</method>
			<method name="public static boolean equalsIncludingNaN(float[] x, float[] y)">9</method>
			<method name="public static Object[][] buildArray(org.apache.commons.math3.Field field, int rows, int columns)">3</method>
			<method name="public static void shuffle(int[] list)">1</method>
			<method name="public static boolean verifyValues(double[] values, int begin, int length)">1</method>
			<method name="public static double linearCombination(double a1, double b1, double a2, double b2, double a3, double b3, double a4, double b4)">2</method>
			<method name="public static double[] scale(double val, double[] arr)">2</method>
			<method name="public static double distance(double[] p1, double[] p2)">2</method>
			<method name="public static void checkPositive(double[] in)">1</method>
			<method name="public static boolean checkOrder(double[] val, org.apache.commons.math3.util.MathArrays$OrderDirection dir, boolean strict, boolean abort)">1</method>
			<method name="public static double linearCombination(double a1, double b1, double a2, double b2, double a3, double b3)">2</method>
			<method name="public static void checkOrder(double[] val, org.apache.commons.math3.util.MathArrays$OrderDirection dir, boolean strict)">1</method>
			<method name="public static transient void sortInPlace(double[] x, org.apache.commons.math3.util.MathArrays$OrderDirection dir, double[][] yList)">1</method>
			<method name="public static void checkOrder(double[] val)">1</method>
			<method name="public static void checkNonNegative(long[] in)">1</method>
			<method name="public static boolean isMonotonic(Comparable[] val, org.apache.commons.math3.util.MathArrays$OrderDirection dir, boolean strict)">11</method>
			<method name="public static void shuffle(int[] list, int start, org.apache.commons.math3.util.MathArrays$Position pos)">1</method>
			<method name="public static int[] natural(int n)">2</method>
			<method name="public static double[] ebeAdd(double[] a, double[] b)">1</method>
			<method name="public static double[] ebeSubtract(double[] a, double[] b)">1</method>
			<method name="public static double linearCombination(double a1, double b1, double a2, double b2)">2</method>
			<method name="public static boolean equals(double[] x, double[] y)">9</method>
			<method name="public static double safeNorm(double[] v)">11</method>
			<method name="public static boolean verifyValues(double[] values, double[] weights, int begin, int length)">1</method>
			<method name="public static void shuffle(int[] list, int start, org.apache.commons.math3.util.MathArrays$Position pos, org.apache.commons.math3.random.RandomGenerator rng)">6</method>
			<method name="public static double[] copyOfRange(double[] source, int from, int to)">1</method>
			<method name="public static void checkNotNaN(double[] in)">1</method>
			<method name="public static double[] copyOf(double[] source)">1</method>
			<method name="public static int[] copyOf(int[] source, int len)">1</method>
			<method name="public static void shuffle(int[] list, org.apache.commons.math3.random.RandomGenerator rng)">1</method>
			<method name="public static double[] ebeDivide(double[] a, double[] b)">1</method>
			<method name="public static boolean isMonotonic(double[] val, org.apache.commons.math3.util.MathArrays$OrderDirection dir, boolean strict)">1</method>
			<method name="public static boolean equals(float[] x, float[] y)">9</method>
			<method name="public static void checkRectangular(long[][] in)">1</method>
			<method name="public static void scaleInPlace(double val, double[] arr)">2</method>
			<method name="public static double linearCombination(double[] a, double[] b)">1</method>
			<method name="public static int distance1(int[] p1, int[] p2)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.primes.PollardRho</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>13</rfc>
		<lcom>6</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>223</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>54.75</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public static java.util.List primeFactors(int n)">3</method>
			<method name="static int rhoBrent(int n)">7</method>
			<method name="static int gcdPositive(int a, int b)">4</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.linear.Relationship</name>
		<wmc>6</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>10</rfc>
		<lcom>9</lcom>
		<ca>3</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>0.76</lcom3>
		<loc>79</loc>
		<dam>0.4</dam>
		<moa>4</moa>
		<mfa>0.7647058823529411</mfa>
		<cam>0.4</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>11.333333333333334</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public static org.apache.commons.math3.optim.linear.Relationship valueOf(String name)">1</method>
			<method name="public static org.apache.commons.math3.optim.linear.Relationship[] values()">1</method>
			<method name="public org.apache.commons.math3.optim.linear.Relationship oppositeRelationship()">4</method>
			<method name="public String toString()">1</method>
			<method name="private void _init_(String, int, String stringValue)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fraction.BigFraction</name>
		<wmc>64</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>27</cbo>
		<rfc>110</rfc>
		<lcom>770</lcom>
		<ca>15</ca>
		<ce>13</ce>
		<npm>62</npm>
		<lcom3>0.8897707231040565</lcom3>
		<loc>1308</loc>
		<dam>0.2222222222222222</dam>
		<moa>14</moa>
		<mfa>0.1016949152542373</mfa>
		<cam>0.24036281179138322</cam>
		<ic>1</ic>
		<cbm>2</cbm>
		<amc>19.15625</amc>
		<cc>
			<method name="public void _init_(java.math.BigInteger num)">0</method>
			<method name="private void _init_(double value, double epsilon, int maxDenominator, int maxIterations)">0</method>
			<method name="public org.apache.commons.math3.fraction.BigFraction reciprocal()">1</method>
			<method name="public org.apache.commons.math3.fraction.BigFraction reduce()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public org.apache.commons.math3.fraction.BigFraction add(int i)">1</method>
			<method name="public volatile Object multiply(Object x0)">1</method>
			<method name="public double doubleValue()">2</method>
			<method name="public org.apache.commons.math3.fraction.BigFraction subtract(int i)">1</method>
			<method name="public org.apache.commons.math3.fraction.BigFraction abs()">2</method>
			<method name="public org.apache.commons.math3.fraction.BigFraction multiply(long l)">1</method>
			<method name="public int getDenominatorAsInt()">1</method>
			<method name="public org.apache.commons.math3.fraction.BigFraction multiply(int i)">1</method>
			<method name="public long longValue()">1</method>
			<method name="public org.apache.commons.math3.fraction.BigFraction subtract(long l)">1</method>
			<method name="public org.apache.commons.math3.fraction.BigFraction multiply(org.apache.commons.math3.fraction.BigFraction fraction)">4</method>
			<method name="public org.apache.commons.math3.fraction.BigFraction negate()">1</method>
			<method name="public double percentageValue()">1</method>
			<method name="public org.apache.commons.math3.fraction.BigFraction divide(org.apache.commons.math3.fraction.BigFraction fraction)">3</method>
			<method name="public double pow(double exponent)">1</method>
			<method name="public void _init_(int num, int den)">0</method>
			<method name="public org.apache.commons.math3.fraction.BigFraction multiply(java.math.BigInteger bg)">2</method>
			<method name="public long getDenominatorAsLong()">1</method>
			<method name="public org.apache.commons.math3.fraction.BigFraction pow(long exponent)">2</method>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="public java.math.BigDecimal bigDecimalValue()">1</method>
			<method name="public volatile Object negate()">1</method>
			<method name="public volatile org.apache.commons.math3.Field getField()">1</method>
			<method name="public float floatValue()">2</method>
			<method name="public volatile Object add(Object x0)">1</method>
			<method name="public org.apache.commons.math3.fraction.BigFractionField getField()">1</method>
			<method name="public volatile Object subtract(Object x0)">1</method>
			<method name="public int compareTo(org.apache.commons.math3.fraction.BigFraction object)">1</method>
			<method name="public java.math.BigDecimal bigDecimalValue(int roundingMode)">1</method>
			<method name="public volatile Object divide(Object x0)">1</method>
			<method name="public org.apache.commons.math3.fraction.BigFraction add(long l)">1</method>
			<method name="public org.apache.commons.math3.fraction.BigFraction subtract(org.apache.commons.math3.fraction.BigFraction fraction)">4</method>
			<method name="public org.apache.commons.math3.fraction.BigFraction add(java.math.BigInteger bg)">1</method>
			<method name="public long getNumeratorAsLong()">1</method>
			<method name="public java.math.BigInteger getNumerator()">1</method>
			<method name="public org.apache.commons.math3.fraction.BigFraction divide(long l)">1</method>
			<method name="public void _init_(int num)">0</method>
			<method name="public volatile Object reciprocal()">1</method>
			<method name="public org.apache.commons.math3.fraction.BigFraction subtract(java.math.BigInteger bg)">2</method>
			<method name="public static org.apache.commons.math3.fraction.BigFraction getReducedFraction(int numerator, int denominator)">2</method>
			<method name="public String toString()">3</method>
			<method name="public org.apache.commons.math3.fraction.BigFraction divide(java.math.BigInteger bg)">3</method>
			<method name="public java.math.BigDecimal bigDecimalValue(int scale, int roundingMode)">1</method>
			<method name="public void _init_(long num, long den)">0</method>
			<method name="public org.apache.commons.math3.fraction.BigFraction divide(int i)">1</method>
			<method name="public void _init_(long num)">0</method>
			<method name="public org.apache.commons.math3.fraction.BigFraction pow(int exponent)">2</method>
			<method name="public java.math.BigInteger getDenominator()">1</method>
			<method name="public org.apache.commons.math3.fraction.BigFraction add(org.apache.commons.math3.fraction.BigFraction fraction)">4</method>
			<method name="public boolean equals(Object other)">5</method>
			<method name="public org.apache.commons.math3.fraction.BigFraction pow(java.math.BigInteger exponent)">2</method>
			<method name="public void _init_(double value)">0</method>
			<method name="public void _init_(double value, double epsilon, int maxIterations)">0</method>
			<method name="public int hashCode()">1</method>
			<method name="public void _init_(java.math.BigInteger num, java.math.BigInteger den)">0</method>
			<method name="public int getNumeratorAsInt()">1</method>
			<method name="public int intValue()">1</method>
			<method name="public volatile Object multiply(int x0)">1</method>
			<method name="public void _init_(double value, int maxDenominator)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.transform.FastFourierTransformer</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>18</cbo>
		<rfc>31</rfc>
		<lcom>31</lcom>
		<ca>2</ca>
		<ce>16</ce>
		<npm>6</npm>
		<lcom3>0.5555555555555556</lcom3>
		<loc>1424</loc>
		<dam>0.6</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.25925925925925924</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>140.9</amc>
		<cc>
			<method name="public Object mdfft(Object mdca, org.apache.commons.math3.transform.TransformType type)">2</method>
			<method name="public org.apache.commons.math3.complex.Complex[] transform(org.apache.commons.math3.complex.Complex[] f, org.apache.commons.math3.transform.TransformType type)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static void transformInPlace(double[][] dataRI, org.apache.commons.math3.transform.DftNormalization normalization, org.apache.commons.math3.transform.TransformType type)">12</method>
			<method name="private static void normalizeTransformedData(double[][] dataRI, org.apache.commons.math3.transform.DftNormalization normalization, org.apache.commons.math3.transform.TransformType type)">7</method>
			<method name="public void _init_(org.apache.commons.math3.transform.DftNormalization normalization)">0</method>
			<method name="public org.apache.commons.math3.complex.Complex[] transform(org.apache.commons.math3.analysis.UnivariateFunction f, double min, double max, int n, org.apache.commons.math3.transform.TransformType type)">1</method>
			<method name="private static void bitReversalShuffle2(double[] a, double[] b)">7</method>
			<method name="private void mdfft(org.apache.commons.math3.transform.FastFourierTransformer$MultiDimensionalComplexMatrix mdcm, org.apache.commons.math3.transform.TransformType type, int d, int[] subVector)">5</method>
			<method name="public org.apache.commons.math3.complex.Complex[] transform(double[] f, org.apache.commons.math3.transform.TransformType type)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.MainStateJacobianProvider</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void computeMainStateJacobian(double, double[], double[], double[][])">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Atan</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>9</rfc>
		<lcom>6</lcom>
		<ca>0</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>17</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.25</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double value(double x)">1</method>
			<method name="public org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.LevyDistribution</name>
		<wmc>14</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>23</rfc>
		<lcom>47</lcom>
		<ca>0</ca>
		<ce>5</ce>
		<npm>14</npm>
		<lcom3>0.8076923076923077</lcom3>
		<loc>159</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.47619047619047616</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.071428571428571</amc>
		<cc>
			<method name="public double inverseCumulativeProbability(double p)">1</method>
			<method name="public double density(double x)">2</method>
			<method name="public double getScale()">1</method>
			<method name="public boolean isSupportConnected()">1</method>
			<method name="public boolean isSupportUpperBoundInclusive()">1</method>
			<method name="public double cumulativeProbability(double x)">2</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, double mu, double c)">0</method>
			<method name="public boolean isSupportLowerBoundInclusive()">1</method>
			<method name="public double getSupportLowerBound()">1</method>
			<method name="public double getLocation()">1</method>
			<method name="public double getNumericalMean()">1</method>
			<method name="public double getNumericalVariance()">1</method>
			<method name="public double getSupportUpperBound()">1</method>
			<method name="public double logDensity(double x)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.OpenMapRealVector$OpenMapSparseIterator</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>11</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>4</npm>
		<lcom3>0.5833333333333334</lcom3>
		<loc>45</loc>
		<dam>0.6666666666666666</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.4</amc>
		<cc>
			<method name="public org.apache.commons.math3.linear.RealVector$Entry next()">1</method>
			<method name="protected void _init_(org.apache.commons.math3.linear.OpenMapRealVector)">0</method>
			<method name="public boolean hasNext()">1</method>
			<method name="public void remove()">1</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.InitialGuess</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>5</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>16</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.5</amc>
		<cc>
			<method name="public double[] getInitialGuess()">1</method>
			<method name="public void _init_(double[] startPoint)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.neuralnet.Network$SerializationProxy</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>0.3999999999999999</lcom3>
		<loc>34</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.5</amc>
		<cc>
			<method name="private Object readResolve()">1</method>
			<method name="void _init_(long nextId, int featureSize, org.apache.commons.math3.ml.neuralnet.Neuron[] neuronList, long[][] neighbourIdList)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fraction.BigFractionField$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.CholeskyDecomposition</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>20</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>6</npm>
		<lcom3>0.6799999999999999</lcom3>
		<loc>240</loc>
		<dam>0.6</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>38.166666666666664</amc>
		<cc>
			<method name="public org.apache.commons.math3.linear.DecompositionSolver getSolver()">1</method>
			<method name="public double getDeterminant()">2</method>
			<method name="public void _init_(org.apache.commons.math3.linear.RealMatrix matrix)">0</method>
			<method name="public void _init_(org.apache.commons.math3.linear.RealMatrix matrix, double relativeSymmetryThreshold, double absolutePositivityThreshold)">0</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getLT()">2</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getL()">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fraction.FractionConversionException</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>4</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>40</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.5</amc>
		<cc>
			<method name="public void _init_(double value, long p, long q)">0</method>
			<method name="public void _init_(double value, int maxIterations)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.NumberTransformer</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double transform(Object)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>17</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>6</npm>
		<lcom3>0.0</lcom3>
		<loc>119</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3611111111111111</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.666666666666668</amc>
		<cc>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.twod.Vector2D start, double dx, double dy)">0</method>
			<method name="public int hashCode()">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.twod.Vector2D start, org.apache.commons.math3.geometry.euclidean.twod.Vector2D end, org.apache.commons.math3.geometry.euclidean.twod.Line line)">0</method>
			<method name="public int compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment o)">1</method>
			<method name="public boolean equals(Object other)">4</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer</name>
		<wmc>43</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>21</cbo>
		<rfc>103</rfc>
		<lcom>831</lcom>
		<ca>1</ca>
		<ce>21</ce>
		<npm>7</npm>
		<lcom3>0.9195767195767195</lcom3>
		<loc>2733</loc>
		<dam>1.0</dam>
		<moa>11</moa>
		<mfa>0.0</mfa>
		<cam>0.13178294573643412</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>61.51162790697674</amc>
		<cc>
			<method name="private void checkParameters()">5</method>
			<method name="public volatile Object optimize(org.apache.commons.math3.optim.OptimizationData[] x0)">1</method>
			<method name="protected volatile Object doOptimize()">1</method>
			<method name="private static int[] inverse(int[] indices)">2</method>
			<method name="public java.util.List getStatisticsDHistory()">1</method>
			<method name="private double[] randn(int size)">2</method>
			<method name="private static org.apache.commons.math3.linear.RealMatrix sumRows(org.apache.commons.math3.linear.RealMatrix m)">3</method>
			<method name="private static org.apache.commons.math3.linear.RealMatrix ones(int n, int m)">2</method>
			<method name="private static org.apache.commons.math3.linear.RealMatrix selectColumns(org.apache.commons.math3.linear.RealMatrix m, int[] cols)">3</method>
			<method name="private static double min(org.apache.commons.math3.linear.RealMatrix m)">4</method>
			<method name="private static double max(org.apache.commons.math3.linear.RealMatrix m)">4</method>
			<method name="private static org.apache.commons.math3.linear.RealMatrix eye(int n, int m)">3</method>
			<method name="private static org.apache.commons.math3.linear.RealMatrix divide(org.apache.commons.math3.linear.RealMatrix m, org.apache.commons.math3.linear.RealMatrix n)">3</method>
			<method name="private static org.apache.commons.math3.linear.RealMatrix diag(org.apache.commons.math3.linear.RealMatrix m)">4</method>
			<method name="static boolean access$400(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer x0)">1</method>
			<method name="private static double min(double[] m)">3</method>
			<method name="private static org.apache.commons.math3.linear.RealMatrix repmat(org.apache.commons.math3.linear.RealMatrix mat, int n, int m)">3</method>
			<method name="public void _init_(int maxIterations, double stopFitness, boolean isActiveCMA, int diagonalOnly, int checkFeasableCount, org.apache.commons.math3.random.RandomGenerator random, boolean generateStatistics, org.apache.commons.math3.optim.ConvergenceChecker checker)">0</method>
			<method name="protected transient void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[] optData)">4</method>
			<method name="private void updateBD(double negccov)">7</method>
			<method name="private int[] sortedIndices(double[] doubles)">3</method>
			<method name="private static org.apache.commons.math3.linear.RealMatrix triu(org.apache.commons.math3.linear.RealMatrix m, int k)">4</method>
			<method name="private static org.apache.commons.math3.linear.RealMatrix sequence(double start, double end, double step)">2</method>
			<method name="private void updateCovarianceDiagonalOnly(boolean hsig, org.apache.commons.math3.linear.RealMatrix bestArz)">4</method>
			<method name="private static org.apache.commons.math3.linear.RealMatrix log(org.apache.commons.math3.linear.RealMatrix m)">3</method>
			<method name="public transient org.apache.commons.math3.optim.PointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[] optData)">1</method>
			<method name="private boolean updateEvolutionPaths(org.apache.commons.math3.linear.RealMatrix zmean, org.apache.commons.math3.linear.RealMatrix xold)">3</method>
			<method name="public java.util.List getStatisticsSigmaHistory()">1</method>
			<method name="private static int[] reverse(int[] indices)">2</method>
			<method name="private static void copyColumn(org.apache.commons.math3.linear.RealMatrix m1, int col1, org.apache.commons.math3.linear.RealMatrix m2, int col2)">2</method>
			<method name="public java.util.List getStatisticsFitnessHistory()">1</method>
			<method name="protected org.apache.commons.math3.optim.PointValuePair doOptimize()">36</method>
			<method name="private static org.apache.commons.math3.linear.RealMatrix sqrt(org.apache.commons.math3.linear.RealMatrix m)">3</method>
			<method name="private static void push(double[] vals, double val)">2</method>
			<method name="private static org.apache.commons.math3.linear.RealMatrix zeros(int n, int m)">1</method>
			<method name="public java.util.List getStatisticsMeanHistory()">1</method>
			<method name="private static double max(double[] m)">3</method>
			<method name="private double valueRange(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$ValuePenaltyPair[] vpPairs)">4</method>
			<method name="private org.apache.commons.math3.linear.RealMatrix randn1(int size, int popSize)">3</method>
			<method name="private void initializeCMA(double[] guess)">5</method>
			<method name="private static org.apache.commons.math3.linear.RealMatrix square(org.apache.commons.math3.linear.RealMatrix m)">3</method>
			<method name="private void updateCovariance(boolean hsig, org.apache.commons.math3.linear.RealMatrix bestArx, org.apache.commons.math3.linear.RealMatrix arz, int[] arindex, org.apache.commons.math3.linear.RealMatrix xold)">5</method>
			<method name="private static org.apache.commons.math3.linear.RealMatrix times(org.apache.commons.math3.linear.RealMatrix m, org.apache.commons.math3.linear.RealMatrix n)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.AbstractIntegrator$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>30</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.333333333333334</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="public int compare(org.apache.commons.math3.ode.events.EventState es0, org.apache.commons.math3.ode.events.EventState es1)">1</method>
			<method name="void _init_(org.apache.commons.math3.ode.AbstractIntegrator, int)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.complex.RootsOfUnity</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>14</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>7</ce>
		<npm>6</npm>
		<lcom3>0.5666666666666667</lcom3>
		<loc>248</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>39.333333333333336</amc>
		<cc>
			<method name="public synchronized double getReal(int k)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public synchronized int getNumberOfRoots()">1</method>
			<method name="public synchronized boolean isCounterClockWise()">1</method>
			<method name="public synchronized double getImaginary(int k)">1</method>
			<method name="public synchronized void computeRoots(int n)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>12</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.0</amc>
		<cc>
			<method name="public void _init_(boolean isCardan)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.RandomGenerator</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>67</cbo>
		<rfc>11</rfc>
		<lcom>55</lcom>
		<ca>67</ca>
		<ce>0</ce>
		<npm>11</npm>
		<lcom3>2.0</lcom3>
		<loc>11</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2909090909090909</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double nextGaussian()">1</method>
			<method name="public abstract void setSeed(int[])">1</method>
			<method name="public abstract long nextLong()">1</method>
			<method name="public abstract float nextFloat()">1</method>
			<method name="public abstract int nextInt()">1</method>
			<method name="public abstract double nextDouble()">1</method>
			<method name="public abstract boolean nextBoolean()">1</method>
			<method name="public abstract void nextBytes(byte[])">1</method>
			<method name="public abstract int nextInt(int)">1</method>
			<method name="public abstract void setSeed(int)">1</method>
			<method name="public abstract void setSeed(long)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.MatrixDimensionMismatchException</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>9</rfc>
		<lcom>10</lcom>
		<ca>12</ca>
		<ce>3</ce>
		<npm>5</npm>
		<lcom3>1.25</lcom3>
		<loc>50</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.8</amc>
		<cc>
			<method name="public int getExpectedRowDimension()">1</method>
			<method name="public int getExpectedColumnDimension()">1</method>
			<method name="public int getWrongColumnDimension()">1</method>
			<method name="public void _init_(int wrongRowDim, int wrongColDim, int expectedRowDim, int expectedColDim)">0</method>
			<method name="public int getWrongRowDimension()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Logistic$Parametric</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>13</rfc>
		<lcom>6</lcom>
		<ca>0</ca>
		<ce>6</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>187</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>45.75</amc>
		<cc>
			<method name="public transient double value(double x, double[] param)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public transient double[] gradient(double x, double[] param)">1</method>
			<method name="private void validateParameters(double[] param)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.RealVector$2$UnmodifiableEntry</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>22</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public void setValue(double value)">1</method>
			<method name="public double getValue()">1</method>
			<method name="void _init_(org.apache.commons.math3.linear.RealVector$2)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.ConvergenceChecker</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>21</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>21</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract boolean converged(int, Object, Object)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.ZipfDistribution</name>
		<wmc>15</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>22</rfc>
		<lcom>73</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>12</npm>
		<lcom3>0.7755102040816327</lcom3>
		<loc>259</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4166666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.8</amc>
		<cc>
			<method name="private double generalizedHarmonic(int n, double m)">2</method>
			<method name="public boolean isSupportConnected()">1</method>
			<method name="protected double calculateNumericalMean()">1</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, int numberOfElements, double exponent)">0</method>
			<method name="public int getSupportLowerBound()">1</method>
			<method name="public int getNumberOfElements()">1</method>
			<method name="public void _init_(int numberOfElements, double exponent)">0</method>
			<method name="public double logProbability(int x)">3</method>
			<method name="public int getSupportUpperBound()">1</method>
			<method name="public double getNumericalMean()">2</method>
			<method name="public double getNumericalVariance()">2</method>
			<method name="public double cumulativeProbability(int x)">3</method>
			<method name="public double getExponent()">1</method>
			<method name="protected double calculateNumericalVariance()">1</method>
			<method name="public double probability(int x)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.spherical.twod.Circle$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat</name>
		<wmc>11</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>22</rfc>
		<lcom>55</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>11</npm>
		<lcom3>2.0</lcom3>
		<loc>120</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.26136363636363635</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.909090909090908</amc>
		<cc>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.Vector2D parse(String source)">1</method>
			<method name="public static org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat getInstance(java.util.Locale locale)">1</method>
			<method name="public void _init_(String prefix, String suffix, String separator, java.text.NumberFormat format)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public static org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat getInstance()">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.Vector parse(String x0)">1</method>
			<method name="public void _init_(java.text.NumberFormat format)">0</method>
			<method name="public StringBuffer format(org.apache.commons.math3.geometry.Vector vector, StringBuffer toAppendTo, java.text.FieldPosition pos)">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.Vector parse(String x0, java.text.ParsePosition x1)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.Vector2D parse(String source, java.text.ParsePosition pos)">2</method>
			<method name="public void _init_(String prefix, String suffix, String separator)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>24</cbo>
		<rfc>7</rfc>
		<lcom>21</lcom>
		<ca>22</ca>
		<ce>2</ce>
		<npm>7</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.39285714285714285</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double getResult()">1</method>
			<method name="public abstract void incrementAll(double[])">1</method>
			<method name="public abstract long getN()">1</method>
			<method name="public abstract void increment(double)">1</method>
			<method name="public abstract org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic copy()">1</method>
			<method name="public abstract void clear()">1</method>
			<method name="public abstract void incrementAll(double[], int, int)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet$SubIntervalsIterator</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>17</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>5</npm>
		<lcom3>0.33333333333333337</lcom3>
		<loc>182</loc>
		<dam>0.6666666666666666</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>28.833333333333332</amc>
		<cc>
			<method name="public double[] next()">2</method>
			<method name="private void selectPending()">7</method>
			<method name="public boolean hasNext()">2</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet)">0</method>
			<method name="public void remove()">1</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>13</rfc>
		<lcom>6</lcom>
		<ca>5</ca>
		<ce>6</ce>
		<npm>3</npm>
		<lcom3>0.75</lcom3>
		<loc>56</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.35</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.8</amc>
		<cc>
			<method name="static double[] access$000(org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction x0)">1</method>
			<method name="public void _init_(org.apache.commons.math3.analysis.ParametricUnivariateFunction f, java.util.Collection observations)">0</method>
			<method name="static org.apache.commons.math3.analysis.ParametricUnivariateFunction access$100(org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction x0)">1</method>
			<method name="public org.apache.commons.math3.analysis.MultivariateMatrixFunction getModelFunctionJacobian()">1</method>
			<method name="public org.apache.commons.math3.analysis.MultivariateVectorFunction getModelFunction()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.FunctionUtils$16$2</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>69</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>33.0</amc>
		<cc>
			<method name="void _init_(org.apache.commons.math3.analysis.FunctionUtils$16)">0</method>
			<method name="public double[] value(double[] x)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.FunctionUtils$16$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>69</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>32.5</amc>
		<cc>
			<method name="void _init_(org.apache.commons.math3.analysis.FunctionUtils$16, int)">0</method>
			<method name="public double value(double[] x)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>21</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$Sigma</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>38</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.5</amc>
		<cc>
			<method name="public void _init_(double[] s)">0</method>
			<method name="public double[] getSigma()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.nonstiff.AdamsIntegrator</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>2</noc>
		<cbo>10</cbo>
		<rfc>12</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>8</ce>
		<npm>5</npm>
		<lcom3>0.2</lcom3>
		<loc>55</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.0</amc>
		<cc>
			<method name="public abstract void integrate(org.apache.commons.math3.ode.ExpandableStatefulODE, double)">1</method>
			<method name="public void _init_(String name, int nSteps, int order, double minStep, double maxStep, double scalAbsoluteTolerance, double scalRelativeTolerance)">0</method>
			<method name="public org.apache.commons.math3.linear.Array2DRowRealMatrix updateHighOrderDerivativesPhase1(org.apache.commons.math3.linear.Array2DRowRealMatrix highOrder)">1</method>
			<method name="public void updateHighOrderDerivativesPhase2(double[] start, double[] end, org.apache.commons.math3.linear.Array2DRowRealMatrix highOrder)">1</method>
			<method name="protected org.apache.commons.math3.linear.Array2DRowRealMatrix initializeHighOrderDerivatives(double h, double[] t, double[][] y, double[][] yDot)">1</method>
			<method name="public void _init_(String name, int nSteps, int order, double minStep, double maxStep, double[] vecAbsoluteTolerance, double[] vecRelativeTolerance)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.spherical.twod.Sphere2D$LazyHolder</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>0.5</lcom3>
		<loc>15</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.6666666666666665</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="static org.apache.commons.math3.geometry.spherical.twod.Sphere2D access$000()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.integration.gauss.SymmetricGaussIntegrator</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>10</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>107</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>34.666666666666664</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.util.Pair pointsAndWeights)">0</method>
			<method name="public void _init_(double[] points, double[] weights)">0</method>
			<method name="public double integrate(org.apache.commons.math3.analysis.UnivariateFunction f)">4</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction$MicrosphereSurfaceElement</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>8</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>0.6666666666666667</lcom3>
		<loc>46</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.166666666666667</amc>
		<cc>
			<method name="void store(double illuminationFromSample, java.util.Map$Entry sample)">2</method>
			<method name="org.apache.commons.math3.linear.RealVector normal()">1</method>
			<method name="double illumination()">1</method>
			<method name="java.util.Map$Entry sample()">1</method>
			<method name="void _init_(double[] n)">0</method>
			<method name="void reset()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fraction.BigFractionField</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>9</rfc>
		<lcom>36</lcom>
		<ca>3</ca>
		<ce>4</ce>
		<npm>6</npm>
		<lcom3>1.125</lcom3>
		<loc>32</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.4444444444444446</amc>
		<cc>
			<method name="public org.apache.commons.math3.fraction.BigFraction getZero()">1</method>
			<method name="private void _init_()">0</method>
			<method name="void _init_(org.apache.commons.math3.fraction.BigFractionField$1 x0)">0</method>
			<method name="public Class getRuntimeClass()">1</method>
			<method name="public org.apache.commons.math3.fraction.BigFraction getOne()">1</method>
			<method name="private Object readResolve()">1</method>
			<method name="public volatile Object getOne()">1</method>
			<method name="public static org.apache.commons.math3.fraction.BigFractionField getInstance()">1</method>
			<method name="public volatile Object getZero()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.genetics.FixedGenerationCount</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.25</lcom3>
		<loc>43</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.666666666666666</amc>
		<cc>
			<method name="public void _init_(int maxGenerations)">0</method>
			<method name="public boolean isSatisfied(org.apache.commons.math3.genetics.Population population)">2</method>
			<method name="public int getNumGenerations()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Acosh</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>9</rfc>
		<lcom>6</lcom>
		<ca>0</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>17</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.25</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double value(double x)">1</method>
			<method name="public org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers</name>
		<wmc>17</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>42</rfc>
		<lcom>26</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>8</npm>
		<lcom3>0.7875</lcom3>
		<loc>617</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.22794117647058823</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>35.0</amc>
		<cc>
			<method name="private int findCellAndUpdateMinMax(double observation)">6</method>
			<method name="public Object clone()">1</method>
			<method name="private void incrementPositions(int d, int startIndex, int endIndex)">2</method>
			<method name="public boolean equals(Object o)">4</method>
			<method name="void _init_(java.util.List x0, double x1, org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1 x2)">0</method>
			<method name="private void _init_(java.util.List initialFive, double p)">0</method>
			<method name="private void updateDesiredPositions()">2</method>
			<method name="public double height(int markerIndex)">3</method>
			<method name="private void readObject(java.io.ObjectInputStream anInputStream)">1</method>
			<method name="public double estimate(int index)">3</method>
			<method name="public int hashCode()">1</method>
			<method name="private void adjustHeightsOfMarkers()">2</method>
			<method name="private void _init_(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] theMarkerArray)">0</method>
			<method name="public double getPercentileValue()">1</method>
			<method name="public String toString()">1</method>
			<method name="public double processDataPoint(double inputDataPoint)">1</method>
			<method name="private static org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker[] createMarkerArray(java.util.List initialFive, double p)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.NonSquareOperatorException</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>5</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public void _init_(int wrong, int expected)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.linear.LinearOptimizer</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>9</cbo>
		<rfc>12</rfc>
		<lcom>15</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>2</npm>
		<lcom3>0.8333333333333334</lcom3>
		<loc>78</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.7142857142857143</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.714285714285714</amc>
		<cc>
			<method name="public transient org.apache.commons.math3.optim.PointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[] optData)">1</method>
			<method name="public volatile Object optimize(org.apache.commons.math3.optim.OptimizationData[] x0)">1</method>
			<method name="protected transient void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[] optData)">5</method>
			<method name="protected boolean isRestrictedToNonNegative()">1</method>
			<method name="protected org.apache.commons.math3.optim.linear.LinearObjectiveFunction getFunction()">1</method>
			<method name="protected void _init_()">0</method>
			<method name="protected java.util.Collection getConstraints()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.genetics.OnePointCrossover</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>15</rfc>
		<lcom>3</lcom>
		<ca>0</ca>
		<ce>10</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>112</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>36.333333333333336</amc>
		<cc>
			<method name="private org.apache.commons.math3.genetics.ChromosomePair crossover(org.apache.commons.math3.genetics.AbstractListChromosome first, org.apache.commons.math3.genetics.AbstractListChromosome second)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public org.apache.commons.math3.genetics.ChromosomePair crossover(org.apache.commons.math3.genetics.Chromosome first, org.apache.commons.math3.genetics.Chromosome second)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer</name>
		<wmc>15</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>54</rfc>
		<lcom>37</lcom>
		<ca>1</ca>
		<ce>13</ce>
		<npm>2</npm>
		<lcom3>0.7837837837837837</lcom3>
		<loc>6951</loc>
		<dam>0.918918918918919</dam>
		<moa>16</moa>
		<mfa>0.0</mfa>
		<cam>0.36</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>459.93333333333334</amc>
		<cc>
			<method name="private double bobyqb(double[] lowerBound, double[] upperBound)">137</method>
			<method name="private static String caller(int n)">1</method>
			<method name="private static void printState(int s)">1</method>
			<method name="private double[] trsbox(double delta, org.apache.commons.math3.linear.ArrayRealVector gnew, org.apache.commons.math3.linear.ArrayRealVector xbdi, org.apache.commons.math3.linear.ArrayRealVector s, org.apache.commons.math3.linear.ArrayRealVector hs, org.apache.commons.math3.linear.ArrayRealVector hred)">83</method>
			<method name="protected volatile Object doOptimize()">1</method>
			<method name="public void _init_(int numberOfInterpolationPoints)">0</method>
			<method name="private void prelim(double[] lowerBound, double[] upperBound)">30</method>
			<method name="public void _init_(int numberOfInterpolationPoints, double initialTrustRegionRadius, double stoppingTrustRegionRadius)">0</method>
			<method name="protected org.apache.commons.math3.optim.PointValuePair doOptimize()">3</method>
			<method name="private void update(double beta, double denom, int knew)">11</method>
			<method name="private double bobyqa(double[] lowerBound, double[] upperBound)">6</method>
			<method name="private double[] altmov(int knew, double adelt)">50</method>
			<method name="private void setup(double[] lowerBound, double[] upperBound)">6</method>
			<method name="private static void printMethod()">1</method>
			<method name="static String access$000(int x0)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.CauchyDistribution</name>
		<wmc>18</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>26</rfc>
		<lcom>123</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>17</npm>
		<lcom3>0.8470588235294118</lcom3>
		<loc>177</loc>
		<dam>0.8</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.555555555555555</amc>
		<cc>
			<method name="public double getMedian()">1</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, double median, double scale)">0</method>
			<method name="protected double getSolverAbsoluteAccuracy()">1</method>
			<method name="public double inverseCumulativeProbability(double p)">1</method>
			<method name="public double getScale()">1</method>
			<method name="public double density(double x)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(double median, double scale, double inverseCumAccuracy)">0</method>
			<method name="public boolean isSupportConnected()">1</method>
			<method name="public boolean isSupportUpperBoundInclusive()">1</method>
			<method name="public double cumulativeProbability(double x)">1</method>
			<method name="public boolean isSupportLowerBoundInclusive()">1</method>
			<method name="public double getSupportLowerBound()">1</method>
			<method name="public void _init_(double median, double scale)">0</method>
			<method name="public double getNumericalVariance()">1</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, double median, double scale, double inverseCumAccuracy)">0</method>
			<method name="public double getNumericalMean()">1</method>
			<method name="public double getSupportUpperBound()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.spherical.twod.S2Point</name>
		<wmc>15</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>31</rfc>
		<lcom>55</lcom>
		<ca>7</ca>
		<ce>8</ce>
		<npm>12</npm>
		<lcom3>0.8571428571428571</lcom3>
		<loc>250</loc>
		<dam>0.36363636363636365</dam>
		<moa>8</moa>
		<mfa>0.0</mfa>
		<cam>0.23809523809523808</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>14.933333333333334</amc>
		<cc>
			<method name="public boolean isNaN()">3</method>
			<method name="static void _clinit_()">0</method>
			<method name="public double getPhi()">1</method>
			<method name="public double distance(org.apache.commons.math3.geometry.Point point)">1</method>
			<method name="public boolean equals(Object other)">6</method>
			<method name="public org.apache.commons.math3.geometry.Space getSpace()">1</method>
			<method name="private void _init_(double theta, double phi, org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector)">0</method>
			<method name="public int hashCode()">2</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector)">0</method>
			<method name="public double getTheta()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getVector()">1</method>
			<method name="public org.apache.commons.math3.geometry.spherical.twod.S2Point negate()">1</method>
			<method name="public void _init_(double theta, double phi)">0</method>
			<method name="private static org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector(double theta, double phi)">1</method>
			<method name="public static double distance(org.apache.commons.math3.geometry.spherical.twod.S2Point p1, org.apache.commons.math3.geometry.spherical.twod.S2Point p2)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.EigenDecomposition$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.univariate.BrentOptimizer</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>24</rfc>
		<lcom>9</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>506</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>82.66666666666667</amc>
		<cc>
			<method name="protected volatile Object doOptimize()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private org.apache.commons.math3.optim.univariate.UnivariatePointValuePair best(org.apache.commons.math3.optim.univariate.UnivariatePointValuePair a, org.apache.commons.math3.optim.univariate.UnivariatePointValuePair b, boolean isMinim)">6</method>
			<method name="public void _init_(double rel, double abs, org.apache.commons.math3.optim.ConvergenceChecker checker)">0</method>
			<method name="protected org.apache.commons.math3.optim.univariate.UnivariatePointValuePair doOptimize()">30</method>
			<method name="public void _init_(double rel, double abs)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>1.0</lcom3>
		<loc>37</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.0</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_(org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain)">0</method>
			<method name="public int compare(org.apache.commons.math3.geometry.euclidean.twod.Vector2D o1, org.apache.commons.math3.geometry.euclidean.twod.Vector2D o2)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer</name>
		<wmc>18</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>16</cbo>
		<rfc>52</rfc>
		<lcom>23</lcom>
		<ca>0</ca>
		<ce>16</ce>
		<npm>13</npm>
		<lcom3>0.6993464052287582</lcom3>
		<loc>611</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.23809523809523808</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>32.44444444444444</amc>
		<cc>
			<method name="private double calculateMaxMembershipChange(double[][] matrix)">3</method>
			<method name="public double getObjectiveFunctionValue()">5</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getMembershipMatrix()">2</method>
			<method name="public java.util.List cluster(java.util.Collection dataPoints)">1</method>
			<method name="public java.util.List getClusters()">1</method>
			<method name="private void initializeMembershipMatrix()">3</method>
			<method name="public void _init_(int k, double fuzziness, int maxIterations, org.apache.commons.math3.ml.distance.DistanceMeasure measure, double epsilon, org.apache.commons.math3.random.RandomGenerator random)">0</method>
			<method name="public double getFuzziness()">1</method>
			<method name="public java.util.List getDataPoints()">1</method>
			<method name="public void _init_(int k, double fuzziness)">0</method>
			<method name="public org.apache.commons.math3.random.RandomGenerator getRandomGenerator()">1</method>
			<method name="private void updateMembershipMatrix()">5</method>
			<method name="public int getMaxIterations()">1</method>
			<method name="private void saveMembershipMatrix(double[][] matrix)">2</method>
			<method name="public int getK()">1</method>
			<method name="public void _init_(int k, double fuzziness, int maxIterations, org.apache.commons.math3.ml.distance.DistanceMeasure measure)">0</method>
			<method name="public double getEpsilon()">1</method>
			<method name="private void updateClusterCenters()">4</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.transform.DstNormalization</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.888888888888889</lcom3>
		<loc>45</loc>
		<dam>0.3333333333333333</dam>
		<moa>3</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>9.5</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public static org.apache.commons.math3.transform.DstNormalization valueOf(String name)">1</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static org.apache.commons.math3.transform.DstNormalization[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.RealDistribution</name>
		<wmc>15</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>15</rfc>
		<lcom>105</lcom>
		<ca>6</ca>
		<ce>2</ce>
		<npm>15</npm>
		<lcom3>2.0</lcom3>
		<loc>15</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.36666666666666664</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double[] sample(int)">1</method>
			<method name="public abstract double getNumericalVariance()">1</method>
			<method name="public abstract double getSupportUpperBound()">1</method>
			<method name="public abstract void reseedRandomGenerator(long)">1</method>
			<method name="public abstract double density(double)">1</method>
			<method name="public abstract double getNumericalMean()">1</method>
			<method name="public abstract double probability(double)">1</method>
			<method name="public abstract double getSupportLowerBound()">1</method>
			<method name="public abstract double cumulativeProbability(double)">1</method>
			<method name="public abstract double sample()">1</method>
			<method name="public abstract double cumulativeProbability(double, double)">1</method>
			<method name="public abstract boolean isSupportConnected()">1</method>
			<method name="public abstract boolean isSupportUpperBoundInclusive()">1</method>
			<method name="public abstract boolean isSupportLowerBoundInclusive()">1</method>
			<method name="public abstract double inverseCumulativeProbability(double)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane</name>
		<wmc>14</wmc>
		<dit>1</dit>
		<noc>5</noc>
		<cbo>20</cbo>
		<rfc>31</rfc>
		<lcom>31</lcom>
		<ca>11</ca>
		<ce>9</ce>
		<npm>11</npm>
		<lcom3>0.4230769230769231</lcom3>
		<loc>163</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.30952380952380953</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.5</amc>
		<cc>
			<method name="public org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane applyTransform(org.apache.commons.math3.geometry.partitioning.Transform transform)">1</method>
			<method name="private org.apache.commons.math3.geometry.partitioning.BSPTree recurseTransform(org.apache.commons.math3.geometry.partitioning.BSPTree node, org.apache.commons.math3.geometry.partitioning.Hyperplane transformed, org.apache.commons.math3.geometry.partitioning.Transform transform)">5</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()">1</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane other)">1</method>
			<method name="public boolean isEmpty()">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.partitioning.SubHyperplane copySelf()">1</method>
			<method name="public abstract org.apache.commons.math3.geometry.partitioning.Side side(org.apache.commons.math3.geometry.partitioning.Hyperplane)">1</method>
			<method name="protected void _init_(org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane, org.apache.commons.math3.geometry.partitioning.Region remainingRegion)">0</method>
			<method name="public abstract org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane)">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.partitioning.SubHyperplane reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane x0)">1</method>
			<method name="public double getSize()">1</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()">1</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane copySelf()">1</method>
			<method name="protected abstract org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.NormalDistribution</name>
		<wmc>23</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>38</rfc>
		<lcom>191</lcom>
		<ca>5</ca>
		<ce>10</ce>
		<npm>21</npm>
		<lcom3>0.7987012987012986</lcom3>
		<loc>267</loc>
		<dam>0.8571428571428571</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5151515151515151</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.304347826086957</amc>
		<cc>
			<method name="protected double getSolverAbsoluteAccuracy()">1</method>
			<method name="public double inverseCumulativeProbability(double p)">1</method>
			<method name="public double density(double x)">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public boolean isSupportConnected()">1</method>
			<method name="public boolean isSupportUpperBoundInclusive()">1</method>
			<method name="public double cumulativeProbability(double x)">3</method>
			<method name="public double getStandardDeviation()">1</method>
			<method name="public double getMean()">1</method>
			<method name="public boolean isSupportLowerBoundInclusive()">1</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, double mean, double sd, double inverseCumAccuracy)">0</method>
			<method name="public void _init_(double mean, double sd)">0</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, double mean, double sd)">0</method>
			<method name="public double getSupportLowerBound()">1</method>
			<method name="public double sample()">1</method>
			<method name="public double cumulativeProbability(double x0, double x1)">1</method>
			<method name="public void _init_(double mean, double sd, double inverseCumAccuracy)">0</method>
			<method name="public double getNumericalVariance()">1</method>
			<method name="public double getNumericalMean()">1</method>
			<method name="public double probability(double x0, double x1)">1</method>
			<method name="public double getSupportUpperBound()">1</method>
			<method name="public double logDensity(double x)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.BaseOptimizer</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>3</rfc>
		<lcom>3</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>3</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.optimization.ConvergenceChecker getConvergenceChecker()">1</method>
			<method name="public abstract int getEvaluations()">1</method>
			<method name="public abstract int getMaxEvaluations()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.SimplePointChecker</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>14</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>4</ce>
		<npm>5</npm>
		<lcom3>0.625</lcom3>
		<loc>106</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.48</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.8</amc>
		<cc>
			<method name="public volatile boolean converged(int x0, Object x1, Object x2)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean converged(int iteration, org.apache.commons.math3.util.Pair previous, org.apache.commons.math3.util.Pair current)">6</method>
			<method name="public void _init_(double relativeThreshold, double absoluteThreshold, int maxIter)">0</method>
			<method name="public void _init_(double relativeThreshold, double absoluteThreshold)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fraction.ProperFractionFormat</name>
		<wmc>8</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>31</rfc>
		<lcom>26</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>8</npm>
		<lcom3>0.7142857142857143</lcom3>
		<loc>237</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.32142857142857145</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>28.375</amc>
		<cc>
			<method name="public StringBuffer format(org.apache.commons.math3.fraction.Fraction fraction, StringBuffer toAppendTo, java.text.FieldPosition pos)">2</method>
			<method name="public void _init_()">0</method>
			<method name="public org.apache.commons.math3.fraction.Fraction parse(String source, java.text.ParsePosition pos)">10</method>
			<method name="public void _init_(java.text.NumberFormat wholeFormat, java.text.NumberFormat numeratorFormat, java.text.NumberFormat denominatorFormat)">0</method>
			<method name="public void _init_(java.text.NumberFormat format)">0</method>
			<method name="public void setWholeFormat(java.text.NumberFormat format)">2</method>
			<method name="public java.text.NumberFormat getWholeFormat()">1</method>
			<method name="public volatile Number parse(String x0, java.text.ParsePosition x1)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.leastsquares.LeastSquaresOptimizer$Optimum</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>5</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract int getIterations()">1</method>
			<method name="public abstract int getEvaluations()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.correlation.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.differentiation.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer$PathIsExploredException</name>
		<wmc>1</wmc>
		<dit>4</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>15</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>1.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>18</rfc>
		<lcom>15</lcom>
		<ca>2</ca>
		<ce>9</ce>
		<npm>8</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>546</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>53.2</amc>
		<cc>
			<method name="public static double evaluate(double[] x, double[] y, double z)">1</method>
			<method name="public void _init_(double[] x, double[] y)">0</method>
			<method name="private static double evaluateInternal(double[] x, double[] y, double z)">6</method>
			<method name="protected void computeCoefficients()">8</method>
			<method name="public double[] getCoefficients()">2</method>
			<method name="public double[] getInterpolatingValues()">1</method>
			<method name="public double[] getInterpolatingPoints()">1</method>
			<method name="public int degree()">1</method>
			<method name="public double value(double z)">1</method>
			<method name="public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.NotFiniteNumberException</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>8</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>15</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.875</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public transient void _init_(Number wrong, Object[] args)">0</method>
			<method name="public transient void _init_(org.apache.commons.math3.exception.util.Localizable specific, Number wrong, Object[] args)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.AbstractOptimizationProblem$MaxEvalCallback</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>15</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="void _init_(org.apache.commons.math3.optim.AbstractOptimizationProblem$1 x0)">0</method>
			<method name="public void trigger(int max)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.DimensionMismatchException</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>2</noc>
		<cbo>162</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>159</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.75</lcom3>
		<loc>30</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.333333333333334</amc>
		<cc>
			<method name="public int getDimension()">1</method>
			<method name="public void _init_(int wrong, int expected)">0</method>
			<method name="public void _init_(org.apache.commons.math3.exception.util.Localizable specific, int wrong, int expected)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.moment.FirstMoment</name>
		<wmc>10</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>10</cbo>
		<rfc>12</rfc>
		<lcom>17</lcom>
		<ca>5</ca>
		<ce>5</ce>
		<npm>10</npm>
		<lcom3>0.35555555555555557</lcom3>
		<loc>133</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.8</amc>
		<cc>
			<method name="public long getN()">1</method>
			<method name="public void clear()">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic copy()">1</method>
			<method name="public double getResult()">1</method>
			<method name="public void _init_(org.apache.commons.math3.stat.descriptive.moment.FirstMoment original)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public org.apache.commons.math3.stat.descriptive.moment.FirstMoment copy()">1</method>
			<method name="public static void copy(org.apache.commons.math3.stat.descriptive.moment.FirstMoment source, org.apache.commons.math3.stat.descriptive.moment.FirstMoment dest)">1</method>
			<method name="public void increment(double d)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.RealMatrixChangingVisitor</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>3</rfc>
		<lcom>3</lcom>
		<ca>5</ca>
		<ce>0</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>3</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double end()">1</method>
			<method name="public abstract double visit(int, int, double)">1</method>
			<method name="public abstract void start(int, int, int, int, int, int)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.DecompositionSolver</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>29</cbo>
		<rfc>4</rfc>
		<lcom>6</lcom>
		<ca>26</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealVector)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealMatrix getInverse()">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealMatrix solve(org.apache.commons.math3.linear.RealMatrix)">1</method>
			<method name="public abstract boolean isNonSingular()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>9</rfc>
		<lcom>15</lcom>
		<ca>3</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>1.2</lcom3>
		<loc>23</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.6666666666666665</amc>
		<cc>
			<method name="public org.apache.commons.math3.geometry.Space getSubSpace()">1</method>
			<method name="public int getDimension()">1</method>
			<method name="private void _init_()">0</method>
			<method name="private Object readResolve()">1</method>
			<method name="void _init_(org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D$1 x0)">0</method>
			<method name="public static org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D getInstance()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.threed.NotARotationMatrixException</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="public transient void _init_(org.apache.commons.math3.exception.util.Localizable specifier, Object[] parts)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer$Decomposition$2</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>29</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.5</amc>
		<cc>
			<method name="void _init_(String, int)">0</method>
			<method name="protected org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealMatrix jacobian, org.apache.commons.math3.linear.RealVector residuals)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer$Decomposition$1</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>10</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>12</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>41</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.5</amc>
		<cc>
			<method name="void _init_(String, int)">0</method>
			<method name="protected org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealMatrix jacobian, org.apache.commons.math3.linear.RealVector residuals)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.MultiDimensionMismatchException</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>5</cbo>
		<rfc>9</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>6</npm>
		<lcom3>0.6666666666666667</lcom3>
		<loc>61</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4583333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.666666666666666</amc>
		<cc>
			<method name="public int getExpectedDimension(int index)">1</method>
			<method name="public void _init_(Integer[] wrong, Integer[] expected)">0</method>
			<method name="public void _init_(org.apache.commons.math3.exception.util.Localizable specific, Integer[] wrong, Integer[] expected)">0</method>
			<method name="public Integer[] getWrongDimensions()">1</method>
			<method name="public int getWrongDimension(int index)">1</method>
			<method name="public Integer[] getExpectedDimensions()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer$Decomposition$4</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>16</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="void _init_(String, int)">0</method>
			<method name="protected org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealMatrix jacobian, org.apache.commons.math3.linear.RealVector residuals)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.MatrixUtils</name>
		<wmc>38</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>72</cbo>
		<rfc>112</rfc>
		<lcom>703</lcom>
		<ca>41</ca>
		<ce>38</ce>
		<npm>35</npm>
		<lcom3>1.0</lcom3>
		<loc>1362</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.08708708708708708</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>34.78947368421053</amc>
		<cc>
			<method name="public static void solveLowerTriangularSystem(org.apache.commons.math3.linear.RealMatrix rm, org.apache.commons.math3.linear.RealVector b)">1</method>
			<method name="public static void checkRowIndex(org.apache.commons.math3.linear.AnyMatrix m, int row)">1</method>
			<method name="public static void checkSymmetric(org.apache.commons.math3.linear.RealMatrix matrix, double eps)">1</method>
			<method name="public static boolean isSymmetric(org.apache.commons.math3.linear.RealMatrix matrix, double eps)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static org.apache.commons.math3.linear.FieldMatrix createColumnFieldMatrix(org.apache.commons.math3.FieldElement[] columnData)">1</method>
			<method name="public static void checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix left, org.apache.commons.math3.linear.AnyMatrix right)">1</method>
			<method name="private static boolean isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix matrix, double relativeTolerance, boolean raiseException)">7</method>
			<method name="public static void checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix m, int[] selectedRows, int[] selectedColumns)">1</method>
			<method name="public static org.apache.commons.math3.linear.Array2DRowRealMatrix bigFractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix m)">1</method>
			<method name="public static org.apache.commons.math3.linear.FieldMatrix createFieldMatrix(org.apache.commons.math3.Field field, int rows, int columns)">2</method>
			<method name="public static org.apache.commons.math3.linear.RealMatrix createRealDiagonalMatrix(double[] diagonal)">2</method>
			<method name="private void _init_()">0</method>
			<method name="public static org.apache.commons.math3.linear.FieldMatrix createFieldMatrix(org.apache.commons.math3.FieldElement[][] data)">1</method>
			<method name="public static org.apache.commons.math3.linear.RealVector createRealVector(double[] data)">1</method>
			<method name="public static org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][] data)">1</method>
			<method name="public static org.apache.commons.math3.linear.RealMatrix blockInverse(org.apache.commons.math3.linear.RealMatrix m, int splitIndex)">6</method>
			<method name="public static org.apache.commons.math3.linear.FieldMatrix createFieldDiagonalMatrix(org.apache.commons.math3.FieldElement[] diagonal)">2</method>
			<method name="public static void checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix m, int row, int column)">1</method>
			<method name="public static void checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix m, int column)">1</method>
			<method name="public static void deserializeRealVector(Object instance, String fieldName, java.io.ObjectInputStream ois)">1</method>
			<method name="public static org.apache.commons.math3.linear.RealMatrix inverse(org.apache.commons.math3.linear.RealMatrix matrix)">1</method>
			<method name="public static org.apache.commons.math3.linear.RealMatrix createRealIdentityMatrix(int dimension)">2</method>
			<method name="public static org.apache.commons.math3.linear.FieldMatrix createRowFieldMatrix(org.apache.commons.math3.FieldElement[] rowData)">1</method>
			<method name="public static void solveUpperTriangularSystem(org.apache.commons.math3.linear.RealMatrix rm, org.apache.commons.math3.linear.RealVector b)">1</method>
			<method name="public static void deserializeRealMatrix(Object instance, String fieldName, java.io.ObjectInputStream ois)">1</method>
			<method name="public static void checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix left, org.apache.commons.math3.linear.AnyMatrix right)">1</method>
			<method name="public static org.apache.commons.math3.linear.RealMatrix createRealMatrix(int rows, int columns)">2</method>
			<method name="public static void checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix left, org.apache.commons.math3.linear.AnyMatrix right)">1</method>
			<method name="public static void serializeRealVector(org.apache.commons.math3.linear.RealVector vector, java.io.ObjectOutputStream oos)">1</method>
			<method name="public static void serializeRealMatrix(org.apache.commons.math3.linear.RealMatrix matrix, java.io.ObjectOutputStream oos)">1</method>
			<method name="public static org.apache.commons.math3.linear.Array2DRowRealMatrix fractionMatrixToRealMatrix(org.apache.commons.math3.linear.FieldMatrix m)">1</method>
			<method name="public static org.apache.commons.math3.linear.RealMatrix createRowRealMatrix(double[] rowData)">1</method>
			<method name="public static org.apache.commons.math3.linear.RealMatrix inverse(org.apache.commons.math3.linear.RealMatrix matrix, double threshold)">1</method>
			<method name="public static org.apache.commons.math3.linear.FieldVector createFieldVector(org.apache.commons.math3.FieldElement[] data)">1</method>
			<method name="public static org.apache.commons.math3.linear.FieldMatrix createFieldIdentityMatrix(org.apache.commons.math3.Field field, int dimension)">2</method>
			<method name="public static org.apache.commons.math3.linear.RealMatrix createColumnRealMatrix(double[] columnData)">1</method>
			<method name="public static void checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix m, int startRow, int endRow, int startColumn, int endColumn)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer$Decomposition$3</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>10</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>12</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>42</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.0</amc>
		<cc>
			<method name="void _init_(String, int)">0</method>
			<method name="protected org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealMatrix jacobian, org.apache.commons.math3.linear.RealVector residuals)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.NonPositiveDefiniteOperatorException</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>9</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>53</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.333333333333332</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="public int compare(org.apache.commons.math3.optim.PointValuePair o1, org.apache.commons.math3.optim.PointValuePair o2)">5</method>
			<method name="void _init_(org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.SingularValueDecomposition$1</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>27</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.5</amc>
		<cc>
			<method name="public void visit(int row, int column, double value)">1</method>
			<method name="void _init_(org.apache.commons.math3.linear.SingularValueDecomposition, double[][])">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.transform.FastFourierTransformer$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>21</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.distance.EuclideanDistance</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>4</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>10</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public double compute(double[] a, double[] b)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.distance.DistanceMeasure</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>14</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double compute(double[], double[])">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.neuralnet.FeatureInitializerFactory</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>11</rfc>
		<lcom>10</lcom>
		<ca>0</ca>
		<ce>8</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>50</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.26666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public static org.apache.commons.math3.ml.neuralnet.FeatureInitializer function(org.apache.commons.math3.analysis.UnivariateFunction f, double init, double inc)">1</method>
			<method name="public static org.apache.commons.math3.ml.neuralnet.FeatureInitializer uniform(org.apache.commons.math3.random.RandomGenerator rng, double min, double max)">1</method>
			<method name="public static org.apache.commons.math3.ml.neuralnet.FeatureInitializer randomize(org.apache.commons.math3.distribution.RealDistribution random, org.apache.commons.math3.ml.neuralnet.FeatureInitializer orig)">1</method>
			<method name="public static org.apache.commons.math3.ml.neuralnet.FeatureInitializer uniform(double min, double max)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.IllConditionedOperatorException</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>13</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.0</amc>
		<cc>
			<method name="public void _init_(double cond)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.rank.Percentile</name>
		<wmc>28</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>20</cbo>
		<rfc>55</rfc>
		<lcom>250</lcom>
		<ca>3</ca>
		<ce>17</ce>
		<npm>21</npm>
		<lcom3>0.7685185185185185</lcom3>
		<loc>548</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.26339285714285715</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.285714285714285</amc>
		<cc>
			<method name="public double evaluate(double[] values, int start, int length)">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()">1</method>
			<method name="private int[] getPivots(double[] values)">2</method>
			<method name="public void setData(double[] values)">2</method>
			<method name="public org.apache.commons.math3.stat.descriptive.rank.Percentile withEstimationType(org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType newEstimationType)">1</method>
			<method name="public double evaluate(double p)">1</method>
			<method name="public org.apache.commons.math3.util.PivotingStrategyInterface getPivotingStrategy()">1</method>
			<method name="public double evaluate(double[] values, double p)">1</method>
			<method name="public org.apache.commons.math3.stat.ranking.NaNStrategy getNaNStrategy()">1</method>
			<method name="public void _init_(double quantile)">0</method>
			<method name="public org.apache.commons.math3.util.KthSelector getKthSelector()">1</method>
			<method name="protected double[] getWorkArray(double[] values, int begin, int length)">3</method>
			<method name="protected void _init_(double quantile, org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType estimationType, org.apache.commons.math3.stat.ranking.NaNStrategy nanStrategy, org.apache.commons.math3.util.KthSelector kthSelector)">0</method>
			<method name="public void setQuantile(double p)">1</method>
			<method name="public org.apache.commons.math3.stat.descriptive.rank.Percentile withNaNStrategy(org.apache.commons.math3.stat.ranking.NaNStrategy newNaNStrategy)">1</method>
			<method name="public static void copy(org.apache.commons.math3.stat.descriptive.rank.Percentile source, org.apache.commons.math3.stat.descriptive.rank.Percentile dest)">1</method>
			<method name="private static double[] removeAndSlice(double[] values, int begin, int length, double removedValue)">7</method>
			<method name="public org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType getEstimationType()">1</method>
			<method name="public void _init_()">0</method>
			<method name="int medianOf3(double[] work, int begin, int end)">1</method>
			<method name="public double evaluate(double[] values, int begin, int length, double p)">1</method>
			<method name="private static double[] copyOf(double[] values, int begin, int length)">1</method>
			<method name="public org.apache.commons.math3.stat.descriptive.rank.Percentile copy()">1</method>
			<method name="private static double[] replaceAndSlice(double[] values, int begin, int length, double original, double replacement)">3</method>
			<method name="public org.apache.commons.math3.stat.descriptive.rank.Percentile withKthSelector(org.apache.commons.math3.util.KthSelector newKthSelector)">1</method>
			<method name="public void _init_(org.apache.commons.math3.stat.descriptive.rank.Percentile original)">0</method>
			<method name="public double getQuantile()">1</method>
			<method name="public void setData(double[] values, int begin, int length)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.events.EventHandler$Action</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9333333333333332</lcom3>
		<loc>67</loc>
		<dam>0.2</dam>
		<moa>5</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>14.5</amc>
		<cc>
			<method name="public static org.apache.commons.math3.ode.events.EventHandler$Action[] values()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static org.apache.commons.math3.ode.events.EventHandler$Action valueOf(String name)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.fitting.CurveFitter$OldTheoreticalValuesFunction</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>13</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>6</ce>
		<npm>3</npm>
		<lcom3>0.5</lcom3>
		<loc>56</loc>
		<dam>0.5</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.35</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.5</amc>
		<cc>
			<method name="public double[] value(double[] point)">2</method>
			<method name="static org.apache.commons.math3.analysis.ParametricUnivariateFunction access$100(org.apache.commons.math3.optimization.fitting.CurveFitter$OldTheoreticalValuesFunction x0)">1</method>
			<method name="public org.apache.commons.math3.analysis.MultivariateMatrixFunction jacobian()">1</method>
			<method name="public void _init_(org.apache.commons.math3.optimization.fitting.CurveFitter, org.apache.commons.math3.analysis.ParametricUnivariateFunction f)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.Parameterizable</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>3</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract boolean isSupported(String)">1</method>
			<method name="public abstract java.util.Collection getParametersNames()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.IterativeLinearSolverEvent</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>4</cbo>
		<rfc>8</rfc>
		<lcom>15</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>6</npm>
		<lcom3>1.2</lcom3>
		<loc>18</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4444444444444444</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>1.8333333333333333</amc>
		<cc>
			<method name="public void _init_(Object source, int iterations)">0</method>
			<method name="public abstract org.apache.commons.math3.linear.RealVector getSolution()">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector getResidual()">1</method>
			<method name="public abstract double getNormOfResidual()">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealVector getRightHandSideVector()">1</method>
			<method name="public boolean providesResidual()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.Combinations$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>14</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.EmpiricalDistribution</name>
		<wmc>42</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>22</cbo>
		<rfc>88</rfc>
		<lcom>613</lcom>
		<ca>4</ca>
		<ce>21</ce>
		<npm>29</npm>
		<lcom3>0.7296747967479674</lcom3>
		<loc>841</loc>
		<dam>0.9166666666666666</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.1282051282051282</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.738095238095237</amc>
		<cc>
			<method name="public void _init_(int binCount, org.apache.commons.math3.random.RandomGenerator generator)">0</method>
			<method name="public double[] getUpperBounds()">2</method>
			<method name="public double inverseCumulativeProbability(double p)">1</method>
			<method name="public void _init_(int binCount, org.apache.commons.math3.random.RandomDataImpl randomData)">0</method>
			<method name="public double cumulativeProbability(double x)">4</method>
			<method name="private org.apache.commons.math3.distribution.RealDistribution k(double x)">1</method>
			<method name="private void _init_(int binCount, org.apache.commons.math3.random.RandomDataGenerator randomData)">0</method>
			<method name="private double pB(int i)">2</method>
			<method name="public void reseedRandomGenerator(long seed)">1</method>
			<method name="public void load(double[] in)">1</method>
			<method name="private double cumBinP(int binIndex)">1</method>
			<method name="public double getSupportLowerBound()">1</method>
			<method name="public int getBinCount()">1</method>
			<method name="static org.apache.commons.math3.stat.descriptive.SummaryStatistics access$302(org.apache.commons.math3.random.EmpiricalDistribution x0, org.apache.commons.math3.stat.descriptive.SummaryStatistics x1)">1</method>
			<method name="private void fillBinStats(org.apache.commons.math3.random.EmpiricalDistribution$DataAdapter da)">1</method>
			<method name="private double kB(int i)">2</method>
			<method name="public double getNumericalMean()">1</method>
			<method name="private double pBminus(int i)">2</method>
			<method name="public double getSupportUpperBound()">1</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator generator)">0</method>
			<method name="public org.apache.commons.math3.stat.descriptive.StatisticalSummary getSampleStats()">1</method>
			<method name="static org.apache.commons.math3.stat.descriptive.SummaryStatistics access$300(org.apache.commons.math3.random.EmpiricalDistribution x0)">1</method>
			<method name="static int access$100(org.apache.commons.math3.random.EmpiricalDistribution x0, double x1)">1</method>
			<method name="public void load(java.io.File file)">1</method>
			<method name="private int findBin(double value)">1</method>
			<method name="public java.util.List getBinStats()">1</method>
			<method name="public double density(double x)">3</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean isSupportConnected()">1</method>
			<method name="public boolean isSupportUpperBoundInclusive()">1</method>
			<method name="public boolean isLoaded()">1</method>
			<method name="public double getNextValue()">1</method>
			<method name="public boolean isSupportLowerBoundInclusive()">1</method>
			<method name="public double probability(double x)">1</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomDataImpl randomData)">0</method>
			<method name="static java.util.List access$200(org.apache.commons.math3.random.EmpiricalDistribution x0)">1</method>
			<method name="public void _init_(int binCount)">0</method>
			<method name="public void reSeed(long seed)">1</method>
			<method name="public double getNumericalVariance()">1</method>
			<method name="public void load(java.net.URL url)">1</method>
			<method name="public double[] getGeneratorUpperBounds()">1</method>
			<method name="protected org.apache.commons.math3.distribution.RealDistribution getKernel(org.apache.commons.math3.stat.descriptive.SummaryStatistics bStats)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.ConvergenceException</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>27</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>23</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>17</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public transient void _init_(org.apache.commons.math3.exception.util.Localizable pattern, Object[] args)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.regression.RegressionResults</name>
		<wmc>17</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>24</rfc>
		<lcom>14</lcom>
		<ca>3</ca>
		<ce>3</ce>
		<npm>15</npm>
		<lcom3>0.8894230769230769</lcom3>
		<loc>518</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.226890756302521</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>28.705882352941178</amc>
		<cc>
			<method name="public double getStdErrorOfEstimate(int index)">1</method>
			<method name="public long getN()">1</method>
			<method name="public double[] getStdErrorOfEstimates()">5</method>
			<method name="public double getCovarianceOfParameters(int i, int j)">1</method>
			<method name="public int getNumberOfParameters()">2</method>
			<method name="public void _init_(double[] parameters, double[][] varcov, boolean isSymmetricCompressed, long nobs, int rank, double sumy, double sumysq, double sse, boolean containsConstant, boolean copyData)">0</method>
			<method name="public double getAdjustedRSquared()">1</method>
			<method name="public double getMeanSquareError()">1</method>
			<method name="public double[] getParameterEstimates()">2</method>
			<method name="public double getErrorSumSquares()">1</method>
			<method name="public double getTotalSumSquares()">1</method>
			<method name="private void _init_()">0</method>
			<method name="public double getRegressionSumSquares()">1</method>
			<method name="private double getVcvElement(int i, int j)">6</method>
			<method name="public double getParameterEstimate(int index)">1</method>
			<method name="public boolean hasIntercept()">1</method>
			<method name="public double getRSquared()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>9</cbo>
		<rfc>9</rfc>
		<lcom>8</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>2</npm>
		<lcom3>0.75</lcom3>
		<loc>52</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.2</amc>
		<cc>
			<method name="public volatile Object optimize(org.apache.commons.math3.optim.OptimizationData[] x0)">1</method>
			<method name="protected transient void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[] optData)">3</method>
			<method name="public transient org.apache.commons.math3.optim.PointVectorValuePair optimize(org.apache.commons.math3.optim.OptimizationData[] optData)">1</method>
			<method name="protected void _init_(org.apache.commons.math3.optim.ConvergenceChecker checker)">0</method>
			<method name="protected double[][] computeJacobian(double[] params)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.linear.LinearObjectiveFunction</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>22</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>3</ce>
		<npm>8</npm>
		<lcom3>0.5555555555555556</lcom3>
		<loc>108</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.2714285714285714</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>9.5</amc>
		<cc>
			<method name="private void writeObject(java.io.ObjectOutputStream oos)">1</method>
			<method name="public double getValue(double[] point)">1</method>
			<method name="public int hashCode()">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector getCoefficients()">1</method>
			<method name="public void _init_(double[] coefficients, double constantTerm)">0</method>
			<method name="private void readObject(java.io.ObjectInputStream ois)">1</method>
			<method name="public double getValue(org.apache.commons.math3.linear.RealVector point)">1</method>
			<method name="public void _init_(org.apache.commons.math3.linear.RealVector coefficients, double constantTerm)">0</method>
			<method name="public boolean equals(Object other)">5</method>
			<method name="public double getConstantTerm()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.FieldVectorPreservingVisitor</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>3</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>3</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void start(int, int, int)">1</method>
			<method name="public abstract org.apache.commons.math3.FieldElement end()">1</method>
			<method name="public abstract void visit(int, org.apache.commons.math3.FieldElement)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>28</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.Hyperplane</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>35</cbo>
		<rfc>7</rfc>
		<lcom>21</lcom>
		<ca>34</ca>
		<ce>3</ce>
		<npm>7</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.47619047619047616</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.geometry.partitioning.Hyperplane copySelf()">1</method>
			<method name="public abstract double getTolerance()">1</method>
			<method name="public abstract org.apache.commons.math3.geometry.partitioning.SubHyperplane wholeHyperplane()">1</method>
			<method name="public abstract boolean sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)">1</method>
			<method name="public abstract org.apache.commons.math3.geometry.Point project(org.apache.commons.math3.geometry.Point)">1</method>
			<method name="public abstract org.apache.commons.math3.geometry.partitioning.Region wholeSpace()">1</method>
			<method name="public abstract double getOffset(org.apache.commons.math3.geometry.Point)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.BaseOptimizer$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.events.Transformer$5</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>15</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.5</amc>
		<cc>
			<method name="protected double transformed(double g)">1</method>
			<method name="void _init_(String, int)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.events.Transformer$4</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>16</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="protected double transformed(double g)">1</method>
			<method name="void _init_(String, int)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer</name>
		<wmc>11</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>19</cbo>
		<rfc>34</rfc>
		<lcom>53</lcom>
		<ca>0</ca>
		<ce>19</ce>
		<npm>7</npm>
		<lcom3>0.5</lcom3>
		<loc>348</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.38961038961038963</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>30.363636363636363</amc>
		<cc>
			<method name="public transient org.apache.commons.math3.optim.PointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[] optData)">1</method>
			<method name="private void checkParameters()">3</method>
			<method name="public void _init_(org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula updateFormula, org.apache.commons.math3.optim.ConvergenceChecker checker)">0</method>
			<method name="public volatile Object optimize(org.apache.commons.math3.optim.OptimizationData[] x0)">1</method>
			<method name="protected transient void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[] optData)">1</method>
			<method name="protected volatile Object doOptimize()">1</method>
			<method name="public void _init_(org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula updateFormula, org.apache.commons.math3.optim.ConvergenceChecker checker, org.apache.commons.math3.analysis.solvers.UnivariateSolver lineSearchSolver)">0</method>
			<method name="public void _init_(org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula updateFormula, org.apache.commons.math3.optim.ConvergenceChecker checker, org.apache.commons.math3.analysis.solvers.UnivariateSolver lineSearchSolver, org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner preconditioner)">0</method>
			<method name="public void _init_(org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula updateFormula, org.apache.commons.math3.optim.ConvergenceChecker checker, double relativeTolerance, double absoluteTolerance, double initialBracketingRange)">0</method>
			<method name="protected org.apache.commons.math3.optim.PointValuePair doOptimize()">16</method>
			<method name="public void _init_(org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula updateFormula, org.apache.commons.math3.optim.ConvergenceChecker checker, double relativeTolerance, double absoluteTolerance, double initialBracketingRange, org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner preconditioner)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.events.Transformer$3</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>11</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.5</amc>
		<cc>
			<method name="protected double transformed(double g)">1</method>
			<method name="void _init_(String, int)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.AbstractOptimizationProblem$MaxIterCallback</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>15</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="void _init_(org.apache.commons.math3.optim.AbstractOptimizationProblem$1 x0)">0</method>
			<method name="public void trigger(int max)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.correlation.PearsonsCorrelation</name>
		<wmc>13</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>34</rfc>
		<lcom>36</lcom>
		<ca>1</ca>
		<ce>11</ce>
		<npm>12</npm>
		<lcom3>0.4583333333333333</lcom3>
		<loc>416</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.2948717948717949</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>30.846153846153847</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.linear.RealMatrix matrix)">0</method>
			<method name="public void _init_(double[][] data)">0</method>
			<method name="public double correlation(double[] xArray, double[] yArray)">4</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix computeCorrelationMatrix(org.apache.commons.math3.linear.RealMatrix matrix)">3</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getCorrelationMatrix()">1</method>
			<method name="public void _init_(org.apache.commons.math3.linear.RealMatrix covarianceMatrix, int numberOfObservations)">0</method>
			<method name="public void _init_(org.apache.commons.math3.stat.correlation.Covariance covariance)">0</method>
			<method name="public void _init_()">0</method>
			<method name="private void checkSufficientData(org.apache.commons.math3.linear.RealMatrix matrix)">3</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getCorrelationPValues()">4</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getCorrelationStandardErrors()">3</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix covarianceToCorrelation(org.apache.commons.math3.linear.RealMatrix covarianceMatrix)">3</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix computeCorrelationMatrix(double[][] data)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>14</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.5</amc>
		<cc>
			<method name="public double value(double x)">1</method>
			<method name="void _init_(org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.integration.gauss.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.SubHyperplane</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>37</cbo>
		<rfc>7</rfc>
		<lcom>21</lcom>
		<ca>36</ca>
		<ce>3</ce>
		<npm>7</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.47619047619047616</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.geometry.partitioning.SubHyperplane reunite(org.apache.commons.math3.geometry.partitioning.SubHyperplane)">1</method>
			<method name="public abstract org.apache.commons.math3.geometry.partitioning.SubHyperplane copySelf()">1</method>
			<method name="public abstract org.apache.commons.math3.geometry.partitioning.Side side(org.apache.commons.math3.geometry.partitioning.Hyperplane)">1</method>
			<method name="public abstract boolean isEmpty()">1</method>
			<method name="public abstract org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()">1</method>
			<method name="public abstract org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane)">1</method>
			<method name="public abstract double getSize()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.interpolation.LinearInterpolator</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>9</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>11</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>116</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>37.666666666666664</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction interpolate(double[] x, double[] y)">1</method>
			<method name="public volatile org.apache.commons.math3.analysis.UnivariateFunction interpolate(double[] x0, double[] x1)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.twod.NestedLoops</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>27</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>13</ce>
		<npm>3</npm>
		<lcom3>0.4</lcom3>
		<loc>291</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>46.666666666666664</amc>
		<cc>
			<method name="private void setClockWise(boolean clockwise)">5</method>
			<method name="private void _init_(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] loop, double tolerance)">0</method>
			<method name="public void correctOrientation()">2</method>
			<method name="public void _init_(double tolerance)">0</method>
			<method name="public void add(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] bLoop)">1</method>
			<method name="private void add(org.apache.commons.math3.geometry.euclidean.twod.NestedLoops node)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.differentiation.SparseGradient</name>
		<wmc>128</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>156</rfc>
		<lcom>3568</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>126</npm>
		<lcom3>0.3543307086614173</lcom3>
		<loc>2206</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.17708333333333334</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>16.2109375</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(org.apache.commons.math3.analysis.differentiation.SparseGradient a)">4</method>
			<method name="public volatile Object abs()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient toRadians()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient log10()">1</method>
			<method name="public volatile Object copySign(double x0)">1</method>
			<method name="public volatile Object linearCombination(Object x0, Object x1, Object x2, Object x3, Object x4, Object x5)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(double a1, org.apache.commons.math3.analysis.differentiation.SparseGradient b1, double a2, org.apache.commons.math3.analysis.differentiation.SparseGradient b2, double a3, org.apache.commons.math3.analysis.differentiation.SparseGradient b3)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(org.apache.commons.math3.analysis.differentiation.SparseGradient a1, org.apache.commons.math3.analysis.differentiation.SparseGradient b1, org.apache.commons.math3.analysis.differentiation.SparseGradient a2, org.apache.commons.math3.analysis.differentiation.SparseGradient b2)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient toDegrees()">1</method>
			<method name="public org.apache.commons.math3.Field getField()">1</method>
			<method name="public volatile Object linearCombination(Object x0, Object x1, Object x2, Object x3, Object x4, Object x5, Object x6, Object x7)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient copySign(double sign)">5</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient log()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(org.apache.commons.math3.analysis.differentiation.SparseGradient[] a, org.apache.commons.math3.analysis.differentiation.SparseGradient[] b)">1</method>
			<method name="public volatile Object remainder(double x0)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient scalb(int n)">2</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient cbrt()">1</method>
			<method name="public volatile Object negate()">1</method>
			<method name="public volatile Object tan()">1</method>
			<method name="public volatile Object scalb(int x0)">1</method>
			<method name="public volatile Object add(Object x0)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient atan()">1</method>
			<method name="public volatile Object exp()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient sqrt()">1</method>
			<method name="public double getValue()">1</method>
			<method name="public static org.apache.commons.math3.analysis.differentiation.SparseGradient atan2(org.apache.commons.math3.analysis.differentiation.SparseGradient y, org.apache.commons.math3.analysis.differentiation.SparseGradient x)">1</method>
			<method name="public long round()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient sinh()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient rootN(int n)">3</method>
			<method name="public volatile Object reciprocal()">1</method>
			<method name="public void multiplyInPlace(org.apache.commons.math3.analysis.differentiation.SparseGradient a)">4</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient log1p()">1</method>
			<method name="public volatile Object divide(double x0)">1</method>
			<method name="public volatile Object cbrt()">1</method>
			<method name="public volatile Object rootN(int x0)">1</method>
			<method name="public volatile Object atan()">1</method>
			<method name="public volatile Object sqrt()">1</method>
			<method name="public static org.apache.commons.math3.analysis.differentiation.SparseGradient createVariable(int idx, double value)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(org.apache.commons.math3.analysis.differentiation.SparseGradient a1, org.apache.commons.math3.analysis.differentiation.SparseGradient b1, org.apache.commons.math3.analysis.differentiation.SparseGradient a2, org.apache.commons.math3.analysis.differentiation.SparseGradient b2, org.apache.commons.math3.analysis.differentiation.SparseGradient a3, org.apache.commons.math3.analysis.differentiation.SparseGradient b3, org.apache.commons.math3.analysis.differentiation.SparseGradient a4, org.apache.commons.math3.analysis.differentiation.SparseGradient b4)">1</method>
			<method name="public volatile Object log()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient hypot(org.apache.commons.math3.analysis.differentiation.SparseGradient y)">7</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient acosh()">1</method>
			<method name="public boolean equals(Object other)">7</method>
			<method name="public double getReal()">1</method>
			<method name="public static org.apache.commons.math3.analysis.differentiation.SparseGradient pow(double a, org.apache.commons.math3.analysis.differentiation.SparseGradient x)">4</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient tan()">1</method>
			<method name="public int hashCode()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient subtract(double c)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient pow(org.apache.commons.math3.analysis.differentiation.SparseGradient e)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient asinh()">1</method>
			<method name="public volatile Object add(double x0)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient copySign(org.apache.commons.math3.analysis.differentiation.SparseGradient sign)">5</method>
			<method name="private void _init_(double value, double scale, java.util.Map derivatives)">0</method>
			<method name="private void _init_(double value, java.util.Map derivatives)">0</method>
			<method name="public volatile Object rint()">1</method>
			<method name="public void addInPlace(org.apache.commons.math3.analysis.differentiation.SparseGradient a)">3</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient cos()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient floor()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(double c)">1</method>
			<method name="public volatile Object multiply(Object x0)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient add(org.apache.commons.math3.analysis.differentiation.SparseGradient a)">3</method>
			<method name="public volatile Object subtract(double x0)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(double a1, org.apache.commons.math3.analysis.differentiation.SparseGradient b1, double a2, org.apache.commons.math3.analysis.differentiation.SparseGradient b2)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient asin()">1</method>
			<method name="public volatile Object pow(Object x0)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient signum()">1</method>
			<method name="public volatile Object linearCombination(double x0, Object x1, double x2, Object x3)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient pow(double p)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient atanh()">1</method>
			<method name="public volatile Object cos()">1</method>
			<method name="public volatile Object ceil()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(double a1, org.apache.commons.math3.analysis.differentiation.SparseGradient b1, double a2, org.apache.commons.math3.analysis.differentiation.SparseGradient b2, double a3, org.apache.commons.math3.analysis.differentiation.SparseGradient b3, double a4, org.apache.commons.math3.analysis.differentiation.SparseGradient b4)">1</method>
			<method name="public volatile Object cosh()">1</method>
			<method name="public volatile Object asin()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient ceil()">1</method>
			<method name="public double getDerivative(int index)">2</method>
			<method name="public volatile Object asinh()">1</method>
			<method name="public volatile Object floor()">1</method>
			<method name="public volatile Object atan2(Object x0)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient rint()">1</method>
			<method name="public volatile Object tanh()">1</method>
			<method name="public volatile Object subtract(Object x0)">1</method>
			<method name="public volatile Object linearCombination(double x0, Object x1, double x2, Object x3, double x4, Object x5, double x6, Object x7)">1</method>
			<method name="public static org.apache.commons.math3.analysis.differentiation.SparseGradient createConstant(double value)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient abs()">2</method>
			<method name="public volatile Object expm1()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient tanh()">1</method>
			<method name="public volatile Object linearCombination(double x0, Object x1, double x2, Object x3, double x4, Object x5)">1</method>
			<method name="public volatile Object atanh()">1</method>
			<method name="public volatile Object divide(Object x0)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient multiply(int n)">1</method>
			<method name="public volatile Object copySign(Object x0)">1</method>
			<method name="public int numVars()">1</method>
			<method name="public volatile Object pow(double x0)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient reciprocal()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(double[] a, org.apache.commons.math3.analysis.differentiation.SparseGradient[] b)">3</method>
			<method name="public volatile Object pow(int x0)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient pow(int n)">2</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient acos()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient compose(double f0, double f1)">1</method>
			<method name="public volatile Object log1p()">1</method>
			<method name="public static org.apache.commons.math3.analysis.differentiation.SparseGradient hypot(org.apache.commons.math3.analysis.differentiation.SparseGradient x, org.apache.commons.math3.analysis.differentiation.SparseGradient y)">1</method>
			<method name="public volatile Object acosh()">1</method>
			<method name="public volatile Object acos()">1</method>
			<method name="public volatile Object linearCombination(Object x0, Object x1, Object x2, Object x3)">1</method>
			<method name="public volatile Object linearCombination(double[] x0, Object[] x1)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient linearCombination(org.apache.commons.math3.analysis.differentiation.SparseGradient a1, org.apache.commons.math3.analysis.differentiation.SparseGradient b1, org.apache.commons.math3.analysis.differentiation.SparseGradient a2, org.apache.commons.math3.analysis.differentiation.SparseGradient b2, org.apache.commons.math3.analysis.differentiation.SparseGradient a3, org.apache.commons.math3.analysis.differentiation.SparseGradient b3)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient cosh()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient negate()">1</method>
			<method name="public volatile Object remainder(Object x0)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient add(double c)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient exp()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient subtract(org.apache.commons.math3.analysis.differentiation.SparseGradient a)">3</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient expm1()">1</method>
			<method name="public volatile Object sin()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient divide(double c)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient divide(org.apache.commons.math3.analysis.differentiation.SparseGradient a)">4</method>
			<method name="public volatile Object sinh()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient atan2(org.apache.commons.math3.analysis.differentiation.SparseGradient x)">3</method>
			<method name="public transient double taylor(double[] delta)">2</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient remainder(org.apache.commons.math3.analysis.differentiation.SparseGradient a)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient sin()">1</method>
			<method name="public volatile Object linearCombination(Object[] x0, Object[] x1)">1</method>
			<method name="public volatile Object multiply(int x0)">1</method>
			<method name="public volatile Object hypot(Object x0)">1</method>
			<method name="public volatile Object multiply(double x0)">1</method>
			<method name="public volatile Object signum()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient remainder(double a)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.LUDecomposition$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.neuralnet.sofm.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer</name>
		<wmc>8</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>14</rfc>
		<lcom>14</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>3</npm>
		<lcom3>0.5714285714285714</lcom3>
		<loc>62</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.23214285714285715</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.5</amc>
		<cc>
			<method name="static org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer access$000(org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizer x0)">1</method>
			<method name="private java.util.Comparator getPairComparator()">1</method>
			<method name="protected volatile void store(Object x0)">1</method>
			<method name="public volatile Object[] getOptima()">1</method>
			<method name="protected void store(org.apache.commons.math3.optim.PointValuePair optimum)">1</method>
			<method name="public org.apache.commons.math3.optim.PointValuePair[] getOptima()">1</method>
			<method name="public void _init_(org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer optimizer, int starts, org.apache.commons.math3.random.RandomVectorGenerator generator)">0</method>
			<method name="protected void clear()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.moment.Mean</name>
		<wmc>14</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>18</cbo>
		<rfc>26</rfc>
		<lcom>49</lcom>
		<ca>9</ca>
		<ce>9</ce>
		<npm>14</npm>
		<lcom3>0.5641025641025641</lcom3>
		<loc>212</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.2619047619047619</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.928571428571429</amc>
		<cc>
			<method name="public void clear()">2</method>
			<method name="public long getN()">1</method>
			<method name="public double evaluate(double[] values, double[] weights)">1</method>
			<method name="public static void copy(org.apache.commons.math3.stat.descriptive.moment.Mean source, org.apache.commons.math3.stat.descriptive.moment.Mean dest)">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic copy()">1</method>
			<method name="public double getResult()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double evaluate(double[] values, int begin, int length)">1</method>
			<method name="public void _init_(org.apache.commons.math3.stat.descriptive.moment.FirstMoment m1)">0</method>
			<method name="public double evaluate(double[] values, double[] weights, int begin, int length)">1</method>
			<method name="public void _init_(org.apache.commons.math3.stat.descriptive.moment.Mean original)">0</method>
			<method name="public void increment(double d)">2</method>
			<method name="public org.apache.commons.math3.stat.descriptive.moment.Mean copy()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>11</rfc>
		<lcom>15</lcom>
		<ca>4</ca>
		<ce>9</ce>
		<npm>5</npm>
		<lcom3>2.0</lcom3>
		<loc>65</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.833333333333334</amc>
		<cc>
			<method name="public org.apache.commons.math3.geometry.partitioning.Side side(org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane)">3</method>
			<method name="public double getSize()">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane, org.apache.commons.math3.geometry.partitioning.Region remainingRegion)">0</method>
			<method name="public boolean isEmpty()">1</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane)">2</method>
			<method name="protected org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane, org.apache.commons.math3.geometry.partitioning.Region remainingRegion)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.summary.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.spherical.oned.ArcsSet$InconsistentStateAt2PiWrapping</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.NonSymmetricMatrixException</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>7</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>0.8333333333333334</lcom3>
		<loc>47</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.75</amc>
		<cc>
			<method name="public void _init_(int row, int column, double threshold)">0</method>
			<method name="public double getThreshold()">1</method>
			<method name="public int getRow()">1</method>
			<method name="public int getColumn()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$NoBoundsMapper</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>14</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public double unboundedToBounded(double y)">1</method>
			<method name="public double boundedToUnbounded(double x)">1</method>
			<method name="private void _init_()">0</method>
			<method name="void _init_(org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$1 x0)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.events.Transformer$1</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>5</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>10</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="protected double transformed(double g)">1</method>
			<method name="void _init_(String, int)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.EmpiricalDistribution$StreamDataAdapter</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>14</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>83</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.0</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.random.EmpiricalDistribution, java.io.BufferedReader in)">0</method>
			<method name="public void computeStats()">1</method>
			<method name="public void computeBinStats()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.events.Transformer$2</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>10</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="protected double transformed(double g)">1</method>
			<method name="void _init_(String, int)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics</name>
		<wmc>16</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>29</rfc>
		<lcom>120</lcom>
		<ca>0</ca>
		<ce>5</ce>
		<npm>16</npm>
		<lcom3>1.0666666666666667</lcom3>
		<loc>109</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.275</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.75</amc>
		<cc>
			<method name="public synchronized double getElement(int index)">1</method>
			<method name="public synchronized void addValue(double v)">1</method>
			<method name="public synchronized String toString()">1</method>
			<method name="public synchronized org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics copy()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(int window)">0</method>
			<method name="public synchronized void setWindowSize(int windowSize)">1</method>
			<method name="public synchronized long getN()">1</method>
			<method name="public synchronized double getStandardDeviation()">1</method>
			<method name="public static void copy(org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics source, org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics dest)">1</method>
			<method name="public synchronized void clear()">1</method>
			<method name="public void _init_(org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics original)">0</method>
			<method name="public synchronized double[] getValues()">1</method>
			<method name="public synchronized double apply(org.apache.commons.math3.stat.descriptive.UnivariateStatistic stat)">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.DescriptiveStatistics copy()">1</method>
			<method name="public synchronized int getWindowSize()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.AbstractOptimizationProblem</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>8</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>3</npm>
		<lcom3>0.75</lcom3>
		<loc>50</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.0</amc>
		<cc>
			<method name="public org.apache.commons.math3.util.Incrementor getEvaluationCounter()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public org.apache.commons.math3.optim.ConvergenceChecker getConvergenceChecker()">1</method>
			<method name="public org.apache.commons.math3.util.Incrementor getIterationCounter()">1</method>
			<method name="protected void _init_(int maxEvaluations, int maxIterations, org.apache.commons.math3.optim.ConvergenceChecker checker)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.AbstractRegion$3</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>28</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.AbstractRegion$2</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>8</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>1.0</lcom3>
		<loc>30</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.25</amc>
		<cc>
			<method name="public void visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree node)">1</method>
			<method name="public void visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree node)">3</method>
			<method name="void _init_(org.apache.commons.math3.geometry.partitioning.AbstractRegion)">0</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree node)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.MathInternalError</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>30</cbo>
		<rfc>8</rfc>
		<lcom>3</lcom>
		<ca>26</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>1.5</lcom3>
		<loc>34</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.666666666666666</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(Throwable cause)">0</method>
			<method name="public transient void _init_(org.apache.commons.math3.exception.util.Localizable pattern, Object[] args)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.AbstractRegion$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>1.0</lcom3>
		<loc>36</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.666666666666666</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="public int compare(org.apache.commons.math3.geometry.partitioning.SubHyperplane o1, org.apache.commons.math3.geometry.partitioning.SubHyperplane o2)">3</method>
			<method name="void _init_(org.apache.commons.math3.geometry.partitioning.AbstractRegion)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.HarmonicFitter$ParameterGuesser</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>17</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>2</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>476</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.9</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>93.6</amc>
		<cc>
			<method name="public double[] guess()">1</method>
			<method name="private double guessPhi(org.apache.commons.math3.fitting.WeightedObservedPoint[] observations)">2</method>
			<method name="private double[] guessAOmega(org.apache.commons.math3.fitting.WeightedObservedPoint[] observations)">9</method>
			<method name="public void _init_(org.apache.commons.math3.fitting.WeightedObservedPoint[] observations)">0</method>
			<method name="private org.apache.commons.math3.fitting.WeightedObservedPoint[] sortObservations(org.apache.commons.math3.fitting.WeightedObservedPoint[] unsorted)">6</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.Well19937a</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>9</rfc>
		<lcom>10</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>1.25</lcom3>
		<loc>174</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.45</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>32.8</amc>
		<cc>
			<method name="protected int next(int bits)">1</method>
			<method name="public void _init_(long seed)">0</method>
			<method name="public void _init_(int seed)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(int[] seed)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator</name>
		<wmc>10</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>27</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>6</npm>
		<lcom3>1.0603864734299515</lcom3>
		<loc>1655</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.20202020202020202</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>159.9</amc>
		<cc>
			<method name="protected org.apache.commons.math3.ode.sampling.StepInterpolator doCopy()">1</method>
			<method name="public void readExternal(java.io.ObjectInput in)">1</method>
			<method name="protected void computeInterpolatedStateAndDerivatives(double theta, double oneMinusThetaH)">1</method>
			<method name="public void _init_(org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolator interpolator)">0</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void storeTime(double t)">1</method>
			<method name="public void writeExternal(java.io.ObjectOutput out)">1</method>
			<method name="public void reinitialize(org.apache.commons.math3.ode.AbstractIntegrator integrator, double[] y, double[][] yDotK, boolean forward, org.apache.commons.math3.ode.EquationsMapper primaryMapper, org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers)">3</method>
			<method name="protected void doFinalize()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.linear.SolutionCallback</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>30</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.25</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public boolean isSolutionOptimal()">2</method>
			<method name="public org.apache.commons.math3.optim.PointValuePair getSolution()">2</method>
			<method name="void setTableau(org.apache.commons.math3.optim.linear.SimplexTableau tableau)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.ConstantRealDistribution</name>
		<wmc>13</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>17</rfc>
		<lcom>22</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>13</npm>
		<lcom3>0.75</lcom3>
		<loc>82</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.46153846153846156</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.153846153846154</amc>
		<cc>
			<method name="public double getSupportLowerBound()">1</method>
			<method name="public double inverseCumulativeProbability(double p)">1</method>
			<method name="public double density(double x)">2</method>
			<method name="public double sample()">1</method>
			<method name="public boolean isSupportConnected()">1</method>
			<method name="public boolean isSupportUpperBoundInclusive()">1</method>
			<method name="public double cumulativeProbability(double x)">2</method>
			<method name="public double getNumericalVariance()">1</method>
			<method name="public double getNumericalMean()">1</method>
			<method name="public boolean isSupportLowerBoundInclusive()">1</method>
			<method name="public double getSupportUpperBound()">1</method>
			<method name="public void _init_(double value)">0</method>
			<method name="public void reseedRandomGenerator(long seed)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.interval.WilsonScoreInterval</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>9</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>101</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>49.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public org.apache.commons.math3.stat.interval.ConfidenceInterval createInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.CorrelatedRandomVectorGenerator</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>16</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>6</ce>
		<npm>6</npm>
		<lcom3>0.45</lcom3>
		<loc>163</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.43333333333333335</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>25.5</amc>
		<cc>
			<method name="public int getRank()">1</method>
			<method name="public org.apache.commons.math3.random.NormalizedRandomGenerator getGenerator()">1</method>
			<method name="public double[] nextVector()">4</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getRootMatrix()">1</method>
			<method name="public void _init_(org.apache.commons.math3.linear.RealMatrix covariance, double small, org.apache.commons.math3.random.NormalizedRandomGenerator generator)">0</method>
			<method name="public void _init_(double[] mean, org.apache.commons.math3.linear.RealMatrix covariance, double small, org.apache.commons.math3.random.NormalizedRandomGenerator generator)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.Well19937c</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>28</cbo>
		<rfc>9</rfc>
		<lcom>10</lcom>
		<ca>27</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>1.25</lcom3>
		<loc>190</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.45</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>36.0</amc>
		<cc>
			<method name="protected int next(int bits)">1</method>
			<method name="public void _init_(long seed)">0</method>
			<method name="public void _init_(int seed)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(int[] seed)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.PoissonDistribution</name>
		<wmc>17</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>37</rfc>
		<lcom>112</lcom>
		<ca>1</ca>
		<ce>12</ce>
		<npm>16</npm>
		<lcom3>0.8125</lcom3>
		<loc>540</loc>
		<dam>0.75</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.45588235294117646</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>30.294117647058822</amc>
		<cc>
			<method name="public int sample()">1</method>
			<method name="public void _init_(double p)">0</method>
			<method name="public boolean isSupportConnected()">1</method>
			<method name="public void _init_(double p, double epsilon)">0</method>
			<method name="public double getMean()">1</method>
			<method name="public double normalApproximateProbability(int x)">1</method>
			<method name="public void _init_(double p, int maxIterations)">0</method>
			<method name="public int getSupportLowerBound()">1</method>
			<method name="public void _init_(double p, double epsilon, int maxIterations)">0</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, double p, double epsilon, int maxIterations)">0</method>
			<method name="public double logProbability(int x)">4</method>
			<method name="public int getSupportUpperBound()">1</method>
			<method name="public double getNumericalMean()">1</method>
			<method name="public double getNumericalVariance()">1</method>
			<method name="private long nextPoisson(double meanPoisson)">15</method>
			<method name="public double cumulativeProbability(int x)">3</method>
			<method name="public double probability(int x)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.leastsquares.DenseWeightedEvaluation</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>11</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>0.16666666666666666</lcom3>
		<loc>35</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.25</amc>
		<cc>
			<method name="public org.apache.commons.math3.linear.RealVector getResiduals()">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getJacobian()">1</method>
			<method name="void _init_(org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation unweighted, org.apache.commons.math3.linear.RealMatrix weightSqrt)">0</method>
			<method name="public org.apache.commons.math3.linear.RealVector getPoint()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.SimpleBounds</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.5</lcom3>
		<loc>28</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.666666666666667</amc>
		<cc>
			<method name="public void _init_(double[] lB, double[] uB)">0</method>
			<method name="public double[] getUpper()">1</method>
			<method name="public double[] getLower()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.complex.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Pow</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public double value(double x, double y)">1</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.BaseMultivariateVectorMultiStartOptimizer</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>2</noc>
		<cbo>15</cbo>
		<rfc>19</rfc>
		<lcom>5</lcom>
		<ca>3</ca>
		<ce>13</ce>
		<npm>5</npm>
		<lcom3>0.7777777777777777</lcom3>
		<loc>159</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.857142857142858</amc>
		<cc>
			<method name="public int getMaxEvaluations()">1</method>
			<method name="public org.apache.commons.math3.optimization.PointVectorValuePair[] getOptima()">2</method>
			<method name="public int getEvaluations()">1</method>
			<method name="public org.apache.commons.math3.optimization.ConvergenceChecker getConvergenceChecker()">1</method>
			<method name="public org.apache.commons.math3.optimization.PointVectorValuePair optimize(int maxEval, org.apache.commons.math3.analysis.MultivariateVectorFunction f, double[] target, double[] weights, double[] startPoint)">4</method>
			<method name="protected void _init_(org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer optimizer, int starts, org.apache.commons.math3.random.RandomVectorGenerator generator)">0</method>
			<method name="private void sortPairs(double[] target, double[] weights)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Subtract</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public double value(double x, double y)">1</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.JDKRandomGenerator</name>
		<wmc>3</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>3</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>1.5</lcom3>
		<loc>17</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.8823529411764706</mfa>
		<cam>0.5555555555555556</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>4.333333333333333</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public void setSeed(int seed)">1</method>
			<method name="public void setSeed(int[] seed)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.UnivariateMatrixFunction</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>5</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double[][] value(double)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.neuralnet.Network$NeuronIdentifierComparator</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>1.5</lcom3>
		<loc>34</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.0</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public int compare(org.apache.commons.math3.ml.neuralnet.Neuron a, org.apache.commons.math3.ml.neuralnet.Neuron b)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>13</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9523809523809524</lcom3>
		<loc>89</loc>
		<dam>0.14285714285714285</dam>
		<moa>7</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>19.5</amc>
		<cc>
			<method name="public static org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order[] values()">1</method>
			<method name="public static org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order valueOf(String name)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.leastsquares.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>42</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>40.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.DefaultRealMatrixChangingVisitor</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>12</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.0</amc>
		<cc>
			<method name="public double end()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public double visit(int row, int column, double value)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.MathArrays$Function</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>3</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double evaluate(double[])">1</method>
			<method name="public abstract double evaluate(double[], int, int)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.neuralnet.sofm.util.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Gaussian</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>19</rfc>
		<lcom>22</lcom>
		<ca>2</ca>
		<ce>9</ce>
		<npm>6</npm>
		<lcom3>0.5</lcom3>
		<loc>228</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>27.0</amc>
		<cc>
			<method name="public void _init_(double norm, double mean, double sigma)">0</method>
			<method name="static double access$000(double x0, double x1, double x2)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double value(double x)">1</method>
			<method name="public void _init_(double mean, double sigma)">0</method>
			<method name="private static double value(double xMinusMean, double norm, double i2s2)">1</method>
			<method name="public org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.spherical.oned.Sphere1D</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>9</rfc>
		<lcom>15</lcom>
		<ca>3</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>1.2</lcom3>
		<loc>23</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.6666666666666665</amc>
		<cc>
			<method name="public org.apache.commons.math3.geometry.Space getSubSpace()">1</method>
			<method name="public int getDimension()">1</method>
			<method name="private void _init_()">0</method>
			<method name="private Object readResolve()">1</method>
			<method name="public static org.apache.commons.math3.geometry.spherical.oned.Sphere1D getInstance()">1</method>
			<method name="void _init_(org.apache.commons.math3.geometry.spherical.oned.Sphere1D$1 x0)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.RandomVectorGenerator</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>15</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double[] nextVector()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$2</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>17</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="public org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation evaluate(org.apache.commons.math3.linear.RealVector point)">1</method>
			<method name="void _init_(org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem x0, org.apache.commons.math3.util.Incrementor)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.Transform</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>3</rfc>
		<lcom>3</lcom>
		<ca>9</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>3</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.geometry.partitioning.SubHyperplane apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane, org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Hyperplane)">1</method>
			<method name="public abstract org.apache.commons.math3.geometry.Point apply(org.apache.commons.math3.geometry.Point)">1</method>
			<method name="public abstract org.apache.commons.math3.geometry.partitioning.Hyperplane apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$3</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>9</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>43</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.0</amc>
		<cc>
			<method name="public volatile boolean converged(int x0, Object x1, Object x2)">1</method>
			<method name="void _init_(org.apache.commons.math3.optim.ConvergenceChecker)">0</method>
			<method name="public boolean converged(int iteration, org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation previous, org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation current)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Multiply</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public double value(double x, double y)">1</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>4</noc>
		<cbo>6</cbo>
		<rfc>5</rfc>
		<lcom>4</lcom>
		<ca>4</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>16</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.75</amc>
		<cc>
			<method name="public org.apache.commons.math3.FieldElement end()">1</method>
			<method name="public void _init_(org.apache.commons.math3.FieldElement zero)">0</method>
			<method name="public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public void visit(int row, int column, org.apache.commons.math3.FieldElement value)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.HessenbergTransformer</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>17</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>4</npm>
		<lcom3>0.52</lcom3>
		<loc>517</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>84.33333333333333</amc>
		<cc>
			<method name="public org.apache.commons.math3.linear.RealMatrix getH()">5</method>
			<method name="public void _init_(org.apache.commons.math3.linear.RealMatrix matrix)">0</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getP()">11</method>
			<method name="private void transform()">12</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getPT()">2</method>
			<method name="double[][] getHouseholderVectorsRef()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.RRQRDecomposition$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$1</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>6</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>19</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.0</amc>
		<cc>
			<method name="public org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation evaluate(org.apache.commons.math3.linear.RealVector point)">1</method>
			<method name="void _init_(org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem x0, org.apache.commons.math3.linear.RealMatrix)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.genetics.MutationPolicy</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.genetics.Chromosome mutate(org.apache.commons.math3.genetics.Chromosome)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.RegionFactory$NodesCleaner</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>7</rfc>
		<lcom>10</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>0.75</lcom3>
		<loc>23</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.55</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.4</amc>
		<cc>
			<method name="void _init_(org.apache.commons.math3.geometry.partitioning.RegionFactory x0, org.apache.commons.math3.geometry.partitioning.RegionFactory$1 x1)">0</method>
			<method name="public void visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree node)">1</method>
			<method name="public void visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree node)">1</method>
			<method name="private void _init_(org.apache.commons.math3.geometry.partitioning.RegionFactory)">0</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree node)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>11</rfc>
		<lcom>4</lcom>
		<ca>0</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>1.025</lcom3>
		<loc>333</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>63.6</amc>
		<cc>
			<method name="public void _init_(double minStep, double maxStep, double[] vecAbsoluteTolerance, double[] vecRelativeTolerance)">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="protected double estimateError(double[][] yDotK, double[] y0, double[] y1, double h)">3</method>
			<method name="public int getOrder()">1</method>
			<method name="public void _init_(double minStep, double maxStep, double scalAbsoluteTolerance, double scalRelativeTolerance)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>25</rfc>
		<lcom>9</lcom>
		<ca>1</ca>
		<ce>16</ce>
		<npm>5</npm>
		<lcom3>0.4</lcom3>
		<loc>116</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4583333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.166666666666668</amc>
		<cc>
			<method name="public void visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree node)">3</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.utilities.AVLTree getSorted()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree node)">1</method>
			<method name="private void addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane sub, boolean reversed)">5</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree node)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator</name>
		<wmc>13</wmc>
		<dit>0</dit>
		<noc>3</noc>
		<cbo>14</cbo>
		<rfc>27</rfc>
		<lcom>26</lcom>
		<ca>3</ca>
		<ce>11</ce>
		<npm>10</npm>
		<lcom3>0.6354166666666666</lcom3>
		<loc>433</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3516483516483517</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.692307692307693</amc>
		<cc>
			<method name="protected void sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE equations, double t)">1</method>
			<method name="public double getMinStep()">1</method>
			<method name="public void setStepSizeControl(double minimalStep, double maximalStep, double[] absoluteTolerance, double[] relativeTolerance)">1</method>
			<method name="protected void resetInternalState()">1</method>
			<method name="public abstract void integrate(org.apache.commons.math3.ode.ExpandableStatefulODE, double)">1</method>
			<method name="public void _init_(String name, double minStep, double maxStep, double[] vecAbsoluteTolerance, double[] vecRelativeTolerance)">0</method>
			<method name="public double getMaxStep()">1</method>
			<method name="protected double filterStep(double h, boolean forward, boolean acceptSmall)">1</method>
			<method name="public void _init_(String name, double minStep, double maxStep, double scalAbsoluteTolerance, double scalRelativeTolerance)">0</method>
			<method name="public double initializeStep(boolean forward, int order, double[] scale, double t0, double[] y0, double[] yDot0, double[] y1, double[] yDot1)">1</method>
			<method name="public double getCurrentStepStart()">1</method>
			<method name="public void setInitialStepSize(double initialStepSize)">3</method>
			<method name="public void setStepSizeControl(double minimalStep, double maximalStep, double absoluteTolerance, double relativeTolerance)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.Pair</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>4</noc>
		<cbo>31</cbo>
		<rfc>17</rfc>
		<lcom>11</lcom>
		<ca>31</ca>
		<ce>0</ce>
		<npm>10</npm>
		<lcom3>0.2222222222222222</lcom3>
		<loc>136</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.43333333333333335</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>12.4</amc>
		<cc>
			<method name="public Object getSecond()">1</method>
			<method name="public boolean equals(Object o)">9</method>
			<method name="public int hashCode()">3</method>
			<method name="public Object getFirst()">1</method>
			<method name="public Object getKey()">1</method>
			<method name="public static org.apache.commons.math3.util.Pair create(Object k, Object v)">1</method>
			<method name="public String toString()">1</method>
			<method name="public Object getValue()">1</method>
			<method name="public void _init_(Object k, Object v)">0</method>
			<method name="public void _init_(org.apache.commons.math3.util.Pair entry)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.AbstractRealMatrix</name>
		<wmc>60</wmc>
		<dit>0</dit>
		<noc>4</noc>
		<cbo>31</cbo>
		<rfc>119</rfc>
		<lcom>1768</lcom>
		<ca>10</ca>
		<ce>26</ce>
		<npm>57</npm>
		<lcom3>0.9830508474576272</lcom3>
		<loc>2025</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.19106317411402157</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>32.733333333333334</amc>
		<cc>
			<method name="public void copySubMatrix(int startRow, int endRow, int startColumn, int endColumn, double[][] destination)">1</method>
			<method name="public double[][] getData()">3</method>
			<method name="public void setColumnVector(int column, org.apache.commons.math3.linear.RealVector vector)">1</method>
			<method name="public abstract int getColumnDimension()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public org.apache.commons.math3.linear.RealVector preMultiply(org.apache.commons.math3.linear.RealVector v)">1</method>
			<method name="public double getTrace()">1</method>
			<method name="public double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor visitor, int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public double walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor visitor)">1</method>
			<method name="public double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor visitor)">3</method>
			<method name="public double walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor visitor)">1</method>
			<method name="public void setColumn(int column, double[] array)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealMatrix createMatrix(int, int)">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getRowMatrix(int row)">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix subtract(org.apache.commons.math3.linear.RealMatrix m)">1</method>
			<method name="public abstract double getEntry(int, int)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector getRowVector(int row)">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix scalarMultiply(double d)">3</method>
			<method name="public double walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor visitor, int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public void setRowMatrix(int row, org.apache.commons.math3.linear.RealMatrix matrix)">1</method>
			<method name="public void copySubMatrix(int[] selectedRows, int[] selectedColumns, double[][] destination)">1</method>
			<method name="public double[] getRow(int row)">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix add(org.apache.commons.math3.linear.RealMatrix m)">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getSubMatrix(int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector v)">1</method>
			<method name="public double[] operate(double[] v)">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getColumnMatrix(int column)">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getSubMatrix(int[] selectedRows, int[] selectedColumns)">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix preMultiply(org.apache.commons.math3.linear.RealMatrix m)">1</method>
			<method name="public void setSubMatrix(double[][] subMatrix, int row, int column)">1</method>
			<method name="public void multiplyEntry(int row, int column, double factor)">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix transpose()">1</method>
			<method name="public double[] getColumn(int column)">1</method>
			<method name="public void addToEntry(int row, int column, double increment)">1</method>
			<method name="protected void _init_(int rowDimension, int columnDimension)">0</method>
			<method name="public void setRowVector(int row, org.apache.commons.math3.linear.RealVector vector)">1</method>
			<method name="public void setColumnMatrix(int column, org.apache.commons.math3.linear.RealMatrix matrix)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealMatrix copy()">1</method>
			<method name="public double walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor visitor, int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector getColumnVector(int column)">1</method>
			<method name="public double walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor visitor, int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public String toString()">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix power(int p)">1</method>
			<method name="public boolean equals(Object object)">8</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix m)">1</method>
			<method name="public double[] preMultiply(double[] v)">1</method>
			<method name="public double walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor visitor, int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public double walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor visitor)">3</method>
			<method name="public boolean isSquare()">2</method>
			<method name="public abstract void setEntry(int, int, double)">1</method>
			<method name="public abstract int getRowDimension()">1</method>
			<method name="public void setRow(int row, double[] array)">1</method>
			<method name="public double walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor visitor)">3</method>
			<method name="public double getNorm()">1</method>
			<method name="public double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor visitor)">3</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix scalarAdd(double d)">3</method>
			<method name="public int hashCode()">3</method>
			<method name="protected void _init_()">0</method>
			<method name="public double getFrobeniusNorm()">1</method>
			<method name="public double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor visitor, int startRow, int endRow, int startColumn, int endColumn)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.hull.ConvexHullGenerator</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.geometry.hull.ConvexHull generate(java.util.Collection)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.RealVector$2</name>
		<wmc>43</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>78</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>10</ce>
		<npm>42</npm>
		<lcom3>0.2619047619047619</lcom3>
		<loc>253</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3674418604651163</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.8604651162790695</amc>
		<cc>
			<method name="public org.apache.commons.math3.linear.RealVector mapAdd(double d)">1</method>
			<method name="public double getLInfNorm()">1</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public double getL1Norm()">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector mapDivideToSelf(double d)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction function)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector append(org.apache.commons.math3.linear.RealVector w)">1</method>
			<method name="public double dotProduct(org.apache.commons.math3.linear.RealVector w)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector mapMultiply(double d)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector mapDivide(double d)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector copy()">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector ebeDivide(org.apache.commons.math3.linear.RealVector w)">1</method>
			<method name="public double getDistance(org.apache.commons.math3.linear.RealVector w)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector append(double d)">1</method>
			<method name="public int getDimension()">1</method>
			<method name="public double cosine(org.apache.commons.math3.linear.RealVector w)">1</method>
			<method name="public boolean isInfinite()">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector subtract(org.apache.commons.math3.linear.RealVector w)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector map(org.apache.commons.math3.analysis.UnivariateFunction function)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector add(org.apache.commons.math3.linear.RealVector w)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector mapSubtract(double d)">1</method>
			<method name="void _init_(org.apache.commons.math3.linear.RealVector)">0</method>
			<method name="public void set(double value)">1</method>
			<method name="public boolean isNaN()">1</method>
			<method name="public void setSubVector(int index, org.apache.commons.math3.linear.RealVector w)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector ebeMultiply(org.apache.commons.math3.linear.RealVector w)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector combine(double a, double b, org.apache.commons.math3.linear.RealVector y)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector mapAddToSelf(double d)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector combineToSelf(double a, double b, org.apache.commons.math3.linear.RealVector y)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector getSubVector(int index, int n)">1</method>
			<method name="public void unitize()">1</method>
			<method name="public double[] toArray()">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix outerProduct(org.apache.commons.math3.linear.RealVector w)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector mapMultiplyToSelf(double d)">1</method>
			<method name="public double getNorm()">1</method>
			<method name="public double getEntry(int index)">1</method>
			<method name="public void addToEntry(int index, double value)">1</method>
			<method name="public java.util.Iterator sparseIterator()">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector unitVector()">1</method>
			<method name="public double getLInfDistance(org.apache.commons.math3.linear.RealVector w)">1</method>
			<method name="public double getL1Distance(org.apache.commons.math3.linear.RealVector w)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector mapSubtractToSelf(double d)">1</method>
			<method name="public void setEntry(int index, double value)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.RealVector$1</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>9</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>0.5</lcom3>
		<loc>66</loc>
		<dam>0.5</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.4</amc>
		<cc>
			<method name="public org.apache.commons.math3.linear.RealVector$Entry next()">2</method>
			<method name="public boolean hasNext()">2</method>
			<method name="void _init_(org.apache.commons.math3.linear.RealVector, int)">0</method>
			<method name="public void remove()">1</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.fitting.GaussianFitter$1</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>1.0</lcom3>
		<loc>45</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.666666666666666</amc>
		<cc>
			<method name="public transient double[] gradient(double x, double[] p)">1</method>
			<method name="public transient double value(double x, double[] p)">1</method>
			<method name="void _init_(org.apache.commons.math3.optimization.fitting.GaussianFitter)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.enclosing.WelzlEncloser</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>28</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>3</npm>
		<lcom3>0.25</lcom3>
		<loc>218</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.37142857142857144</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>42.2</amc>
		<cc>
			<method name="public void _init_(double tolerance, org.apache.commons.math3.geometry.enclosing.SupportBallGenerator generator)">0</method>
			<method name="public org.apache.commons.math3.geometry.Point selectFarthest(Iterable points, org.apache.commons.math3.geometry.enclosing.EnclosingBall ball)">2</method>
			<method name="public org.apache.commons.math3.geometry.enclosing.EnclosingBall enclose(Iterable points)">3</method>
			<method name="private org.apache.commons.math3.geometry.enclosing.EnclosingBall moveToFrontBall(java.util.List extreme, int nbExtreme, java.util.List support)">5</method>
			<method name="private org.apache.commons.math3.geometry.enclosing.EnclosingBall pivotingBall(Iterable points)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9166666666666666</lcom3>
		<loc>56</loc>
		<dam>0.25</dam>
		<moa>4</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="public static org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew[] values()">1</method>
			<method name="public static org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Skew valueOf(String name)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.Combinations$SingletonIterator</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>5</npm>
		<lcom3>0.375</lcom3>
		<loc>39</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.4</amc>
		<cc>
			<method name="public int[] next()">2</method>
			<method name="public boolean hasNext()">1</method>
			<method name="public void _init_(int[] singleton)">0</method>
			<method name="public void remove()">1</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.moment.GeometricMean</name>
		<wmc>15</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>27</rfc>
		<lcom>15</lcom>
		<ca>4</ca>
		<ce>11</ce>
		<npm>14</npm>
		<lcom3>0.5357142857142857</lcom3>
		<loc>136</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.2</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.933333333333334</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="public long getN()">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic copy()">1</method>
			<method name="public double getResult()">2</method>
			<method name="public void setSumLogImpl(org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic sumLogImpl)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(org.apache.commons.math3.stat.descriptive.moment.GeometricMean original)">0</method>
			<method name="public double evaluate(double[] values, int begin, int length)">1</method>
			<method name="public org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic getSumLogImpl()">1</method>
			<method name="public org.apache.commons.math3.stat.descriptive.moment.GeometricMean copy()">1</method>
			<method name="private void checkEmpty()">1</method>
			<method name="public void _init_(org.apache.commons.math3.stat.descriptive.summary.SumOfLogs sumOfLogs)">0</method>
			<method name="public void increment(double d)">1</method>
			<method name="public static void copy(org.apache.commons.math3.stat.descriptive.moment.GeometricMean source, org.apache.commons.math3.stat.descriptive.moment.GeometricMean dest)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.MathIllegalArgumentException</name>
		<wmc>4</wmc>
		<dit>5</dit>
		<noc>18</noc>
		<cbo>133</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>130</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>31</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.875</mfa>
		<cam>0.5</cam>
		<ic>1</ic>
		<cbm>2</cbm>
		<amc>6.25</amc>
		<cc>
			<method name="public String getMessage()">1</method>
			<method name="public String getLocalizedMessage()">1</method>
			<method name="public org.apache.commons.math3.exception.util.ExceptionContext getContext()">1</method>
			<method name="public transient void _init_(org.apache.commons.math3.exception.util.Localizable pattern, Object[] args)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.integration.MidPointIntegrator</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>18</rfc>
		<lcom>10</lcom>
		<ca>0</ca>
		<ce>9</ce>
		<npm>3</npm>
		<lcom3>1.25</lcom3>
		<loc>163</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.4</amc>
		<cc>
			<method name="private double stage(int n, double previousStageResult, double min, double diffMaxMin)">1</method>
			<method name="public void _init_(double relativeAccuracy, double absoluteAccuracy, int minimalIterationCount, int maximalIterationCount)">0</method>
			<method name="public void _init_()">0</method>
			<method name="protected double doIntegrate()">1</method>
			<method name="public void _init_(int minimalIterationCount, int maximalIterationCount)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.SecondOrderIntegrator</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void integrate(org.apache.commons.math3.ode.SecondOrderDifferentialEquations, double, double[], double[], double, double[], double[])">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.direct.SimplexOptimizer$2</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>42</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.333333333333334</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="public int compare(org.apache.commons.math3.optimization.PointValuePair o1, org.apache.commons.math3.optimization.PointValuePair o2)">2</method>
			<method name="void _init_(org.apache.commons.math3.optimization.direct.SimplexOptimizer, boolean)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.NumberIsTooLargeException</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>63</cbo>
		<rfc>5</rfc>
		<lcom>2</lcom>
		<ca>60</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>41</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.5</amc>
		<cc>
			<method name="public boolean getBoundIsAllowed()">1</method>
			<method name="public void _init_(org.apache.commons.math3.exception.util.Localizable specific, Number wrong, Number max, boolean boundIsAllowed)">0</method>
			<method name="public Number getMax()">1</method>
			<method name="public void _init_(Number wrong, Number max, boolean boundIsAllowed)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.genetics.Fitness</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double fitness()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.Well512a</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>9</rfc>
		<lcom>10</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>1.25</lcom3>
		<loc>142</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.45</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.4</amc>
		<cc>
			<method name="protected int next(int bits)">1</method>
			<method name="public void _init_(long seed)">0</method>
			<method name="public void _init_(int seed)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(int[] seed)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.NoBracketingException</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>24</cbo>
		<rfc>8</rfc>
		<lcom>7</lcom>
		<ca>21</ca>
		<ce>3</ce>
		<npm>6</npm>
		<lcom3>0.72</lcom3>
		<loc>75</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4166666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.666666666666666</amc>
		<cc>
			<method name="public double getLo()">1</method>
			<method name="public double getHi()">1</method>
			<method name="public double getFLo()">1</method>
			<method name="public transient void _init_(org.apache.commons.math3.exception.util.Localizable specific, double lo, double hi, double fLo, double fHi, Object[] args)">0</method>
			<method name="public double getFHi()">1</method>
			<method name="public void _init_(double lo, double hi, double fLo, double fHi)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$JacobiKey</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>46</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>13.666666666666666</amc>
		<cc>
			<method name="public boolean equals(Object key)">5</method>
			<method name="public void _init_(int v, int w)">0</method>
			<method name="public int hashCode()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.nonstiff.MidpointIntegrator</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>47</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(double step)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics</name>
		<wmc>17</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>38</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>5</ce>
		<npm>17</npm>
		<lcom3>0.6875</lcom3>
		<loc>414</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.37254901960784315</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>23.176470588235293</amc>
		<cc>
			<method name="public long getN()">1</method>
			<method name="public double getMax()">1</method>
			<method name="public double getGeometricMean()">1</method>
			<method name="public void _init_(org.apache.commons.math3.stat.descriptive.SummaryStatistics prototypeStatistics, org.apache.commons.math3.stat.descriptive.SummaryStatistics initialStatistics)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public double getSecondMoment()">1</method>
			<method name="public double getVariance()">1</method>
			<method name="public double getStandardDeviation()">1</method>
			<method name="public double getMean()">1</method>
			<method name="public org.apache.commons.math3.stat.descriptive.SummaryStatistics createContributingStatistics()">1</method>
			<method name="public org.apache.commons.math3.stat.descriptive.StatisticalSummary getSummary()">1</method>
			<method name="public double getMin()">1</method>
			<method name="public void _init_(org.apache.commons.math3.stat.descriptive.SummaryStatistics prototypeStatistics)">0</method>
			<method name="public static org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues aggregate(java.util.Collection statistics)">10</method>
			<method name="public double getSumsq()">1</method>
			<method name="public double getSumOfLogs()">1</method>
			<method name="public double getSum()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>2</noc>
		<cbo>7</cbo>
		<rfc>9</rfc>
		<lcom>2</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>4</npm>
		<lcom3>0.625</lcom3>
		<loc>52</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.45</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.0</amc>
		<cc>
			<method name="public double[][] sample(int sampleSize)">3</method>
			<method name="public int getDimension()">1</method>
			<method name="public abstract double[] sample()">1</method>
			<method name="protected void _init_(org.apache.commons.math3.random.RandomGenerator rng, int n)">0</method>
			<method name="public void reseedRandomGenerator(long seed)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.AbstractConvergenceChecker</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>4</noc>
		<cbo>6</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>4</ca>
		<ce>2</ce>
		<npm>5</npm>
		<lcom3>0.7</lcom3>
		<loc>43</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.5</amc>
		<cc>
			<method name="public double getAbsoluteThreshold()">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(double relativeThreshold, double absoluteThreshold)">0</method>
			<method name="public abstract boolean converged(int, Object, Object)">1</method>
			<method name="public double getRelativeThreshold()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.threed.SubPlane</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>19</cbo>
		<rfc>29</rfc>
		<lcom>6</lcom>
		<ca>3</ca>
		<ce>17</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>252</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>62.0</amc>
		<cc>
			<method name="public org.apache.commons.math3.geometry.partitioning.Side side(org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane)">5</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane, org.apache.commons.math3.geometry.partitioning.Region remainingRegion)">0</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane)">6</method>
			<method name="protected org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane, org.apache.commons.math3.geometry.partitioning.Region remainingRegion)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunctionGradient</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>12</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.5</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.MultivariateVectorFunction getObjectiveFunctionGradient()">1</method>
			<method name="public void _init_(org.apache.commons.math3.analysis.MultivariateVectorFunction g)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.KthSelector</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>11</rfc>
		<lcom>0</lcom>
		<ca>5</ca>
		<ce>5</ce>
		<npm>4</npm>
		<lcom3>0.9166666666666667</lcom3>
		<loc>219</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.44</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>42.2</amc>
		<cc>
			<method name="public double select(double[] work, int[] pivotsHeap, int k)">12</method>
			<method name="public void _init_()">0</method>
			<method name="private int partition(double[] work, int begin, int end, int pivot)">9</method>
			<method name="public void _init_(org.apache.commons.math3.util.PivotingStrategyInterface pivotingStrategy)">0</method>
			<method name="public org.apache.commons.math3.util.PivotingStrategyInterface getPivotingStrategy()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.fitting.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.SimplePointChecker</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>12</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>4</ce>
		<npm>4</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>99</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.55</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>23.25</amc>
		<cc>
			<method name="public volatile boolean converged(int x0, Object x1, Object x2)">1</method>
			<method name="public boolean converged(int iteration, org.apache.commons.math3.util.Pair previous, org.apache.commons.math3.util.Pair current)">6</method>
			<method name="public void _init_(double relativeThreshold, double absoluteThreshold, int maxIter)">0</method>
			<method name="public void _init_(double relativeThreshold, double absoluteThreshold)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.direct.SimplexOptimizer$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>14</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.5</amc>
		<cc>
			<method name="void _init_(org.apache.commons.math3.optimization.direct.SimplexOptimizer)">0</method>
			<method name="public double value(double[] point)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.inference.OneWayAnova$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>18</cbo>
		<rfc>34</rfc>
		<lcom>8</lcom>
		<ca>1</ca>
		<ce>17</ce>
		<npm>4</npm>
		<lcom3>0.25</lcom3>
		<loc>266</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>52.0</amc>
		<cc>
			<method name="private void checkParameters()">3</method>
			<method name="public void _init_(boolean useLU, org.apache.commons.math3.optim.ConvergenceChecker checker)">0</method>
			<method name="public volatile Object doOptimize()">1</method>
			<method name="public org.apache.commons.math3.optim.PointVectorValuePair doOptimize()">11</method>
			<method name="public void _init_(org.apache.commons.math3.optim.ConvergenceChecker checker)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver</name>
		<wmc>9</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>32</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>12</ce>
		<npm>7</npm>
		<lcom3>0.8541666666666667</lcom3>
		<loc>681</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.48148148148148145</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>74.0</amc>
		<cc>
			<method name="protected double doSolve()">1</method>
			<method name="public void _init_(double absoluteAccuracy, int maximalOrder)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public double solve(int maxEval, org.apache.commons.math3.analysis.UnivariateFunction f, double min, double max, org.apache.commons.math3.analysis.solvers.AllowedSolution allowedSolution)">1</method>
			<method name="private double guessX(double targetY, double[] x, double[] y, int start, int end)">4</method>
			<method name="public void _init_(double relativeAccuracy, double absoluteAccuracy, double functionValueAccuracy, int maximalOrder)">0</method>
			<method name="public double solve(int maxEval, org.apache.commons.math3.analysis.UnivariateFunction f, double min, double max, double startValue, org.apache.commons.math3.analysis.solvers.AllowedSolution allowedSolution)">1</method>
			<method name="public void _init_(double relativeAccuracy, double absoluteAccuracy, int maximalOrder)">0</method>
			<method name="public int getMaximalOrder()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>28</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.5</amc>
		<cc>
			<method name="public double value(double x)">1</method>
			<method name="void _init_(org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator, org.apache.commons.math3.analysis.UnivariateFunction, double)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>274</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>67.25</amc>
		<cc>
			<method name="protected org.apache.commons.math3.ode.sampling.StepInterpolator doCopy()">1</method>
			<method name="protected void computeInterpolatedStateAndDerivatives(double theta, double oneMinusThetaH)">4</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolator interpolator)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.nonstiff.GillStepInterpolator</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>8</rfc>
		<lcom>8</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.9166666666666667</lcom3>
		<loc>315</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>61.4</amc>
		<cc>
			<method name="protected org.apache.commons.math3.ode.sampling.StepInterpolator doCopy()">1</method>
			<method name="public void _init_(org.apache.commons.math3.ode.nonstiff.GillStepInterpolator interpolator)">0</method>
			<method name="protected void computeInterpolatedStateAndDerivatives(double theta, double oneMinusThetaH)">4</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.GoalType</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>25</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>24</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.888888888888889</lcom3>
		<loc>45</loc>
		<dam>0.3333333333333333</dam>
		<moa>3</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>9.5</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static org.apache.commons.math3.optimization.GoalType valueOf(String name)">1</method>
			<method name="public static org.apache.commons.math3.optimization.GoalType[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.Embedding</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>5</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.geometry.Point toSpace(org.apache.commons.math3.geometry.Point)">1</method>
			<method name="public abstract org.apache.commons.math3.geometry.Point toSubSpace(org.apache.commons.math3.geometry.Point)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.twod.Line$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.FunctionUtils$18$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>83</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>40.0</amc>
		<cc>
			<method name="void _init_(org.apache.commons.math3.analysis.FunctionUtils$18)">0</method>
			<method name="public double[][] value(double[] x)">4</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.regression.MillerUpdatingRegression</name>
		<wmc>24</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>37</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>8</ce>
		<npm>13</npm>
		<lcom3>0.5308924485125859</lcom3>
		<loc>3083</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.27976190476190477</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>126.66666666666667</amc>
		<cc>
			<method name="public long getN()">1</method>
			<method name="public void addObservation(double[] x, double y)">1</method>
			<method name="public void clear()">2</method>
			<method name="private double smartAdd(double a, double b)">4</method>
			<method name="public org.apache.commons.math3.stat.regression.RegressionResults regress(int numberOfRegressors)">1</method>
			<method name="private double[] cov(int nreq)">11</method>
			<method name="private void include(double[] x, double wi, double yi)">8</method>
			<method name="private void tolset()">4</method>
			<method name="public int[] getOrderOfRegressors()">1</method>
			<method name="private int reorderRegressors(int[] list, int pos1)">8</method>
			<method name="private void ss()">2</method>
			<method name="private void vmove(int from, int to)">17</method>
			<method name="private void _init_()">0</method>
			<method name="public void _init_(int numberOfVariables, boolean includeConstant)">0</method>
			<method name="public double[] getPartialCorrelations(int in)">13</method>
			<method name="public boolean hasIntercept()">1</method>
			<method name="private void inverse(double[] rinv, int nreq)">5</method>
			<method name="public void addObservations(double[][] x, double[] y)">1</method>
			<method name="public org.apache.commons.math3.stat.regression.RegressionResults regress(int[] variablesToInclude)">1</method>
			<method name="public void _init_(int numberOfVariables, boolean includeConstant, double errorTolerance)">0</method>
			<method name="public double getDiagonalOfHatMatrix(double[] row_data)">6</method>
			<method name="private void singcheck()">8</method>
			<method name="public org.apache.commons.math3.stat.regression.RegressionResults regress()">1</method>
			<method name="private double[] regcf(int nreq)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.utilities.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator$3</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>17</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>2</npm>
		<lcom3>0.25</lcom3>
		<loc>162</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>52.333333333333336</amc>
		<cc>
			<method name="public double[][] value(double x)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure[][] value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="void _init_(org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator, org.apache.commons.math3.analysis.UnivariateMatrixFunction)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.RandomGeneratorFactory$1</name>
		<wmc>12</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>25</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>11</npm>
		<lcom3>0.0</lcom3>
		<loc>78</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.25</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.416666666666667</amc>
		<cc>
			<method name="public int nextInt(int n)">2</method>
			<method name="void _init_(java.util.Random)">0</method>
			<method name="public void setSeed(int seed)">1</method>
			<method name="public boolean nextBoolean()">1</method>
			<method name="public void nextBytes(byte[] bytes)">1</method>
			<method name="public void setSeed(int[] seed)">1</method>
			<method name="public double nextGaussian()">1</method>
			<method name="public long nextLong()">1</method>
			<method name="public int nextInt()">1</method>
			<method name="public double nextDouble()">1</method>
			<method name="public float nextFloat()">1</method>
			<method name="public void setSeed(long seed)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.AbstractOptimizationProblem$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>17</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>2</npm>
		<lcom3>0.25</lcom3>
		<loc>87</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>27.333333333333332</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="void _init_(org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator, org.apache.commons.math3.analysis.UnivariateFunction)">0</method>
			<method name="public double value(double x)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator$2</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>17</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>2</npm>
		<lcom3>0.25</lcom3>
		<loc>126</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>40.333333333333336</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="void _init_(org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator, org.apache.commons.math3.analysis.UnivariateVectorFunction)">0</method>
			<method name="public double[] value(double x)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.Combinations</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>14</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>5</npm>
		<lcom3>0.33333333333333337</lcom3>
		<loc>77</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.333333333333334</amc>
		<cc>
			<method name="public java.util.Iterator iterator()">5</method>
			<method name="public void _init_(int n, int k)">0</method>
			<method name="public int getN()">1</method>
			<method name="public java.util.Comparator comparator()">1</method>
			<method name="public int getK()">1</method>
			<method name="private void _init_(int n, int k, org.apache.commons.math3.util.Combinations$IterationOrder iterationOrder)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fraction.BigFractionField$LazyHolder</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>0.5</lcom3>
		<loc>15</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.6666666666666665</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static org.apache.commons.math3.fraction.BigFractionField access$000()">1</method>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.PolynomialCurveFitter</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>28</rfc>
		<lcom>3</lcom>
		<ca>0</ca>
		<ce>13</ce>
		<npm>3</npm>
		<lcom3>0.4</lcom3>
		<loc>119</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.333333333333332</amc>
		<cc>
			<method name="public static org.apache.commons.math3.fitting.PolynomialCurveFitter create(int degree)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(double[] initialGuess, int maxIter)">0</method>
			<method name="public org.apache.commons.math3.fitting.PolynomialCurveFitter withStartPoint(double[] newStart)">1</method>
			<method name="public org.apache.commons.math3.fitting.PolynomialCurveFitter withMaxIterations(int newMaxIter)">1</method>
			<method name="protected org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem getProblem(java.util.Collection observations)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.fitting.PolynomialFitter</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>9</rfc>
		<lcom>4</lcom>
		<ca>0</ca>
		<ce>4</ce>
		<npm>5</npm>
		<lcom3>0.5</lcom3>
		<loc>46</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.55</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.0</amc>
		<cc>
			<method name="public double[] fit(int maxEval, double[] guess)">1</method>
			<method name="public void _init_(int degree, org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer optimizer)">0</method>
			<method name="public void _init_(org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer optimizer)">0</method>
			<method name="public double[] fit(double[] guess)">1</method>
			<method name="public double[] fit()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.MultistepIntegrator$InitializationCompletedMarkerException</name>
		<wmc>1</wmc>
		<dit>4</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>1.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>13</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>7</npm>
		<lcom3>0.625</lcom3>
		<loc>87</loc>
		<dam>1.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.39285714285714285</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.857142857142858</amc>
		<cc>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex split(org.apache.commons.math3.geometry.euclidean.twod.Line splitLine)">1</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.BSPTree getNode()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex getStart()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex getEnd()">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex start, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex end, org.apache.commons.math3.geometry.euclidean.twod.Line line)">0</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.Line getLine()">1</method>
			<method name="public void setNode(org.apache.commons.math3.geometry.partitioning.BSPTree node)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>12</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>5</npm>
		<lcom3>0.5</lcom3>
		<loc>81</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4166666666666667</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>12.166666666666666</amc>
		<cc>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="public int compareTo(org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization$DataRow other)">1</method>
			<method name="public int hashCode()">1</method>
			<method name="void _init_(double[] data)">0</method>
			<method name="public double[] getRow()">1</method>
			<method name="public boolean equals(Object other)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$LocalLeastSquaresProblem</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>13</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>11</ce>
		<npm>4</npm>
		<lcom3>0.625</lcom3>
		<loc>79</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.36666666666666664</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.0</amc>
		<cc>
			<method name="public org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation evaluate(org.apache.commons.math3.linear.RealVector point)">2</method>
			<method name="public org.apache.commons.math3.linear.RealVector getStart()">2</method>
			<method name="public int getParameterSize()">1</method>
			<method name="void _init_(org.apache.commons.math3.fitting.leastsquares.MultivariateJacobianFunction model, org.apache.commons.math3.linear.RealVector target, org.apache.commons.math3.linear.RealVector start, org.apache.commons.math3.optim.ConvergenceChecker checker, int maxEvaluations, int maxIterations, boolean lazyEvaluation)">0</method>
			<method name="public int getObservationSize()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.ranking.NaturalRanking$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>82</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>79.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.nonstiff.GillIntegrator</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>122</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>58.5</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(double step)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.QRDecomposition$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.SymmLQ</name>
		<wmc>12</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>16</cbo>
		<rfc>37</rfc>
		<lcom>54</lcom>
		<ca>0</ca>
		<ce>16</ce>
		<npm>12</npm>
		<lcom3>0.7922077922077922</lcom3>
		<loc>273</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.166666666666668</amc>
		<cc>
			<method name="public org.apache.commons.math3.linear.RealVector solveInPlace(org.apache.commons.math3.linear.RealLinearOperator a, org.apache.commons.math3.linear.RealLinearOperator m, org.apache.commons.math3.linear.RealVector b, org.apache.commons.math3.linear.RealVector x, boolean goodb, double shift)">1</method>
			<method name="public void _init_(int maxIterations, double delta, boolean check)">0</method>
			<method name="public org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealLinearOperator a, org.apache.commons.math3.linear.RealVector b, boolean goodb, double shift)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector solveInPlace(org.apache.commons.math3.linear.RealLinearOperator a, org.apache.commons.math3.linear.RealVector b, org.apache.commons.math3.linear.RealVector x)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealLinearOperator a, org.apache.commons.math3.linear.RealLinearOperator m, org.apache.commons.math3.linear.RealVector b, org.apache.commons.math3.linear.RealVector x)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealLinearOperator a, org.apache.commons.math3.linear.RealVector b)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealLinearOperator a, org.apache.commons.math3.linear.RealVector b, org.apache.commons.math3.linear.RealVector x)">1</method>
			<method name="public final boolean getCheck()">1</method>
			<method name="public void _init_(org.apache.commons.math3.util.IterationManager manager, double delta, boolean check)">0</method>
			<method name="public org.apache.commons.math3.linear.RealVector solveInPlace(org.apache.commons.math3.linear.RealLinearOperator a, org.apache.commons.math3.linear.RealLinearOperator m, org.apache.commons.math3.linear.RealVector b, org.apache.commons.math3.linear.RealVector x)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealLinearOperator a, org.apache.commons.math3.linear.RealLinearOperator m, org.apache.commons.math3.linear.RealVector b, boolean goodb, double shift)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealLinearOperator a, org.apache.commons.math3.linear.RealLinearOperator m, org.apache.commons.math3.linear.RealVector b)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator</name>
		<wmc>15</wmc>
		<dit>1</dit>
		<noc>6</noc>
		<cbo>17</cbo>
		<rfc>30</rfc>
		<lcom>73</lcom>
		<ca>6</ca>
		<ce>11</ce>
		<npm>7</npm>
		<lcom3>0.8630952380952381</lcom3>
		<loc>164</loc>
		<dam>0.6666666666666666</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.43333333333333335</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.133333333333333</amc>
		<cc>
			<method name="public double integrate(int maxEval, org.apache.commons.math3.analysis.UnivariateFunction f, double lower, double upper)">1</method>
			<method name="protected void _init_(double relativeAccuracy, double absoluteAccuracy, int minimalIterationCount, int maximalIterationCount)">0</method>
			<method name="public double getRelativeAccuracy()">1</method>
			<method name="protected void _init_(double relativeAccuracy, double absoluteAccuracy)">0</method>
			<method name="protected double getMax()">1</method>
			<method name="public int getMaximalIterationCount()">1</method>
			<method name="public int getMinimalIterationCount()">1</method>
			<method name="protected double computeObjectiveValue(double point)">1</method>
			<method name="protected abstract double doIntegrate()">1</method>
			<method name="protected double getMin()">1</method>
			<method name="public int getEvaluations()">1</method>
			<method name="public int getIterations()">1</method>
			<method name="protected void setup(int maxEval, org.apache.commons.math3.analysis.UnivariateFunction f, double lower, double upper)">1</method>
			<method name="public double getAbsoluteAccuracy()">1</method>
			<method name="protected void _init_(int minimalIterationCount, int maximalIterationCount)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.ZeroException</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>21</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>18</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>15</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public transient void _init_(org.apache.commons.math3.exception.util.Localizable specific, Object[] arguments)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.solvers.MullerSolver</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>22</rfc>
		<lcom>10</lcom>
		<ca>0</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>1.25</lcom3>
		<loc>337</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>66.2</amc>
		<cc>
			<method name="protected double doSolve()">1</method>
			<method name="public void _init_(double absoluteAccuracy)">0</method>
			<method name="private double solve(double min, double max, double fMin, double fMax)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(double relativeAccuracy, double absoluteAccuracy)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.UncorrelatedRandomVectorGenerator</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>8</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>84</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.0</amc>
		<cc>
			<method name="public void _init_(double[] mean, double[] standardDeviation, org.apache.commons.math3.random.NormalizedRandomGenerator generator)">0</method>
			<method name="public double[] nextVector()">2</method>
			<method name="public void _init_(int dimension, org.apache.commons.math3.random.NormalizedRandomGenerator generator)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.PointVectorValuePair$DataTransferObject</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.6666666666666667</lcom3>
		<loc>27</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.0</amc>
		<cc>
			<method name="private Object readResolve()">1</method>
			<method name="public void _init_(double[] point, double[] value)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.EmpiricalDistribution$ArrayDataAdapter</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>12</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>72</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.333333333333332</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.random.EmpiricalDistribution, double[] in)">0</method>
			<method name="public void computeStats()">1</method>
			<method name="public void computeBinStats()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>5</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9166666666666666</lcom3>
		<loc>56</loc>
		<dam>0.25</dam>
		<moa>4</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method valueOf(String name)">1</method>
			<method name="public static org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.spherical.twod.SubCircle</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>17</rfc>
		<lcom>6</lcom>
		<ca>3</ca>
		<ce>11</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>127</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>30.75</amc>
		<cc>
			<method name="public org.apache.commons.math3.geometry.partitioning.Side side(org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane)">3</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane, org.apache.commons.math3.geometry.partitioning.Region remainingRegion)">0</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane)">5</method>
			<method name="protected org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane, org.apache.commons.math3.geometry.partitioning.Region remainingRegion)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.inference.AlternativeHypothesis</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9166666666666666</lcom3>
		<loc>56</loc>
		<dam>0.25</dam>
		<moa>4</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="public static org.apache.commons.math3.stat.inference.AlternativeHypothesis[] values()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static org.apache.commons.math3.stat.inference.AlternativeHypothesis valueOf(String name)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.Incrementor$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>11</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.5</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public void trigger(int max)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.HaltonSequenceGenerator</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>13</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>7</ce>
		<npm>5</npm>
		<lcom3>0.5277777777777778</lcom3>
		<loc>506</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6111111111111112</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>70.42857142857143</amc>
		<cc>
			<method name="public double[] skipTo(int index)">1</method>
			<method name="public double[] nextVector()">3</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(int dimension, int[] bases, int[] weights)">0</method>
			<method name="public void _init_(int dimension)">0</method>
			<method name="protected int scramble(int i, int j, int b, int digit)">2</method>
			<method name="public int getNextIndex()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.direct.CMAESOptimizer$DoubleIndex</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>9</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>4</npm>
		<lcom3>0.5</lcom3>
		<loc>67</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.36666666666666664</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>9.833333333333334</amc>
		<cc>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="public int compareTo(org.apache.commons.math3.optimization.direct.CMAESOptimizer$DoubleIndex o)">1</method>
			<method name="public int hashCode()">1</method>
			<method name="void _init_(double value, int index)">0</method>
			<method name="static int access$100(org.apache.commons.math3.optimization.direct.CMAESOptimizer$DoubleIndex x0)">1</method>
			<method name="public boolean equals(Object other)">4</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.events.FilterType</name>
		<wmc>7</wmc>
		<dit>2</dit>
		<noc>2</noc>
		<cbo>5</cbo>
		<rfc>12</rfc>
		<lcom>19</lcom>
		<ca>3</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>0.9444444444444445</lcom3>
		<loc>53</loc>
		<dam>0.3333333333333333</dam>
		<moa>3</moa>
		<mfa>0.7647058823529411</mfa>
		<cam>0.30952380952380953</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>6.142857142857143</amc>
		<cc>
			<method name="protected abstract org.apache.commons.math3.ode.events.Transformer selectTransformer(org.apache.commons.math3.ode.events.Transformer, double, boolean)">1</method>
			<method name="protected abstract boolean getTriggeredIncreasing()">1</method>
			<method name="public static org.apache.commons.math3.ode.events.FilterType[] values()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="void _init_(String x0, int x1, org.apache.commons.math3.ode.events.FilterType$1 x2)">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static org.apache.commons.math3.ode.events.FilterType valueOf(String name)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.interval.IntervalUtils</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>19</rfc>
		<lcom>13</lcom>
		<ca>4</ca>
		<ce>12</ce>
		<npm>4</npm>
		<lcom3>0.8333333333333334</lcom3>
		<loc>106</loc>
		<dam>1.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.6111111111111112</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.571428571428571</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public static org.apache.commons.math3.stat.interval.ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="static void checkParameters(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)">6</method>
			<method name="public static org.apache.commons.math3.stat.interval.ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)">1</method>
			<method name="public static org.apache.commons.math3.stat.interval.ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)">1</method>
			<method name="public static org.apache.commons.math3.stat.interval.ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.ChiSquaredDistribution</name>
		<wmc>16</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>23</rfc>
		<lcom>98</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>15</npm>
		<lcom3>0.85</lcom3>
		<loc>97</loc>
		<dam>0.75</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5208333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.8125</amc>
		<cc>
			<method name="public void _init_(double degreesOfFreedom, double inverseCumAccuracy)">0</method>
			<method name="protected double getSolverAbsoluteAccuracy()">1</method>
			<method name="public double density(double x)">1</method>
			<method name="public boolean isSupportConnected()">1</method>
			<method name="public boolean isSupportUpperBoundInclusive()">1</method>
			<method name="public double cumulativeProbability(double x)">1</method>
			<method name="public void _init_(double degreesOfFreedom)">0</method>
			<method name="public boolean isSupportLowerBoundInclusive()">1</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, double degreesOfFreedom, double inverseCumAccuracy)">0</method>
			<method name="public double getSupportLowerBound()">1</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, double degreesOfFreedom)">0</method>
			<method name="public double getDegreesOfFreedom()">1</method>
			<method name="public double getNumericalMean()">1</method>
			<method name="public double getNumericalVariance()">1</method>
			<method name="public double getSupportUpperBound()">1</method>
			<method name="public double logDensity(double x)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.NoDataException</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>41</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>38</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>13</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.exception.util.Localizable specific)">0</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>32</rfc>
		<lcom>12</lcom>
		<ca>1</ca>
		<ce>13</ce>
		<npm>5</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>425</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.35714285714285715</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>51.75</amc>
		<cc>
			<method name="private void _init_(int nSteps)">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer getInstance(int nSteps)">2</method>
			<method name="public org.apache.commons.math3.linear.Array2DRowRealMatrix updateHighOrderDerivativesPhase1(org.apache.commons.math3.linear.Array2DRowRealMatrix highOrder)">1</method>
			<method name="public int getNSteps()">1</method>
			<method name="public void updateHighOrderDerivativesPhase2(double[] start, double[] end, org.apache.commons.math3.linear.Array2DRowRealMatrix highOrder)">3</method>
			<method name="private org.apache.commons.math3.linear.FieldMatrix buildP(int nSteps)">3</method>
			<method name="public org.apache.commons.math3.linear.Array2DRowRealMatrix initializeHighOrderDerivatives(double h, double[] t, double[][] y, double[][] yDot)">4</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.GaussianCurveFitter$ParameterGuesser</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>24</rfc>
		<lcom>26</lcom>
		<ca>2</ca>
		<ce>9</ce>
		<npm>2</npm>
		<lcom3>0.8571428571428571</lcom3>
		<loc>356</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.475</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>43.125</amc>
		<cc>
			<method name="private int findMaxY(org.apache.commons.math3.fitting.WeightedObservedPoint[] points)">3</method>
			<method name="public double[] guess()">1</method>
			<method name="private double[] basicGuess(org.apache.commons.math3.fitting.WeightedObservedPoint[] points)">1</method>
			<method name="private org.apache.commons.math3.fitting.WeightedObservedPoint[] getInterpolationPointsForY(org.apache.commons.math3.fitting.WeightedObservedPoint[] points, int startIdx, int idxStep, double y)">1</method>
			<method name="private java.util.List sortObservations(java.util.Collection unsorted)">1</method>
			<method name="public void _init_(java.util.Collection observations)">0</method>
			<method name="private double interpolateXAtY(org.apache.commons.math3.fitting.WeightedObservedPoint[] points, int startIdx, int idxStep, double y)">1</method>
			<method name="private boolean isBetween(double value, double boundary1, double boundary2)">5</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType$9</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>48</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>23.0</amc>
		<cc>
			<method name="void _init_(String, int, String x0)">0</method>
			<method name="protected double index(double p, int length)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.StepFunction</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>6</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>82</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>39.0</amc>
		<cc>
			<method name="public void _init_(double[] x, double[] y)">0</method>
			<method name="public double value(double x)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType$5</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>34</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.0</amc>
		<cc>
			<method name="void _init_(String, int, String x0)">0</method>
			<method name="protected double index(double p, int length)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>14</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>2</npm>
		<lcom3>0.7</lcom3>
		<loc>18066</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3611.2</amc>
		<cc>
			<method name="private int searchIndex(double c, double[] val)">4</method>
			<method name="public void _init_(double[] x, double[] y, double[] z, double[][][] f, double[][][] dFdX, double[][][] dFdY, double[][][] dFdZ, double[][][] d2FdXdY, double[][][] d2FdXdZ, double[][][] d2FdYdZ, double[][][] d3FdXdYdZ)">0</method>
			<method name="private double[] computeSplineCoefficients(double[] beta)">3</method>
			<method name="static void _clinit_()">0</method>
			<method name="public double value(double x, double y, double z)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType$6</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>42</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.0</amc>
		<cc>
			<method name="void _init_(String, int, String x0)">0</method>
			<method name="protected double index(double p, int length)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType$7</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>46</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.0</amc>
		<cc>
			<method name="void _init_(String, int, String x0)">0</method>
			<method name="protected double index(double p, int length)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.NotStrictlyPositiveException</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>97</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>95</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>16</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.5</amc>
		<cc>
			<method name="public void _init_(Number value)">0</method>
			<method name="public void _init_(org.apache.commons.math3.exception.util.Localizable specific, Number value)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.distance.EarthMoversDistance</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>37</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public double compute(double[] a, double[] b)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType$8</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>35</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.5</amc>
		<cc>
			<method name="void _init_(String, int, String x0)">0</method>
			<method name="protected double index(double p, int length)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.ContinuedFraction</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>2</noc>
		<cbo>10</cbo>
		<rfc>16</rfc>
		<lcom>21</lcom>
		<ca>4</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>1.1666666666666667</lcom3>
		<loc>167</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8095238095238095</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.714285714285715</amc>
		<cc>
			<method name="public double evaluate(double x)">1</method>
			<method name="protected abstract double getB(int, double)">1</method>
			<method name="protected abstract double getA(int, double)">1</method>
			<method name="protected void _init_()">0</method>
			<method name="public double evaluate(double x, double epsilon)">1</method>
			<method name="public double evaluate(double x, double epsilon, int maxIterations)">1</method>
			<method name="public double evaluate(double x, int maxIterations)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType$1</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>33</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.5</amc>
		<cc>
			<method name="void _init_(String, int, String x0)">0</method>
			<method name="protected double index(double p, int length)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType$2</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>36</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5714285714285714</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.0</amc>
		<cc>
			<method name="void _init_(String, int, String x0)">0</method>
			<method name="protected double index(double p, int length)">2</method>
			<method name="protected double estimate(double[] values, int[] pivotsHeap, double pos, int length, org.apache.commons.math3.util.KthSelector kthSelector)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolver</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>14</rfc>
		<lcom>10</lcom>
		<ca>0</ca>
		<ce>8</ce>
		<npm>4</npm>
		<lcom3>1.25</lcom3>
		<loc>68</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.48</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.4</amc>
		<cc>
			<method name="protected double doSolve()">1</method>
			<method name="public void _init_(double absoluteAccuracy)">0</method>
			<method name="public double solve(int maxEval, org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction f, double min, double max)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public volatile double solve(int x0, org.apache.commons.math3.analysis.UnivariateFunction x1, double x2, double x3)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType$3</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>8</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>62</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5714285714285714</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.666666666666668</amc>
		<cc>
			<method name="void _init_(String, int, String x0)">0</method>
			<method name="protected double index(double p, int length)">3</method>
			<method name="protected double estimate(double[] values, int[] pivotsHeap, double pos, int length, org.apache.commons.math3.util.KthSelector kthSelector)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.PascalDistribution</name>
		<wmc>12</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>24</rfc>
		<lcom>40</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>12</npm>
		<lcom3>0.7090909090909091</lcom3>
		<loc>197</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4166666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.0</amc>
		<cc>
			<method name="public int getNumberOfSuccesses()">1</method>
			<method name="public void _init_(int r, double p)">0</method>
			<method name="public double logProbability(int x)">2</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, int r, double p)">0</method>
			<method name="public boolean isSupportConnected()">1</method>
			<method name="public int getSupportUpperBound()">1</method>
			<method name="public double getNumericalVariance()">1</method>
			<method name="public double getNumericalMean()">1</method>
			<method name="public double cumulativeProbability(int x)">2</method>
			<method name="public double getProbabilityOfSuccess()">1</method>
			<method name="public double probability(int x)">2</method>
			<method name="public int getSupportLowerBound()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.rank.Percentile$EstimationType$4</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>26</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="void _init_(String, int, String x0)">0</method>
			<method name="protected double index(double p, int length)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.threed.Segment</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>28</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.25</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.threed.Vector3D start, org.apache.commons.math3.geometry.euclidean.threed.Vector3D end, org.apache.commons.math3.geometry.euclidean.threed.Line line)">0</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getEnd()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getStart()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Line getLine()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.OpenIntToFieldHashMap$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$LocalLeastSquaresProblem$LazyUnweightedEvaluation</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>11</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>3</npm>
		<lcom3>0.25</lcom3>
		<loc>49</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.2</amc>
		<cc>
			<method name="public org.apache.commons.math3.linear.RealVector getResiduals()">1</method>
			<method name="void _init_(org.apache.commons.math3.fitting.leastsquares.MultivariateJacobianFunction x0, org.apache.commons.math3.linear.RealVector x1, org.apache.commons.math3.linear.RealVector x2, org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$1 x3)">0</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getJacobian()">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector getPoint()">1</method>
			<method name="private void _init_(org.apache.commons.math3.fitting.leastsquares.MultivariateJacobianFunction model, org.apache.commons.math3.linear.RealVector target, org.apache.commons.math3.linear.RealVector point)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.spherical.twod.PropertiesComputer</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>35</rfc>
		<lcom>22</lcom>
		<ca>1</ca>
		<ce>11</ce>
		<npm>7</npm>
		<lcom3>0.78125</lcom3>
		<loc>215</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4166666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.444444444444443</amc>
		<cc>
			<method name="public void visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree node)">1</method>
			<method name="private org.apache.commons.math3.geometry.euclidean.threed.Vector3D convexCellBarycenter(org.apache.commons.math3.geometry.spherical.twod.Vertex start)">3</method>
			<method name="private double convexCellArea(org.apache.commons.math3.geometry.spherical.twod.Vertex start)">4</method>
			<method name="public void visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree node)">3</method>
			<method name="public void _init_(double tolerance)">0</method>
			<method name="public java.util.List getConvexCellsInsidePoints()">1</method>
			<method name="public org.apache.commons.math3.geometry.spherical.twod.S2Point getBarycenter()">2</method>
			<method name="public double getArea()">1</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree node)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Sigmoid$Parametric</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>9</rfc>
		<lcom>6</lcom>
		<ca>0</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>61</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.25</amc>
		<cc>
			<method name="public transient double value(double x, double[] param)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public transient double[] gradient(double x, double[] param)">1</method>
			<method name="private void validateParameters(double[] param)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.integration.gauss.HermiteRuleFactory</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>10</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>339</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>167.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="protected org.apache.commons.math3.util.Pair computeRule(int numberOfPoints)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.genetics.PermutationChromosome</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract java.util.List decode(java.util.List)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Add</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public double value(double x, double y)">1</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>6</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.optimization.PointVectorValuePair optimize(int, org.apache.commons.math3.analysis.MultivariateVectorFunction, double[], double[], double[])">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.GaussianCurveFitter$ParameterGuesser$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>1.0</lcom3>
		<loc>81</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>25.666666666666668</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="public int compare(org.apache.commons.math3.fitting.WeightedObservedPoint p1, org.apache.commons.math3.fitting.WeightedObservedPoint p2)">11</method>
			<method name="void _init_(org.apache.commons.math3.fitting.GaussianCurveFitter$ParameterGuesser)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>21</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>8</npm>
		<lcom3>0.6111111111111112</lcom3>
		<loc>309</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.35</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>29.5</amc>
		<cc>
			<method name="protected void computeCoefficients()">4</method>
			<method name="public double[] getNewtonCoefficients()">1</method>
			<method name="public double[] getCoefficients()">2</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">2</method>
			<method name="public void _init_(double[] a, double[] c)">0</method>
			<method name="public int degree()">1</method>
			<method name="public double value(double z)">1</method>
			<method name="protected static void verifyInputArray(double[] a, double[] c)">1</method>
			<method name="public static double evaluate(double[] a, double[] c, double z)">1</method>
			<method name="public double[] getCenters()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.MathArrays$Position</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.888888888888889</lcom3>
		<loc>45</loc>
		<dam>0.3333333333333333</dam>
		<moa>3</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>9.5</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public static org.apache.commons.math3.util.MathArrays$Position[] values()">1</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static org.apache.commons.math3.util.MathArrays$Position valueOf(String name)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.SparseFieldMatrix</name>
		<wmc>13</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>31</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>12</npm>
		<lcom3>0.27777777777777785</lcom3>
		<loc>272</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.34615384615384615</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.692307692307693</amc>
		<cc>
			<method name="public org.apache.commons.math3.linear.FieldMatrix createMatrix(int rowDimension, int columnDimension)">1</method>
			<method name="public void _init_(org.apache.commons.math3.linear.FieldMatrix other)">0</method>
			<method name="public int getRowDimension()">1</method>
			<method name="public void _init_(org.apache.commons.math3.Field field, int rowDimension, int columnDimension)">0</method>
			<method name="public int getColumnDimension()">1</method>
			<method name="public void _init_(org.apache.commons.math3.Field field)">0</method>
			<method name="public org.apache.commons.math3.FieldElement getEntry(int row, int column)">1</method>
			<method name="public void addToEntry(int row, int column, org.apache.commons.math3.FieldElement increment)">2</method>
			<method name="public void setEntry(int row, int column, org.apache.commons.math3.FieldElement value)">2</method>
			<method name="public org.apache.commons.math3.linear.FieldMatrix copy()">1</method>
			<method name="public void _init_(org.apache.commons.math3.linear.SparseFieldMatrix other)">0</method>
			<method name="private int computeKey(int row, int column)">1</method>
			<method name="public void multiplyEntry(int row, int column, org.apache.commons.math3.FieldElement factor)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Sin</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>8</rfc>
		<lcom>10</lcom>
		<ca>0</ca>
		<ce>6</ce>
		<npm>5</npm>
		<lcom3>2.0</lcom3>
		<loc>21</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.2</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.DifferentiableUnivariateFunction derivative()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public volatile org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
			<method name="public double value(double x)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$LocalMultivariateJacobianFunction</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>11</rfc>
		<lcom>2</lcom>
		<ca>2</ca>
		<ce>8</ce>
		<npm>3</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>46</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.45</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.0</amc>
		<cc>
			<method name="public org.apache.commons.math3.linear.RealVector computeValue(double[] params)">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix computeJacobian(double[] params)">1</method>
			<method name="public org.apache.commons.math3.util.Pair value(org.apache.commons.math3.linear.RealVector point)">1</method>
			<method name="void _init_(org.apache.commons.math3.analysis.MultivariateVectorFunction value, org.apache.commons.math3.analysis.MultivariateMatrixFunction jacobian)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker</name>
		<wmc>25</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>39</rfc>
		<lcom>158</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>4</npm>
		<lcom3>0.6833333333333332</lcom3>
		<loc>561</loc>
		<dam>1.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.2</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>21.04</amc>
		<cc>
			<method name="static org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$100(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker x0, org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker x1)">1</method>
			<method name="public Object clone()">1</method>
			<method name="public boolean equals(Object o)">15</method>
			<method name="void _init_(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1 x0)">0</method>
			<method name="static void access$800(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker x0)">1</method>
			<method name="static double access$500(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker x0)">1</method>
			<method name="private boolean isEstimateBad(double[] y, double yD)">3</method>
			<method name="static org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$200(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker x0, int x1)">1</method>
			<method name="private void incrementPosition(int d)">1</method>
			<method name="private void _init_()">0</method>
			<method name="private void _init_(double heightOfMarker, double makerPositionDesired, double markerPositionIncrement, double markerPositionNumber)">0</method>
			<method name="private void updateDesiredPosition()">1</method>
			<method name="static org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker access$000(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker x0, org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker x1)">1</method>
			<method name="private org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker next(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker nextMarker)">1</method>
			<method name="private double estimate()">10</method>
			<method name="public int hashCode()">1</method>
			<method name="private double difference()">1</method>
			<method name="private org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker previous(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker previousMarker)">1</method>
			<method name="private org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker index(int indexOfMarker)">1</method>
			<method name="private void readObject(java.io.ObjectInputStream anInstream)">1</method>
			<method name="static void access$700(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker x0, int x1)">1</method>
			<method name="public String toString()">1</method>
			<method name="static double access$600(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker x0)">1</method>
			<method name="void _init_(double x0, double x1, double x2, double x3, org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1 x4)">0</method>
			<method name="static double access$502(org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Marker x0, double x1)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.NotPositiveException</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>45</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>43</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>16</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.5</amc>
		<cc>
			<method name="public void _init_(Number value)">0</method>
			<method name="public void _init_(org.apache.commons.math3.exception.util.Localizable specific, Number value)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.univariate.BaseUnivariateOptimizer</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair optimize(int, org.apache.commons.math3.analysis.UnivariateFunction, org.apache.commons.math3.optimization.GoalType, double, double)">1</method>
			<method name="public abstract org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair optimize(int, org.apache.commons.math3.analysis.UnivariateFunction, org.apache.commons.math3.optimization.GoalType, double, double, double)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.MultistepIntegrator$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>23</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.333333333333333</amc>
		<cc>
			<method name="public void computeDerivatives(double t, double[] y, double[] yDot)">1</method>
			<method name="public int getDimension()">1</method>
			<method name="void _init_(org.apache.commons.math3.ode.MultistepIntegrator)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.NormalizedRandomGenerator</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>5</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double nextNormalizedDouble()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.BaseOptimizer$MaxIterCallback</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>15</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public void trigger(int max)">1</method>
			<method name="void _init_(org.apache.commons.math3.optim.BaseOptimizer$1 x0)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint</name>
		<wmc>16</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>17</rfc>
		<lcom>84</lcom>
		<ca>4</ca>
		<ce>8</ce>
		<npm>16</npm>
		<lcom3>0.7666666666666667</lcom3>
		<loc>113</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.22321428571428573</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.8125</amc>
		<cc>
			<method name="public org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint wholeHyperplane()">1</method>
			<method name="public boolean isDirect()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet wholeSpace()">1</method>
			<method name="public double getOffset(org.apache.commons.math3.geometry.Vector vector)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint copySelf()">1</method>
			<method name="public double getOffset(org.apache.commons.math3.geometry.Point point)">2</method>
			<method name="public org.apache.commons.math3.geometry.Point project(org.apache.commons.math3.geometry.Point point)">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.oned.Vector1D location, boolean direct)">0</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.oned.Vector1D getLocation()">1</method>
			<method name="public void revertSelf()">2</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.oned.Vector1D location, boolean direct, double tolerance)">0</method>
			<method name="public double getTolerance()">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.partitioning.Hyperplane copySelf()">1</method>
			<method name="public boolean sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane other)">2</method>
			<method name="public volatile org.apache.commons.math3.geometry.partitioning.SubHyperplane wholeHyperplane()">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.partitioning.Region wholeSpace()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.spherical.oned.ArcsSet</name>
		<wmc>39</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>26</cbo>
		<rfc>85</rfc>
		<lcom>741</lcom>
		<ca>6</ca>
		<ce>23</ce>
		<npm>12</npm>
		<lcom3>2.0</lcom3>
		<loc>1337</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.21367521367521367</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>33.282051282051285</amc>
		<cc>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="private void check2PiConsistency()">1</method>
			<method name="private org.apache.commons.math3.geometry.partitioning.BSPTree leafBefore(org.apache.commons.math3.geometry.partitioning.BSPTree node)">2</method>
			<method name="private double getAngle(org.apache.commons.math3.geometry.partitioning.BSPTree node)">1</method>
			<method name="public void _init_(double lower, double upper, double tolerance)">0</method>
			<method name="static org.apache.commons.math3.geometry.partitioning.BSPTree access$000(org.apache.commons.math3.geometry.spherical.oned.ArcsSet x0)">1</method>
			<method name="static boolean access$400(org.apache.commons.math3.geometry.spherical.oned.ArcsSet x0, org.apache.commons.math3.geometry.partitioning.BSPTree x1)">1</method>
			<method name="private org.apache.commons.math3.geometry.partitioning.BSPTree nextInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree node)">3</method>
			<method name="static boolean access$200(org.apache.commons.math3.geometry.spherical.oned.ArcsSet x0, org.apache.commons.math3.geometry.partitioning.BSPTree x1)">1</method>
			<method name="static org.apache.commons.math3.geometry.partitioning.BSPTree access$600(org.apache.commons.math3.geometry.spherical.oned.ArcsSet x0, org.apache.commons.math3.geometry.partitioning.BSPTree x1)">1</method>
			<method name="private org.apache.commons.math3.geometry.partitioning.BSPTree getLastLeaf(org.apache.commons.math3.geometry.partitioning.BSPTree root)">3</method>
			<method name="private boolean isArcStart(org.apache.commons.math3.geometry.partitioning.BSPTree node)">3</method>
			<method name="private org.apache.commons.math3.geometry.partitioning.BSPTree childBefore(org.apache.commons.math3.geometry.partitioning.BSPTree node)">2</method>
			<method name="private org.apache.commons.math3.geometry.partitioning.BSPTree childAfter(org.apache.commons.math3.geometry.partitioning.BSPTree node)">2</method>
			<method name="private boolean isArcEnd(org.apache.commons.math3.geometry.partitioning.BSPTree node)">3</method>
			<method name="private org.apache.commons.math3.geometry.partitioning.BSPTree leafAfter(org.apache.commons.math3.geometry.partitioning.BSPTree node)">2</method>
			<method name="public java.util.List asList()">2</method>
			<method name="public org.apache.commons.math3.geometry.spherical.oned.ArcsSet$Split split(org.apache.commons.math3.geometry.spherical.oned.Arc arc)">7</method>
			<method name="private org.apache.commons.math3.geometry.partitioning.BSPTree previousInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree node)">3</method>
			<method name="public void _init_(double tolerance)">0</method>
			<method name="private boolean isAfterParent(org.apache.commons.math3.geometry.partitioning.BSPTree node)">3</method>
			<method name="static double access$500(org.apache.commons.math3.geometry.spherical.oned.ArcsSet x0, org.apache.commons.math3.geometry.partitioning.BSPTree x1)">1</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.BoundaryProjection projectToBoundary(org.apache.commons.math3.geometry.Point point)">13</method>
			<method name="static org.apache.commons.math3.geometry.partitioning.BSPTree access$100(org.apache.commons.math3.geometry.spherical.oned.ArcsSet x0, org.apache.commons.math3.geometry.partitioning.BSPTree x1)">1</method>
			<method name="public void _init_(java.util.Collection boundary, double tolerance)">0</method>
			<method name="public volatile org.apache.commons.math3.geometry.partitioning.Region buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree x0)">1</method>
			<method name="protected void computeGeometricalProperties()">6</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.Side side(org.apache.commons.math3.geometry.spherical.oned.Arc arc)">7</method>
			<method name="private org.apache.commons.math3.geometry.spherical.oned.ArcsSet createSplitPart(java.util.List limits)">9</method>
			<method name="public org.apache.commons.math3.geometry.spherical.oned.ArcsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree tree)">1</method>
			<method name="private void addArcLimit(org.apache.commons.math3.geometry.partitioning.BSPTree tree, double alpha, boolean isStart)">3</method>
			<method name="private org.apache.commons.math3.geometry.partitioning.BSPTree getFirstArcStart()">4</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.partitioning.BSPTree tree, double tolerance)">0</method>
			<method name="public volatile org.apache.commons.math3.geometry.partitioning.AbstractRegion buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree x0)">1</method>
			<method name="private static org.apache.commons.math3.geometry.partitioning.BSPTree buildTree(double lower, double upper, double tolerance)">1</method>
			<method name="private boolean isBeforeParent(org.apache.commons.math3.geometry.partitioning.BSPTree node)">3</method>
			<method name="static org.apache.commons.math3.geometry.partitioning.BSPTree access$300(org.apache.commons.math3.geometry.spherical.oned.ArcsSet x0, org.apache.commons.math3.geometry.partitioning.BSPTree x1)">1</method>
			<method name="private org.apache.commons.math3.geometry.partitioning.BSPTree getFirstLeaf(org.apache.commons.math3.geometry.partitioning.BSPTree root)">3</method>
			<method name="private boolean isDirect(org.apache.commons.math3.geometry.partitioning.BSPTree node)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$LowerUpperBoundMapper</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>7</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>0.5</lcom3>
		<loc>32</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.0</amc>
		<cc>
			<method name="public double unboundedToBounded(double y)">1</method>
			<method name="public double boundedToUnbounded(double x)">1</method>
			<method name="public void _init_(double lower, double upper)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.neuralnet.Neuron</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>17</rfc>
		<lcom>2</lcom>
		<ca>8</ca>
		<ce>4</ce>
		<npm>4</npm>
		<lcom3>0.75</lcom3>
		<loc>125</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.40625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.125</amc>
		<cc>
			<method name="private Object writeReplace()">1</method>
			<method name="private boolean containSameValues(double[] current, double[] expect)">4</method>
			<method name="public boolean compareAndSetFeatures(double[] expect, double[] update)">4</method>
			<method name="private void readObject(java.io.ObjectInputStream in)">1</method>
			<method name="public int getSize()">1</method>
			<method name="public long getIdentifier()">1</method>
			<method name="void _init_(long identifier, double[] features)">0</method>
			<method name="public double[] getFeatures()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.leastsquares.LeastSquaresAdapter</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>2</noc>
		<cbo>7</cbo>
		<rfc>16</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>8</npm>
		<lcom3>0.0</lcom3>
		<loc>44</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4166666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.375</amc>
		<cc>
			<method name="public org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation evaluate(org.apache.commons.math3.linear.RealVector point)">1</method>
			<method name="public org.apache.commons.math3.util.Incrementor getEvaluationCounter()">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector getStart()">1</method>
			<method name="public int getParameterSize()">1</method>
			<method name="public void _init_(org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem problem)">0</method>
			<method name="public org.apache.commons.math3.optim.ConvergenceChecker getConvergenceChecker()">1</method>
			<method name="public org.apache.commons.math3.util.Incrementor getIterationCounter()">1</method>
			<method name="public int getObservationSize()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.sampling.StepNormalizerBounds</name>
		<wmc>6</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>9</rfc>
		<lcom>9</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>0.8571428571428571</lcom3>
		<loc>91</loc>
		<dam>0.42857142857142855</dam>
		<moa>5</moa>
		<mfa>0.7647058823529411</mfa>
		<cam>0.35</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>13.0</amc>
		<cc>
			<method name="public static org.apache.commons.math3.ode.sampling.StepNormalizerBounds[] values()">1</method>
			<method name="public boolean lastIncluded()">1</method>
			<method name="private void _init_(String, int, boolean first, boolean last)">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public boolean firstIncluded()">1</method>
			<method name="public static org.apache.commons.math3.ode.sampling.StepNormalizerBounds valueOf(String name)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>11</rfc>
		<lcom>2</lcom>
		<ca>0</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>0.7</lcom3>
		<loc>341</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>66.2</amc>
		<cc>
			<method name="public void _init_(double minStep, double maxStep, double[] vecAbsoluteTolerance, double[] vecRelativeTolerance)">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="protected double estimateError(double[][] yDotK, double[] y0, double[] y1, double h)">4</method>
			<method name="public int getOrder()">1</method>
			<method name="public void _init_(double minStep, double maxStep, double scalAbsoluteTolerance, double scalRelativeTolerance)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.WeightedEvaluation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double evaluate(double[], double[], int, int)">1</method>
			<method name="public abstract double evaluate(double[], double[])">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Sigmoid</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>16</rfc>
		<lcom>15</lcom>
		<ca>3</ca>
		<ce>7</ce>
		<npm>5</npm>
		<lcom3>0.5</lcom3>
		<loc>179</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.47619047619047616</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.285714285714285</amc>
		<cc>
			<method name="static double access$000(double x0, double x1, double x2)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double value(double x)">1</method>
			<method name="private static double value(double x, double lo, double hi)">1</method>
			<method name="public org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
			<method name="public void _init_(double lo, double hi)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.LUDecomposition</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>19</rfc>
		<lcom>0</lcom>
		<ca>5</ca>
		<ce>8</ce>
		<npm>8</npm>
		<lcom3>0.5535714285714286</lcom3>
		<loc>456</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.4583333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>55.0</amc>
		<cc>
			<method name="public org.apache.commons.math3.linear.DecompositionSolver getSolver()">1</method>
			<method name="public double getDeterminant()">4</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getU()">5</method>
			<method name="public void _init_(org.apache.commons.math3.linear.RealMatrix matrix)">0</method>
			<method name="public void _init_(org.apache.commons.math3.linear.RealMatrix matrix, double singularityThreshold)">0</method>
			<method name="public int[] getPivot()">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getL()">5</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getP()">4</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.RRQRDecomposition</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>20</rfc>
		<lcom>15</lcom>
		<ca>0</ca>
		<ce>7</ce>
		<npm>5</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>220</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>30.142857142857142</amc>
		<cc>
			<method name="public org.apache.commons.math3.linear.DecompositionSolver getSolver()">1</method>
			<method name="public void _init_(org.apache.commons.math3.linear.RealMatrix matrix)">0</method>
			<method name="protected void performHouseholderReflection(int minor, double[][] qrt)">5</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getP()">3</method>
			<method name="protected void decompose(double[][] qrt)">2</method>
			<method name="public int getRank(double dropThreshold)">4</method>
			<method name="public void _init_(org.apache.commons.math3.linear.RealMatrix matrix, double threshold)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.RealLinearOperator</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>3</noc>
		<cbo>10</cbo>
		<rfc>8</rfc>
		<lcom>15</lcom>
		<ca>8</ca>
		<ce>2</ce>
		<npm>6</npm>
		<lcom3>2.0</lcom3>
		<loc>15</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>1.5</amc>
		<cc>
			<method name="public boolean isTransposable()">1</method>
			<method name="public abstract int getColumnDimension()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public org.apache.commons.math3.linear.RealVector operateTranspose(org.apache.commons.math3.linear.RealVector x)">1</method>
			<method name="public abstract int getRowDimension()">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.univariate.SearchInterval</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>9</rfc>
		<lcom>4</lcom>
		<ca>3</ca>
		<ce>3</ce>
		<npm>5</npm>
		<lcom3>0.5</lcom3>
		<loc>70</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.7</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.4</amc>
		<cc>
			<method name="public double getMax()">1</method>
			<method name="public double getMin()">1</method>
			<method name="public void _init_(double lo, double hi, double init)">0</method>
			<method name="public double getStartValue()">1</method>
			<method name="public void _init_(double lo, double hi)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$FacetsContributionVisitor</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>27</rfc>
		<lcom>8</lcom>
		<ca>1</ca>
		<ce>13</ce>
		<npm>4</npm>
		<lcom3>0.5</lcom3>
		<loc>109</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.44</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.6</amc>
		<cc>
			<method name="public void visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree node)">3</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet)">0</method>
			<method name="public void visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree node)">1</method>
			<method name="private void addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane facet, boolean reversed)">3</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree node)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer</name>
		<wmc>9</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>20</cbo>
		<rfc>20</rfc>
		<lcom>18</lcom>
		<ca>8</ca>
		<ce>12</ce>
		<npm>5</npm>
		<lcom3>0.75</lcom3>
		<loc>112</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.3888888888888889</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.11111111111111</amc>
		<cc>
			<method name="public org.apache.commons.math3.linear.RealMatrix getWeight()">1</method>
			<method name="private void checkParameters()">2</method>
			<method name="public int getTargetSize()">1</method>
			<method name="public volatile Object optimize(org.apache.commons.math3.optim.OptimizationData[] x0)">1</method>
			<method name="protected transient void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[] optData)">5</method>
			<method name="public transient org.apache.commons.math3.optim.PointVectorValuePair optimize(org.apache.commons.math3.optim.OptimizationData[] optData)">1</method>
			<method name="protected void _init_(org.apache.commons.math3.optim.ConvergenceChecker checker)">0</method>
			<method name="protected double[] computeObjectiveValue(double[] params)">1</method>
			<method name="public double[] getTarget()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.sampling.StepInterpolator</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>23</cbo>
		<rfc>10</rfc>
		<lcom>45</lcom>
		<ca>22</ca>
		<ce>1</ce>
		<npm>10</npm>
		<lcom3>2.0</lcom3>
		<loc>10</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.43333333333333335</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double[] getInterpolatedDerivatives()">1</method>
			<method name="public abstract double[] getInterpolatedState()">1</method>
			<method name="public abstract double getInterpolatedTime()">1</method>
			<method name="public abstract org.apache.commons.math3.ode.sampling.StepInterpolator copy()">1</method>
			<method name="public abstract double getCurrentTime()">1</method>
			<method name="public abstract double getPreviousTime()">1</method>
			<method name="public abstract double[] getInterpolatedSecondaryDerivatives(int)">1</method>
			<method name="public abstract double[] getInterpolatedSecondaryState(int)">1</method>
			<method name="public abstract boolean isForward()">1</method>
			<method name="public abstract void setInterpolatedTime(double)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>48</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>45</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.events.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.spherical.twod.Sphere2D$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$Mapper</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>5</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double boundedToUnbounded(double)">1</method>
			<method name="public abstract double unboundedToBounded(double)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.IterationListener</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void iterationStarted(org.apache.commons.math3.util.IterationEvent)">1</method>
			<method name="public abstract void iterationPerformed(org.apache.commons.math3.util.IterationEvent)">1</method>
			<method name="public abstract void terminationPerformed(org.apache.commons.math3.util.IterationEvent)">1</method>
			<method name="public abstract void initializationPerformed(org.apache.commons.math3.util.IterationEvent)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.Combinations$IterationOrder</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.8333333333333334</lcom3>
		<loc>34</loc>
		<dam>0.5</dam>
		<moa>2</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="public static org.apache.commons.math3.util.Combinations$IterationOrder valueOf(String name)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static org.apache.commons.math3.util.Combinations$IterationOrder[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.univariate.UnivariateOptimizer</name>
		<wmc>9</wmc>
		<dit>0</dit>
		<noc>2</noc>
		<cbo>13</cbo>
		<rfc>17</rfc>
		<lcom>26</lcom>
		<ca>3</ca>
		<ce>10</ce>
		<npm>6</npm>
		<lcom3>0.875</lcom3>
		<loc>102</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.3888888888888889</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.777777777777779</amc>
		<cc>
			<method name="public double getMax()">1</method>
			<method name="public double getMin()">1</method>
			<method name="public volatile Object optimize(org.apache.commons.math3.optim.OptimizationData[] x0)">1</method>
			<method name="protected transient void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[] optData)">5</method>
			<method name="protected void _init_(org.apache.commons.math3.optim.ConvergenceChecker checker)">0</method>
			<method name="public org.apache.commons.math3.optim.nonlinear.scalar.GoalType getGoalType()">1</method>
			<method name="public double getStartValue()">1</method>
			<method name="protected double computeObjectiveValue(double x)">1</method>
			<method name="public transient org.apache.commons.math3.optim.univariate.UnivariatePointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[] optData)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.FunctionUtils$9$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>59</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>28.0</amc>
		<cc>
			<method name="public double value(double x)">4</method>
			<method name="void _init_(org.apache.commons.math3.analysis.FunctionUtils$9)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.oned.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.Field</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>35</cbo>
		<rfc>3</rfc>
		<lcom>3</lcom>
		<ca>35</ca>
		<ce>0</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>3</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract Class getRuntimeClass()">1</method>
			<method name="public abstract Object getOne()">1</method>
			<method name="public abstract Object getZero()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.OptimizationData</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>14</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.ISAACRandom</name>
		<wmc>13</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>19</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>6</npm>
		<lcom3>0.7864583333333334</lcom3>
		<loc>1051</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.38461538461538464</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>78.61538461538461</amc>
		<cc>
			<method name="protected int next(int bits)">2</method>
			<method name="public void _init_(long seed)">0</method>
			<method name="private void isaac2()">1</method>
			<method name="public void _init_()">0</method>
			<method name="private void initState()">5</method>
			<method name="public void setSeed(int seed)">1</method>
			<method name="public void _init_(int[] seed)">0</method>
			<method name="public void setSeed(int[] seed)">4</method>
			<method name="private void shuffle()">1</method>
			<method name="private void setState(int start)">1</method>
			<method name="private void isaac3()">1</method>
			<method name="public void setSeed(long seed)">1</method>
			<method name="private void isaac()">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.888888888888889</lcom3>
		<loc>45</loc>
		<dam>0.3333333333333333</dam>
		<moa>3</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>9.5</amc>
		<cc>
			<method name="public static org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode valueOf(String name)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.threed.Rotation</name>
		<wmc>25</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>18</cbo>
		<rfc>52</rfc>
		<lcom>0</lcom>
		<ca>7</ca>
		<ce>11</ce>
		<npm>22</npm>
		<lcom3>0.4791666666666667</lcom3>
		<loc>3213</loc>
		<dam>0.8333333333333334</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.22395833333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>127.28</amc>
		<cc>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D u)">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.threed.RotationOrder order, double alpha1, double alpha2, double alpha3)">0</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getAxis()">3</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.threed.Vector3D axis, double angle)">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.threed.Vector3D u, org.apache.commons.math3.geometry.euclidean.threed.Vector3D v)">0</method>
			<method name="public double getQ1()">1</method>
			<method name="public void applyInverseTo(double[] in, double[] out)">1</method>
			<method name="public static double distance(org.apache.commons.math3.geometry.euclidean.threed.Rotation r1, org.apache.commons.math3.geometry.euclidean.threed.Rotation r2)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D u)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Rotation applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation r)">1</method>
			<method name="public double getQ2()">1</method>
			<method name="public double[] getAngles(org.apache.commons.math3.geometry.euclidean.threed.RotationOrder order)">1</method>
			<method name="public double getQ0()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Rotation revert()">1</method>
			<method name="public void applyTo(double[] in, double[] out)">1</method>
			<method name="private static double[] mat2quat(double[][] ort)">4</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Rotation applyTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation r)">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.threed.Vector3D u1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D u2, org.apache.commons.math3.geometry.euclidean.threed.Vector3D v1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D v2)">0</method>
			<method name="public double getAngle()">4</method>
			<method name="private double[][] orthogonalizeMatrix(double[][] m, double threshold)">1</method>
			<method name="public double[][] getMatrix()">1</method>
			<method name="public void _init_(double[][] m, double threshold)">0</method>
			<method name="public double getQ3()">1</method>
			<method name="public void _init_(double q0, double q1, double q2, double q3, boolean needsNormalization)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunctionFactory$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.75</lcom3>
		<loc>34</loc>
		<dam>0.25</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.0</amc>
		<cc>
			<method name="public double value(long n)">1</method>
			<method name="void _init_(double, double, long)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.linear.SimplexSolver</name>
		<wmc>14</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>54</rfc>
		<lcom>69</lcom>
		<ca>0</ca>
		<ce>13</ce>
		<npm>8</npm>
		<lcom3>0.6923076923076923</lcom3>
		<loc>447</loc>
		<dam>0.75</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4142857142857143</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>30.357142857142858</amc>
		<cc>
			<method name="public transient org.apache.commons.math3.optim.PointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[] optData)">1</method>
			<method name="public org.apache.commons.math3.optim.PointValuePair doOptimize()">1</method>
			<method name="public volatile Object optimize(org.apache.commons.math3.optim.OptimizationData[] x0)">1</method>
			<method name="public void _init_(double epsilon, int maxUlps, double cutOff)">0</method>
			<method name="public volatile Object doOptimize()">1</method>
			<method name="public void _init_()">0</method>
			<method name="protected void doIteration(org.apache.commons.math3.optim.linear.SimplexTableau tableau)">1</method>
			<method name="protected void solvePhase1(org.apache.commons.math3.optim.linear.SimplexTableau tableau)">1</method>
			<method name="private Integer getPivotRow(org.apache.commons.math3.optim.linear.SimplexTableau tableau, int col)">12</method>
			<method name="public void _init_(double epsilon, int maxUlps)">0</method>
			<method name="private Integer getPivotColumn(org.apache.commons.math3.optim.linear.SimplexTableau tableau)">5</method>
			<method name="private boolean isValidPivotColumn(org.apache.commons.math3.optim.linear.SimplexTableau tableau, int col)">3</method>
			<method name="public void _init_(double epsilon)">0</method>
			<method name="protected transient void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[] optData)">4</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.RealMatrix</name>
		<wmc>51</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>103</cbo>
		<rfc>51</rfc>
		<lcom>1275</lcom>
		<ca>91</ca>
		<ce>13</ce>
		<npm>51</npm>
		<lcom3>2.0</lcom3>
		<loc>51</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2235294117647059</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.linear.RealMatrix getRowMatrix(int)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealMatrix getSubMatrix(int, int, int, int)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealMatrix transpose()">1</method>
			<method name="public abstract double getTrace()">1</method>
			<method name="public abstract void copySubMatrix(int, int, int, int, double[][])">1</method>
			<method name="public abstract void setColumnMatrix(int, org.apache.commons.math3.linear.RealMatrix)">1</method>
			<method name="public abstract double walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor, int, int, int, int)">1</method>
			<method name="public abstract void setColumn(int, double[])">1</method>
			<method name="public abstract double walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor, int, int, int, int)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealMatrix getSubMatrix(int[], int[])">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealMatrix add(org.apache.commons.math3.linear.RealMatrix)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealMatrix createMatrix(int, int)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealMatrix preMultiply(org.apache.commons.math3.linear.RealMatrix)">1</method>
			<method name="public abstract double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)">1</method>
			<method name="public abstract void setRowMatrix(int, org.apache.commons.math3.linear.RealMatrix)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealMatrix power(int)">1</method>
			<method name="public abstract double getEntry(int, int)">1</method>
			<method name="public abstract double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor, int, int, int, int)">1</method>
			<method name="public abstract double walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)">1</method>
			<method name="public abstract double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor, int, int, int, int)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealMatrix scalarAdd(double)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealMatrix getColumnMatrix(int)">1</method>
			<method name="public abstract void setColumnVector(int, org.apache.commons.math3.linear.RealVector)">1</method>
			<method name="public abstract double[] preMultiply(double[])">1</method>
			<method name="public abstract double[] getColumn(int)">1</method>
			<method name="public abstract void setRow(int, double[])">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealVector preMultiply(org.apache.commons.math3.linear.RealVector)">1</method>
			<method name="public abstract double walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)">1</method>
			<method name="public abstract void addToEntry(int, int, double)">1</method>
			<method name="public abstract double[][] getData()">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)">1</method>
			<method name="public abstract double walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealMatrix copy()">1</method>
			<method name="public abstract void setRowVector(int, org.apache.commons.math3.linear.RealVector)">1</method>
			<method name="public abstract void multiplyEntry(int, int, double)">1</method>
			<method name="public abstract void setSubMatrix(double[][], int, int)">1</method>
			<method name="public abstract double[] getRow(int)">1</method>
			<method name="public abstract double getNorm()">1</method>
			<method name="public abstract void setEntry(int, int, double)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealMatrix scalarMultiply(double)">1</method>
			<method name="public abstract double[] operate(double[])">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealVector getColumnVector(int)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealVector operate(org.apache.commons.math3.linear.RealVector)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealVector getRowVector(int)">1</method>
			<method name="public abstract double getFrobeniusNorm()">1</method>
			<method name="public abstract void copySubMatrix(int[], int[], double[][])">1</method>
			<method name="public abstract double walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealMatrix subtract(org.apache.commons.math3.linear.RealMatrix)">1</method>
			<method name="public abstract double walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor, int, int, int, int)">1</method>
			<method name="public abstract double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)">1</method>
			<method name="public abstract double walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor, int, int, int, int)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.clustering.EuclideanIntegerPoint</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>17</rfc>
		<lcom>6</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>9</npm>
		<lcom3>0.5625</lcom3>
		<loc>110</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>11.0</amc>
		<cc>
			<method name="public volatile double distanceFrom(Object x0)">1</method>
			<method name="public double distanceFrom(org.apache.commons.math3.stat.clustering.EuclideanIntegerPoint p)">1</method>
			<method name="public int hashCode()">1</method>
			<method name="public int[] getPoint()">1</method>
			<method name="public void _init_(int[] point)">0</method>
			<method name="public volatile Object centroidOf(java.util.Collection x0)">1</method>
			<method name="public String toString()">1</method>
			<method name="public boolean equals(Object other)">2</method>
			<method name="public org.apache.commons.math3.stat.clustering.EuclideanIntegerPoint centroidOf(java.util.Collection points)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunctionFactory$2</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.75</lcom3>
		<loc>34</loc>
		<dam>0.25</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.0</amc>
		<cc>
			<method name="public double value(long n)">1</method>
			<method name="void _init_(double, double, long)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.solvers.AbstractUnivariateDifferentiableSolver</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>8</cbo>
		<rfc>11</rfc>
		<lcom>8</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>0</npm>
		<lcom3>0.5</lcom3>
		<loc>49</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.56</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.6</amc>
		<cc>
			<method name="protected void _init_(double absoluteAccuracy)">0</method>
			<method name="protected org.apache.commons.math3.analysis.differentiation.DerivativeStructure computeObjectiveValueAndDerivative(double point)">1</method>
			<method name="protected volatile void setup(int x0, org.apache.commons.math3.analysis.UnivariateFunction x1, double x2, double x3, double x4)">1</method>
			<method name="protected void setup(int maxEval, org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction f, double min, double max, double startValue)">1</method>
			<method name="protected void _init_(double relativeAccuracy, double absoluteAccuracy, double functionValueAccuracy)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>155</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>37.5</amc>
		<cc>
			<method name="protected org.apache.commons.math3.ode.sampling.StepInterpolator doCopy()">1</method>
			<method name="protected void computeInterpolatedStateAndDerivatives(double theta, double oneMinusThetaH)">4</method>
			<method name="public void _init_(org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolator interpolator)">0</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$SerializationProxy</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>0.3999999999999999</lcom3>
		<loc>34</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.5</amc>
		<cc>
			<method name="void _init_(boolean wrapRows, boolean wrapColumns, org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood neighbourhood, double[][][] featuresList)">0</method>
			<method name="private Object readResolve()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer</name>
		<wmc>23</wmc>
		<dit>0</dit>
		<noc>2</noc>
		<cbo>28</cbo>
		<rfc>63</rfc>
		<lcom>209</lcom>
		<ca>2</ca>
		<ce>26</ce>
		<npm>12</npm>
		<lcom3>0.8801652892561983</lcom3>
		<loc>517</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.2</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.0</amc>
		<cc>
			<method name="protected double computeCost(double[] residuals)">1</method>
			<method name="protected double[] computeResiduals(double[] objectiveValue)">3</method>
			<method name="public double[][] getCovariances(double threshold)">1</method>
			<method name="protected void setCost(double cost)">1</method>
			<method name="public double getChiSquare()">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getWeightSquareRoot()">1</method>
			<method name="protected void updateJacobian()">1</method>
			<method name="protected org.apache.commons.math3.linear.RealMatrix computeWeightedJacobian(double[] params)">5</method>
			<method name="protected void updateResidualsAndCost()">1</method>
			<method name="public org.apache.commons.math3.optimization.PointVectorValuePair optimize(int maxEval, org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction f, double[] target, double[] weights, double[] startPoint)">1</method>
			<method name="private org.apache.commons.math3.linear.RealMatrix squareRoot(org.apache.commons.math3.linear.RealMatrix m)">3</method>
			<method name="public int getJacobianEvaluations()">1</method>
			<method name="public volatile org.apache.commons.math3.optimization.PointVectorValuePair optimize(int x0, org.apache.commons.math3.analysis.MultivariateVectorFunction x1, double[] x2, double[] x3, double[] x4)">1</method>
			<method name="public double[][] getCovariances()">1</method>
			<method name="public double[] guessParametersErrors()">3</method>
			<method name="public double[] computeSigma(double[] params, double covarianceSingularityThreshold)">2</method>
			<method name="protected void _init_()">0</method>
			<method name="protected void _init_(org.apache.commons.math3.optimization.ConvergenceChecker checker)">0</method>
			<method name="public double getRMS()">1</method>
			<method name="protected void setUp()">1</method>
			<method name="public org.apache.commons.math3.optimization.PointVectorValuePair optimize(int maxEval, org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction f, double[] target, double[] weights, double[] startPoint)">1</method>
			<method name="protected transient org.apache.commons.math3.optimization.PointVectorValuePair optimizeInternal(int maxEval, org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction f, org.apache.commons.math3.optimization.OptimizationData[] optData)">1</method>
			<method name="public double[][] computeCovariances(double[] params, double threshold)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.OpenMapRealMatrix</name>
		<wmc>19</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>41</rfc>
		<lcom>47</lcom>
		<ca>1</ca>
		<ce>13</ce>
		<npm>18</npm>
		<lcom3>0.4305555555555556</lcom3>
		<loc>486</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3894736842105263</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.36842105263158</amc>
		<cc>
			<method name="public org.apache.commons.math3.linear.OpenMapRealMatrix copy()">1</method>
			<method name="public org.apache.commons.math3.linear.OpenMapRealMatrix subtract(org.apache.commons.math3.linear.RealMatrix m)">1</method>
			<method name="public void setEntry(int row, int column, double value)">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix m)">1</method>
			<method name="public void multiplyEntry(int row, int column, double factor)">1</method>
			<method name="public int getRowDimension()">1</method>
			<method name="public int getColumnDimension()">1</method>
			<method name="public org.apache.commons.math3.linear.OpenMapRealMatrix createMatrix(int rowDimension, int columnDimension)">1</method>
			<method name="public org.apache.commons.math3.linear.OpenMapRealMatrix add(org.apache.commons.math3.linear.OpenMapRealMatrix m)">1</method>
			<method name="public org.apache.commons.math3.linear.OpenMapRealMatrix subtract(org.apache.commons.math3.linear.OpenMapRealMatrix m)">1</method>
			<method name="public volatile org.apache.commons.math3.linear.RealMatrix subtract(org.apache.commons.math3.linear.RealMatrix x0)">1</method>
			<method name="public void addToEntry(int row, int column, double increment)">1</method>
			<method name="public double getEntry(int row, int column)">1</method>
			<method name="public void _init_(int rowDimension, int columnDimension)">0</method>
			<method name="public org.apache.commons.math3.linear.OpenMapRealMatrix multiply(org.apache.commons.math3.linear.OpenMapRealMatrix m)">1</method>
			<method name="public volatile org.apache.commons.math3.linear.RealMatrix createMatrix(int x0, int x1)">1</method>
			<method name="public void _init_(org.apache.commons.math3.linear.OpenMapRealMatrix matrix)">0</method>
			<method name="public volatile org.apache.commons.math3.linear.RealMatrix copy()">1</method>
			<method name="private int computeKey(int row, int column)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.MultivariateOptimizer</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>5</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.MultivariateMultiStartOptimizer</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.optimization.MultivariateOptimizer optimizer, int starts, org.apache.commons.math3.random.RandomVectorGenerator generator)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.888888888888889</lcom3>
		<loc>45</loc>
		<dam>0.3333333333333333</dam>
		<moa>3</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>9.5</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public static org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula valueOf(String name)">1</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.MultivariateMatrixFunction</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>19</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>19</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double[][] value(double[])">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.IterationEvent</name>
		<wmc>2</wmc>
		<dit>2</dit>
		<noc>1</noc>
		<cbo>5</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>5</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>1.0</lcom3>
		<loc>14</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.6666666666666666</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="public void _init_(Object source, int iterations)">0</method>
			<method name="public int getIterations()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.inference.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.utilities.AVLTree</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>22</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>9</npm>
		<lcom3>0.0</lcom3>
		<loc>173</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.2</amc>
		<cc>
			<method name="public int size()">2</method>
			<method name="public void insert(Comparable element)">3</method>
			<method name="public boolean delete(Comparable element)">5</method>
			<method name="static org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node access$302(org.apache.commons.math3.geometry.partitioning.utilities.AVLTree x0, org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node x1)">1</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getNotLarger(Comparable reference)">5</method>
			<method name="public boolean isEmpty()">2</method>
			<method name="public void _init_()">0</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getNotSmaller(Comparable reference)">5</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getSmallest()">2</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.utilities.AVLTree$Node getLargest()">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>10</cbo>
		<rfc>13</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>7</ce>
		<npm>6</npm>
		<lcom3>0.3</lcom3>
		<loc>108</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.36666666666666664</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.666666666666668</amc>
		<cc>
			<method name="public double getWeight(int index)">1</method>
			<method name="public int getNumberOfPoints()">1</method>
			<method name="public void _init_(org.apache.commons.math3.util.Pair pointsAndWeights)">0</method>
			<method name="public double getPoint(int index)">1</method>
			<method name="public void _init_(double[] points, double[] weights)">0</method>
			<method name="public double integrate(org.apache.commons.math3.analysis.UnivariateFunction f)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Abs</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public double value(double x)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Ulp</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public double value(double x)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.linear.UnboundedSolutionException</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$4</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>34</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.0</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public org.apache.commons.math3.fraction.BigFraction[] generate(int k)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$5</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>101</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>48.5</amc>
		<cc>
			<method name="void _init_(int, int)">0</method>
			<method name="public org.apache.commons.math3.fraction.BigFraction[] generate(int k)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>25</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.0</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public org.apache.commons.math3.fraction.BigFraction[] generate(int k)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$2</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>25</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.5</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public org.apache.commons.math3.fraction.BigFraction[] generate(int k)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.polynomials.PolynomialsUtils$3</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>40</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.0</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public org.apache.commons.math3.fraction.BigFraction[] generate(int k)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.spherical.twod.Circle</name>
		<wmc>34</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>22</cbo>
		<rfc>51</rfc>
		<lcom>315</lcom>
		<ca>7</ca>
		<ce>18</ce>
		<npm>28</npm>
		<lcom3>0.5151515151515151</lcom3>
		<loc>298</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.1830065359477124</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.647058823529412</amc>
		<cc>
			<method name="public org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet wholeSpace()">1</method>
			<method name="void _init_(org.apache.commons.math3.geometry.euclidean.threed.Vector3D x0, org.apache.commons.math3.geometry.euclidean.threed.Vector3D x1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D x2, double x3, org.apache.commons.math3.geometry.spherical.twod.Circle$1 x4)">0</method>
			<method name="static double access$300(org.apache.commons.math3.geometry.spherical.twod.Circle x0)">1</method>
			<method name="static org.apache.commons.math3.geometry.euclidean.threed.Vector3D access$000(org.apache.commons.math3.geometry.spherical.twod.Circle x0)">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.Point toSpace(org.apache.commons.math3.geometry.Point x0)">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.spherical.twod.S2Point first, org.apache.commons.math3.geometry.spherical.twod.S2Point second, double tolerance)">0</method>
			<method name="static org.apache.commons.math3.geometry.euclidean.threed.Vector3D access$100(org.apache.commons.math3.geometry.spherical.twod.Circle x0)">1</method>
			<method name="public double getOffset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction)">1</method>
			<method name="public org.apache.commons.math3.geometry.spherical.twod.Circle getReverse()">1</method>
			<method name="public org.apache.commons.math3.geometry.Point project(org.apache.commons.math3.geometry.Point point)">1</method>
			<method name="public org.apache.commons.math3.geometry.spherical.twod.S2Point toSpace(org.apache.commons.math3.geometry.Point point)">1</method>
			<method name="private void _init_(org.apache.commons.math3.geometry.euclidean.threed.Vector3D pole, org.apache.commons.math3.geometry.euclidean.threed.Vector3D x, org.apache.commons.math3.geometry.euclidean.threed.Vector3D y, double tolerance)">0</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.threed.Vector3D pole, double tolerance)">0</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getPointAt(double alpha)">1</method>
			<method name="public org.apache.commons.math3.geometry.spherical.twod.Circle copySelf()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getYAxis()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getXAxis()">1</method>
			<method name="public static org.apache.commons.math3.geometry.partitioning.Transform getTransform(org.apache.commons.math3.geometry.euclidean.threed.Rotation rotation)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getPole()">1</method>
			<method name="public org.apache.commons.math3.geometry.spherical.oned.Arc getInsideArc(org.apache.commons.math3.geometry.spherical.twod.Circle other)">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.Point toSubSpace(org.apache.commons.math3.geometry.Point x0)">1</method>
			<method name="public double getPhase(org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction)">1</method>
			<method name="public double getOffset(org.apache.commons.math3.geometry.Point point)">1</method>
			<method name="public void reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D newPole)">1</method>
			<method name="public void revertSelf()">1</method>
			<method name="static org.apache.commons.math3.geometry.euclidean.threed.Vector3D access$200(org.apache.commons.math3.geometry.spherical.twod.Circle x0)">1</method>
			<method name="public org.apache.commons.math3.geometry.spherical.oned.S1Point toSubSpace(org.apache.commons.math3.geometry.Point point)">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.spherical.twod.Circle circle)">0</method>
			<method name="public double getTolerance()">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.partitioning.Hyperplane copySelf()">1</method>
			<method name="public boolean sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane other)">2</method>
			<method name="public volatile org.apache.commons.math3.geometry.partitioning.SubHyperplane wholeHyperplane()">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.partitioning.Region wholeSpace()">1</method>
			<method name="public org.apache.commons.math3.geometry.spherical.twod.SubCircle wholeHyperplane()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.direct.CMAESOptimizer</name>
		<wmc>46</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>25</cbo>
		<rfc>108</rfc>
		<lcom>929</lcom>
		<ca>1</ca>
		<ce>25</ce>
		<npm>10</npm>
		<lcom3>0.9350762527233115</lcom3>
		<loc>2812</loc>
		<dam>0.8823529411764706</dam>
		<moa>12</moa>
		<mfa>0.0</mfa>
		<cam>0.1452991452991453</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>59.02173913043478</amc>
		<cc>
			<method name="private void checkParameters()">6</method>
			<method name="static void _clinit_()">0</method>
			<method name="private static int[] inverse(int[] indices)">2</method>
			<method name="public java.util.List getStatisticsDHistory()">1</method>
			<method name="private double[] randn(int size)">2</method>
			<method name="private static org.apache.commons.math3.linear.RealMatrix sumRows(org.apache.commons.math3.linear.RealMatrix m)">3</method>
			<method name="private static org.apache.commons.math3.linear.RealMatrix ones(int n, int m)">2</method>
			<method name="private static org.apache.commons.math3.linear.RealMatrix selectColumns(org.apache.commons.math3.linear.RealMatrix m, int[] cols)">3</method>
			<method name="private static double min(org.apache.commons.math3.linear.RealMatrix m)">4</method>
			<method name="private static double max(org.apache.commons.math3.linear.RealMatrix m)">4</method>
			<method name="private static org.apache.commons.math3.linear.RealMatrix eye(int n, int m)">3</method>
			<method name="private static org.apache.commons.math3.linear.RealMatrix divide(org.apache.commons.math3.linear.RealMatrix m, org.apache.commons.math3.linear.RealMatrix n)">3</method>
			<method name="private static org.apache.commons.math3.linear.RealMatrix diag(org.apache.commons.math3.linear.RealMatrix m)">4</method>
			<method name="public void _init_(int lambda, double[] inputSigma)">0</method>
			<method name="private static double min(double[] m)">3</method>
			<method name="private static org.apache.commons.math3.linear.RealMatrix repmat(org.apache.commons.math3.linear.RealMatrix mat, int n, int m)">3</method>
			<method name="private void updateBD(double negccov)">7</method>
			<method name="private int[] sortedIndices(double[] doubles)">3</method>
			<method name="private static org.apache.commons.math3.linear.RealMatrix triu(org.apache.commons.math3.linear.RealMatrix m, int k)">4</method>
			<method name="public void _init_(int maxIterations, double stopFitness, boolean isActiveCMA, int diagonalOnly, int checkFeasableCount, org.apache.commons.math3.random.RandomGenerator random, boolean generateStatistics, org.apache.commons.math3.optimization.ConvergenceChecker checker)">0</method>
			<method name="private static org.apache.commons.math3.linear.RealMatrix sequence(double start, double end, double step)">2</method>
			<method name="private void updateCovarianceDiagonalOnly(boolean hsig, org.apache.commons.math3.linear.RealMatrix bestArz)">4</method>
			<method name="private static org.apache.commons.math3.linear.RealMatrix log(org.apache.commons.math3.linear.RealMatrix m)">3</method>
			<method name="private boolean updateEvolutionPaths(org.apache.commons.math3.linear.RealMatrix zmean, org.apache.commons.math3.linear.RealMatrix xold)">3</method>
			<method name="public java.util.List getStatisticsSigmaHistory()">1</method>
			<method name="public void _init_()">0</method>
			<method name="private static int[] reverse(int[] indices)">2</method>
			<method name="protected transient org.apache.commons.math3.optimization.PointValuePair optimizeInternal(int maxEval, org.apache.commons.math3.analysis.MultivariateFunction f, org.apache.commons.math3.optimization.GoalType goalType, org.apache.commons.math3.optimization.OptimizationData[] optData)">1</method>
			<method name="private static void copyColumn(org.apache.commons.math3.linear.RealMatrix m1, int col1, org.apache.commons.math3.linear.RealMatrix m2, int col2)">2</method>
			<method name="public void _init_(int lambda, double[] inputSigma, int maxIterations, double stopFitness, boolean isActiveCMA, int diagonalOnly, int checkFeasableCount, org.apache.commons.math3.random.RandomGenerator random, boolean generateStatistics)">0</method>
			<method name="public java.util.List getStatisticsFitnessHistory()">1</method>
			<method name="private static org.apache.commons.math3.linear.RealMatrix sqrt(org.apache.commons.math3.linear.RealMatrix m)">3</method>
			<method name="static boolean access$200(org.apache.commons.math3.optimization.direct.CMAESOptimizer x0)">1</method>
			<method name="private static void push(double[] vals, double val)">2</method>
			<method name="private static org.apache.commons.math3.linear.RealMatrix zeros(int n, int m)">1</method>
			<method name="public void _init_(int lambda, double[] inputSigma, int maxIterations, double stopFitness, boolean isActiveCMA, int diagonalOnly, int checkFeasableCount, org.apache.commons.math3.random.RandomGenerator random, boolean generateStatistics, org.apache.commons.math3.optimization.ConvergenceChecker checker)">0</method>
			<method name="public java.util.List getStatisticsMeanHistory()">1</method>
			<method name="private static double max(double[] m)">3</method>
			<method name="protected org.apache.commons.math3.optimization.PointValuePair doOptimize()">35</method>
			<method name="private org.apache.commons.math3.linear.RealMatrix randn1(int size, int popSize)">3</method>
			<method name="public void _init_(int lambda)">0</method>
			<method name="private void initializeCMA(double[] guess)">6</method>
			<method name="private static org.apache.commons.math3.linear.RealMatrix square(org.apache.commons.math3.linear.RealMatrix m)">3</method>
			<method name="private static org.apache.commons.math3.linear.RealMatrix times(org.apache.commons.math3.linear.RealMatrix m, org.apache.commons.math3.linear.RealMatrix n)">3</method>
			<method name="private transient void parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[] optData)">4</method>
			<method name="private void updateCovariance(boolean hsig, org.apache.commons.math3.linear.RealMatrix bestArx, org.apache.commons.math3.linear.RealMatrix arz, int[] arindex, org.apache.commons.math3.linear.RealMatrix xold)">5</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.interval.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>6</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.linear.SimplexTableau</name>
		<wmc>37</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>103</rfc>
		<lcom>422</lcom>
		<ca>2</ca>
		<ce>10</ce>
		<npm>3</npm>
		<lcom3>0.8273809523809523</lcom3>
		<loc>1232</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.13320463320463322</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>31.91891891891892</amc>
		<cc>
			<method name="protected final int getNumDecisionVariables()">1</method>
			<method name="private void initializeBasicVariables(int startColumn)">3</method>
			<method name="protected void initializeColumnLabels()">6</method>
			<method name="protected final int getWidth()">1</method>
			<method name="protected org.apache.commons.math3.optim.PointValuePair getSolution()">11</method>
			<method name="protected final double[][] getData()">1</method>
			<method name="protected final int getNumSlackVariables()">1</method>
			<method name="private org.apache.commons.math3.optim.linear.LinearConstraint normalize(org.apache.commons.math3.optim.linear.LinearConstraint constraint)">2</method>
			<method name="private Integer findBasicRow(int col)">5</method>
			<method name="protected org.apache.commons.math3.linear.Array2DRowRealMatrix createTableau(boolean maximize)">13</method>
			<method name="void _init_(org.apache.commons.math3.optim.linear.LinearObjectiveFunction f, java.util.Collection constraints, org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType, boolean restrictToNonNegative, double epsilon, int maxUlps)">0</method>
			<method name="protected void subtractRow(int minuendRowIndex, int subtrahendRowIndex, double multiplier)">2</method>
			<method name="protected final int getSlackVariableOffset()">1</method>
			<method name="protected final int getNumObjectiveFunctions()">2</method>
			<method name="protected final void setEntry(int row, int column, double value)">1</method>
			<method name="protected final int getOriginalNumDecisionVariables()">1</method>
			<method name="protected final int getArtificialVariableOffset()">1</method>
			<method name="void _init_(org.apache.commons.math3.optim.linear.LinearObjectiveFunction f, java.util.Collection constraints, org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType, boolean restrictToNonNegative, double epsilon)">0</method>
			<method name="public java.util.List normalizeConstraints(java.util.Collection originalConstraints)">2</method>
			<method name="private void writeObject(java.io.ObjectOutputStream oos)">1</method>
			<method name="protected void divideRow(int dividendRowIndex, double divisor)">2</method>
			<method name="protected final double getEntry(int row, int column)">1</method>
			<method name="protected final int getHeight()">1</method>
			<method name="protected static double getInvertedCoefficientSum(org.apache.commons.math3.linear.RealVector coefficients)">2</method>
			<method name="public boolean equals(Object other)">12</method>
			<method name="protected int getBasicVariable(int row)">1</method>
			<method name="protected final int getRhsOffset()">1</method>
			<method name="protected Integer getBasicRow(int col)">2</method>
			<method name="protected void dropPhase1Objective()">10</method>
			<method name="protected final int getNumArtificialVariables()">1</method>
			<method name="private int getConstraintTypeCounts(org.apache.commons.math3.optim.linear.Relationship relationship)">2</method>
			<method name="protected final double[] getRow(int row)">1</method>
			<method name="protected void performRowOperations(int pivotCol, int pivotRow)">4</method>
			<method name="public int hashCode()">1</method>
			<method name="private void copyArray(double[] src, double[] dest)">1</method>
			<method name="private void readObject(java.io.ObjectInputStream ois)">1</method>
			<method name="boolean isOptimal()">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.differentiation.DSCompiler</name>
		<wmc>49</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>98</rfc>
		<lcom>486</lcom>
		<ca>2</ca>
		<ce>8</ce>
		<npm>40</npm>
		<lcom3>0.7161458333333334</lcom3>
		<loc>3718</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.39880952380952384</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>74.71428571428571</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public int getOrder()">1</method>
			<method name="public void remainder(double[] lhs, int lhsOffset, double[] rhs, int rhsOffset, double[] result, int resultOffset)">2</method>
			<method name="public void cos(double[] operand, int operandOffset, double[] result, int resultOffset)">3</method>
			<method name="public void expm1(double[] operand, int operandOffset, double[] result, int resultOffset)">1</method>
			<method name="private static int convertIndex(int index, int srcP, int[][] srcDerivativesIndirection, int destP, int destO, int[][] destSizes)">1</method>
			<method name="private static int[][] compileSizes(int parameters, int order, org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler)">3</method>
			<method name="public void linearCombination(double a1, double[] c1, int offset1, double a2, double[] c2, int offset2, double a3, double[] c3, int offset3, double[] result, int resultOffset)">2</method>
			<method name="public void add(double[] lhs, int lhsOffset, double[] rhs, int rhsOffset, double[] result, int resultOffset)">2</method>
			<method name="public void pow(double[] operand, int operandOffset, int n, double[] result, int resultOffset)">6</method>
			<method name="public void subtract(double[] lhs, int lhsOffset, double[] rhs, int rhsOffset, double[] result, int resultOffset)">2</method>
			<method name="public void asin(double[] operand, int operandOffset, double[] result, int resultOffset)">7</method>
			<method name="public void atan(double[] operand, int operandOffset, double[] result, int resultOffset)">7</method>
			<method name="public void pow(double a, double[] operand, int operandOffset, double[] result, int resultOffset)">5</method>
			<method name="public void compose(double[] operand, int operandOffset, double[] f, double[] result, int resultOffset)">4</method>
			<method name="private static int[][][] compileCompositionIndirection(int parameters, int order, org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler, org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler, int[][] sizes, int[][] derivativesIndirection)">1</method>
			<method name="private static int[] compileLowerIndirection(int parameters, int order, org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler, org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler)">4</method>
			<method name="public void cosh(double[] operand, int operandOffset, double[] result, int resultOffset)">3</method>
			<method name="public void log(double[] operand, int operandOffset, double[] result, int resultOffset)">3</method>
			<method name="public void log1p(double[] operand, int operandOffset, double[] result, int resultOffset)">3</method>
			<method name="public void linearCombination(double a1, double[] c1, int offset1, double a2, double[] c2, int offset2, double[] result, int resultOffset)">2</method>
			<method name="private static int[][] compileDerivativesIndirection(int parameters, int order, org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler, org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler)">5</method>
			<method name="public void tanh(double[] operand, int operandOffset, double[] result, int resultOffset)">7</method>
			<method name="public void multiply(double[] lhs, int lhsOffset, double[] rhs, int rhsOffset, double[] result, int resultOffset)">3</method>
			<method name="public int[] getPartialDerivativeOrders(int index)">1</method>
			<method name="public void divide(double[] lhs, int lhsOffset, double[] rhs, int rhsOffset, double[] result, int resultOffset)">1</method>
			<method name="public void sin(double[] operand, int operandOffset, double[] result, int resultOffset)">3</method>
			<method name="public int getSize()">1</method>
			<method name="private static transient int getPartialDerivativeIndex(int parameters, int order, int[][] sizes, int[] orders)">1</method>
			<method name="public transient double taylor(double[] ds, int dsOffset, double[] delta)">1</method>
			<method name="public void log10(double[] operand, int operandOffset, double[] result, int resultOffset)">3</method>
			<method name="public transient int getPartialDerivativeIndex(int[] orders)">1</method>
			<method name="public void tan(double[] operand, int operandOffset, double[] result, int resultOffset)">7</method>
			<method name="public void atan2(double[] y, int yOffset, double[] x, int xOffset, double[] result, int resultOffset)">4</method>
			<method name="public void checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler compiler)">1</method>
			<method name="public int getFreeParameters()">1</method>
			<method name="public void pow(double[] x, int xOffset, double[] y, int yOffset, double[] result, int resultOffset)">1</method>
			<method name="public void sinh(double[] operand, int operandOffset, double[] result, int resultOffset)">3</method>
			<method name="public void acos(double[] operand, int operandOffset, double[] result, int resultOffset)">7</method>
			<method name="public void linearCombination(double a1, double[] c1, int offset1, double a2, double[] c2, int offset2, double a3, double[] c3, int offset3, double a4, double[] c4, int offset4, double[] result, int resultOffset)">2</method>
			<method name="public void asinh(double[] operand, int operandOffset, double[] result, int resultOffset)">7</method>
			<method name="public void exp(double[] operand, int operandOffset, double[] result, int resultOffset)">1</method>
			<method name="public void pow(double[] operand, int operandOffset, double p, double[] result, int resultOffset)">3</method>
			<method name="private void _init_(int parameters, int order, org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler, org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler)">0</method>
			<method name="public static org.apache.commons.math3.analysis.differentiation.DSCompiler getCompiler(int parameters, int order)">1</method>
			<method name="private static int[][][] compileMultiplicationIndirection(int parameters, int order, org.apache.commons.math3.analysis.differentiation.DSCompiler valueCompiler, org.apache.commons.math3.analysis.differentiation.DSCompiler derivativeCompiler, int[] lowerIndirection)">10</method>
			<method name="public void acosh(double[] operand, int operandOffset, double[] result, int resultOffset)">7</method>
			<method name="public void atanh(double[] operand, int operandOffset, double[] result, int resultOffset)">7</method>
			<method name="public void rootN(double[] operand, int operandOffset, int n, double[] result, int resultOffset)">4</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.transform.FastHadamardTransformer</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>14</rfc>
		<lcom>15</lcom>
		<ca>0</ca>
		<ce>11</ce>
		<npm>4</npm>
		<lcom3>1.2</lcom3>
		<loc>236</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.35714285714285715</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>38.166666666666664</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="protected int[] fht(int[] x)">1</method>
			<method name="public double[] transform(double[] f, org.apache.commons.math3.transform.TransformType type)">2</method>
			<method name="public int[] transform(int[] f)">1</method>
			<method name="protected double[] fht(double[] x)">1</method>
			<method name="public double[] transform(org.apache.commons.math3.analysis.UnivariateFunction f, double min, double max, int n, org.apache.commons.math3.transform.TransformType type)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.ParameterJacobianWrapper</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>19</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>0.4444444444444445</lcom3>
		<loc>129</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.39285714285714285</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>30.5</amc>
		<cc>
			<method name="public void computeParameterJacobian(double t, double[] y, double[] yDot, String paramName, double[] dFdP)">1</method>
			<method name="public java.util.Collection getParametersNames()">1</method>
			<method name="public boolean isSupported(String name)">1</method>
			<method name="public void _init_(org.apache.commons.math3.ode.FirstOrderDifferentialEquations fode, org.apache.commons.math3.ode.ParameterizedODE pode, org.apache.commons.math3.ode.ParameterConfiguration[] paramsAndSteps)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.DifferentiableMultivariateOptimizer</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.vector.Target</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>16</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.5</amc>
		<cc>
			<method name="public double[] getTarget()">1</method>
			<method name="public void _init_(double[] observations)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Cbrt</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>9</rfc>
		<lcom>6</lcom>
		<ca>0</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>17</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.25</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double value(double x)">1</method>
			<method name="public org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.events.FilterType$2</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>123</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4444444444444444</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>40.0</amc>
		<cc>
			<method name="void _init_(String, int)">0</method>
			<method name="protected boolean getTriggeredIncreasing()">1</method>
			<method name="protected org.apache.commons.math3.ode.events.Transformer selectTransformer(org.apache.commons.math3.ode.events.Transformer previous, double g, boolean forward)">16</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.ParametricUnivariateFunction</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>26</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>26</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public transient abstract double value(double, double[])">1</method>
			<method name="public transient abstract double[] gradient(double, double[])">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.events.FilterType$3</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>42</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>40.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunctionFactory$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.75</lcom3>
		<loc>36</loc>
		<dam>0.25</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.0</amc>
		<cc>
			<method name="void _init_(double, double, long)">0</method>
			<method name="public int value(long n)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.moment.ThirdMoment</name>
		<wmc>11</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>8</cbo>
		<rfc>12</rfc>
		<lcom>35</lcom>
		<ca>2</ca>
		<ce>6</ce>
		<npm>11</npm>
		<lcom3>0.4</lcom3>
		<loc>135</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3939393939393939</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.0</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic copy()">1</method>
			<method name="public double getResult()">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.moment.FirstMoment copy()">1</method>
			<method name="public void _init_(org.apache.commons.math3.stat.descriptive.moment.ThirdMoment original)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public static void copy(org.apache.commons.math3.stat.descriptive.moment.ThirdMoment source, org.apache.commons.math3.stat.descriptive.moment.ThirdMoment dest)">1</method>
			<method name="public org.apache.commons.math3.stat.descriptive.moment.ThirdMoment copy()">1</method>
			<method name="public void increment(double d)">2</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.moment.SecondMoment copy()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.fitting.HarmonicFitter</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>9</rfc>
		<lcom>3</lcom>
		<ca>0</ca>
		<ce>6</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>23</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.666666666666667</amc>
		<cc>
			<method name="public double[] fit(double[] initialGuess)">1</method>
			<method name="public void _init_(org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer optimizer)">0</method>
			<method name="public double[] fit()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.events.FilterType$1</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>123</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4444444444444444</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>40.0</amc>
		<cc>
			<method name="void _init_(String, int)">0</method>
			<method name="protected boolean getTriggeredIncreasing()">1</method>
			<method name="protected org.apache.commons.math3.ode.events.Transformer selectTransformer(org.apache.commons.math3.ode.events.Transformer previous, double g, boolean forward)">16</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunctionFactory$2</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.75</lcom3>
		<loc>36</loc>
		<dam>0.25</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.0</amc>
		<cc>
			<method name="void _init_(double, double, long)">0</method>
			<method name="public int value(long n)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.genetics.OrderedCrossover</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>24</rfc>
		<lcom>3</lcom>
		<ca>0</ca>
		<ce>11</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>174</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>57.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public org.apache.commons.math3.genetics.ChromosomePair crossover(org.apache.commons.math3.genetics.Chromosome first, org.apache.commons.math3.genetics.Chromosome second)">1</method>
			<method name="protected org.apache.commons.math3.genetics.ChromosomePair mate(org.apache.commons.math3.genetics.AbstractListChromosome first, org.apache.commons.math3.genetics.AbstractListChromosome second)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.FieldVectorChangingVisitor</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>3</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>3</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void start(int, int, int)">1</method>
			<method name="public abstract org.apache.commons.math3.FieldElement visit(int, org.apache.commons.math3.FieldElement)">1</method>
			<method name="public abstract org.apache.commons.math3.FieldElement end()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.threed.SphereGenerator</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>31</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>663</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>220.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public org.apache.commons.math3.geometry.enclosing.EnclosingBall ballOnSupport(java.util.List support)">5</method>
			<method name="private org.apache.commons.math3.fraction.BigFraction minor(org.apache.commons.math3.fraction.BigFraction[] c1, org.apache.commons.math3.fraction.BigFraction[] c2, org.apache.commons.math3.fraction.BigFraction[] c3)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Expm1</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>9</rfc>
		<lcom>6</lcom>
		<ca>0</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>17</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.25</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double value(double x)">1</method>
			<method name="public org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.genetics.UniformCrossover</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>18</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>11</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>133</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>32.0</amc>
		<cc>
			<method name="public void _init_(double ratio)">0</method>
			<method name="public double getRatio()">1</method>
			<method name="public org.apache.commons.math3.genetics.ChromosomePair crossover(org.apache.commons.math3.genetics.Chromosome first, org.apache.commons.math3.genetics.Chromosome second)">1</method>
			<method name="private org.apache.commons.math3.genetics.ChromosomePair mate(org.apache.commons.math3.genetics.AbstractListChromosome first, org.apache.commons.math3.genetics.AbstractListChromosome second)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableVectorFunction</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction</name>
		<wmc>13</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>29</rfc>
		<lcom>64</lcom>
		<ca>3</ca>
		<ce>8</ce>
		<npm>9</npm>
		<lcom3>0.611111111111111</lcom3>
		<loc>1826</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4027777777777778</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>139.0</amc>
		<cc>
			<method name="public double partialDerivativeXX(double x, double y)">1</method>
			<method name="private double[] computeSplineCoefficients(double[] beta)">3</method>
			<method name="public void _init_(double[] x, double[] y, double[][] f, double[][] dFdX, double[][] dFdY, double[][] d2FdXdY)">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(double[] x, double[] y, double[][] f, double[][] dFdX, double[][] dFdY, double[][] d2FdXdY, boolean initializeDerivatives)">0</method>
			<method name="public boolean isValidPoint(double x, double y)">5</method>
			<method name="private double partialDerivative(int which, double x, double y)">1</method>
			<method name="public double partialDerivativeXY(double x, double y)">1</method>
			<method name="public double value(double x, double y)">1</method>
			<method name="private int searchIndex(double c, double[] val)">5</method>
			<method name="public double partialDerivativeYY(double x, double y)">1</method>
			<method name="public double partialDerivativeX(double x, double y)">1</method>
			<method name="public double partialDerivativeY(double x, double y)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.BaseMultivariateOptimizer</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>3</noc>
		<cbo>14</cbo>
		<rfc>18</rfc>
		<lcom>7</lcom>
		<ca>5</ca>
		<ce>9</ce>
		<npm>4</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>194</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.47619047619047616</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.285714285714285</amc>
		<cc>
			<method name="public double[] getLowerBound()">2</method>
			<method name="public transient Object optimize(org.apache.commons.math3.optim.OptimizationData[] optData)">1</method>
			<method name="private void checkParameters()">10</method>
			<method name="protected transient void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[] optData)">4</method>
			<method name="protected void _init_(org.apache.commons.math3.optim.ConvergenceChecker checker)">0</method>
			<method name="public double[] getStartPoint()">2</method>
			<method name="public double[] getUpperBound()">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.PointValuePair</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>21</cbo>
		<rfc>12</rfc>
		<lcom>10</lcom>
		<ca>19</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>1.25</lcom3>
		<loc>55</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.8</amc>
		<cc>
			<method name="private Object writeReplace()">1</method>
			<method name="public void _init_(double[] point, double value)">0</method>
			<method name="public void _init_(double[] point, double value, boolean copyArray)">0</method>
			<method name="public double[] getPointRef()">1</method>
			<method name="public double[] getPoint()">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$FixedCapacityList</name>
		<wmc>3</wmc>
		<dit>4</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>8</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>3</npm>
		<lcom3>0.75</lcom3>
		<loc>45</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.974025974025974</mfa>
		<cam>0.5</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>13.333333333333334</amc>
		<cc>
			<method name="public boolean add(Object e)">2</method>
			<method name="public boolean addAll(java.util.Collection collection)">4</method>
			<method name="public void _init_(int fixedCapacity)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.clustering.Clusterer</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>4</noc>
		<cbo>8</cbo>
		<rfc>7</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>22</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.25</amc>
		<cc>
			<method name="protected void _init_(org.apache.commons.math3.ml.distance.DistanceMeasure measure)">0</method>
			<method name="public abstract java.util.List cluster(java.util.Collection)">1</method>
			<method name="public org.apache.commons.math3.ml.distance.DistanceMeasure getDistanceMeasure()">1</method>
			<method name="protected double distance(org.apache.commons.math3.ml.clustering.Clusterable p1, org.apache.commons.math3.ml.clustering.Clusterable p2)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.enclosing.Encloser</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.geometry.enclosing.EnclosingBall enclose(Iterable)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.genetics.InvalidRepresentationException</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="public transient void _init_(org.apache.commons.math3.exception.util.Localizable pattern, Object[] args)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.ParameterConfiguration</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>0</ce>
		<npm>4</npm>
		<lcom3>0.7777777777777777</lcom3>
		<loc>26</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.75</amc>
		<cc>
			<method name="public void _init_(String parameterName, double hP)">0</method>
			<method name="public void setHP(double hParam)">1</method>
			<method name="public double getHP()">1</method>
			<method name="public String getParameterName()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.solvers.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Floor</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public double value(double x)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.RectangularCholeskyDecomposition</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>11</rfc>
		<lcom>2</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>4</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>332</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>81.5</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.linear.RealMatrix matrix)">0</method>
			<method name="public int getRank()">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getRootMatrix()">1</method>
			<method name="public void _init_(org.apache.commons.math3.linear.RealMatrix matrix, double small)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.linear.UnboundedSolutionException</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Atanh</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>9</rfc>
		<lcom>6</lcom>
		<ca>0</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>17</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.25</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double value(double x)">1</method>
			<method name="public org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.leastsquares.MultivariateJacobianFunction</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>5</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.util.Pair value(org.apache.commons.math3.linear.RealVector)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.solvers.NewtonSolver</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>13</rfc>
		<lcom>10</lcom>
		<ca>0</ca>
		<ce>7</ce>
		<npm>4</npm>
		<lcom3>1.25</lcom3>
		<loc>60</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.48</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.8</amc>
		<cc>
			<method name="protected double doSolve()">1</method>
			<method name="public void _init_(double absoluteAccuracy)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public double solve(int maxEval, org.apache.commons.math3.analysis.DifferentiableUnivariateFunction f, double min, double max)">1</method>
			<method name="public volatile double solve(int x0, org.apache.commons.math3.analysis.UnivariateFunction x1, double x2, double x3)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.QRDecomposition</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>15</cbo>
		<rfc>18</rfc>
		<lcom>0</lcom>
		<ca>10</ca>
		<ce>6</ce>
		<npm>7</npm>
		<lcom3>0.5178571428571429</lcom3>
		<loc>471</loc>
		<dam>1.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>50.55555555555556</amc>
		<cc>
			<method name="public org.apache.commons.math3.linear.DecompositionSolver getSolver()">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getH()">4</method>
			<method name="public void _init_(org.apache.commons.math3.linear.RealMatrix matrix)">0</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getR()">4</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getQT()">8</method>
			<method name="protected void decompose(double[][] matrix)">2</method>
			<method name="protected void performHouseholderReflection(int minor, double[][] matrix)">7</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getQ()">2</method>
			<method name="public void _init_(org.apache.commons.math3.linear.RealMatrix matrix, double threshold)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>11</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>1.1375</lcom3>
		<loc>920</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>179.0</amc>
		<cc>
			<method name="public void _init_(double minStep, double maxStep, double[] vecAbsoluteTolerance, double[] vecRelativeTolerance)">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="protected double estimateError(double[][] yDotK, double[] y0, double[] y1, double h)">4</method>
			<method name="public int getOrder()">1</method>
			<method name="public void _init_(double minStep, double maxStep, double scalAbsoluteTolerance, double scalRelativeTolerance)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.dfp.DfpMath</name>
		<wmc>21</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>74</rfc>
		<lcom>210</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>10</npm>
		<lcom3>1.05</lcom3>
		<loc>1895</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.19047619047619047</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>89.19047619047619</amc>
		<cc>
			<method name="protected static org.apache.commons.math3.dfp.Dfp[] logInternal(org.apache.commons.math3.dfp.Dfp[] a)">3</method>
			<method name="public static org.apache.commons.math3.dfp.Dfp asin(org.apache.commons.math3.dfp.Dfp a)">1</method>
			<method name="public static org.apache.commons.math3.dfp.Dfp pow(org.apache.commons.math3.dfp.Dfp base, int a)">6</method>
			<method name="public static org.apache.commons.math3.dfp.Dfp acos(org.apache.commons.math3.dfp.Dfp a)">3</method>
			<method name="protected static org.apache.commons.math3.dfp.Dfp[] split(org.apache.commons.math3.dfp.DfpField field, String a)">13</method>
			<method name="public static org.apache.commons.math3.dfp.Dfp sin(org.apache.commons.math3.dfp.Dfp a)">5</method>
			<method name="protected static org.apache.commons.math3.dfp.Dfp[] splitMult(org.apache.commons.math3.dfp.Dfp[] a, org.apache.commons.math3.dfp.Dfp[] b)">3</method>
			<method name="public static org.apache.commons.math3.dfp.Dfp cos(org.apache.commons.math3.dfp.Dfp a)">5</method>
			<method name="private void _init_()">0</method>
			<method name="protected static org.apache.commons.math3.dfp.Dfp sinInternal(org.apache.commons.math3.dfp.Dfp[] a)">3</method>
			<method name="protected static org.apache.commons.math3.dfp.Dfp atanInternal(org.apache.commons.math3.dfp.Dfp a)">3</method>
			<method name="public static org.apache.commons.math3.dfp.Dfp exp(org.apache.commons.math3.dfp.Dfp a)">3</method>
			<method name="protected static org.apache.commons.math3.dfp.Dfp[] split(org.apache.commons.math3.dfp.Dfp a)">1</method>
			<method name="public static org.apache.commons.math3.dfp.Dfp pow(org.apache.commons.math3.dfp.Dfp x, org.apache.commons.math3.dfp.Dfp y)">40</method>
			<method name="public static org.apache.commons.math3.dfp.Dfp atan(org.apache.commons.math3.dfp.Dfp a)">7</method>
			<method name="protected static org.apache.commons.math3.dfp.Dfp[] splitDiv(org.apache.commons.math3.dfp.Dfp[] a, org.apache.commons.math3.dfp.Dfp[] b)">1</method>
			<method name="public static org.apache.commons.math3.dfp.Dfp log(org.apache.commons.math3.dfp.Dfp a)">7</method>
			<method name="public static org.apache.commons.math3.dfp.Dfp tan(org.apache.commons.math3.dfp.Dfp a)">1</method>
			<method name="protected static org.apache.commons.math3.dfp.Dfp splitPow(org.apache.commons.math3.dfp.Dfp[] base, int a)">6</method>
			<method name="protected static org.apache.commons.math3.dfp.Dfp expInternal(org.apache.commons.math3.dfp.Dfp a)">3</method>
			<method name="protected static org.apache.commons.math3.dfp.Dfp cosInternal(org.apache.commons.math3.dfp.Dfp[] a)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.SingularMatrixException</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>14</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fraction.FractionField</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>9</rfc>
		<lcom>36</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>6</npm>
		<lcom3>1.125</lcom3>
		<loc>32</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.4444444444444446</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="void _init_(org.apache.commons.math3.fraction.FractionField$1 x0)">0</method>
			<method name="public Class getRuntimeClass()">1</method>
			<method name="private Object readResolve()">1</method>
			<method name="public org.apache.commons.math3.fraction.Fraction getOne()">1</method>
			<method name="public org.apache.commons.math3.fraction.Fraction getZero()">1</method>
			<method name="public static org.apache.commons.math3.fraction.FractionField getInstance()">1</method>
			<method name="public volatile Object getOne()">1</method>
			<method name="public volatile Object getZero()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.LeastSquaresConverter</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>11</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>5</ce>
		<npm>4</npm>
		<lcom3>0.0</lcom3>
		<loc>208</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>50.0</amc>
		<cc>
			<method name="public double value(double[] point)">6</method>
			<method name="public void _init_(org.apache.commons.math3.analysis.MultivariateVectorFunction function, double[] observations, org.apache.commons.math3.linear.RealMatrix scale)">0</method>
			<method name="public void _init_(org.apache.commons.math3.analysis.MultivariateVectorFunction function, double[] observations, double[] weights)">0</method>
			<method name="public void _init_(org.apache.commons.math3.analysis.MultivariateVectorFunction function, double[] observations)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.AnyMatrix</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>3</rfc>
		<lcom>3</lcom>
		<ca>9</ca>
		<ce>0</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>3</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract int getColumnDimension()">1</method>
			<method name="public abstract boolean isSquare()">1</method>
			<method name="public abstract int getRowDimension()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.special.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.ConjugateGradient</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>27</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>12</ce>
		<npm>4</npm>
		<lcom3>0.75</lcom3>
		<loc>253</loc>
		<dam>0.5</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.42857142857142855</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>61.25</amc>
		<cc>
			<method name="public void _init_(int maxIterations, double delta, boolean check)">0</method>
			<method name="public final boolean getCheck()">1</method>
			<method name="public void _init_(org.apache.commons.math3.util.IterationManager manager, double delta, boolean check)">0</method>
			<method name="public org.apache.commons.math3.linear.RealVector solveInPlace(org.apache.commons.math3.linear.RealLinearOperator a, org.apache.commons.math3.linear.RealLinearOperator m, org.apache.commons.math3.linear.RealVector b, org.apache.commons.math3.linear.RealVector x0)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.genetics.NPointCrossover</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>19</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>12</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>174</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>42.25</amc>
		<cc>
			<method name="public void _init_(int crossoverPoints)">0</method>
			<method name="public org.apache.commons.math3.genetics.ChromosomePair crossover(org.apache.commons.math3.genetics.Chromosome first, org.apache.commons.math3.genetics.Chromosome second)">1</method>
			<method name="public int getCrossoverPoints()">1</method>
			<method name="private org.apache.commons.math3.genetics.ChromosomePair mate(org.apache.commons.math3.genetics.AbstractListChromosome first, org.apache.commons.math3.genetics.AbstractListChromosome second)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.BlockRealMatrix</name>
		<wmc>64</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>28</cbo>
		<rfc>88</rfc>
		<lcom>130</lcom>
		<ca>9</ca>
		<ce>20</ce>
		<npm>60</npm>
		<lcom3>0.43083900226757377</lcom3>
		<loc>4385</loc>
		<dam>0.8571428571428571</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.19318181818181818</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>67.40625</amc>
		<cc>
			<method name="public void setRowMatrix(int row, org.apache.commons.math3.linear.BlockRealMatrix matrix)">1</method>
			<method name="public org.apache.commons.math3.linear.BlockRealMatrix transpose()">5</method>
			<method name="public double[][] getData()">4</method>
			<method name="public void setColumnVector(int column, org.apache.commons.math3.linear.RealVector vector)">1</method>
			<method name="public void setEntry(int row, int column, double value)">1</method>
			<method name="public volatile org.apache.commons.math3.linear.RealMatrix getRowMatrix(int x0)">1</method>
			<method name="public org.apache.commons.math3.linear.BlockRealMatrix multiply(org.apache.commons.math3.linear.BlockRealMatrix m)">1</method>
			<method name="public volatile org.apache.commons.math3.linear.RealMatrix getSubMatrix(int x0, int x1, int x2, int x3)">1</method>
			<method name="public org.apache.commons.math3.linear.BlockRealMatrix getColumnMatrix(int column)">1</method>
			<method name="public void _init_(double[][] rawData)">0</method>
			<method name="public double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor visitor, int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public double walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor visitor)">5</method>
			<method name="public double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor visitor)">5</method>
			<method name="public double walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor visitor)">5</method>
			<method name="public void setColumn(int column, double[] array)">1</method>
			<method name="private int blockHeight(int blockRow)">2</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix scalarMultiply(double d)">3</method>
			<method name="public org.apache.commons.math3.linear.RealVector getRowVector(int row)">1</method>
			<method name="public volatile org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix x0)">1</method>
			<method name="public void setRowMatrix(int row, org.apache.commons.math3.linear.RealMatrix matrix)">1</method>
			<method name="public double[] getRow(int row)">1</method>
			<method name="private int blockWidth(int blockColumn)">2</method>
			<method name="public org.apache.commons.math3.linear.BlockRealMatrix getRowMatrix(int row)">1</method>
			<method name="private void copyBlockPart(double[] srcBlock, int srcWidth, int srcStartRow, int srcEndRow, int srcStartColumn, int srcEndColumn, double[] dstBlock, int dstWidth, int dstStartRow, int dstStartColumn)">2</method>
			<method name="public static double[][] toBlocksLayout(double[][] rawData)">1</method>
			<method name="void setColumnMatrix(int column, org.apache.commons.math3.linear.BlockRealMatrix matrix)">1</method>
			<method name="public volatile org.apache.commons.math3.linear.RealMatrix createMatrix(int x0, int x1)">1</method>
			<method name="public double[] operate(double[] v)">1</method>
			<method name="public org.apache.commons.math3.linear.BlockRealMatrix add(org.apache.commons.math3.linear.BlockRealMatrix m)">1</method>
			<method name="public volatile org.apache.commons.math3.linear.RealMatrix copy()">1</method>
			<method name="public void setSubMatrix(double[][] subMatrix, int row, int column)">1</method>
			<method name="public void multiplyEntry(int row, int column, double factor)">1</method>
			<method name="public double[] getColumn(int column)">1</method>
			<method name="public volatile org.apache.commons.math3.linear.RealMatrix subtract(org.apache.commons.math3.linear.RealMatrix x0)">1</method>
			<method name="public double getEntry(int row, int column)">1</method>
			<method name="public void addToEntry(int row, int column, double increment)">1</method>
			<method name="public volatile org.apache.commons.math3.linear.RealMatrix add(org.apache.commons.math3.linear.RealMatrix x0)">1</method>
			<method name="public void _init_(int rows, int columns, double[][] blockData, boolean copyArray)">0</method>
			<method name="public void setColumnMatrix(int column, org.apache.commons.math3.linear.RealMatrix matrix)">1</method>
			<method name="public void setRowVector(int row, org.apache.commons.math3.linear.RealVector vector)">1</method>
			<method name="public org.apache.commons.math3.linear.BlockRealMatrix add(org.apache.commons.math3.linear.RealMatrix m)">1</method>
			<method name="public org.apache.commons.math3.linear.BlockRealMatrix multiply(org.apache.commons.math3.linear.RealMatrix m)">1</method>
			<method name="public double walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor visitor, int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector getColumnVector(int column)">1</method>
			<method name="public volatile org.apache.commons.math3.linear.RealMatrix scalarAdd(double x0)">1</method>
			<method name="public org.apache.commons.math3.linear.BlockRealMatrix copy()">2</method>
			<method name="public void _init_(int rows, int columns)">0</method>
			<method name="public static double[][] createBlocksLayout(int rows, int columns)">3</method>
			<method name="public double[] preMultiply(double[] v)">1</method>
			<method name="public double walkInOptimizedOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor visitor, int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public int getRowDimension()">1</method>
			<method name="public org.apache.commons.math3.linear.BlockRealMatrix getSubMatrix(int startRow, int endRow, int startColumn, int endColumn)">1</method>
			<method name="public int getColumnDimension()">1</method>
			<method name="public void setRow(int row, double[] array)">1</method>
			<method name="public org.apache.commons.math3.linear.BlockRealMatrix createMatrix(int rowDimension, int columnDimension)">1</method>
			<method name="public double getNorm()">6</method>
			<method name="public double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor visitor)">5</method>
			<method name="public org.apache.commons.math3.linear.BlockRealMatrix subtract(org.apache.commons.math3.linear.RealMatrix m)">1</method>
			<method name="public volatile org.apache.commons.math3.linear.RealMatrix getColumnMatrix(int x0)">1</method>
			<method name="public double getFrobeniusNorm()">3</method>
			<method name="public org.apache.commons.math3.linear.BlockRealMatrix subtract(org.apache.commons.math3.linear.BlockRealMatrix m)">1</method>
			<method name="public volatile org.apache.commons.math3.linear.RealMatrix transpose()">1</method>
			<method name="public org.apache.commons.math3.linear.BlockRealMatrix scalarAdd(double d)">3</method>
			<method name="public double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor visitor, int startRow, int endRow, int startColumn, int endColumn)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.linear.PivotSelectionRule</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.888888888888889</lcom3>
		<loc>45</loc>
		<dam>0.3333333333333333</dam>
		<moa>3</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>9.5</amc>
		<cc>
			<method name="public static org.apache.commons.math3.optim.linear.PivotSelectionRule[] values()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static org.apache.commons.math3.optim.linear.PivotSelectionRule valueOf(String name)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.sampling.StepNormalizerMode</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.888888888888889</lcom3>
		<loc>45</loc>
		<dam>0.3333333333333333</dam>
		<moa>3</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>9.5</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public static org.apache.commons.math3.ode.sampling.StepNormalizerMode[] values()">1</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static org.apache.commons.math3.ode.sampling.StepNormalizerMode valueOf(String name)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>105</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>25.0</amc>
		<cc>
			<method name="protected org.apache.commons.math3.ode.sampling.StepInterpolator doCopy()">1</method>
			<method name="protected void computeInterpolatedStateAndDerivatives(double theta, double oneMinusThetaH)">5</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(org.apache.commons.math3.ode.nonstiff.EulerStepInterpolator interpolator)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>11</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>0.5</lcom3>
		<loc>20</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="public org.apache.commons.math3.geometry.partitioning.SubHyperplane getMinus()">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.partitioning.SubHyperplane plus, org.apache.commons.math3.geometry.partitioning.SubHyperplane minus)">0</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlus()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.neuralnet.Network</name>
		<wmc>19</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>53</rfc>
		<lcom>65</lcom>
		<ca>7</ca>
		<ce>4</ce>
		<npm>13</npm>
		<lcom3>0.6888888888888889</lcom3>
		<loc>565</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.19617224880382775</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>28.473684210526315</amc>
		<cc>
			<method name="private void deleteLinkFromLinkSet(java.util.Set linkSet, long id)">1</method>
			<method name="public java.util.Collection getNeighbours(Iterable neurons)">1</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public void _init_(long initialIdentifier, int featureSize)">0</method>
			<method name="public java.util.Collection getNeighbours(Iterable neurons, Iterable exclude)">5</method>
			<method name="private Long createNextId()">1</method>
			<method name="public java.util.Collection getNeighbours(org.apache.commons.math3.ml.neuralnet.Neuron neuron, Iterable exclude)">4</method>
			<method name="public void addLink(org.apache.commons.math3.ml.neuralnet.Neuron a, org.apache.commons.math3.ml.neuralnet.Neuron b)">3</method>
			<method name="private Object writeReplace()">3</method>
			<method name="public int getFeaturesSize()">1</method>
			<method name="public void deleteLink(org.apache.commons.math3.ml.neuralnet.Neuron a, org.apache.commons.math3.ml.neuralnet.Neuron b)">3</method>
			<method name="private void readObject(java.io.ObjectInputStream in)">1</method>
			<method name="public java.util.Collection getNeurons(java.util.Comparator comparator)">1</method>
			<method name="public long createNeuron(double[] features)">2</method>
			<method name="private void addLinkToLinkSet(java.util.Set linkSet, long id)">1</method>
			<method name="public org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long id)">2</method>
			<method name="public java.util.Collection getNeighbours(org.apache.commons.math3.ml.neuralnet.Neuron neuron)">1</method>
			<method name="public void deleteNeuron(org.apache.commons.math3.ml.neuralnet.Neuron neuron)">2</method>
			<method name="void _init_(long nextId, int featureSize, org.apache.commons.math3.ml.neuralnet.Neuron[] neuronList, long[][] neighbourIdList)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.Weight</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>37</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.0</amc>
		<cc>
			<method name="public org.apache.commons.math3.linear.RealMatrix getWeight()">1</method>
			<method name="public void _init_(double[] weight)">0</method>
			<method name="public void _init_(org.apache.commons.math3.linear.RealMatrix weight)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.SparseRealMatrix</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.WeibullDistribution</name>
		<wmc>20</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>30</rfc>
		<lcom>144</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>17</npm>
		<lcom3>0.8070175438596491</lcom3>
		<loc>321</loc>
		<dam>0.8888888888888888</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.6</amc>
		<cc>
			<method name="protected double getSolverAbsoluteAccuracy()">1</method>
			<method name="public double inverseCumulativeProbability(double p)">5</method>
			<method name="public double getScale()">1</method>
			<method name="public double density(double x)">2</method>
			<method name="public boolean isSupportConnected()">1</method>
			<method name="public boolean isSupportUpperBoundInclusive()">1</method>
			<method name="protected double calculateNumericalMean()">1</method>
			<method name="public double cumulativeProbability(double x)">2</method>
			<method name="public boolean isSupportLowerBoundInclusive()">1</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, double alpha, double beta, double inverseCumAccuracy)">0</method>
			<method name="public void _init_(double alpha, double beta)">0</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, double alpha, double beta)">0</method>
			<method name="public double getShape()">1</method>
			<method name="public double getSupportLowerBound()">1</method>
			<method name="public void _init_(double alpha, double beta, double inverseCumAccuracy)">0</method>
			<method name="public double getNumericalVariance()">2</method>
			<method name="public double getNumericalMean()">2</method>
			<method name="public double getSupportUpperBound()">1</method>
			<method name="protected double calculateNumericalVariance()">1</method>
			<method name="public double logDensity(double x)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.NumberIsTooSmallException</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>3</noc>
		<cbo>89</cbo>
		<rfc>5</rfc>
		<lcom>2</lcom>
		<ca>86</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>41</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.5</amc>
		<cc>
			<method name="public boolean getBoundIsAllowed()">1</method>
			<method name="public Number getMin()">1</method>
			<method name="public void _init_(org.apache.commons.math3.exception.util.Localizable specific, Number wrong, Number min, boolean boundIsAllowed)">0</method>
			<method name="public void _init_(Number wrong, Number min, boolean boundIsAllowed)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.EmpiricalDistribution$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$UpperBoundMapper</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>24</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.666666666666667</amc>
		<cc>
			<method name="public double unboundedToBounded(double y)">1</method>
			<method name="public double boundedToUnbounded(double x)">1</method>
			<method name="public void _init_(double upper)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.neuralnet.oned.NeuronString</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>20</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>0.42857142857142855</lcom3>
		<loc>288</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3125</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>34.5</amc>
		<cc>
			<method name="private Object writeReplace()">2</method>
			<method name="void _init_(boolean wrap, double[][] featuresList)">0</method>
			<method name="private void createLinks()">4</method>
			<method name="public org.apache.commons.math3.ml.neuralnet.Network getNetwork()">1</method>
			<method name="private void readObject(java.io.ObjectInputStream in)">1</method>
			<method name="public int getSize()">1</method>
			<method name="public double[] getFeatures(int i)">3</method>
			<method name="public void _init_(int num, boolean wrap, org.apache.commons.math3.ml.neuralnet.FeatureInitializer[] featureInit)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.Frequency$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.JacobianMatrices$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.MultivariateNormalDistribution</name>
		<wmc>8</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>35</rfc>
		<lcom>12</lcom>
		<ca>2</ca>
		<ce>13</ce>
		<npm>7</npm>
		<lcom3>0.6</lcom3>
		<loc>330</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.46875</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>39.625</amc>
		<cc>
			<method name="public double[] sample()">3</method>
			<method name="public double density(double[] vals)">1</method>
			<method name="public void _init_(double[] means, double[][] covariances)">0</method>
			<method name="public double[] getMeans()">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getCovariances()">1</method>
			<method name="public double[] getStandardDeviations()">2</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, double[] means, double[][] covariances)">0</method>
			<method name="private double getExponentTerm(double[] values)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer$IdentityPreconditioner</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public double[] precondition(double[] variables, double[] r)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>6</noc>
		<cbo>19</cbo>
		<rfc>11</rfc>
		<lcom>11</lcom>
		<ca>11</ca>
		<ce>8</ce>
		<npm>4</npm>
		<lcom3>0.8</lcom3>
		<loc>68</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4583333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.0</amc>
		<cc>
			<method name="public transient org.apache.commons.math3.optim.PointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[] optData)">1</method>
			<method name="public volatile Object optimize(org.apache.commons.math3.optim.OptimizationData[] x0)">1</method>
			<method name="public double computeObjectiveValue(double[] params)">1</method>
			<method name="protected transient void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[] optData)">4</method>
			<method name="protected void _init_(org.apache.commons.math3.optim.ConvergenceChecker checker)">0</method>
			<method name="public org.apache.commons.math3.optim.nonlinear.scalar.GoalType getGoalType()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.clustering.DBSCANClusterer$PointStatus</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.888888888888889</lcom3>
		<loc>45</loc>
		<dam>0.3333333333333333</dam>
		<moa>3</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>9.5</amc>
		<cc>
			<method name="public static org.apache.commons.math3.ml.clustering.DBSCANClusterer$PointStatus[] values()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static org.apache.commons.math3.ml.clustering.DBSCANClusterer$PointStatus valueOf(String name)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>18</rfc>
		<lcom>6</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>230</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.25</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>56.5</amc>
		<cc>
			<method name="public static java.util.Collection reducePoints(java.util.Collection points)">13</method>
			<method name="private static transient java.util.List buildQuadrilateral(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] points)">3</method>
			<method name="private void _init_()">0</method>
			<method name="private static boolean insideQuadrilateral(org.apache.commons.math3.geometry.euclidean.twod.Vector2D point, java.util.List quadrilateralPoints)">8</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.solvers.BaseSecantSolver</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>3</noc>
		<cbo>12</cbo>
		<rfc>24</rfc>
		<lcom>1</lcom>
		<ca>3</ca>
		<ce>9</ce>
		<npm>3</npm>
		<lcom3>0.5555555555555556</lcom3>
		<loc>284</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5714285714285714</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>39.142857142857146</amc>
		<cc>
			<method name="public double solve(int maxEval, org.apache.commons.math3.analysis.UnivariateFunction f, double min, double max, double startValue)">1</method>
			<method name="protected void _init_(double absoluteAccuracy, org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method method)">0</method>
			<method name="protected void _init_(double relativeAccuracy, double absoluteAccuracy, org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method method)">0</method>
			<method name="public double solve(int maxEval, org.apache.commons.math3.analysis.UnivariateFunction f, double min, double max, org.apache.commons.math3.analysis.solvers.AllowedSolution allowedSolution)">1</method>
			<method name="protected final double doSolve()">1</method>
			<method name="protected void _init_(double relativeAccuracy, double absoluteAccuracy, double functionValueAccuracy, org.apache.commons.math3.analysis.solvers.BaseSecantSolver$Method method)">0</method>
			<method name="public double solve(int maxEval, org.apache.commons.math3.analysis.UnivariateFunction f, double min, double max, double startValue, org.apache.commons.math3.analysis.solvers.AllowedSolution allowedSolution)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Atan2</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public double value(double x, double y)">1</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.clustering.Clusterable</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>9</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double[] getPoint()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.twod.hull.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.ExponentialDistribution</name>
		<wmc>19</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>32</rfc>
		<lcom>137</lcom>
		<ca>2</ca>
		<ce>10</ce>
		<npm>17</npm>
		<lcom3>0.8518518518518519</lcom3>
		<loc>288</loc>
		<dam>0.8333333333333334</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5185185185185185</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.842105263157896</amc>
		<cc>
			<method name="protected double getSolverAbsoluteAccuracy()">1</method>
			<method name="public double inverseCumulativeProbability(double p)">1</method>
			<method name="public double density(double x)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="public boolean isSupportConnected()">1</method>
			<method name="public boolean isSupportUpperBoundInclusive()">1</method>
			<method name="public double cumulativeProbability(double x)">2</method>
			<method name="public double getMean()">1</method>
			<method name="public boolean isSupportLowerBoundInclusive()">1</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, double mean)">0</method>
			<method name="public void _init_(double mean, double inverseCumAccuracy)">0</method>
			<method name="public double getSupportLowerBound()">1</method>
			<method name="public void _init_(double mean)">0</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, double mean, double inverseCumAccuracy)">0</method>
			<method name="public double sample()">5</method>
			<method name="public double getNumericalVariance()">1</method>
			<method name="public double getNumericalMean()">1</method>
			<method name="public double getSupportUpperBound()">1</method>
			<method name="public double logDensity(double x)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.summary.Sum</name>
		<wmc>13</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>17</rfc>
		<lcom>50</lcom>
		<ca>5</ca>
		<ce>6</ce>
		<npm>13</npm>
		<lcom3>0.5833333333333334</lcom3>
		<loc>158</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3076923076923077</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.923076923076923</amc>
		<cc>
			<method name="public long getN()">1</method>
			<method name="public void clear()">1</method>
			<method name="public double evaluate(double[] values, double[] weights)">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()">1</method>
			<method name="public double getResult()">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic copy()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public static void copy(org.apache.commons.math3.stat.descriptive.summary.Sum source, org.apache.commons.math3.stat.descriptive.summary.Sum dest)">1</method>
			<method name="public double evaluate(double[] values, int begin, int length)">1</method>
			<method name="public org.apache.commons.math3.stat.descriptive.summary.Sum copy()">1</method>
			<method name="public double evaluate(double[] values, double[] weights, int begin, int length)">1</method>
			<method name="public void increment(double d)">1</method>
			<method name="public void _init_(org.apache.commons.math3.stat.descriptive.summary.Sum original)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.FastMath$ExpFracTable</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>2</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>18</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static double[] access$300()">1</method>
			<method name="static double[] access$200()">1</method>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.interpolation.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>93</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>44.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(double step)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinates$DataTransferObject</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.5</lcom3>
		<loc>31</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.5</amc>
		<cc>
			<method name="private Object readResolve()">1</method>
			<method name="public void _init_(double x, double y, double z)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximization</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>47</rfc>
		<lcom>7</lcom>
		<ca>0</ca>
		<ce>17</ce>
		<npm>6</npm>
		<lcom3>0.8</lcom3>
		<loc>671</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>110.0</amc>
		<cc>
			<method name="public org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution getFittedModel()">1</method>
			<method name="public void _init_(double[][] data)">0</method>
			<method name="public void fit(org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution initialMixture)">1</method>
			<method name="public void fit(org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution initialMixture, int maxIterations, double threshold)">1</method>
			<method name="public double getLogLikelihood()">1</method>
			<method name="public static org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution estimate(double[][] data, int numComponents)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.sampling.StepNormalizer</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>24</rfc>
		<lcom>10</lcom>
		<ca>0</ca>
		<ce>9</ce>
		<npm>6</npm>
		<lcom3>0.2777777777777778</lcom3>
		<loc>305</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.4166666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.88888888888889</amc>
		<cc>
			<method name="public void _init_(double h, org.apache.commons.math3.ode.sampling.FixedStepHandler handler, org.apache.commons.math3.ode.sampling.StepNormalizerBounds bounds)">0</method>
			<method name="private boolean isNextInStep(double nextTime, org.apache.commons.math3.ode.sampling.StepInterpolator interpolator)">4</method>
			<method name="public void handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator interpolator, boolean isLast)">1</method>
			<method name="public void _init_(double h, org.apache.commons.math3.ode.sampling.FixedStepHandler handler, org.apache.commons.math3.ode.sampling.StepNormalizerMode mode, org.apache.commons.math3.ode.sampling.StepNormalizerBounds bounds)">0</method>
			<method name="private void storeStep(org.apache.commons.math3.ode.sampling.StepInterpolator interpolator, double t)">1</method>
			<method name="private void doNormalizedStep(boolean isLast)">3</method>
			<method name="public void _init_(double h, org.apache.commons.math3.ode.sampling.FixedStepHandler handler, org.apache.commons.math3.ode.sampling.StepNormalizerMode mode)">0</method>
			<method name="public void _init_(double h, org.apache.commons.math3.ode.sampling.FixedStepHandler handler)">0</method>
			<method name="public void init(double t0, double[] y0, double t)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.spherical.oned.LimitAngle</name>
		<wmc>14</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>15</rfc>
		<lcom>47</lcom>
		<ca>2</ca>
		<ce>7</ce>
		<npm>14</npm>
		<lcom3>0.6923076923076923</lcom3>
		<loc>105</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.23809523809523808</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.285714285714286</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.geometry.spherical.oned.S1Point location, boolean direct, double tolerance)">0</method>
			<method name="public org.apache.commons.math3.geometry.spherical.oned.S1Point getLocation()">1</method>
			<method name="public boolean isDirect()">1</method>
			<method name="public org.apache.commons.math3.geometry.spherical.oned.LimitAngle getReverse()">2</method>
			<method name="public org.apache.commons.math3.geometry.spherical.oned.LimitAngle copySelf()">1</method>
			<method name="public double getTolerance()">1</method>
			<method name="public org.apache.commons.math3.geometry.spherical.oned.ArcsSet wholeSpace()">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.partitioning.Hyperplane copySelf()">1</method>
			<method name="public boolean sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane other)">2</method>
			<method name="public org.apache.commons.math3.geometry.Point project(org.apache.commons.math3.geometry.Point point)">1</method>
			<method name="public double getOffset(org.apache.commons.math3.geometry.Point point)">2</method>
			<method name="public volatile org.apache.commons.math3.geometry.partitioning.SubHyperplane wholeHyperplane()">1</method>
			<method name="public org.apache.commons.math3.geometry.spherical.oned.SubLimitAngle wholeHyperplane()">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.partitioning.Region wholeSpace()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$IdentityPreconditioner</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public double[] precondition(double[] variables, double[] r)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.moment.VectorialCovariance</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>14</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>7</npm>
		<lcom3>0.4000000000000001</lcom3>
		<loc>286</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3142857142857143</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>39.142857142857146</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="public long getN()">1</method>
			<method name="public void increment(double[] v)">1</method>
			<method name="public int hashCode()">2</method>
			<method name="public void _init_(int dimension, boolean isBiasCorrected)">0</method>
			<method name="public boolean equals(Object obj)">7</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getResult()">5</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.direct.SimplexOptimizer</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>24</rfc>
		<lcom>19</lcom>
		<ca>2</ca>
		<ce>12</ce>
		<npm>4</npm>
		<lcom3>0.5</lcom3>
		<loc>163</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.26785714285714285</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.142857142857142</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public void setSimplex(org.apache.commons.math3.optimization.direct.AbstractSimplex simplex)">1</method>
			<method name="protected transient org.apache.commons.math3.optimization.PointValuePair optimizeInternal(int maxEval, org.apache.commons.math3.analysis.MultivariateFunction f, org.apache.commons.math3.optimization.GoalType goalType, org.apache.commons.math3.optimization.OptimizationData[] optData)">1</method>
			<method name="protected org.apache.commons.math3.optimization.PointValuePair doOptimize()">8</method>
			<method name="public void _init_(double rel, double abs)">0</method>
			<method name="public void _init_(org.apache.commons.math3.optimization.ConvergenceChecker checker)">0</method>
			<method name="private transient void parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[] optData)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.differentiation.SparseGradient$1</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>6</rfc>
		<lcom>15</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>5</npm>
		<lcom3>1.0</lcom3>
		<loc>27</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.3333333333333335</amc>
		<cc>
			<method name="public Class getRuntimeClass()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient getOne()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.SparseGradient getZero()">1</method>
			<method name="void _init_(org.apache.commons.math3.analysis.differentiation.SparseGradient)">0</method>
			<method name="public volatile Object getOne()">1</method>
			<method name="public volatile Object getZero()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.genetics.GeneticAlgorithm</name>
		<wmc>12</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>22</cbo>
		<rfc>29</rfc>
		<lcom>44</lcom>
		<ca>10</ca>
		<ce>12</ce>
		<npm>11</npm>
		<lcom3>0.8051948051948052</lcom3>
		<loc>193</loc>
		<dam>1.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.19318181818181818</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.5</amc>
		<cc>
			<method name="public double getMutationRate()">1</method>
			<method name="public org.apache.commons.math3.genetics.SelectionPolicy getSelectionPolicy()">1</method>
			<method name="public org.apache.commons.math3.genetics.Population nextGeneration(org.apache.commons.math3.genetics.Population current)">4</method>
			<method name="public static synchronized org.apache.commons.math3.random.RandomGenerator getRandomGenerator()">1</method>
			<method name="public org.apache.commons.math3.genetics.MutationPolicy getMutationPolicy()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public org.apache.commons.math3.genetics.Population evolve(org.apache.commons.math3.genetics.Population initial, org.apache.commons.math3.genetics.StoppingCondition condition)">2</method>
			<method name="public org.apache.commons.math3.genetics.CrossoverPolicy getCrossoverPolicy()">1</method>
			<method name="public static synchronized void setRandomGenerator(org.apache.commons.math3.random.RandomGenerator random)">1</method>
			<method name="public double getCrossoverRate()">1</method>
			<method name="public int getGenerationsEvolved()">1</method>
			<method name="public void _init_(org.apache.commons.math3.genetics.CrossoverPolicy crossoverPolicy, double crossoverRate, org.apache.commons.math3.genetics.MutationPolicy mutationPolicy, double mutationRate, org.apache.commons.math3.genetics.SelectionPolicy selectionPolicy)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator</name>
		<wmc>11</wmc>
		<dit>0</dit>
		<noc>3</noc>
		<cbo>16</cbo>
		<rfc>37</rfc>
		<lcom>31</lcom>
		<ca>3</ca>
		<ce>13</ce>
		<npm>8</npm>
		<lcom3>0.7333333333333334</lcom3>
		<loc>646</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3522727272727273</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>56.90909090909091</amc>
		<cc>
			<method name="public void setSafety(double safety)">1</method>
			<method name="public void setMaxGrowth(double maxGrowth)">1</method>
			<method name="public double getMaxGrowth()">1</method>
			<method name="protected void _init_(String name, boolean fsal, double[] c, double[][] a, double[] b, org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator prototype, double minStep, double maxStep, double[] vecAbsoluteTolerance, double[] vecRelativeTolerance)">0</method>
			<method name="public abstract int getOrder()">1</method>
			<method name="public double getSafety()">1</method>
			<method name="protected abstract double estimateError(double[][], double[], double[], double)">1</method>
			<method name="public double getMinReduction()">1</method>
			<method name="protected void _init_(String name, boolean fsal, double[] c, double[][] a, double[] b, org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator prototype, double minStep, double maxStep, double scalAbsoluteTolerance, double scalRelativeTolerance)">0</method>
			<method name="public void setMinReduction(double minReduction)">1</method>
			<method name="public void integrate(org.apache.commons.math3.ode.ExpandableStatefulODE equations, double t)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.ValueServer</name>
		<wmc>26</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>50</rfc>
		<lcom>93</lcom>
		<ca>0</ca>
		<ce>10</ce>
		<npm>21</npm>
		<lcom3>0.8061538461538461</lcom3>
		<loc>422</loc>
		<dam>0.5384615384615384</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.1581196581196581</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.73076923076923</amc>
		<cc>
			<method name="public double getMu()">1</method>
			<method name="public double[] fill(int length)">1</method>
			<method name="public void setValuesFileURL(java.net.URL url)">1</method>
			<method name="public void setMode(int mode)">1</method>
			<method name="public void setValuesFileURL(String url)">1</method>
			<method name="public void fill(double[] values)">1</method>
			<method name="public void closeReplayFile()">1</method>
			<method name="private double getNextReplay()">1</method>
			<method name="public void computeDistribution()">1</method>
			<method name="public void resetReplayFile()">1</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator generator)">0</method>
			<method name="public java.net.URL getValuesFileURL()">1</method>
			<method name="private double getNextExponential()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void computeDistribution(int binCount)">1</method>
			<method name="public void setSigma(double sigma)">1</method>
			<method name="public org.apache.commons.math3.random.EmpiricalDistribution getEmpiricalDistribution()">1</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomDataImpl randomData)">0</method>
			<method name="private double getNextDigest()">1</method>
			<method name="private double getNextGaussian()">1</method>
			<method name="public void reSeed(long seed)">1</method>
			<method name="public void setMu(double mu)">1</method>
			<method name="private double getNextUniform()">1</method>
			<method name="public double getNext()">1</method>
			<method name="public double getSigma()">1</method>
			<method name="public int getMode()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.GaussianFitter$ParameterGuesser</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>22</rfc>
		<lcom>26</lcom>
		<ca>2</ca>
		<ce>10</ce>
		<npm>2</npm>
		<lcom3>0.8571428571428571</lcom3>
		<loc>351</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.59375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>42.5</amc>
		<cc>
			<method name="private int findMaxY(org.apache.commons.math3.fitting.WeightedObservedPoint[] points)">3</method>
			<method name="public double[] guess()">1</method>
			<method name="private double[] basicGuess(org.apache.commons.math3.fitting.WeightedObservedPoint[] points)">1</method>
			<method name="private org.apache.commons.math3.fitting.WeightedObservedPoint[] getInterpolationPointsForY(org.apache.commons.math3.fitting.WeightedObservedPoint[] points, int startIdx, int idxStep, double y)">1</method>
			<method name="private double interpolateXAtY(org.apache.commons.math3.fitting.WeightedObservedPoint[] points, int startIdx, int idxStep, double y)">1</method>
			<method name="public void _init_(org.apache.commons.math3.fitting.WeightedObservedPoint[] observations)">0</method>
			<method name="private boolean isBetween(double value, double boundary1, double boundary2)">5</method>
			<method name="private org.apache.commons.math3.fitting.WeightedObservedPoint[] sortObservations(org.apache.commons.math3.fitting.WeightedObservedPoint[] unsorted)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.univariate.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.spherical.oned.S1Point</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>20</rfc>
		<lcom>29</lcom>
		<ca>5</ca>
		<ce>6</ce>
		<npm>9</npm>
		<lcom3>0.75</lcom3>
		<loc>107</loc>
		<dam>0.75</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.25</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>8.363636363636363</amc>
		<cc>
			<method name="public boolean isNaN()">1</method>
			<method name="public static double distance(org.apache.commons.math3.geometry.spherical.oned.S1Point p1, org.apache.commons.math3.geometry.spherical.oned.S1Point p2)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.Vector2D getVector()">1</method>
			<method name="private void _init_(double alpha, org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector)">0</method>
			<method name="public int hashCode()">2</method>
			<method name="public void _init_(double alpha)">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public double distance(org.apache.commons.math3.geometry.Point point)">1</method>
			<method name="public boolean equals(Object other)">5</method>
			<method name="public org.apache.commons.math3.geometry.Space getSpace()">1</method>
			<method name="public double getAlpha()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>11</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>4</npm>
		<lcom3>0.8941176470588236</lcom3>
		<loc>477</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2777777777777778</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>75.66666666666667</amc>
		<cc>
			<method name="protected org.apache.commons.math3.ode.sampling.StepInterpolator doCopy()">1</method>
			<method name="protected void computeInterpolatedStateAndDerivatives(double theta, double oneMinusThetaH)">7</method>
			<method name="public void _init_()">0</method>
			<method name="public void storeTime(double t)">1</method>
			<method name="public void _init_(org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolator interpolator)">0</method>
			<method name="public void reinitialize(org.apache.commons.math3.ode.AbstractIntegrator integrator, double[] y, double[][] yDotK, boolean forward, org.apache.commons.math3.ode.EquationsMapper primaryMapper, org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.univariate.UnivariateOptimizer</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>3</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>6</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>11</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>1.75</amc>
		<cc>
			<method name="public double end()">1</method>
			<method name="public void visit(int row, int column, double value)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.AbstractRealDistribution</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>17</noc>
		<cbo>29</cbo>
		<rfc>34</rfc>
		<lcom>39</lcom>
		<ca>18</ca>
		<ce>12</ce>
		<npm>8</npm>
		<lcom3>0.82</lcom3>
		<loc>311</loc>
		<dam>0.8</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.34545454545454546</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.818181818181817</amc>
		<cc>
			<method name="public double[] sample(int sampleSize)">3</method>
			<method name="protected double getSolverAbsoluteAccuracy()">1</method>
			<method name="public double inverseCumulativeProbability(double p)">1</method>
			<method name="protected void _init_(org.apache.commons.math3.random.RandomGenerator rng)">0</method>
			<method name="public double sample()">1</method>
			<method name="protected void _init_()">0</method>
			<method name="public double cumulativeProbability(double x0, double x1)">1</method>
			<method name="public double probability(double x0, double x1)">2</method>
			<method name="public double probability(double x)">1</method>
			<method name="public double logDensity(double x)">1</method>
			<method name="public void reseedRandomGenerator(long seed)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.special.Beta$1</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>0.5</lcom3>
		<loc>92</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8888888888888888</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>29.0</amc>
		<cc>
			<method name="protected double getA(int n, double x)">1</method>
			<method name="void _init_(double, double)">0</method>
			<method name="protected double getB(int n, double x)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.RealVector$SparseEntryIterator</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>13</rfc>
		<lcom>7</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>0.6</lcom3>
		<loc>106</loc>
		<dam>0.75</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.4444444444444444</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.0</amc>
		<cc>
			<method name="public org.apache.commons.math3.linear.RealVector$Entry next()">2</method>
			<method name="protected void advance(org.apache.commons.math3.linear.RealVector$Entry e)">5</method>
			<method name="public boolean hasNext()">2</method>
			<method name="public void remove()">1</method>
			<method name="public volatile Object next()">1</method>
			<method name="protected void _init_(org.apache.commons.math3.linear.RealVector)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.special.Gamma$1</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>0.0</lcom3>
		<loc>31</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8888888888888888</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.0</amc>
		<cc>
			<method name="void _init_(double)">0</method>
			<method name="protected double getA(int n, double x)">1</method>
			<method name="protected double getB(int n, double x)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.neuralnet.UpdateAction</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void update(org.apache.commons.math3.ml.neuralnet.Network, double[])">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.solvers.LaguerreSolver$ComplexSolver</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>26</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>356</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>70.0</amc>
		<cc>
			<method name="public org.apache.commons.math3.complex.Complex[] solveAll(org.apache.commons.math3.complex.Complex[] coefficients, org.apache.commons.math3.complex.Complex initial)">1</method>
			<method name="public org.apache.commons.math3.complex.Complex solve(org.apache.commons.math3.complex.Complex[] coefficients, org.apache.commons.math3.complex.Complex initial)">1</method>
			<method name="private void _init_(org.apache.commons.math3.analysis.solvers.LaguerreSolver)">0</method>
			<method name="public boolean isRoot(double min, double max, org.apache.commons.math3.complex.Complex z)">4</method>
			<method name="void _init_(org.apache.commons.math3.analysis.solvers.LaguerreSolver x0, org.apache.commons.math3.analysis.solvers.LaguerreSolver$1 x1)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer</name>
		<wmc>20</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>17</cbo>
		<rfc>43</rfc>
		<lcom>134</lcom>
		<ca>1</ca>
		<ce>16</ce>
		<npm>7</npm>
		<lcom3>0.8045112781954886</lcom3>
		<loc>280</loc>
		<dam>1.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.2916666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.65</amc>
		<cc>
			<method name="public int getMaxEvaluations()">1</method>
			<method name="private void checkParameters()">2</method>
			<method name="public org.apache.commons.math3.optimization.PointVectorValuePair optimize(int maxEval, org.apache.commons.math3.analysis.MultivariateVectorFunction f, double[] t, double[] w, double[] startPoint)">1</method>
			<method name="protected double[] getWeightRef()">1</method>
			<method name="protected double[] computeObjectiveValue(double[] point)">1</method>
			<method name="public org.apache.commons.math3.optimization.ConvergenceChecker getConvergenceChecker()">1</method>
			<method name="public double[] getStartPoint()">1</method>
			<method name="public double[] getTarget()">1</method>
			<method name="protected org.apache.commons.math3.optimization.PointVectorValuePair optimizeInternal(int maxEval, org.apache.commons.math3.analysis.MultivariateVectorFunction f, double[] t, double[] w, double[] startPoint)">6</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getWeight()">1</method>
			<method name="protected void _init_()">0</method>
			<method name="public int getEvaluations()">1</method>
			<method name="protected org.apache.commons.math3.analysis.MultivariateVectorFunction getObjectiveFunction()">1</method>
			<method name="protected void _init_(org.apache.commons.math3.optimization.ConvergenceChecker checker)">0</method>
			<method name="protected void setUp()">2</method>
			<method name="protected abstract org.apache.commons.math3.optimization.PointVectorValuePair doOptimize()">1</method>
			<method name="protected double[] getTargetRef()">1</method>
			<method name="protected transient org.apache.commons.math3.optimization.PointVectorValuePair optimizeInternal(int maxEval, org.apache.commons.math3.analysis.MultivariateVectorFunction f, org.apache.commons.math3.optimization.OptimizationData[] optData)">1</method>
			<method name="protected transient org.apache.commons.math3.optimization.PointVectorValuePair optimize(int maxEval, org.apache.commons.math3.analysis.MultivariateVectorFunction f, org.apache.commons.math3.optimization.OptimizationData[] optData)">1</method>
			<method name="private transient void parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[] optData)">5</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.solvers.PegasusSolver</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>27</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.875</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.75</amc>
		<cc>
			<method name="public void _init_(double absoluteAccuracy)">0</method>
			<method name="public void _init_(double relativeAccuracy, double absoluteAccuracy, double functionValueAccuracy)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(double relativeAccuracy, double absoluteAccuracy)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.MultivariateVectorFunction</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>30</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>30</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double[] value(double[])">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.clustering.DBSCANClusterer</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>29</rfc>
		<lcom>3</lcom>
		<ca>0</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>0.4166666666666667</lcom3>
		<loc>219</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.32142857142857145</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>30.0</amc>
		<cc>
			<method name="private java.util.List getNeighbors(org.apache.commons.math3.stat.clustering.Clusterable point, java.util.Collection points)">2</method>
			<method name="public int getMinPts()">1</method>
			<method name="private org.apache.commons.math3.stat.clustering.Cluster expandCluster(org.apache.commons.math3.stat.clustering.Cluster cluster, org.apache.commons.math3.stat.clustering.Clusterable point, java.util.List neighbors, java.util.Collection points, java.util.Map visited)">5</method>
			<method name="private java.util.List merge(java.util.List one, java.util.List two)">2</method>
			<method name="public double getEps()">1</method>
			<method name="public java.util.List cluster(java.util.Collection points)">1</method>
			<method name="public void _init_(double eps, int minPts)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>6</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.geometry.partitioning.BSPTree merge(org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.BSPTree, boolean, boolean)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.EigenDecomposition$Solver</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>23</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>11</ce>
		<npm>4</npm>
		<lcom3>0.22222222222222218</lcom3>
		<loc>361</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.30612244897959184</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>50.142857142857146</amc>
		<cc>
			<method name="private double eigenvalueNorm(int i)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealVector b)">5</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix solve(org.apache.commons.math3.linear.RealMatrix b)">8</method>
			<method name="void _init_(double[] x0, double[] x1, org.apache.commons.math3.linear.ArrayRealVector[] x2, org.apache.commons.math3.linear.EigenDecomposition$1 x3)">0</method>
			<method name="private void _init_(double[] realEigenvalues, double[] imagEigenvalues, org.apache.commons.math3.linear.ArrayRealVector[] eigenvectors)">0</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getInverse()">5</method>
			<method name="public boolean isNonSingular()">5</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression</name>
		<wmc>12</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>42</rfc>
		<lcom>36</lcom>
		<ca>0</ca>
		<ce>10</ce>
		<npm>9</npm>
		<lcom3>0.5909090909090909</lcom3>
		<loc>235</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.416666666666668</amc>
		<cc>
			<method name="protected org.apache.commons.math3.linear.RealVector calculateBeta()">1</method>
			<method name="public double calculateResidualSumOfSquares()">1</method>
			<method name="public double calculateAdjustedRSquared()">1</method>
			<method name="protected org.apache.commons.math3.linear.RealMatrix calculateBetaVariance()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix calculateHat()">5</method>
			<method name="public void newSampleData(double[] y, double[][] x)">1</method>
			<method name="public double calculateRSquared()">1</method>
			<method name="public double calculateTotalSumOfSquares()">1</method>
			<method name="protected void newXSampleData(double[][] x)">1</method>
			<method name="public void newSampleData(double[] data, int nobs, int nvars)">1</method>
			<method name="public void _init_(double threshold)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.GaussianCurveFitter</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>29</rfc>
		<lcom>3</lcom>
		<ca>0</ca>
		<ce>14</ce>
		<npm>3</npm>
		<lcom3>0.4</lcom3>
		<loc>120</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.45</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.5</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public org.apache.commons.math3.fitting.GaussianCurveFitter withMaxIterations(int newMaxIter)">1</method>
			<method name="private void _init_(double[] initialGuess, int maxIter)">0</method>
			<method name="public org.apache.commons.math3.fitting.GaussianCurveFitter withStartPoint(double[] newStart)">1</method>
			<method name="public static org.apache.commons.math3.fitting.GaussianCurveFitter create()">1</method>
			<method name="protected org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem getProblem(java.util.Collection observations)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.Vector</name>
		<wmc>19</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>27</cbo>
		<rfc>19</rfc>
		<lcom>171</lcom>
		<ca>25</ca>
		<ce>2</ce>
		<npm>19</npm>
		<lcom3>2.0</lcom3>
		<loc>19</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.42105263157894735</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.geometry.Vector normalize()">1</method>
			<method name="public abstract org.apache.commons.math3.geometry.Vector subtract(org.apache.commons.math3.geometry.Vector)">1</method>
			<method name="public abstract double distanceSq(org.apache.commons.math3.geometry.Vector)">1</method>
			<method name="public abstract double distance(org.apache.commons.math3.geometry.Vector)">1</method>
			<method name="public abstract double getNorm()">1</method>
			<method name="public abstract double getNormInf()">1</method>
			<method name="public abstract org.apache.commons.math3.geometry.Vector negate()">1</method>
			<method name="public abstract double dotProduct(org.apache.commons.math3.geometry.Vector)">1</method>
			<method name="public abstract boolean isInfinite()">1</method>
			<method name="public abstract org.apache.commons.math3.geometry.Vector scalarMultiply(double)">1</method>
			<method name="public abstract double distanceInf(org.apache.commons.math3.geometry.Vector)">1</method>
			<method name="public abstract double getNorm1()">1</method>
			<method name="public abstract double getNormSq()">1</method>
			<method name="public abstract org.apache.commons.math3.geometry.Vector add(double, org.apache.commons.math3.geometry.Vector)">1</method>
			<method name="public abstract double distance1(org.apache.commons.math3.geometry.Vector)">1</method>
			<method name="public abstract org.apache.commons.math3.geometry.Vector add(org.apache.commons.math3.geometry.Vector)">1</method>
			<method name="public abstract org.apache.commons.math3.geometry.Vector getZero()">1</method>
			<method name="public abstract String toString(java.text.NumberFormat)">1</method>
			<method name="public abstract org.apache.commons.math3.geometry.Vector subtract(double, org.apache.commons.math3.geometry.Vector)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.solvers.BracketedUnivariateSolver</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>4</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double solve(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double, double, org.apache.commons.math3.analysis.solvers.AllowedSolution)">1</method>
			<method name="public abstract double solve(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double, org.apache.commons.math3.analysis.solvers.AllowedSolution)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.neuralnet.sofm.KohonenUpdateAction</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>30</rfc>
		<lcom>7</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>3</npm>
		<lcom3>0.7</lcom3>
		<loc>176</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.3958333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>27.666666666666668</amc>
		<cc>
			<method name="private org.apache.commons.math3.ml.neuralnet.Neuron findAndUpdateBestNeuron(org.apache.commons.math3.ml.neuralnet.Network net, double[] features, double learningRate)">1</method>
			<method name="private double[] computeFeatures(double[] current, double[] sample, double learningRate)">1</method>
			<method name="public void update(org.apache.commons.math3.ml.neuralnet.Network net, double[] features)">4</method>
			<method name="public void _init_(org.apache.commons.math3.ml.distance.DistanceMeasure distance, org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunction learningFactor, org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunction neighbourhoodSize)">0</method>
			<method name="private void updateNeighbouringNeuron(org.apache.commons.math3.ml.neuralnet.Neuron n, double[] features, double learningRate)">1</method>
			<method name="public long getNumberOfCalls()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.888888888888889</lcom3>
		<loc>45</loc>
		<dam>0.3333333333333333</dam>
		<moa>3</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>9.5</amc>
		<cc>
			<method name="public static org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood valueOf(String name)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood[] values()">1</method>
			<method name="private void _init_(String, int)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.complex.ComplexField$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.HarmonicOscillator</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>14</rfc>
		<lcom>9</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>4</npm>
		<lcom3>0.6</lcom3>
		<loc>115</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.666666666666668</amc>
		<cc>
			<method name="private static double value(double xTimesOmegaPlusPhase, double amplitude)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="public double value(double x)">1</method>
			<method name="public org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
			<method name="public void _init_(double amplitude, double omega, double phase)">0</method>
			<method name="static double access$000(double x0, double x1)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.hull.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.RealFieldElement</name>
		<wmc>49</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>49</rfc>
		<lcom>1176</lcom>
		<ca>6</ca>
		<ce>2</ce>
		<npm>49</npm>
		<lcom3>2.0</lcom3>
		<loc>49</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2585034013605442</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract Object sqrt()">1</method>
			<method name="public abstract Object pow(Object)">1</method>
			<method name="public abstract Object abs()">1</method>
			<method name="public abstract Object pow(double)">1</method>
			<method name="public abstract Object scalb(int)">1</method>
			<method name="public abstract Object cos()">1</method>
			<method name="public abstract Object divide(double)">1</method>
			<method name="public abstract Object linearCombination(Object, Object, Object, Object)">1</method>
			<method name="public abstract Object exp()">1</method>
			<method name="public abstract Object remainder(Object)">1</method>
			<method name="public abstract Object linearCombination(Object, Object, Object, Object, Object, Object, Object, Object)">1</method>
			<method name="public abstract Object asin()">1</method>
			<method name="public abstract Object atan()">1</method>
			<method name="public abstract Object copySign(double)">1</method>
			<method name="public abstract Object ceil()">1</method>
			<method name="public abstract Object asinh()">1</method>
			<method name="public abstract Object remainder(double)">1</method>
			<method name="public abstract Object linearCombination(double, Object, double, Object, double, Object, double, Object)">1</method>
			<method name="public abstract Object cosh()">1</method>
			<method name="public abstract Object linearCombination(double[], Object[])">1</method>
			<method name="public abstract Object acos()">1</method>
			<method name="public abstract Object atanh()">1</method>
			<method name="public abstract Object signum()">1</method>
			<method name="public abstract Object hypot(Object)">1</method>
			<method name="public abstract Object linearCombination(double, Object, double, Object)">1</method>
			<method name="public abstract Object acosh()">1</method>
			<method name="public abstract Object subtract(double)">1</method>
			<method name="public abstract long round()">1</method>
			<method name="public abstract Object rootN(int)">1</method>
			<method name="public abstract Object atan2(Object)">1</method>
			<method name="public abstract Object floor()">1</method>
			<method name="public abstract Object linearCombination(double, Object, double, Object, double, Object)">1</method>
			<method name="public abstract Object multiply(double)">1</method>
			<method name="public abstract Object log1p()">1</method>
			<method name="public abstract Object linearCombination(Object[], Object[])">1</method>
			<method name="public abstract Object log()">1</method>
			<method name="public abstract Object rint()">1</method>
			<method name="public abstract Object linearCombination(Object, Object, Object, Object, Object, Object)">1</method>
			<method name="public abstract Object copySign(Object)">1</method>
			<method name="public abstract Object tan()">1</method>
			<method name="public abstract Object sin()">1</method>
			<method name="public abstract Object pow(int)">1</method>
			<method name="public abstract Object tanh()">1</method>
			<method name="public abstract double getReal()">1</method>
			<method name="public abstract Object sinh()">1</method>
			<method name="public abstract Object expm1()">1</method>
			<method name="public abstract Object cbrt()">1</method>
			<method name="public abstract Object add(double)">1</method>
			<method name="public abstract Object reciprocal()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.CholeskyDecomposition$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.linear.SimplexSolver</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>45</rfc>
		<lcom>11</lcom>
		<ca>0</ca>
		<ce>9</ce>
		<npm>3</npm>
		<lcom3>0.75</lcom3>
		<loc>353</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>48.857142857142854</amc>
		<cc>
			<method name="public org.apache.commons.math3.optimization.PointValuePair doOptimize()">1</method>
			<method name="public void _init_()">0</method>
			<method name="protected void solvePhase1(org.apache.commons.math3.optimization.linear.SimplexTableau tableau)">1</method>
			<method name="protected void doIteration(org.apache.commons.math3.optimization.linear.SimplexTableau tableau)">1</method>
			<method name="private Integer getPivotColumn(org.apache.commons.math3.optimization.linear.SimplexTableau tableau)">3</method>
			<method name="private Integer getPivotRow(org.apache.commons.math3.optimization.linear.SimplexTableau tableau, int col)">16</method>
			<method name="public void _init_(double epsilon, int maxUlps)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.linear.LinearConstraint</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>24</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>9</npm>
		<lcom3>0.55</lcom3>
		<loc>162</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.29545454545454547</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>13.363636363636363</amc>
		<cc>
			<method name="private void writeObject(java.io.ObjectOutputStream oos)">1</method>
			<method name="public org.apache.commons.math3.optim.linear.Relationship getRelationship()">1</method>
			<method name="public int hashCode()">1</method>
			<method name="public double getValue()">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector getCoefficients()">1</method>
			<method name="public void _init_(double[] coefficients, org.apache.commons.math3.optim.linear.Relationship relationship, double value)">0</method>
			<method name="private void readObject(java.io.ObjectInputStream ois)">1</method>
			<method name="public void _init_(double[] lhsCoefficients, double lhsConstant, org.apache.commons.math3.optim.linear.Relationship relationship, double[] rhsCoefficients, double rhsConstant)">0</method>
			<method name="public boolean equals(Object other)">6</method>
			<method name="public void _init_(org.apache.commons.math3.linear.RealVector lhsCoefficients, double lhsConstant, org.apache.commons.math3.optim.linear.Relationship relationship, org.apache.commons.math3.linear.RealVector rhsCoefficients, double rhsConstant)">0</method>
			<method name="public void _init_(org.apache.commons.math3.linear.RealVector coefficients, org.apache.commons.math3.optim.linear.Relationship relationship, double value)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.Well44497b</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>9</rfc>
		<lcom>10</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>1.25</lcom3>
		<loc>202</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.45</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>38.4</amc>
		<cc>
			<method name="protected int next(int bits)">2</method>
			<method name="public void _init_(long seed)">0</method>
			<method name="public void _init_(int seed)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(int[] seed)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.direct.PowellOptimizer</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>26</rfc>
		<lcom>17</lcom>
		<ca>2</ca>
		<ce>12</ce>
		<npm>4</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>418</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>58.142857142857146</amc>
		<cc>
			<method name="public void _init_(double rel, double abs, double lineRel, double lineAbs)">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(double rel, double abs, double lineRel, double lineAbs, org.apache.commons.math3.optimization.ConvergenceChecker checker)">0</method>
			<method name="public void _init_(double rel, double abs, org.apache.commons.math3.optimization.ConvergenceChecker checker)">0</method>
			<method name="protected org.apache.commons.math3.optimization.PointValuePair doOptimize()">12</method>
			<method name="public void _init_(double rel, double abs)">0</method>
			<method name="private double[][] newPointAndDirection(double[] p, double[] d, double optimum)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.summary.SumOfSquares</name>
		<wmc>11</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>14</rfc>
		<lcom>27</lcom>
		<ca>4</ca>
		<ce>6</ce>
		<npm>11</npm>
		<lcom3>0.5</lcom3>
		<loc>121</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2727272727272727</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.727272727272727</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="public long getN()">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic copy()">1</method>
			<method name="public double getResult()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public static void copy(org.apache.commons.math3.stat.descriptive.summary.SumOfSquares source, org.apache.commons.math3.stat.descriptive.summary.SumOfSquares dest)">1</method>
			<method name="public org.apache.commons.math3.stat.descriptive.summary.SumOfSquares copy()">1</method>
			<method name="public double evaluate(double[] values, int begin, int length)">1</method>
			<method name="public void increment(double d)">1</method>
			<method name="public void _init_(org.apache.commons.math3.stat.descriptive.summary.SumOfSquares original)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Log</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>9</rfc>
		<lcom>6</lcom>
		<ca>0</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>17</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.25</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double value(double x)">1</method>
			<method name="public org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.Well44497a</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>9</rfc>
		<lcom>10</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>1.25</lcom3>
		<loc>186</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.45</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>35.2</amc>
		<cc>
			<method name="protected int next(int bits)">2</method>
			<method name="public void _init_(long seed)">0</method>
			<method name="public void _init_(int seed)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(int[] seed)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.transform.DctNormalization</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.888888888888889</lcom3>
		<loc>45</loc>
		<dam>0.3333333333333333</dam>
		<moa>3</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>9.5</amc>
		<cc>
			<method name="public static org.apache.commons.math3.transform.DctNormalization[] values()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static org.apache.commons.math3.transform.DctNormalization valueOf(String name)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Log10</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>9</rfc>
		<lcom>6</lcom>
		<ca>0</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>17</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.25</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double value(double x)">1</method>
			<method name="public org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.sampling.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.enclosing.SupportBallGenerator</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.geometry.enclosing.EnclosingBall ballOnSupport(java.util.List)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.moment.FourthMoment</name>
		<wmc>12</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>12</rfc>
		<lcom>46</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>12</npm>
		<lcom3>0.5454545454545454</lcom3>
		<loc>142</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3888888888888889</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.666666666666666</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic copy()">1</method>
			<method name="public static void copy(org.apache.commons.math3.stat.descriptive.moment.FourthMoment source, org.apache.commons.math3.stat.descriptive.moment.FourthMoment dest)">1</method>
			<method name="public double getResult()">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.moment.FirstMoment copy()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(org.apache.commons.math3.stat.descriptive.moment.FourthMoment original)">0</method>
			<method name="public org.apache.commons.math3.stat.descriptive.moment.FourthMoment copy()">1</method>
			<method name="public void increment(double d)">2</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.moment.SecondMoment copy()">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.moment.ThirdMoment copy()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.moment.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.TooManyEvaluationsException</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>48</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>44</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>12</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.0</amc>
		<cc>
			<method name="public void _init_(Number max)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>10</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>5</npm>
		<lcom3>2.0</lcom3>
		<loc>5</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double estimate(int)">1</method>
			<method name="public abstract Object clone()">1</method>
			<method name="public abstract double getPercentileValue()">1</method>
			<method name="public abstract double height(int)">1</method>
			<method name="public abstract double processDataPoint(double)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.univariate.BracketFinder</name>
		<wmc>12</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>26</rfc>
		<lcom>34</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>11</npm>
		<lcom3>0.9</lcom3>
		<loc>426</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.31666666666666665</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>33.666666666666664</amc>
		<cc>
			<method name="private double eval(org.apache.commons.math3.analysis.UnivariateFunction f, double x)">1</method>
			<method name="public int getMaxEvaluations()">1</method>
			<method name="public int getEvaluations()">1</method>
			<method name="public void _init_(double growLimit, int maxEvaluations)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public double getFMid()">1</method>
			<method name="public double getLo()">1</method>
			<method name="public double getHi()">1</method>
			<method name="public double getFLo()">1</method>
			<method name="public double getFHi()">1</method>
			<method name="public void search(org.apache.commons.math3.analysis.UnivariateFunction func, org.apache.commons.math3.optimization.GoalType goal, double xA, double xB)">22</method>
			<method name="public double getMid()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableMatrixFunction</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.analysis.differentiation.DerivativeStructure[][] value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>5</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.analysis.MultivariateMatrixFunction jacobian()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.spherical.oned.Sphere1D$NoSubSpaceException</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>13</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.neuralnet.twod.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.BaseOptimizer</name>
		<wmc>13</wmc>
		<dit>1</dit>
		<noc>2</noc>
		<cbo>13</cbo>
		<rfc>24</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>11</ce>
		<npm>7</npm>
		<lcom3>0.5555555555555556</lcom3>
		<loc>133</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.34615384615384615</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.0</amc>
		<cc>
			<method name="public int getMaxEvaluations()">1</method>
			<method name="protected void _init_(org.apache.commons.math3.optim.ConvergenceChecker checker, int maxEval, int maxIter)">0</method>
			<method name="public Object optimize()">1</method>
			<method name="public transient Object optimize(org.apache.commons.math3.optim.OptimizationData[] optData)">1</method>
			<method name="protected transient void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[] optData)">4</method>
			<method name="protected void _init_(org.apache.commons.math3.optim.ConvergenceChecker checker)">0</method>
			<method name="public int getEvaluations()">1</method>
			<method name="public int getIterations()">1</method>
			<method name="public org.apache.commons.math3.optim.ConvergenceChecker getConvergenceChecker()">1</method>
			<method name="protected void incrementIterationCount()">1</method>
			<method name="protected void incrementEvaluationCount()">1</method>
			<method name="public int getMaxIterations()">1</method>
			<method name="protected abstract Object doOptimize()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.nonstiff.LutherIntegrator</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>0.25</lcom3>
		<loc>294</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>144.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(double step)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.HarmonicFitter</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>9</rfc>
		<lcom>3</lcom>
		<ca>0</ca>
		<ce>6</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>23</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.666666666666667</amc>
		<cc>
			<method name="public double[] fit(double[] initialGuess)">1</method>
			<method name="public void _init_(org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer optimizer)">0</method>
			<method name="public double[] fit()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.integration.UnivariateIntegrator</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>7</rfc>
		<lcom>21</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>7</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.35714285714285715</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double integrate(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double)">1</method>
			<method name="public abstract int getIterations()">1</method>
			<method name="public abstract double getAbsoluteAccuracy()">1</method>
			<method name="public abstract double getRelativeAccuracy()">1</method>
			<method name="public abstract int getEvaluations()">1</method>
			<method name="public abstract int getMaximalIterationCount()">1</method>
			<method name="public abstract int getMinimalIterationCount()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.moment.Kurtosis</name>
		<wmc>12</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>26</rfc>
		<lcom>24</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>12</npm>
		<lcom3>0.4848484848484848</lcom3>
		<loc>272</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.2361111111111111</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.416666666666668</amc>
		<cc>
			<method name="public long getN()">1</method>
			<method name="public void clear()">2</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic copy()">1</method>
			<method name="public org.apache.commons.math3.stat.descriptive.moment.Kurtosis copy()">1</method>
			<method name="public double getResult()">4</method>
			<method name="public static void copy(org.apache.commons.math3.stat.descriptive.moment.Kurtosis source, org.apache.commons.math3.stat.descriptive.moment.Kurtosis dest)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double evaluate(double[] values, int begin, int length)">1</method>
			<method name="public void _init_(org.apache.commons.math3.stat.descriptive.moment.Kurtosis original)">0</method>
			<method name="public void _init_(org.apache.commons.math3.stat.descriptive.moment.FourthMoment m4)">0</method>
			<method name="public void increment(double d)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.UniformRealDistribution</name>
		<wmc>16</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>23</rfc>
		<lcom>50</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>16</npm>
		<lcom3>0.7</lcom3>
		<loc>193</loc>
		<dam>0.75</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5208333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.8125</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, double lower, double upper, double inverseCumAccuracy)">0</method>
			<method name="public double inverseCumulativeProbability(double p)">1</method>
			<method name="public double density(double x)">3</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean isSupportConnected()">1</method>
			<method name="public boolean isSupportUpperBoundInclusive()">1</method>
			<method name="public double cumulativeProbability(double x)">3</method>
			<method name="public boolean isSupportLowerBoundInclusive()">1</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, double lower, double upper)">0</method>
			<method name="public void _init_(double lower, double upper)">0</method>
			<method name="public double getSupportLowerBound()">1</method>
			<method name="public double sample()">1</method>
			<method name="public void _init_(double lower, double upper, double inverseCumAccuracy)">0</method>
			<method name="public double getNumericalMean()">1</method>
			<method name="public double getNumericalVariance()">1</method>
			<method name="public double getSupportUpperBound()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.PolynomialFitter</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>22</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.333333333333333</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer optimizer)">0</method>
			<method name="public double[] fit(int maxEval, double[] guess)">1</method>
			<method name="public double[] fit(double[] guess)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.differentiation.GradientFunction</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>71</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>34.0</amc>
		<cc>
			<method name="public double[] value(double[] point)">3</method>
			<method name="public void _init_(org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction f)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet</name>
		<wmc>17</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>24</cbo>
		<rfc>95</rfc>
		<lcom>136</lcom>
		<ca>2</ca>
		<ce>24</ce>
		<npm>11</npm>
		<lcom3>0.9375</lcom3>
		<loc>780</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.27205882352941174</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>44.8235294117647</amc>
		<cc>
			<method name="private static void insertEdges(double hyperplaneThickness, org.apache.commons.math3.geometry.partitioning.BSPTree node, java.util.List edges)">10</method>
			<method name="public org.apache.commons.math3.geometry.enclosing.EnclosingBall getEnclosingCap()">12</method>
			<method name="public void _init_(double tolerance)">0</method>
			<method name="public void _init_(java.util.Collection boundary, double tolerance)">0</method>
			<method name="private java.util.List getOutsidePoints()">1</method>
			<method name="private static org.apache.commons.math3.geometry.spherical.twod.S2Point[] createRegularPolygonVertices(org.apache.commons.math3.geometry.euclidean.threed.Vector3D center, org.apache.commons.math3.geometry.euclidean.threed.Vector3D meridian, double outsideRadius, int n)">2</method>
			<method name="public java.util.List getBoundaryLoops()">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.partitioning.Region buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree x0)">1</method>
			<method name="protected void computeGeometricalProperties()">1</method>
			<method name="public transient void _init_(double hyperplaneThickness, org.apache.commons.math3.geometry.spherical.twod.S2Point[] vertices)">0</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.partitioning.BSPTree tree, double tolerance)">0</method>
			<method name="public org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree tree)">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.partitioning.AbstractRegion buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree x0)">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.threed.Vector3D pole, double tolerance)">0</method>
			<method name="private java.util.List getInsidePoints()">1</method>
			<method name="private static transient org.apache.commons.math3.geometry.partitioning.BSPTree verticesToTree(double hyperplaneThickness, org.apache.commons.math3.geometry.spherical.twod.S2Point[] vertices)">9</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.threed.Vector3D center, org.apache.commons.math3.geometry.euclidean.threed.Vector3D meridian, double outsideRadius, int n, double tolerance)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.GoalType</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>15</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.888888888888889</lcom3>
		<loc>45</loc>
		<dam>0.3333333333333333</dam>
		<moa>3</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>9.5</amc>
		<cc>
			<method name="public static org.apache.commons.math3.optim.nonlinear.scalar.GoalType valueOf(String name)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static org.apache.commons.math3.optim.nonlinear.scalar.GoalType[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>7</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.analysis.UnivariateFunction interpolate(double[], double[])">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Cosh</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>8</rfc>
		<lcom>10</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>5</npm>
		<lcom3>2.0</lcom3>
		<loc>21</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.2</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.DifferentiableUnivariateFunction derivative()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public volatile org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
			<method name="public double value(double x)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.Incrementor</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>29</cbo>
		<rfc>14</rfc>
		<lcom>11</lcom>
		<ca>25</ca>
		<ce>4</ce>
		<npm>10</npm>
		<lcom3>0.4444444444444444</lcom3>
		<loc>91</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.8</amc>
		<cc>
			<method name="public boolean canIncrement()">2</method>
			<method name="public void incrementCount()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void incrementCount(int value)">1</method>
			<method name="public int getCount()">1</method>
			<method name="public int getMaximalCount()">1</method>
			<method name="public void resetCount()">1</method>
			<method name="public void _init_(int max, org.apache.commons.math3.util.Incrementor$MaxCountExceededCallback cb)">0</method>
			<method name="public void _init_(int max)">0</method>
			<method name="public void setMaximalCount(int max)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.twod.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.genetics.RandomKey</name>
		<wmc>12</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>39</rfc>
		<lcom>58</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>8</npm>
		<lcom3>0.7727272727272727</lcom3>
		<loc>351</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.25</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>28.083333333333332</amc>
		<cc>
			<method name="public java.util.List decode(java.util.List sequence)">1</method>
			<method name="public static java.util.List inducedPermutation(java.util.List originalData, java.util.List permutedData)">1</method>
			<method name="private static java.util.List baseSequence(int l)">2</method>
			<method name="public static final java.util.List randomPermutation(int l)">2</method>
			<method name="private static java.util.List decodeGeneric(java.util.List sequence, java.util.List representation, java.util.List sortedRepr)">1</method>
			<method name="public void _init_(java.util.List representation)">0</method>
			<method name="public String toString()">1</method>
			<method name="protected void checkValidity(java.util.List chromosomeRepresentation)">1</method>
			<method name="public static java.util.List comparatorPermutation(java.util.List data, java.util.Comparator comparator)">1</method>
			<method name="public static final java.util.List identityPermutation(int l)">2</method>
			<method name="protected boolean isSame(org.apache.commons.math3.genetics.Chromosome another)">5</method>
			<method name="public void _init_(Double[] representation)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.neuralnet.FeatureInitializerFactory$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.25</lcom3>
		<loc>37</loc>
		<dam>0.25</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.5</amc>
		<cc>
			<method name="public double value()">1</method>
			<method name="void _init_(double, org.apache.commons.math3.analysis.UnivariateFunction, double)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.neuralnet.FeatureInitializerFactory$2</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>21</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.5</amc>
		<cc>
			<method name="public double value()">1</method>
			<method name="void _init_(org.apache.commons.math3.ml.neuralnet.FeatureInitializer, org.apache.commons.math3.distribution.RealDistribution)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.BitsStreamGenerator</name>
		<wmc>15</wmc>
		<dit>1</dit>
		<noc>3</noc>
		<cbo>6</cbo>
		<rfc>24</rfc>
		<lcom>99</lcom>
		<ca>3</ca>
		<ce>3</ce>
		<npm>14</npm>
		<lcom3>0.9642857142857143</lcom3>
		<loc>286</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.29333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.933333333333334</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="public abstract void setSeed(int[])">1</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean nextBoolean()">2</method>
			<method name="public void nextBytes(byte[] bytes)">3</method>
			<method name="public double nextGaussian()">2</method>
			<method name="public int nextInt()">1</method>
			<method name="protected abstract int next(int)">1</method>
			<method name="public abstract void setSeed(int)">1</method>
			<method name="public int nextInt(int n)">1</method>
			<method name="public long nextLong(long n)">1</method>
			<method name="public long nextLong()">1</method>
			<method name="public double nextDouble()">1</method>
			<method name="public float nextFloat()">1</method>
			<method name="public abstract void setSeed(long)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.filter.DefaultMeasurementModel</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>6</rfc>
		<lcom>2</lcom>
		<ca>0</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>32</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.5</amc>
		<cc>
			<method name="public org.apache.commons.math3.linear.RealMatrix getMeasurementNoise()">1</method>
			<method name="public void _init_(org.apache.commons.math3.linear.RealMatrix measMatrix, org.apache.commons.math3.linear.RealMatrix measNoise)">0</method>
			<method name="public void _init_(double[][] measMatrix, double[][] measNoise)">0</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getMeasurementMatrix()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>1.0</lcom3>
		<loc>236</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>116.0</amc>
		<cc>
			<method name="public void _init_(double[] aV)">0</method>
			<method name="public double value(double x, double y, double z)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.LineSearch</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>16</cbo>
		<rfc>17</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>14</ce>
		<npm>2</npm>
		<lcom3>0.75</lcom3>
		<loc>100</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>30.333333333333332</amc>
		<cc>
			<method name="static org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer access$000(org.apache.commons.math3.optim.nonlinear.scalar.LineSearch x0)">1</method>
			<method name="public org.apache.commons.math3.optim.univariate.UnivariatePointValuePair search(double[] startPoint, double[] direction)">1</method>
			<method name="public void _init_(org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer optimizer, double relativeTolerance, double absoluteTolerance, double initialBracketingRange)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.OpenIntToDoubleHashMap$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.RealMatrixFormat</name>
		<wmc>18</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>54</rfc>
		<lcom>105</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>18</npm>
		<lcom3>0.7420814479638009</lcom3>
		<loc>432</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.1875</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.27777777777778</amc>
		<cc>
			<method name="public String format(org.apache.commons.math3.linear.RealMatrix m)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(String prefix, String suffix, String rowPrefix, String rowSuffix, String rowSeparator, String columnSeparator, java.text.NumberFormat format)">0</method>
			<method name="public void _init_(String prefix, String suffix, String rowPrefix, String rowSuffix, String rowSeparator, String columnSeparator)">0</method>
			<method name="public static org.apache.commons.math3.linear.RealMatrixFormat getInstance(java.util.Locale locale)">1</method>
			<method name="public String getSuffix()">1</method>
			<method name="public StringBuffer format(org.apache.commons.math3.linear.RealMatrix matrix, StringBuffer toAppendTo, java.text.FieldPosition pos)">5</method>
			<method name="public String getRowSuffix()">1</method>
			<method name="public String getColumnSeparator()">1</method>
			<method name="public String getPrefix()">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix parse(String source, java.text.ParsePosition pos)">18</method>
			<method name="public String getRowPrefix()">1</method>
			<method name="public void _init_(java.text.NumberFormat format)">0</method>
			<method name="public String getRowSeparator()">1</method>
			<method name="public static org.apache.commons.math3.linear.RealMatrixFormat getInstance()">1</method>
			<method name="public static java.util.Locale[] getAvailableLocales()">1</method>
			<method name="public java.text.NumberFormat getFormat()">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix parse(String source)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.summary.Product</name>
		<wmc>13</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>18</rfc>
		<lcom>50</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>13</npm>
		<lcom3>0.5833333333333334</lcom3>
		<loc>158</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3076923076923077</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.923076923076923</amc>
		<cc>
			<method name="public long getN()">1</method>
			<method name="public void clear()">1</method>
			<method name="public double evaluate(double[] values, double[] weights)">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()">1</method>
			<method name="public double getResult()">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic copy()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public org.apache.commons.math3.stat.descriptive.summary.Product copy()">1</method>
			<method name="public double evaluate(double[] values, int begin, int length)">1</method>
			<method name="public double evaluate(double[] values, double[] weights, int begin, int length)">1</method>
			<method name="public void _init_(org.apache.commons.math3.stat.descriptive.summary.Product original)">0</method>
			<method name="public static void copy(org.apache.commons.math3.stat.descriptive.summary.Product source, org.apache.commons.math3.stat.descriptive.summary.Product dest)">1</method>
			<method name="public void increment(double d)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9333333333333332</lcom3>
		<loc>67</loc>
		<dam>0.2</dam>
		<moa>5</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>14.5</amc>
		<cc>
			<method name="public static org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy valueOf(String name)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.EnumeratedDistribution</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>34</rfc>
		<lcom>12</lcom>
		<ca>2</ca>
		<ce>12</ce>
		<npm>7</npm>
		<lcom3>0.42857142857142855</lcom3>
		<loc>287</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.2857142857142857</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>34.375</amc>
		<cc>
			<method name="public Object[] sample(int sampleSize)">1</method>
			<method name="public void _init_(java.util.List pmf)">0</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, java.util.List pmf)">0</method>
			<method name="public Object sample()">3</method>
			<method name="public java.util.List getPmf()">2</method>
			<method name="public Object[] sample(int sampleSize, Object[] array)">1</method>
			<method name="double probability(Object x)">6</method>
			<method name="public void reseedRandomGenerator(long seed)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fraction.Fraction</name>
		<wmc>41</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>64</rfc>
		<lcom>476</lcom>
		<ca>4</ca>
		<ce>10</ce>
		<npm>38</npm>
		<lcom3>0.8958333333333334</lcom3>
		<loc>1024</loc>
		<dam>0.2222222222222222</dam>
		<moa>14</moa>
		<mfa>0.15</mfa>
		<cam>0.2791666666666667</cam>
		<ic>1</ic>
		<cbm>2</cbm>
		<amc>23.536585365853657</amc>
		<cc>
			<method name="public org.apache.commons.math3.fraction.Fraction subtract(int i)">1</method>
			<method name="public org.apache.commons.math3.fraction.Fraction multiply(org.apache.commons.math3.fraction.Fraction fraction)">4</method>
			<method name="public volatile Object divide(Object x0)">1</method>
			<method name="private void _init_(double value, double epsilon, int maxDenominator, int maxIterations)">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public int compareTo(org.apache.commons.math3.fraction.Fraction object)">3</method>
			<method name="public volatile Object multiply(Object x0)">1</method>
			<method name="public double doubleValue()">1</method>
			<method name="public org.apache.commons.math3.fraction.Fraction negate()">2</method>
			<method name="public void _init_(int num)">0</method>
			<method name="public volatile Object reciprocal()">1</method>
			<method name="public org.apache.commons.math3.fraction.Fraction abs()">2</method>
			<method name="public static org.apache.commons.math3.fraction.Fraction getReducedFraction(int numerator, int denominator)">8</method>
			<method name="public long longValue()">1</method>
			<method name="private org.apache.commons.math3.fraction.Fraction addSub(org.apache.commons.math3.fraction.Fraction fraction, boolean isAdd)">10</method>
			<method name="public double percentageValue()">1</method>
			<method name="public org.apache.commons.math3.fraction.Fraction multiply(int i)">1</method>
			<method name="public String toString()">3</method>
			<method name="public void _init_(int num, int den)">0</method>
			<method name="public org.apache.commons.math3.fraction.Fraction divide(org.apache.commons.math3.fraction.Fraction fraction)">3</method>
			<method name="public int getNumerator()">1</method>
			<method name="public org.apache.commons.math3.fraction.Fraction reciprocal()">1</method>
			<method name="public int getDenominator()">1</method>
			<method name="public boolean equals(Object other)">5</method>
			<method name="public void _init_(double value)">0</method>
			<method name="public void _init_(double value, double epsilon, int maxIterations)">0</method>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="public org.apache.commons.math3.fraction.FractionField getField()">1</method>
			<method name="public org.apache.commons.math3.fraction.Fraction divide(int i)">1</method>
			<method name="public org.apache.commons.math3.fraction.Fraction add(int i)">1</method>
			<method name="public volatile Object negate()">1</method>
			<method name="public volatile org.apache.commons.math3.Field getField()">1</method>
			<method name="public int hashCode()">1</method>
			<method name="public float floatValue()">1</method>
			<method name="public int intValue()">1</method>
			<method name="public volatile Object multiply(int x0)">1</method>
			<method name="public volatile Object add(Object x0)">1</method>
			<method name="public volatile Object subtract(Object x0)">1</method>
			<method name="public org.apache.commons.math3.fraction.Fraction add(org.apache.commons.math3.fraction.Fraction fraction)">1</method>
			<method name="public org.apache.commons.math3.fraction.Fraction subtract(org.apache.commons.math3.fraction.Fraction fraction)">1</method>
			<method name="public void _init_(double value, int maxDenominator)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.PointVectorValuePair$DataTransferObject</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.6666666666666667</lcom3>
		<loc>27</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.0</amc>
		<cc>
			<method name="private Object readResolve()">1</method>
			<method name="public void _init_(double[] point, double[] value)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>9</noc>
		<cbo>24</cbo>
		<rfc>18</rfc>
		<lcom>0</lcom>
		<ca>20</ca>
		<ce>4</ce>
		<npm>5</npm>
		<lcom3>0.2</lcom3>
		<loc>250</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.25</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>40.166666666666664</amc>
		<cc>
			<method name="public void readExternal(java.io.ObjectInput in)">1</method>
			<method name="public void _init_(org.apache.commons.math3.ode.nonstiff.RungeKuttaStepInterpolator interpolator)">0</method>
			<method name="public void shift()">1</method>
			<method name="protected void _init_()">0</method>
			<method name="public void writeExternal(java.io.ObjectOutput out)">1</method>
			<method name="public void reinitialize(org.apache.commons.math3.ode.AbstractIntegrator rkIntegrator, double[] y, double[][] yDotArray, boolean forward, org.apache.commons.math3.ode.EquationsMapper primaryMapper, org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.OutOfRangeException</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>81</cbo>
		<rfc>5</rfc>
		<lcom>2</lcom>
		<ca>78</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>41</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.5</amc>
		<cc>
			<method name="public Number getLo()">1</method>
			<method name="public void _init_(org.apache.commons.math3.exception.util.Localizable specific, Number wrong, Number lo, Number hi)">0</method>
			<method name="public Number getHi()">1</method>
			<method name="public void _init_(Number wrong, Number lo, Number hi)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.direct.MultiDirectionalSimplex</name>
		<wmc>10</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>23</rfc>
		<lcom>33</lcom>
		<ca>0</ca>
		<ce>3</ce>
		<npm>9</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>194</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.0</amc>
		<cc>
			<method name="public void _init_(int n)">0</method>
			<method name="private org.apache.commons.math3.optimization.PointValuePair evaluateNewSimplex(org.apache.commons.math3.analysis.MultivariateFunction evaluationFunction, org.apache.commons.math3.optimization.PointValuePair[] original, double coeff, java.util.Comparator comparator)">3</method>
			<method name="public void _init_(double[] steps, double khi, double gamma)">0</method>
			<method name="public void _init_(double[][] referenceSimplex)">0</method>
			<method name="public void _init_(int n, double khi, double gamma)">0</method>
			<method name="public void _init_(double[] steps)">0</method>
			<method name="public void _init_(double[][] referenceSimplex, double khi, double gamma)">0</method>
			<method name="public void _init_(int n, double sideLength, double khi, double gamma)">0</method>
			<method name="public void _init_(int n, double sideLength)">0</method>
			<method name="public void iterate(org.apache.commons.math3.analysis.MultivariateFunction evaluationFunction, java.util.Comparator comparator)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.EquationsMapper</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>18</cbo>
		<rfc>8</rfc>
		<lcom>0</lcom>
		<ca>17</ca>
		<ce>1</ce>
		<npm>5</npm>
		<lcom3>0.5833333333333334</lcom3>
		<loc>67</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.8</amc>
		<cc>
			<method name="public int getDimension()">1</method>
			<method name="public int getFirstIndex()">1</method>
			<method name="public void insertEquationData(double[] equationData, double[] complete)">1</method>
			<method name="public void _init_(int firstIndex, int dimension)">0</method>
			<method name="public void extractEquationData(double[] complete, double[] equationData)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.twod.Line</name>
		<wmc>44</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>29</cbo>
		<rfc>55</rfc>
		<lcom>438</lcom>
		<ca>15</ca>
		<ce>17</ce>
		<npm>38</npm>
		<lcom3>0.5348837209302325</lcom3>
		<loc>640</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.17727272727272728</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.409090909090908</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.twod.Line line)">0</method>
			<method name="public boolean isParallelTo(org.apache.commons.math3.geometry.euclidean.twod.Line line)">2</method>
			<method name="public volatile org.apache.commons.math3.geometry.Point toSpace(org.apache.commons.math3.geometry.Point x0)">1</method>
			<method name="static double access$100(org.apache.commons.math3.geometry.euclidean.twod.Line x0)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Vector vector)">1</method>
			<method name="public void setAngle(double angle)">1</method>
			<method name="public org.apache.commons.math3.geometry.Point project(org.apache.commons.math3.geometry.Point point)">1</method>
			<method name="public double distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D p)">1</method>
			<method name="static double access$300(org.apache.commons.math3.geometry.euclidean.twod.Line x0)">1</method>
			<method name="public void setOriginOffset(double offset)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSpace(org.apache.commons.math3.geometry.Vector vector)">1</method>
			<method name="public double getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line line)">2</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.twod.Vector2D p, double angle, double tolerance)">0</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.SubLine wholeHyperplane()">1</method>
			<method name="public void translateToPoint(org.apache.commons.math3.geometry.euclidean.twod.Vector2D p)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.Vector2D getPointAt(org.apache.commons.math3.geometry.euclidean.oned.Vector1D abscissa, double offset)">1</method>
			<method name="public boolean contains(org.apache.commons.math3.geometry.euclidean.twod.Vector2D p)">2</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.Vector2D intersection(org.apache.commons.math3.geometry.euclidean.twod.Line other)">2</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.twod.Vector2D p1, org.apache.commons.math3.geometry.euclidean.twod.Vector2D p2)">0</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.Line copySelf()">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.Point toSubSpace(org.apache.commons.math3.geometry.Point x0)">1</method>
			<method name="static double access$200(org.apache.commons.math3.geometry.euclidean.twod.Line x0)">1</method>
			<method name="void _init_(double x0, double x1, double x2, double x3, double x4, org.apache.commons.math3.geometry.euclidean.twod.Line$1 x5)">0</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.twod.Vector2D p1, org.apache.commons.math3.geometry.euclidean.twod.Vector2D p2, double tolerance)">0</method>
			<method name="public double getOffset(org.apache.commons.math3.geometry.Vector vector)">1</method>
			<method name="static double access$000(org.apache.commons.math3.geometry.euclidean.twod.Line x0)">1</method>
			<method name="public void reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D p, double alpha)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Point point)">1</method>
			<method name="public double getOffset(org.apache.commons.math3.geometry.Point point)">1</method>
			<method name="public void revertSelf()">2</method>
			<method name="public void reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D p1, org.apache.commons.math3.geometry.euclidean.twod.Vector2D p2)">2</method>
			<method name="public double getOriginOffset()">1</method>
			<method name="public double getAngle()">1</method>
			<method name="private void _init_(double angle, double cos, double sin, double originOffset, double tolerance)">0</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSpace(org.apache.commons.math3.geometry.Point point)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.Line getReverse()">2</method>
			<method name="public double getTolerance()">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.twod.Vector2D p, double angle)">0</method>
			<method name="public volatile org.apache.commons.math3.geometry.partitioning.Hyperplane copySelf()">1</method>
			<method name="public boolean sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane other)">2</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet wholeSpace()">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.partitioning.SubHyperplane wholeHyperplane()">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.partitioning.Region wholeSpace()">1</method>
			<method name="public static org.apache.commons.math3.geometry.partitioning.Transform getTransform(java.awt.geom.AffineTransform transform)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.SimpleVectorValueChecker</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>12</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>4</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>97</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.55</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.75</amc>
		<cc>
			<method name="public volatile boolean converged(int x0, Object x1, Object x2)">1</method>
			<method name="public void _init_(double relativeThreshold, double absoluteThreshold, int maxIter)">0</method>
			<method name="public void _init_(double relativeThreshold, double absoluteThreshold)">0</method>
			<method name="public boolean converged(int iteration, org.apache.commons.math3.optim.PointVectorValuePair previous, org.apache.commons.math3.optim.PointVectorValuePair current)">6</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.solvers.SecantSolver</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>15</rfc>
		<lcom>6</lcom>
		<ca>0</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>109</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.0</amc>
		<cc>
			<method name="public void _init_(double absoluteAccuracy)">0</method>
			<method name="public void _init_()">0</method>
			<method name="protected final double doSolve()">1</method>
			<method name="public void _init_(double relativeAccuracy, double absoluteAccuracy)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>16</cbo>
		<rfc>37</rfc>
		<lcom>16</lcom>
		<ca>2</ca>
		<ce>14</ce>
		<npm>6</npm>
		<lcom3>0.7142857142857143</lcom3>
		<loc>213</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.325</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>25.375</amc>
		<cc>
			<method name="public org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer withDecomposition(org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer$Decomposition newDecomposition)">1</method>
			<method name="static org.apache.commons.math3.util.Pair access$100(org.apache.commons.math3.linear.RealMatrix x0, org.apache.commons.math3.linear.RealVector x1)">1</method>
			<method name="public org.apache.commons.math3.fitting.leastsquares.LeastSquaresOptimizer$Optimum optimize(org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem lsp)">4</method>
			<method name="public org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer$Decomposition getDecomposition()">1</method>
			<method name="public void _init_()">0</method>
			<method name="private static org.apache.commons.math3.util.Pair computeNormalMatrix(org.apache.commons.math3.linear.RealMatrix jacobian, org.apache.commons.math3.linear.RealVector residuals)">7</method>
			<method name="public String toString()">1</method>
			<method name="public void _init_(org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer$Decomposition decomposition)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.MathIllegalStateException</name>
		<wmc>6</wmc>
		<dit>5</dit>
		<noc>9</noc>
		<cbo>44</cbo>
		<rfc>12</rfc>
		<lcom>0</lcom>
		<ca>40</ca>
		<ce>4</ce>
		<npm>6</npm>
		<lcom3>0.6</lcom3>
		<loc>54</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.875</mfa>
		<cam>0.4583333333333333</cam>
		<ic>1</ic>
		<cbm>2</cbm>
		<amc>7.666666666666667</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public String getMessage()">1</method>
			<method name="public transient void _init_(Throwable cause, org.apache.commons.math3.exception.util.Localizable pattern, Object[] args)">0</method>
			<method name="public String getLocalizedMessage()">1</method>
			<method name="public org.apache.commons.math3.exception.util.ExceptionContext getContext()">1</method>
			<method name="public transient void _init_(org.apache.commons.math3.exception.util.Localizable pattern, Object[] args)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.DefaultIterativeLinearSolverEvent</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>7</npm>
		<lcom3>0.7333333333333334</lcom3>
		<loc>72</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.42857142857142855</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.571428571428571</amc>
		<cc>
			<method name="public double getNormOfResidual()">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector getRightHandSideVector()">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector getSolution()">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector getResidual()">2</method>
			<method name="public boolean providesResidual()">2</method>
			<method name="public void _init_(Object source, int iterations, org.apache.commons.math3.linear.RealVector x, org.apache.commons.math3.linear.RealVector b, org.apache.commons.math3.linear.RealVector r, double rnorm)">0</method>
			<method name="public void _init_(Object source, int iterations, org.apache.commons.math3.linear.RealVector x, org.apache.commons.math3.linear.RealVector b, double rnorm)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator</name>
		<wmc>10</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>22</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>7</npm>
		<lcom3>0.4305555555555556</lcom3>
		<loc>919</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.20909090909090908</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>90.1</amc>
		<cc>
			<method name="protected org.apache.commons.math3.ode.sampling.StepInterpolator doCopy()">1</method>
			<method name="public void readExternal(java.io.ObjectInput in)">1</method>
			<method name="protected void computeInterpolatedStateAndDerivatives(double theta, double oneMinusThetaH)">5</method>
			<method name="public void _init_(double[] y, double[] y0Dot, double[] y1, double[] y1Dot, double[][] yMidDots, boolean forward, org.apache.commons.math3.ode.EquationsMapper primaryMapper, org.apache.commons.math3.ode.EquationsMapper[] secondaryMappers)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public double estimateError(double[] scale)">3</method>
			<method name="private void resetTables(int maxDegree)">7</method>
			<method name="public void computeCoefficients(int mu, double h)">9</method>
			<method name="public void writeExternal(java.io.ObjectOutput out)">1</method>
			<method name="public void _init_(org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolator interpolator)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Minus</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>7</rfc>
		<lcom>10</lcom>
		<ca>0</ca>
		<ce>5</ce>
		<npm>5</npm>
		<lcom3>2.0</lcom3>
		<loc>22</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.4</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.DifferentiableUnivariateFunction derivative()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public volatile org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
			<method name="public double value(double x)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.RegionFactory</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>20</cbo>
		<rfc>33</rfc>
		<lcom>16</lcom>
		<ca>12</ca>
		<ce>13</ce>
		<npm>7</npm>
		<lcom3>0.5</lcom3>
		<loc>231</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.37777777777777777</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.555555555555557</amc>
		<cc>
			<method name="public org.apache.commons.math3.geometry.partitioning.Region getComplement(org.apache.commons.math3.geometry.partitioning.Region region)">1</method>
			<method name="private org.apache.commons.math3.geometry.partitioning.BSPTree recurseComplement(org.apache.commons.math3.geometry.partitioning.BSPTree node)">6</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.Region union(org.apache.commons.math3.geometry.partitioning.Region region1, org.apache.commons.math3.geometry.partitioning.Region region2)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public transient org.apache.commons.math3.geometry.partitioning.Region buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[] hyperplanes)">5</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.Region xor(org.apache.commons.math3.geometry.partitioning.Region region1, org.apache.commons.math3.geometry.partitioning.Region region2)">1</method>
			<method name="static org.apache.commons.math3.geometry.partitioning.BSPTree access$500(org.apache.commons.math3.geometry.partitioning.RegionFactory x0, org.apache.commons.math3.geometry.partitioning.BSPTree x1)">1</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.Region intersection(org.apache.commons.math3.geometry.partitioning.Region region1, org.apache.commons.math3.geometry.partitioning.Region region2)">1</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.Region difference(org.apache.commons.math3.geometry.partitioning.Region region1, org.apache.commons.math3.geometry.partitioning.Region region2)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.threed.Plane</name>
		<wmc>42</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>23</cbo>
		<rfc>66</rfc>
		<lcom>395</lcom>
		<ca>7</ca>
		<ce>18</ce>
		<npm>40</npm>
		<lcom3>0.5435540069686411</lcom3>
		<loc>748</loc>
		<dam>1.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.17857142857142858</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.642857142857142</amc>
		<cc>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.SubPlane wholeHyperplane()">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.Point toSpace(org.apache.commons.math3.geometry.Point x0)">1</method>
			<method name="private void setNormal(org.apache.commons.math3.geometry.euclidean.threed.Vector3D normal)">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.threed.Vector3D p, org.apache.commons.math3.geometry.euclidean.threed.Vector3D normal)">0</method>
			<method name="public org.apache.commons.math3.geometry.Point project(org.apache.commons.math3.geometry.Point point)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getPointAt(org.apache.commons.math3.geometry.euclidean.twod.Vector2D inPlane, double offset)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Plane translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D translation)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Line intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane other)">2</method>
			<method name="public void reset(org.apache.commons.math3.geometry.euclidean.threed.Plane original)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point point)">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.threed.Vector3D p1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D p2, org.apache.commons.math3.geometry.euclidean.threed.Vector3D p3)">0</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSubSpace(org.apache.commons.math3.geometry.Vector vector)">1</method>
			<method name="public static org.apache.commons.math3.geometry.euclidean.threed.Vector3D intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane plane1, org.apache.commons.math3.geometry.euclidean.threed.Plane plane2, org.apache.commons.math3.geometry.euclidean.threed.Plane plane3)">2</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.threed.Vector3D p1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D p2, org.apache.commons.math3.geometry.euclidean.threed.Vector3D p3, double tolerance)">0</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getV()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Vector vector)">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.Point toSubSpace(org.apache.commons.math3.geometry.Point x0)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSubSpace(org.apache.commons.math3.geometry.Point point)">1</method>
			<method name="public double getOffset(org.apache.commons.math3.geometry.Vector vector)">1</method>
			<method name="public void reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D p, org.apache.commons.math3.geometry.euclidean.threed.Vector3D normal)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getU()">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.threed.Vector3D normal)">0</method>
			<method name="public double getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane plane)">2</method>
			<method name="private void setFrame()">1</method>
			<method name="public double getOffset(org.apache.commons.math3.geometry.Point point)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Plane copySelf()">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.threed.Vector3D p, org.apache.commons.math3.geometry.euclidean.threed.Vector3D normal, double tolerance)">0</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Plane rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D center, org.apache.commons.math3.geometry.euclidean.threed.Rotation rotation)">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.threed.Plane plane)">0</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getOrigin()">1</method>
			<method name="public void revertSelf()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getNormal()">1</method>
			<method name="public double getTolerance()">1</method>
			<method name="public boolean contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D p)">2</method>
			<method name="public volatile org.apache.commons.math3.geometry.partitioning.Hyperplane copySelf()">1</method>
			<method name="public boolean sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane other)">2</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D intersection(org.apache.commons.math3.geometry.euclidean.threed.Line line)">2</method>
			<method name="public volatile org.apache.commons.math3.geometry.partitioning.SubHyperplane wholeHyperplane()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet wholeSpace()">1</method>
			<method name="public boolean isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Plane plane)">5</method>
			<method name="public volatile org.apache.commons.math3.geometry.partitioning.Region wholeSpace()">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.threed.Vector3D normal, double tolerance)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer</name>
		<wmc>8</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>28</rfc>
		<lcom>22</lcom>
		<ca>2</ca>
		<ce>14</ce>
		<npm>4</npm>
		<lcom3>0.5714285714285714</lcom3>
		<loc>171</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.40625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.25</amc>
		<cc>
			<method name="public transient org.apache.commons.math3.optim.PointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[] optData)">1</method>
			<method name="private void checkParameters()">4</method>
			<method name="public volatile Object optimize(org.apache.commons.math3.optim.OptimizationData[] x0)">1</method>
			<method name="protected transient void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[] optData)">3</method>
			<method name="protected volatile Object doOptimize()">1</method>
			<method name="protected org.apache.commons.math3.optim.PointValuePair doOptimize()">7</method>
			<method name="public void _init_(double rel, double abs)">0</method>
			<method name="public void _init_(org.apache.commons.math3.optim.ConvergenceChecker checker)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.DescriptiveStatistics</name>
		<wmc>50</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>23</cbo>
		<rfc>96</rfc>
		<lcom>669</lcom>
		<ca>2</ca>
		<ce>21</ce>
		<npm>50</npm>
		<lcom3>0.835374149659864</lcom3>
		<loc>903</loc>
		<dam>0.9333333333333333</dam>
		<moa>11</moa>
		<mfa>0.0</mfa>
		<cam>0.23</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.76</amc>
		<cc>
			<method name="public synchronized org.apache.commons.math3.stat.descriptive.UnivariateStatistic getSumImpl()">1</method>
			<method name="public double getPercentile(double p)">1</method>
			<method name="public double getVariance()">1</method>
			<method name="public double[] getSortedValues()">1</method>
			<method name="public double getMean()">1</method>
			<method name="public synchronized void setSumImpl(org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumImpl)">1</method>
			<method name="public synchronized void setMinImpl(org.apache.commons.math3.stat.descriptive.UnivariateStatistic minImpl)">1</method>
			<method name="public double getMin()">1</method>
			<method name="public double getElement(int index)">1</method>
			<method name="public synchronized void setGeometricMeanImpl(org.apache.commons.math3.stat.descriptive.UnivariateStatistic geometricMeanImpl)">1</method>
			<method name="public double getSumsq()">1</method>
			<method name="public synchronized org.apache.commons.math3.stat.descriptive.UnivariateStatistic getMinImpl()">1</method>
			<method name="public synchronized void setSkewnessImpl(org.apache.commons.math3.stat.descriptive.UnivariateStatistic skewnessImpl)">1</method>
			<method name="public long getN()">1</method>
			<method name="public double getGeometricMean()">1</method>
			<method name="public double getSkewness()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public int getWindowSize()">1</method>
			<method name="public synchronized void setMeanImpl(org.apache.commons.math3.stat.descriptive.UnivariateStatistic meanImpl)">1</method>
			<method name="public void _init_(double[] initialDoubleArray)">0</method>
			<method name="public synchronized void setKurtosisImpl(org.apache.commons.math3.stat.descriptive.UnivariateStatistic kurtosisImpl)">1</method>
			<method name="public double apply(org.apache.commons.math3.stat.descriptive.UnivariateStatistic stat)">1</method>
			<method name="public synchronized org.apache.commons.math3.stat.descriptive.UnivariateStatistic getVarianceImpl()">1</method>
			<method name="public static void copy(org.apache.commons.math3.stat.descriptive.DescriptiveStatistics source, org.apache.commons.math3.stat.descriptive.DescriptiveStatistics dest)">1</method>
			<method name="public synchronized org.apache.commons.math3.stat.descriptive.UnivariateStatistic getMeanImpl()">1</method>
			<method name="public void addValue(double v)">4</method>
			<method name="public void clear()">1</method>
			<method name="public double getMax()">1</method>
			<method name="public void _init_(org.apache.commons.math3.stat.descriptive.DescriptiveStatistics original)">0</method>
			<method name="public void _init_(int window)">0</method>
			<method name="public org.apache.commons.math3.stat.descriptive.DescriptiveStatistics copy()">1</method>
			<method name="public double getStandardDeviation()">3</method>
			<method name="public double getPopulationVariance()">1</method>
			<method name="public synchronized void setMaxImpl(org.apache.commons.math3.stat.descriptive.UnivariateStatistic maxImpl)">1</method>
			<method name="public void removeMostRecentValue()">1</method>
			<method name="public double[] getValues()">1</method>
			<method name="public String toString()">1</method>
			<method name="public synchronized org.apache.commons.math3.stat.descriptive.UnivariateStatistic getSumsqImpl()">1</method>
			<method name="public double getSum()">1</method>
			<method name="public synchronized org.apache.commons.math3.stat.descriptive.UnivariateStatistic getSkewnessImpl()">1</method>
			<method name="public synchronized void setPercentileImpl(org.apache.commons.math3.stat.descriptive.UnivariateStatistic percentileImpl)">1</method>
			<method name="public synchronized void setVarianceImpl(org.apache.commons.math3.stat.descriptive.UnivariateStatistic varianceImpl)">1</method>
			<method name="public void setWindowSize(int windowSize)">1</method>
			<method name="public synchronized org.apache.commons.math3.stat.descriptive.UnivariateStatistic getKurtosisImpl()">1</method>
			<method name="public synchronized void setSumsqImpl(org.apache.commons.math3.stat.descriptive.UnivariateStatistic sumsqImpl)">1</method>
			<method name="public synchronized org.apache.commons.math3.stat.descriptive.UnivariateStatistic getPercentileImpl()">1</method>
			<method name="public synchronized org.apache.commons.math3.stat.descriptive.UnivariateStatistic getMaxImpl()">1</method>
			<method name="public double replaceMostRecentValue(double v)">1</method>
			<method name="public double getKurtosis()">1</method>
			<method name="public synchronized org.apache.commons.math3.stat.descriptive.UnivariateStatistic getGeometricMeanImpl()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.filter.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>7</rfc>
		<lcom>21</lcom>
		<ca>13</ca>
		<ce>2</ce>
		<npm>7</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6428571428571429</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double getCost()">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealMatrix getJacobian()">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealVector getResiduals()">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealVector getPoint()">1</method>
			<method name="public abstract double getRMS()">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealMatrix getCovariances(double)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealVector getSigma(double)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.linear.NonNegativeConstraint</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>12</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.5</amc>
		<cc>
			<method name="public void _init_(boolean restricted)">0</method>
			<method name="public boolean isRestrictedToNonNegative()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.ExpandableStatefulODE</name>
		<wmc>17</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>20</cbo>
		<rfc>42</rfc>
		<lcom>2</lcom>
		<ca>13</ca>
		<ce>7</ce>
		<npm>17</npm>
		<lcom3>0.7291666666666667</lcom3>
		<loc>369</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.27450980392156865</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.352941176470587</amc>
		<cc>
			<method name="public org.apache.commons.math3.ode.EquationsMapper getPrimaryMapper()">1</method>
			<method name="public double[] getPrimaryStateDot()">1</method>
			<method name="public void setSecondaryState(int index, double[] secondaryState)">1</method>
			<method name="public double getTime()">1</method>
			<method name="public org.apache.commons.math3.ode.EquationsMapper[] getSecondaryMappers()">2</method>
			<method name="public double[] getSecondaryStateDot(int index)">1</method>
			<method name="public void computeDerivatives(double t, double[] y, double[] yDot)">1</method>
			<method name="public void setPrimaryState(double[] primaryState)">1</method>
			<method name="public int addSecondaryEquations(org.apache.commons.math3.ode.SecondaryEquations secondary)">2</method>
			<method name="public int getTotalDimension()">2</method>
			<method name="public double[] getSecondaryState(int index)">1</method>
			<method name="public void setTime(double time)">1</method>
			<method name="public void _init_(org.apache.commons.math3.ode.FirstOrderDifferentialEquations primary)">0</method>
			<method name="public org.apache.commons.math3.ode.FirstOrderDifferentialEquations getPrimary()">1</method>
			<method name="public double[] getCompleteState()">1</method>
			<method name="public void setCompleteState(double[] completeState)">1</method>
			<method name="public double[] getPrimaryState()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.MultivariateRealDistribution</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>10</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>5</npm>
		<lcom3>2.0</lcom3>
		<loc>5</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double[] sample()">1</method>
			<method name="public abstract void reseedRandomGenerator(long)">1</method>
			<method name="public abstract double[][] sample(int)">1</method>
			<method name="public abstract int getDimension()">1</method>
			<method name="public abstract double density(double[])">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>93</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>44.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(double step)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.RandomAdaptor</name>
		<wmc>14</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>26</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>13</npm>
		<lcom3>0.5384615384615384</lcom3>
		<loc>91</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.5555555555555556</mfa>
		<cam>0.23809523809523808</cam>
		<ic>1</ic>
		<cbm>2</cbm>
		<amc>5.357142857142857</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator randomGenerator)">0</method>
			<method name="public void setSeed(int seed)">2</method>
			<method name="public void setSeed(int[] seed)">2</method>
			<method name="public boolean nextBoolean()">1</method>
			<method name="public void nextBytes(byte[] bytes)">1</method>
			<method name="public double nextGaussian()">1</method>
			<method name="public int nextInt()">1</method>
			<method name="public static java.util.Random createAdaptor(org.apache.commons.math3.random.RandomGenerator randomGenerator)">1</method>
			<method name="public int nextInt(int n)">1</method>
			<method name="private void _init_()">0</method>
			<method name="public long nextLong()">1</method>
			<method name="public double nextDouble()">1</method>
			<method name="public float nextFloat()">1</method>
			<method name="public void setSeed(long seed)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.primes.Primes</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>9</rfc>
		<lcom>6</lcom>
		<ca>0</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>130</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.5</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public static java.util.List primeFactors(int n)">2</method>
			<method name="public static boolean isPrime(int n)">5</method>
			<method name="public static int nextPrime(int n)">9</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.solvers.LaguerreSolver$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.Decimal64</name>
		<wmc>125</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>133</rfc>
		<lcom>3058</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>124</npm>
		<lcom3>0.8594470046082949</lcom3>
		<loc>1066</loc>
		<dam>0.2857142857142857</dam>
		<moa>5</moa>
		<mfa>0.046511627906976744</mfa>
		<cam>0.1935483870967742</cam>
		<ic>1</ic>
		<cbm>2</cbm>
		<amc>7.472</amc>
		<cc>
			<method name="public int compareTo(org.apache.commons.math3.util.Decimal64 o)">1</method>
			<method name="public volatile Object abs()">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 negate()">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 rootN(int n)">2</method>
			<method name="public volatile Object copySign(double x0)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public org.apache.commons.math3.util.Decimal64 scalb(int n)">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 asinh()">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 remainder(double a)">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 multiply(org.apache.commons.math3.util.Decimal64 a)">1</method>
			<method name="public volatile Object linearCombination(Object x0, Object x1, Object x2, Object x3, Object x4, Object x5)">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 multiply(int n)">1</method>
			<method name="public long longValue()">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 linearCombination(org.apache.commons.math3.util.Decimal64 a1, org.apache.commons.math3.util.Decimal64 b1, org.apache.commons.math3.util.Decimal64 a2, org.apache.commons.math3.util.Decimal64 b2, org.apache.commons.math3.util.Decimal64 a3, org.apache.commons.math3.util.Decimal64 b3)">1</method>
			<method name="public org.apache.commons.math3.Field getField()">1</method>
			<method name="public volatile Object linearCombination(Object x0, Object x1, Object x2, Object x3, Object x4, Object x5, Object x6, Object x7)">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 signum()">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 expm1()">1</method>
			<method name="public boolean isNaN()">1</method>
			<method name="public volatile Object remainder(double x0)">1</method>
			<method name="public volatile Object negate()">1</method>
			<method name="public volatile Object tan()">1</method>
			<method name="public float floatValue()">1</method>
			<method name="public volatile Object scalb(int x0)">1</method>
			<method name="public volatile Object add(Object x0)">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 log1p()">1</method>
			<method name="public volatile Object exp()">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 linearCombination(double a1, org.apache.commons.math3.util.Decimal64 b1, double a2, org.apache.commons.math3.util.Decimal64 b2, double a3, org.apache.commons.math3.util.Decimal64 b3, double a4, org.apache.commons.math3.util.Decimal64 b4)">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 sqrt()">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 atanh()">1</method>
			<method name="public long round()">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 remainder(org.apache.commons.math3.util.Decimal64 a)">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 add(double a)">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 tan()">1</method>
			<method name="public volatile Object reciprocal()">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 linearCombination(org.apache.commons.math3.util.Decimal64[] a, org.apache.commons.math3.util.Decimal64[] b)">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 subtract(org.apache.commons.math3.util.Decimal64 a)">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 floor()">1</method>
			<method name="public volatile Object divide(double x0)">1</method>
			<method name="public volatile Object cbrt()">1</method>
			<method name="public volatile Object rootN(int x0)">1</method>
			<method name="public volatile Object atan()">1</method>
			<method name="public volatile Object sqrt()">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 tanh()">1</method>
			<method name="public volatile Object log()">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 cosh()">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 divide(org.apache.commons.math3.util.Decimal64 a)">1</method>
			<method name="public double getReal()">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 exp()">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 abs()">1</method>
			<method name="public int hashCode()">1</method>
			<method name="public int intValue()">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 multiply(double a)">1</method>
			<method name="public volatile Object add(double x0)">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 log10()">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 cbrt()">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 cos()">1</method>
			<method name="public volatile Object rint()">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 rint()">1</method>
			<method name="public volatile Object multiply(Object x0)">1</method>
			<method name="public double doubleValue()">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 linearCombination(org.apache.commons.math3.util.Decimal64 a1, org.apache.commons.math3.util.Decimal64 b1, org.apache.commons.math3.util.Decimal64 a2, org.apache.commons.math3.util.Decimal64 b2, org.apache.commons.math3.util.Decimal64 a3, org.apache.commons.math3.util.Decimal64 b3, org.apache.commons.math3.util.Decimal64 a4, org.apache.commons.math3.util.Decimal64 b4)">1</method>
			<method name="public volatile Object subtract(double x0)">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 copySign(org.apache.commons.math3.util.Decimal64 sign)">1</method>
			<method name="public boolean isInfinite()">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 log()">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 reciprocal()">1</method>
			<method name="public void _init_(double x)">0</method>
			<method name="public short shortValue()">1</method>
			<method name="public volatile Object linearCombination(double x0, Object x1, double x2, Object x3)">1</method>
			<method name="public volatile Object pow(Object x0)">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 copySign(double sign)">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 pow(org.apache.commons.math3.util.Decimal64 e)">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 acosh()">1</method>
			<method name="public volatile Object cos()">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 subtract(double a)">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 asin()">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 atan2(org.apache.commons.math3.util.Decimal64 x)">1</method>
			<method name="public volatile Object ceil()">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 pow(int n)">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 divide(double a)">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 linearCombination(org.apache.commons.math3.util.Decimal64 a1, org.apache.commons.math3.util.Decimal64 b1, org.apache.commons.math3.util.Decimal64 a2, org.apache.commons.math3.util.Decimal64 b2)">1</method>
			<method name="public volatile Object cosh()">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 acos()">1</method>
			<method name="public volatile Object asin()">1</method>
			<method name="public volatile Object asinh()">1</method>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="public volatile Object floor()">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 linearCombination(double a1, org.apache.commons.math3.util.Decimal64 b1, double a2, org.apache.commons.math3.util.Decimal64 b2)">1</method>
			<method name="public volatile Object atan2(Object x0)">1</method>
			<method name="public volatile Object tanh()">1</method>
			<method name="public volatile Object subtract(Object x0)">1</method>
			<method name="public volatile Object linearCombination(double x0, Object x1, double x2, Object x3, double x4, Object x5, double x6, Object x7)">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 atan()">1</method>
			<method name="public volatile Object linearCombination(double x0, Object x1, double x2, Object x3, double x4, Object x5)">1</method>
			<method name="public volatile Object atanh()">1</method>
			<method name="public volatile Object expm1()">1</method>
			<method name="public volatile Object divide(Object x0)">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 hypot(org.apache.commons.math3.util.Decimal64 y)">1</method>
			<method name="public volatile Object copySign(Object x0)">1</method>
			<method name="public volatile Object pow(double x0)">1</method>
			<method name="public volatile Object pow(int x0)">1</method>
			<method name="public volatile Object log1p()">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 pow(double p)">1</method>
			<method name="public volatile Object acosh()">1</method>
			<method name="public volatile Object acos()">1</method>
			<method name="public volatile Object linearCombination(Object x0, Object x1, Object x2, Object x3)">1</method>
			<method name="public boolean equals(Object obj)">3</method>
			<method name="public org.apache.commons.math3.util.Decimal64 sinh()">1</method>
			<method name="public String toString()">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 ceil()">1</method>
			<method name="public volatile Object linearCombination(double[] x0, Object[] x1)">1</method>
			<method name="public volatile Object remainder(Object x0)">1</method>
			<method name="public byte byteValue()">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 add(org.apache.commons.math3.util.Decimal64 a)">1</method>
			<method name="public volatile Object sin()">1</method>
			<method name="public volatile Object sinh()">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 sin()">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 linearCombination(double a1, org.apache.commons.math3.util.Decimal64 b1, double a2, org.apache.commons.math3.util.Decimal64 b2, double a3, org.apache.commons.math3.util.Decimal64 b3)">1</method>
			<method name="public volatile Object linearCombination(Object[] x0, Object[] x1)">1</method>
			<method name="public volatile Object multiply(int x0)">1</method>
			<method name="public volatile Object hypot(Object x0)">1</method>
			<method name="public volatile Object multiply(double x0)">1</method>
			<method name="public volatile Object signum()">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 linearCombination(double[] a, org.apache.commons.math3.util.Decimal64[] b)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer</name>
		<wmc>9</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>32</rfc>
		<lcom>32</lcom>
		<ca>0</ca>
		<ce>14</ce>
		<npm>4</npm>
		<lcom3>0.40625</lcom3>
		<loc>440</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>47.44444444444444</amc>
		<cc>
			<method name="private void checkParameters()">3</method>
			<method name="public void _init_(double rel, double abs, double lineRel, double lineAbs)">0</method>
			<method name="protected volatile Object doOptimize()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(double rel, double abs, org.apache.commons.math3.optim.ConvergenceChecker checker)">0</method>
			<method name="public void _init_(double rel, double abs, double lineRel, double lineAbs, org.apache.commons.math3.optim.ConvergenceChecker checker)">0</method>
			<method name="protected org.apache.commons.math3.optim.PointValuePair doOptimize()">12</method>
			<method name="public void _init_(double rel, double abs)">0</method>
			<method name="private double[][] newPointAndDirection(double[] p, double[] d, double optimum)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.ResizableDoubleArray</name>
		<wmc>49</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>71</rfc>
		<lcom>470</lcom>
		<ca>2</ca>
		<ce>15</ce>
		<npm>39</npm>
		<lcom3>0.8038194444444445</lcom3>
		<loc>1147</loc>
		<dam>0.8333333333333334</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.17959183673469387</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>22.163265306122447</amc>
		<cc>
			<method name="public void setExpansionMode(int expansionMode)">1</method>
			<method name="public synchronized double[] getElements()">1</method>
			<method name="public synchronized double getElement(int index)">3</method>
			<method name="private synchronized void discardExtremeElements(int i, boolean front)">1</method>
			<method name="public synchronized void addElement(double value)">2</method>
			<method name="public synchronized double[] getInternalValues()">1</method>
			<method name="public void _init_(int initialCapacity, float expansionFactor)">0</method>
			<method name="public synchronized int start()">1</method>
			<method name="protected synchronized void expand()">2</method>
			<method name="public void setContractionCriteria(float contractionCriteria)">1</method>
			<method name="public void _init_(double[] initialArray)">0</method>
			<method name="public transient void _init_(int initialCapacity, double expansionFactor, double contractionCriterion, org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode expansionMode, double[] data)">0</method>
			<method name="public void _init_(int initialCapacity, double expansionFactor, double contractionCriterion)">0</method>
			<method name="private synchronized boolean shouldContract()">4</method>
			<method name="public double getContractionCriterion()">1</method>
			<method name="public void _init_(int initialCapacity)">0</method>
			<method name="public void _init_(int initialCapacity, double expansionFactor)">0</method>
			<method name="public float getContractionCriteria()">1</method>
			<method name="public void setExpansionMode(org.apache.commons.math3.util.ResizableDoubleArray$ExpansionMode expansionMode)">1</method>
			<method name="public int getCapacity()">1</method>
			<method name="public synchronized org.apache.commons.math3.util.ResizableDoubleArray copy()">1</method>
			<method name="protected void setInitialCapacity(int initialCapacity)">1</method>
			<method name="public synchronized void addElements(double[] values)">1</method>
			<method name="public void _init_(int initialCapacity, float expansionFactor, float contractionCriteria, int expansionMode)">0</method>
			<method name="public void _init_(org.apache.commons.math3.util.ResizableDoubleArray original)">0</method>
			<method name="public void setExpansionFactor(float expansionFactor)">1</method>
			<method name="protected void checkContractExpand(float contraction, float expansion)">1</method>
			<method name="public static void copy(org.apache.commons.math3.util.ResizableDoubleArray source, org.apache.commons.math3.util.ResizableDoubleArray dest)">1</method>
			<method name="public synchronized void setNumElements(int i)">1</method>
			<method name="public synchronized int getNumElements()">1</method>
			<method name="synchronized int getInternalLength()">1</method>
			<method name="public synchronized void discardFrontElements(int i)">1</method>
			<method name="public boolean equals(Object object)">14</method>
			<method name="protected int getStartIndex()">1</method>
			<method name="public synchronized double addElementRolling(double value)">3</method>
			<method name="public synchronized double substituteMostRecentElement(double value)">1</method>
			<method name="public synchronized void discardMostRecentElements(int i)">1</method>
			<method name="public void _init_()">0</method>
			<method name="private synchronized void expandTo(int size)">1</method>
			<method name="public synchronized void setElement(int index, double value)">4</method>
			<method name="public float getExpansionFactor()">1</method>
			<method name="public synchronized void contract()">1</method>
			<method name="public synchronized void clear()">1</method>
			<method name="public synchronized int hashCode()">1</method>
			<method name="public double compute(org.apache.commons.math3.util.MathArrays$Function f)">1</method>
			<method name="public int getExpansionMode()">4</method>
			<method name="protected void checkContractExpand(double contraction, double expansion)">1</method>
			<method name="protected double[] getArrayRef()">1</method>
			<method name="public void _init_(int initialCapacity, float expansionFactor, float contractionCriteria)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.ArrayRealVector</name>
		<wmc>76</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>56</cbo>
		<rfc>106</rfc>
		<lcom>0</lcom>
		<ca>39</ca>
		<ce>19</ce>
		<npm>73</npm>
		<lcom3>0.6755555555555556</lcom3>
		<loc>1926</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.17555555555555555</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.30263157894737</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.linear.ArrayRealVector v)">0</method>
			<method name="public double getLInfNorm()">2</method>
			<method name="public void _init_(org.apache.commons.math3.linear.RealVector v1, org.apache.commons.math3.linear.ArrayRealVector v2)">0</method>
			<method name="public double getL1Norm()">2</method>
			<method name="public double walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor visitor)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(double[] d)">0</method>
			<method name="public org.apache.commons.math3.linear.RealVector mapDivideToSelf(double d)">2</method>
			<method name="public org.apache.commons.math3.linear.RealVector append(double in)">1</method>
			<method name="public org.apache.commons.math3.linear.ArrayRealVector append(org.apache.commons.math3.linear.ArrayRealVector v)">1</method>
			<method name="public double walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor visitor)">2</method>
			<method name="public void _init_(double[] v1, double[] v2)">0</method>
			<method name="public void setSubVector(int index, double[] v)">1</method>
			<method name="public boolean isInfinite()">4</method>
			<method name="public void _init_(double[] d, int pos, int size)">0</method>
			<method name="public org.apache.commons.math3.linear.ArrayRealVector add(org.apache.commons.math3.linear.RealVector v)">1</method>
			<method name="protected void checkVectorDimensions(org.apache.commons.math3.linear.RealVector v)">1</method>
			<method name="public double walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor visitor, int start, int end)">1</method>
			<method name="public double getL1Distance(org.apache.commons.math3.linear.RealVector v)">1</method>
			<method name="public void _init_(org.apache.commons.math3.linear.ArrayRealVector v1, org.apache.commons.math3.linear.ArrayRealVector v2)">0</method>
			<method name="public boolean isNaN()">3</method>
			<method name="public void _init_()">0</method>
			<method name="public double dotProduct(org.apache.commons.math3.linear.RealVector v)">1</method>
			<method name="public void _init_(Double[] d)">0</method>
			<method name="public org.apache.commons.math3.linear.RealVector append(org.apache.commons.math3.linear.RealVector v)">1</method>
			<method name="public void _init_(org.apache.commons.math3.linear.ArrayRealVector v1, double[] v2)">0</method>
			<method name="public double getDistance(org.apache.commons.math3.linear.RealVector v)">1</method>
			<method name="public void _init_(org.apache.commons.math3.linear.ArrayRealVector v, boolean deep)">0</method>
			<method name="public org.apache.commons.math3.linear.ArrayRealVector mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction function)">2</method>
			<method name="public double walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor visitor)">1</method>
			<method name="public void _init_(int size)">0</method>
			<method name="protected void checkVectorDimensions(int n)">1</method>
			<method name="public volatile org.apache.commons.math3.linear.RealVector add(org.apache.commons.math3.linear.RealVector x0)">1</method>
			<method name="public volatile org.apache.commons.math3.linear.RealVector ebeDivide(org.apache.commons.math3.linear.RealVector x0)">1</method>
			<method name="public void setSubVector(int index, org.apache.commons.math3.linear.RealVector v)">1</method>
			<method name="public double walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor visitor, int start, int end)">1</method>
			<method name="public org.apache.commons.math3.linear.ArrayRealVector ebeDivide(org.apache.commons.math3.linear.RealVector v)">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix outerProduct(org.apache.commons.math3.linear.RealVector v)">6</method>
			<method name="public volatile org.apache.commons.math3.linear.RealVector map(org.apache.commons.math3.analysis.UnivariateFunction x0)">1</method>
			<method name="public double getLInfDistance(org.apache.commons.math3.linear.RealVector v)">1</method>
			<method name="public int getDimension()">1</method>
			<method name="public double walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor visitor, int start, int end)">1</method>
			<method name="public org.apache.commons.math3.linear.ArrayRealVector combineToSelf(double a, double b, org.apache.commons.math3.linear.RealVector y)">1</method>
			<method name="public volatile org.apache.commons.math3.linear.RealVector copy()">1</method>
			<method name="public String toString()">1</method>
			<method name="public void _init_(double[] d, boolean copyArray)">0</method>
			<method name="public void set(double value)">1</method>
			<method name="public volatile org.apache.commons.math3.linear.RealVector ebeMultiply(org.apache.commons.math3.linear.RealVector x0)">1</method>
			<method name="public volatile org.apache.commons.math3.linear.RealVector subtract(org.apache.commons.math3.linear.RealVector x0)">1</method>
			<method name="public void _init_(org.apache.commons.math3.linear.ArrayRealVector v1, org.apache.commons.math3.linear.RealVector v2)">0</method>
			<method name="public volatile org.apache.commons.math3.linear.RealVector mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction x0)">1</method>
			<method name="public org.apache.commons.math3.linear.ArrayRealVector subtract(org.apache.commons.math3.linear.RealVector v)">1</method>
			<method name="public double walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor visitor, int start, int end)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector mapAddToSelf(double d)">2</method>
			<method name="public double[] getDataRef()">1</method>
			<method name="public boolean equals(Object other)">7</method>
			<method name="public org.apache.commons.math3.linear.ArrayRealVector ebeMultiply(org.apache.commons.math3.linear.RealVector v)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector getSubVector(int index, int n)">1</method>
			<method name="public double[] toArray()">1</method>
			<method name="public org.apache.commons.math3.linear.ArrayRealVector map(org.apache.commons.math3.analysis.UnivariateFunction function)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector mapMultiplyToSelf(double d)">2</method>
			<method name="public double getNorm()">2</method>
			<method name="public volatile org.apache.commons.math3.linear.RealVector combineToSelf(double x0, double x1, org.apache.commons.math3.linear.RealVector x2)">1</method>
			<method name="public int hashCode()">2</method>
			<method name="public double walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor visitor)">2</method>
			<method name="public org.apache.commons.math3.linear.ArrayRealVector copy()">1</method>
			<method name="public double getEntry(int index)">1</method>
			<method name="public void _init_(double[] v1, org.apache.commons.math3.linear.ArrayRealVector v2)">0</method>
			<method name="public void _init_(int size, double preset)">0</method>
			<method name="public void _init_(Double[] d, int pos, int size)">0</method>
			<method name="public org.apache.commons.math3.linear.ArrayRealVector combine(double a, double b, org.apache.commons.math3.linear.RealVector y)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector mapSubtractToSelf(double d)">2</method>
			<method name="public void _init_(org.apache.commons.math3.linear.RealVector v)">0</method>
			<method name="public void setEntry(int index, double value)">1</method>
			<method name="public void addToEntry(int index, double increment)">1</method>
			<method name="public volatile org.apache.commons.math3.linear.RealVector combine(double x0, double x1, org.apache.commons.math3.linear.RealVector x2)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>8</ca>
		<ce>0</ce>
		<npm>3</npm>
		<lcom3>0.8333333333333334</lcom3>
		<loc>21</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="public double getValue()">1</method>
			<method name="public void _init_(double point, double value)">0</method>
			<method name="public double getPoint()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Rint</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public double value(double x)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunctionFactory</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>0</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>20</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.666666666666667</amc>
		<cc>
			<method name="public static org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunction exponentialDecay(double initValue, double valueAtNumCall, long numCall)">1</method>
			<method name="private void _init_()">0</method>
			<method name="public static org.apache.commons.math3.ml.neuralnet.sofm.NeighbourhoodSizeFunction quasiSigmoidDecay(double initValue, double slope, long numCall)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.clustering.DBSCANClusterer</name>
		<wmc>8</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>31</rfc>
		<lcom>10</lcom>
		<ca>0</ca>
		<ce>9</ce>
		<npm>5</npm>
		<lcom3>0.35714285714285715</lcom3>
		<loc>229</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3055555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>27.375</amc>
		<cc>
			<method name="public int getMinPts()">1</method>
			<method name="private java.util.List merge(java.util.List one, java.util.List two)">2</method>
			<method name="public double getEps()">1</method>
			<method name="private org.apache.commons.math3.ml.clustering.Cluster expandCluster(org.apache.commons.math3.ml.clustering.Cluster cluster, org.apache.commons.math3.ml.clustering.Clusterable point, java.util.List neighbors, java.util.Collection points, java.util.Map visited)">5</method>
			<method name="public java.util.List cluster(java.util.Collection points)">1</method>
			<method name="public void _init_(double eps, int minPts)">0</method>
			<method name="private java.util.List getNeighbors(org.apache.commons.math3.ml.clustering.Clusterable point, java.util.Collection points)">2</method>
			<method name="public void _init_(double eps, int minPts, org.apache.commons.math3.ml.distance.DistanceMeasure measure)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.Region</name>
		<wmc>15</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>33</cbo>
		<rfc>15</rfc>
		<lcom>105</lcom>
		<ca>27</ca>
		<ce>7</ce>
		<npm>15</npm>
		<lcom3>2.0</lcom3>
		<loc>15</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.22857142857142856</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double getBoundarySize()">1</method>
			<method name="public abstract org.apache.commons.math3.geometry.Point getBarycenter()">1</method>
			<method name="public abstract boolean isFull()">1</method>
			<method name="public abstract boolean isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)">1</method>
			<method name="public abstract org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.Point)">1</method>
			<method name="public abstract org.apache.commons.math3.geometry.partitioning.Side side(org.apache.commons.math3.geometry.partitioning.Hyperplane)">1</method>
			<method name="public abstract boolean isEmpty()">1</method>
			<method name="public abstract org.apache.commons.math3.geometry.partitioning.BoundaryProjection projectToBoundary(org.apache.commons.math3.geometry.Point)">1</method>
			<method name="public abstract org.apache.commons.math3.geometry.partitioning.SubHyperplane intersection(org.apache.commons.math3.geometry.partitioning.SubHyperplane)">1</method>
			<method name="public abstract org.apache.commons.math3.geometry.partitioning.Region buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)">1</method>
			<method name="public abstract double getSize()">1</method>
			<method name="public abstract boolean isFull(org.apache.commons.math3.geometry.partitioning.BSPTree)">1</method>
			<method name="public abstract org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)">1</method>
			<method name="public abstract boolean contains(org.apache.commons.math3.geometry.partitioning.Region)">1</method>
			<method name="public abstract org.apache.commons.math3.geometry.partitioning.Region copySelf()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.general.AbstractScalarDifferentiableOptimizer</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>11</cbo>
		<rfc>12</rfc>
		<lcom>13</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>1</npm>
		<lcom3>0.4</lcom3>
		<loc>46</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4166666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.5</amc>
		<cc>
			<method name="public org.apache.commons.math3.optimization.PointValuePair optimize(int maxEval, org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction f, org.apache.commons.math3.optimization.GoalType goalType, double[] startPoint)">1</method>
			<method name="protected void _init_()">0</method>
			<method name="protected void _init_(org.apache.commons.math3.optimization.ConvergenceChecker checker)">0</method>
			<method name="protected volatile org.apache.commons.math3.optimization.PointValuePair optimizeInternal(int x0, org.apache.commons.math3.analysis.MultivariateFunction x1, org.apache.commons.math3.optimization.GoalType x2, double[] x3)">1</method>
			<method name="protected double[] computeObjectiveGradient(double[] evaluationPoint)">1</method>
			<method name="protected org.apache.commons.math3.optimization.PointValuePair optimizeInternal(int maxEval, org.apache.commons.math3.analysis.DifferentiableMultivariateFunction f, org.apache.commons.math3.optimization.GoalType goalType, double[] startPoint)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.regression.ModelSpecificationException</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="public transient void _init_(org.apache.commons.math3.exception.util.Localizable pattern, Object[] args)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>20</cbo>
		<rfc>21</rfc>
		<lcom>9</lcom>
		<ca>3</ca>
		<ce>17</ce>
		<npm>5</npm>
		<lcom3>0.625</lcom3>
		<loc>291</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.47619047619047616</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>40.0</amc>
		<cc>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] getVertices()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.Segment[] getLineSegments()">1</method>
			<method name="private boolean isConvex(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] hullVertices)">8</method>
			<method name="public volatile org.apache.commons.math3.geometry.Point[] getVertices()">1</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.Region createRegion()">1</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] vertices, double tolerance)">0</method>
			<method name="private org.apache.commons.math3.geometry.euclidean.twod.Segment[] retrieveLineSegments()">6</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.sampling.DummyStepHandler$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter$UpperBoundMapper</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>24</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.666666666666667</amc>
		<cc>
			<method name="public double unboundedToBounded(double y)">1</method>
			<method name="public double boundedToUnbounded(double x)">1</method>
			<method name="public void _init_(double upper)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.AbstractConvergenceChecker</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>4</noc>
		<cbo>5</cbo>
		<rfc>5</rfc>
		<lcom>2</lcom>
		<ca>4</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>21</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.75</amc>
		<cc>
			<method name="public double getAbsoluteThreshold()">1</method>
			<method name="public void _init_(double relativeThreshold, double absoluteThreshold)">0</method>
			<method name="public abstract boolean converged(int, Object, Object)">1</method>
			<method name="public double getRelativeThreshold()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.solvers.BisectionSolver</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>13</rfc>
		<lcom>6</lcom>
		<ca>0</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>67</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.5</amc>
		<cc>
			<method name="protected double doSolve()">1</method>
			<method name="public void _init_(double absoluteAccuracy)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(double relativeAccuracy, double absoluteAccuracy)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.EnumeratedIntegerDistribution</name>
		<wmc>10</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>29</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>10</ce>
		<npm>10</npm>
		<lcom3>0.6111111111111112</lcom3>
		<loc>271</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.34</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>25.9</amc>
		<cc>
			<method name="public int sample()">1</method>
			<method name="public boolean isSupportConnected()">1</method>
			<method name="public void _init_(int[] singletons, double[] probabilities)">0</method>
			<method name="public int getSupportUpperBound()">2</method>
			<method name="public double getNumericalVariance()">2</method>
			<method name="public double getNumericalMean()">2</method>
			<method name="public double cumulativeProbability(int x)">2</method>
			<method name="public double probability(int x)">1</method>
			<method name="public int getSupportLowerBound()">2</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, int[] singletons, double[] probabilities)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.LogNormalDistribution</name>
		<wmc>22</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>36</rfc>
		<lcom>135</lcom>
		<ca>0</ca>
		<ce>9</ce>
		<npm>20</npm>
		<lcom3>0.8214285714285714</lcom3>
		<loc>320</loc>
		<dam>0.875</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5079365079365079</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.181818181818182</amc>
		<cc>
			<method name="protected double getSolverAbsoluteAccuracy()">1</method>
			<method name="public double getScale()">1</method>
			<method name="public double density(double x)">2</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public boolean isSupportConnected()">1</method>
			<method name="public boolean isSupportUpperBoundInclusive()">1</method>
			<method name="public double cumulativeProbability(double x)">4</method>
			<method name="public boolean isSupportLowerBoundInclusive()">1</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, double scale, double shape)">0</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, double scale, double shape, double inverseCumAccuracy)">0</method>
			<method name="public double getShape()">1</method>
			<method name="public double getSupportLowerBound()">1</method>
			<method name="public void _init_(double scale, double shape, double inverseCumAccuracy)">0</method>
			<method name="public double sample()">1</method>
			<method name="public double cumulativeProbability(double x0, double x1)">1</method>
			<method name="public double getNumericalVariance()">1</method>
			<method name="public double getNumericalMean()">1</method>
			<method name="public double probability(double x0, double x1)">1</method>
			<method name="public double getSupportUpperBound()">1</method>
			<method name="public void _init_(double scale, double shape)">0</method>
			<method name="public double logDensity(double x)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.DoubleArray</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>8</rfc>
		<lcom>28</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>8</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void addElement(double)">1</method>
			<method name="public abstract double addElementRolling(double)">1</method>
			<method name="public abstract double getElement(int)">1</method>
			<method name="public abstract int getNumElements()">1</method>
			<method name="public abstract void addElements(double[])">1</method>
			<method name="public abstract double[] getElements()">1</method>
			<method name="public abstract void setElement(int, double)">1</method>
			<method name="public abstract void clear()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.FunctionUtils$14$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>28</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.5</amc>
		<cc>
			<method name="void _init_(org.apache.commons.math3.analysis.FunctionUtils$14)">0</method>
			<method name="public double value(double x)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Tanh</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>9</rfc>
		<lcom>6</lcom>
		<ca>0</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>17</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.25</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double value(double x)">1</method>
			<method name="public org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet</name>
		<wmc>39</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>19</cbo>
		<rfc>70</rfc>
		<lcom>741</lcom>
		<ca>8</ca>
		<ce>13</ce>
		<npm>16</npm>
		<lcom3>1.0263157894736843</lcom3>
		<loc>775</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3034188034188034</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.846153846153847</amc>
		<cc>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="private double getAngle(org.apache.commons.math3.geometry.partitioning.BSPTree node)">1</method>
			<method name="private org.apache.commons.math3.geometry.partitioning.BSPTree leafBefore(org.apache.commons.math3.geometry.partitioning.BSPTree node)">2</method>
			<method name="public void _init_(double lower, double upper, double tolerance)">0</method>
			<method name="public void _init_(java.util.Collection boundary)">0</method>
			<method name="private org.apache.commons.math3.geometry.euclidean.oned.Vector1D finiteOrNullPoint(double x)">2</method>
			<method name="static boolean access$400(org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet x0, org.apache.commons.math3.geometry.partitioning.BSPTree x1)">1</method>
			<method name="static double access$300(org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet x0, org.apache.commons.math3.geometry.partitioning.BSPTree x1)">1</method>
			<method name="private org.apache.commons.math3.geometry.partitioning.BSPTree getFirstIntervalBoundary()">5</method>
			<method name="private org.apache.commons.math3.geometry.partitioning.BSPTree nextInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree node)">3</method>
			<method name="static org.apache.commons.math3.geometry.partitioning.BSPTree access$500(org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet x0, org.apache.commons.math3.geometry.partitioning.BSPTree x1)">1</method>
			<method name="private org.apache.commons.math3.geometry.partitioning.BSPTree childAfter(org.apache.commons.math3.geometry.partitioning.BSPTree node)">2</method>
			<method name="private org.apache.commons.math3.geometry.partitioning.BSPTree childBefore(org.apache.commons.math3.geometry.partitioning.BSPTree node)">2</method>
			<method name="public double getSup()">4</method>
			<method name="public double getInf()">4</method>
			<method name="static boolean access$200(org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet x0, org.apache.commons.math3.geometry.partitioning.BSPTree x1)">1</method>
			<method name="private org.apache.commons.math3.geometry.partitioning.BSPTree leafAfter(org.apache.commons.math3.geometry.partitioning.BSPTree node)">2</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.partitioning.BSPTree tree)">0</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree tree)">1</method>
			<method name="public java.util.List asList()">2</method>
			<method name="private org.apache.commons.math3.geometry.partitioning.BSPTree previousInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree node)">3</method>
			<method name="static org.apache.commons.math3.geometry.partitioning.BSPTree access$000(org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet x0)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(double tolerance)">0</method>
			<method name="private boolean isAfterParent(org.apache.commons.math3.geometry.partitioning.BSPTree node)">3</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.BoundaryProjection projectToBoundary(org.apache.commons.math3.geometry.Point point)">6</method>
			<method name="public void _init_(java.util.Collection boundary, double tolerance)">0</method>
			<method name="static org.apache.commons.math3.geometry.partitioning.BSPTree access$100(org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet x0, org.apache.commons.math3.geometry.partitioning.BSPTree x1)">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.partitioning.Region buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree x0)">1</method>
			<method name="protected void computeGeometricalProperties()">6</method>
			<method name="public void _init_(double lower, double upper)">0</method>
			<method name="private boolean isIntervalEnd(org.apache.commons.math3.geometry.partitioning.BSPTree node)">3</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.partitioning.BSPTree tree, double tolerance)">0</method>
			<method name="public volatile org.apache.commons.math3.geometry.partitioning.AbstractRegion buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree x0)">1</method>
			<method name="private static org.apache.commons.math3.geometry.partitioning.BSPTree buildTree(double lower, double upper, double tolerance)">7</method>
			<method name="private boolean isBeforeParent(org.apache.commons.math3.geometry.partitioning.BSPTree node)">3</method>
			<method name="private boolean isIntervalStart(org.apache.commons.math3.geometry.partitioning.BSPTree node)">3</method>
			<method name="private org.apache.commons.math3.geometry.partitioning.BSPTree getFirstLeaf(org.apache.commons.math3.geometry.partitioning.BSPTree root)">3</method>
			<method name="private boolean isDirect(org.apache.commons.math3.geometry.partitioning.BSPTree node)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.twod.Vector2D</name>
		<wmc>48</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>37</cbo>
		<rfc>56</rfc>
		<lcom>316</lcom>
		<ca>26</ca>
		<ce>12</ce>
		<npm>47</npm>
		<lcom3>0.7477203647416413</lcom3>
		<loc>752</loc>
		<dam>0.42857142857142855</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.2127659574468085</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>14.520833333333334</amc>
		<cc>
			<method name="public volatile org.apache.commons.math3.geometry.Vector scalarMultiply(double x0)">1</method>
			<method name="public double getNormSq()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public double getY()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.Vector2D scalarMultiply(double a)">1</method>
			<method name="public void _init_(double x, double y)">0</method>
			<method name="public static double distanceSq(org.apache.commons.math3.geometry.euclidean.twod.Vector2D p1, org.apache.commons.math3.geometry.euclidean.twod.Vector2D p2)">1</method>
			<method name="public double crossProduct(org.apache.commons.math3.geometry.euclidean.twod.Vector2D p1, org.apache.commons.math3.geometry.euclidean.twod.Vector2D p2)">1</method>
			<method name="public void _init_(double[] v)">0</method>
			<method name="public org.apache.commons.math3.geometry.Space getSpace()">1</method>
			<method name="public double getX()">1</method>
			<method name="public void _init_(double a1, org.apache.commons.math3.geometry.euclidean.twod.Vector2D u1, double a2, org.apache.commons.math3.geometry.euclidean.twod.Vector2D u2, double a3, org.apache.commons.math3.geometry.euclidean.twod.Vector2D u3, double a4, org.apache.commons.math3.geometry.euclidean.twod.Vector2D u4)">0</method>
			<method name="public double distanceSq(org.apache.commons.math3.geometry.Vector p)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.Vector2D negate()">1</method>
			<method name="public boolean isInfinite()">4</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.Vector2D subtract(org.apache.commons.math3.geometry.Vector p)">1</method>
			<method name="public void _init_(double a1, org.apache.commons.math3.geometry.euclidean.twod.Vector2D u1, double a2, org.apache.commons.math3.geometry.euclidean.twod.Vector2D u2, double a3, org.apache.commons.math3.geometry.euclidean.twod.Vector2D u3)">0</method>
			<method name="public String toString(java.text.NumberFormat format)">1</method>
			<method name="public String toString()">1</method>
			<method name="public static double angle(org.apache.commons.math3.geometry.euclidean.twod.Vector2D v1, org.apache.commons.math3.geometry.euclidean.twod.Vector2D v2)">1</method>
			<method name="public boolean isNaN()">3</method>
			<method name="public double getNorm1()">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.Vector getZero()">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.Vector subtract(double x0, org.apache.commons.math3.geometry.Vector x1)">1</method>
			<method name="public static double distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D p1, org.apache.commons.math3.geometry.euclidean.twod.Vector2D p2)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.Vector2D normalize()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.Vector2D getZero()">1</method>
			<method name="public double dotProduct(org.apache.commons.math3.geometry.Vector v)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.Vector2D subtract(double factor, org.apache.commons.math3.geometry.Vector v)">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.Vector add(org.apache.commons.math3.geometry.Vector x0)">1</method>
			<method name="public boolean equals(Object other)">6</method>
			<method name="public double distance(org.apache.commons.math3.geometry.Vector p)">1</method>
			<method name="public double distance1(org.apache.commons.math3.geometry.Vector p)">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.Vector negate()">1</method>
			<method name="public static double distanceInf(org.apache.commons.math3.geometry.euclidean.twod.Vector2D p1, org.apache.commons.math3.geometry.euclidean.twod.Vector2D p2)">1</method>
			<method name="public double[] toArray()">1</method>
			<method name="public double getNorm()">1</method>
			<method name="public int hashCode()">2</method>
			<method name="public volatile org.apache.commons.math3.geometry.Vector add(double x0, org.apache.commons.math3.geometry.Vector x1)">1</method>
			<method name="public double distance(org.apache.commons.math3.geometry.Point p)">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.Vector normalize()">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.Vector subtract(org.apache.commons.math3.geometry.Vector x0)">1</method>
			<method name="public void _init_(double a1, org.apache.commons.math3.geometry.euclidean.twod.Vector2D u1, double a2, org.apache.commons.math3.geometry.euclidean.twod.Vector2D u2)">0</method>
			<method name="public double getNormInf()">1</method>
			<method name="public double distanceInf(org.apache.commons.math3.geometry.Vector p)">1</method>
			<method name="public void _init_(double a, org.apache.commons.math3.geometry.euclidean.twod.Vector2D u)">0</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.Vector2D add(double factor, org.apache.commons.math3.geometry.Vector v)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.twod.Vector2D add(org.apache.commons.math3.geometry.Vector v)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer</name>
		<wmc>17</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>19</cbo>
		<rfc>51</rfc>
		<lcom>98</lcom>
		<ca>1</ca>
		<ce>18</ce>
		<npm>10</npm>
		<lcom3>0.75</lcom3>
		<loc>727</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.26143790849673204</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>41.529411764705884</amc>
		<cc>
			<method name="private org.apache.commons.math3.ml.clustering.Clusterable getFarthestPoint(java.util.Collection clusters)">1</method>
			<method name="private org.apache.commons.math3.ml.clustering.Clusterable getPointFromLargestNumberCluster(java.util.Collection clusters)">1</method>
			<method name="private org.apache.commons.math3.ml.clustering.Clusterable getPointFromLargestVarianceCluster(java.util.Collection clusters)">1</method>
			<method name="public java.util.List cluster(java.util.Collection points)">1</method>
			<method name="private int getNearestCluster(java.util.Collection clusters, org.apache.commons.math3.ml.clustering.Clusterable point)">3</method>
			<method name="public void _init_(int k)">0</method>
			<method name="public void _init_(int k, int maxIterations, org.apache.commons.math3.ml.distance.DistanceMeasure measure)">0</method>
			<method name="public void _init_(int k, int maxIterations, org.apache.commons.math3.ml.distance.DistanceMeasure measure, org.apache.commons.math3.random.RandomGenerator random)">0</method>
			<method name="public void _init_(int k, int maxIterations, org.apache.commons.math3.ml.distance.DistanceMeasure measure, org.apache.commons.math3.random.RandomGenerator random, org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy emptyStrategy)">0</method>
			<method name="private int assignPointsToClusters(java.util.List clusters, java.util.Collection points, int[] assignments)">3</method>
			<method name="private java.util.List chooseInitialCenters(java.util.Collection points)">15</method>
			<method name="public void _init_(int k, int maxIterations)">0</method>
			<method name="public org.apache.commons.math3.random.RandomGenerator getRandomGenerator()">1</method>
			<method name="public int getMaxIterations()">1</method>
			<method name="public org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy getEmptyClusterStrategy()">1</method>
			<method name="private org.apache.commons.math3.ml.clustering.Clusterable centroidOf(java.util.Collection points, int dimension)">3</method>
			<method name="public int getK()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Logit</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>17</rfc>
		<lcom>15</lcom>
		<ca>3</ca>
		<ce>7</ce>
		<npm>5</npm>
		<lcom3>0.5</lcom3>
		<loc>191</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.47619047619047616</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.0</amc>
		<cc>
			<method name="static double access$000(double x0, double x1, double x2)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double value(double x)">1</method>
			<method name="private static double value(double x, double lo, double hi)">1</method>
			<method name="public org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
			<method name="public void _init_(double lo, double hi)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer</name>
		<wmc>14</wmc>
		<dit>0</dit>
		<noc>2</noc>
		<cbo>18</cbo>
		<rfc>40</rfc>
		<lcom>83</lcom>
		<ca>2</ca>
		<ce>16</ce>
		<npm>7</npm>
		<lcom3>0.7692307692307693</lcom3>
		<loc>228</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.32142857142857145</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.142857142857142</amc>
		<cc>
			<method name="protected double computeCost(double[] residuals)">1</method>
			<method name="protected double[] computeResiduals(double[] objectiveValue)">3</method>
			<method name="public volatile Object optimize(org.apache.commons.math3.optim.OptimizationData[] x0)">1</method>
			<method name="public transient org.apache.commons.math3.optim.PointVectorValuePair optimize(org.apache.commons.math3.optim.OptimizationData[] optData)">1</method>
			<method name="protected void setCost(double cost)">1</method>
			<method name="public double getChiSquare()">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getWeightSquareRoot()">1</method>
			<method name="protected org.apache.commons.math3.linear.RealMatrix computeWeightedJacobian(double[] params)">1</method>
			<method name="private org.apache.commons.math3.linear.RealMatrix squareRoot(org.apache.commons.math3.linear.RealMatrix m)">3</method>
			<method name="protected void _init_(org.apache.commons.math3.optim.ConvergenceChecker checker)">0</method>
			<method name="protected transient void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[] optData)">3</method>
			<method name="public double[] computeSigma(double[] params, double covarianceSingularityThreshold)">2</method>
			<method name="public double getRMS()">1</method>
			<method name="public double[][] computeCovariances(double[] params, double threshold)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.StatisticalSummary</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>7</rfc>
		<lcom>21</lcom>
		<ca>8</ca>
		<ce>0</ce>
		<npm>7</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double getStandardDeviation()">1</method>
			<method name="public abstract double getMean()">1</method>
			<method name="public abstract long getN()">1</method>
			<method name="public abstract double getMin()">1</method>
			<method name="public abstract double getSum()">1</method>
			<method name="public abstract double getMax()">1</method>
			<method name="public abstract double getVariance()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.UniformRandomGenerator</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>25</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.666666666666667</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public double nextNormalizedDouble()">1</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator generator)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Asinh</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>9</rfc>
		<lcom>6</lcom>
		<ca>0</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>17</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.25</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double value(double x)">1</method>
			<method name="public org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.spherical.oned.Sphere1D$LazyHolder</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>0.5</lcom3>
		<loc>15</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.6666666666666665</amc>
		<cc>
			<method name="static org.apache.commons.math3.geometry.spherical.oned.Sphere1D access$000()">1</method>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.moment.SemiVariance</name>
		<wmc>18</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>26</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>7</ce>
		<npm>17</npm>
		<lcom3>0.7294117647058824</lcom3>
		<loc>259</loc>
		<dam>0.6</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.31932773109243695</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.11111111111111</amc>
		<cc>
			<method name="public double evaluate(double[] values, int start, int length)">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public org.apache.commons.math3.stat.descriptive.moment.SemiVariance copy()">1</method>
			<method name="public void _init_(boolean biasCorrected)">0</method>
			<method name="public static void copy(org.apache.commons.math3.stat.descriptive.moment.SemiVariance source, org.apache.commons.math3.stat.descriptive.moment.SemiVariance dest)">1</method>
			<method name="public boolean isBiasCorrected()">1</method>
			<method name="public void _init_(org.apache.commons.math3.stat.descriptive.moment.SemiVariance$Direction direction)">0</method>
			<method name="public void _init_(org.apache.commons.math3.stat.descriptive.moment.SemiVariance original)">0</method>
			<method name="public double evaluate(double[] values, double cutoff)">1</method>
			<method name="public org.apache.commons.math3.stat.descriptive.moment.SemiVariance$Direction getVarianceDirection()">1</method>
			<method name="public void setVarianceDirection(org.apache.commons.math3.stat.descriptive.moment.SemiVariance$Direction varianceDirection)">1</method>
			<method name="public double evaluate(double[] values, org.apache.commons.math3.stat.descriptive.moment.SemiVariance$Direction direction)">1</method>
			<method name="public double evaluate(double[] values, double cutoff, org.apache.commons.math3.stat.descriptive.moment.SemiVariance$Direction direction, boolean corrected, int start, int length)">1</method>
			<method name="public void _init_(boolean corrected, org.apache.commons.math3.stat.descriptive.moment.SemiVariance$Direction direction)">0</method>
			<method name="public double evaluate(double[] values, double cutoff, org.apache.commons.math3.stat.descriptive.moment.SemiVariance$Direction direction)">1</method>
			<method name="public void setBiasCorrected(boolean biasCorrected)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.differentiation.DerivativeStructure</name>
		<wmc>137</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>72</cbo>
		<rfc>168</rfc>
		<lcom>4996</lcom>
		<ca>61</ca>
		<ce>13</ce>
		<npm>133</npm>
		<lcom3>0.3651960784313726</lcom3>
		<loc>2151</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.16204379562043797</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>14.678832116788321</amc>
		<cc>
			<method name="public volatile Object abs()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure linearCombination(org.apache.commons.math3.analysis.differentiation.DerivativeStructure a1, org.apache.commons.math3.analysis.differentiation.DerivativeStructure b1, org.apache.commons.math3.analysis.differentiation.DerivativeStructure a2, org.apache.commons.math3.analysis.differentiation.DerivativeStructure b2)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(double a)">1</method>
			<method name="public volatile Object copySign(double x0)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure linearCombination(double[] a, org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] b)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure linearCombination(double a1, org.apache.commons.math3.analysis.differentiation.DerivativeStructure b1, double a2, org.apache.commons.math3.analysis.differentiation.DerivativeStructure b2, double a3, org.apache.commons.math3.analysis.differentiation.DerivativeStructure b3, double a4, org.apache.commons.math3.analysis.differentiation.DerivativeStructure b4)">1</method>
			<method name="public void _init_(double a1, org.apache.commons.math3.analysis.differentiation.DerivativeStructure ds1, double a2, org.apache.commons.math3.analysis.differentiation.DerivativeStructure ds2)">0</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure pow(double p)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure atan()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure createConstant(double c)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure linearCombination(org.apache.commons.math3.analysis.differentiation.DerivativeStructure a1, org.apache.commons.math3.analysis.differentiation.DerivativeStructure b1, org.apache.commons.math3.analysis.differentiation.DerivativeStructure a2, org.apache.commons.math3.analysis.differentiation.DerivativeStructure b2, org.apache.commons.math3.analysis.differentiation.DerivativeStructure a3, org.apache.commons.math3.analysis.differentiation.DerivativeStructure b3, org.apache.commons.math3.analysis.differentiation.DerivativeStructure a4, org.apache.commons.math3.analysis.differentiation.DerivativeStructure b4)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure linearCombination(double a1, org.apache.commons.math3.analysis.differentiation.DerivativeStructure b1, double a2, org.apache.commons.math3.analysis.differentiation.DerivativeStructure b2, double a3, org.apache.commons.math3.analysis.differentiation.DerivativeStructure b3)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure remainder(double a)">1</method>
			<method name="public volatile Object linearCombination(Object x0, Object x1, Object x2, Object x3, Object x4, Object x5)">1</method>
			<method name="public static org.apache.commons.math3.analysis.differentiation.DerivativeStructure hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure x, org.apache.commons.math3.analysis.differentiation.DerivativeStructure y)">1</method>
			<method name="private Object writeReplace()">1</method>
			<method name="public static org.apache.commons.math3.analysis.differentiation.DerivativeStructure atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure y, org.apache.commons.math3.analysis.differentiation.DerivativeStructure x)">1</method>
			<method name="public org.apache.commons.math3.Field getField()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure x)">1</method>
			<method name="public volatile Object linearCombination(Object x0, Object x1, Object x2, Object x3, Object x4, Object x5, Object x6, Object x7)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure y)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure floor()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure toRadians()">2</method>
			<method name="public volatile Object remainder(double x0)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure asin()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure signum()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure acos()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure subtract(double a)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure tanh()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure cos()">1</method>
			<method name="public volatile Object negate()">1</method>
			<method name="public volatile Object tan()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure rootN(int n)">1</method>
			<method name="public volatile Object scalb(int x0)">1</method>
			<method name="public volatile Object add(Object x0)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure sinh()">1</method>
			<method name="public volatile Object exp()">1</method>
			<method name="public double getValue()">1</method>
			<method name="public long round()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure ceil()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure log()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure linearCombination(org.apache.commons.math3.analysis.differentiation.DerivativeStructure a1, org.apache.commons.math3.analysis.differentiation.DerivativeStructure b1, org.apache.commons.math3.analysis.differentiation.DerivativeStructure a2, org.apache.commons.math3.analysis.differentiation.DerivativeStructure b2, org.apache.commons.math3.analysis.differentiation.DerivativeStructure a3, org.apache.commons.math3.analysis.differentiation.DerivativeStructure b3)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure log1p()">1</method>
			<method name="public volatile Object reciprocal()">1</method>
			<method name="public void _init_(int parameters, int order, double value)">0</method>
			<method name="public volatile Object divide(double x0)">1</method>
			<method name="public volatile Object cbrt()">1</method>
			<method name="public volatile Object rootN(int x0)">1</method>
			<method name="private void _init_(org.apache.commons.math3.analysis.differentiation.DSCompiler compiler)">0</method>
			<method name="public volatile Object atan()">1</method>
			<method name="public volatile Object sqrt()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure a)">1</method>
			<method name="public transient double getPartialDerivative(int[] orders)">1</method>
			<method name="public volatile Object log()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure reciprocal()">1</method>
			<method name="public boolean equals(Object other)">6</method>
			<method name="public double getReal()">1</method>
			<method name="static org.apache.commons.math3.analysis.differentiation.DSCompiler access$000(org.apache.commons.math3.analysis.differentiation.DerivativeStructure x0)">1</method>
			<method name="public void _init_(int parameters, int order, int index, double value)">0</method>
			<method name="public int hashCode()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure asinh()">1</method>
			<method name="public volatile Object add(double x0)">1</method>
			<method name="public volatile Object rint()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(int n)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure subtract(org.apache.commons.math3.analysis.differentiation.DerivativeStructure a)">1</method>
			<method name="public volatile Object multiply(Object x0)">1</method>
			<method name="public int getOrder()">1</method>
			<method name="public volatile Object subtract(double x0)">1</method>
			<method name="public static org.apache.commons.math3.analysis.differentiation.DerivativeStructure pow(double a, org.apache.commons.math3.analysis.differentiation.DerivativeStructure x)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure toDegrees()">2</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure linearCombination(double a1, org.apache.commons.math3.analysis.differentiation.DerivativeStructure b1, double a2, org.apache.commons.math3.analysis.differentiation.DerivativeStructure b2)">1</method>
			<method name="public volatile Object pow(Object x0)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure sin()">1</method>
			<method name="public volatile Object linearCombination(double x0, Object x1, double x2, Object x3)">1</method>
			<method name="public int getExponent()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure exp()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure linearCombination(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] a, org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] b)">1</method>
			<method name="public volatile Object cos()">1</method>
			<method name="public transient void _init_(int parameters, int order, double[] derivatives)">0</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure copySign(double sign)">5</method>
			<method name="public void _init_(int parameters, int order)">0</method>
			<method name="public volatile Object ceil()">1</method>
			<method name="public volatile Object cosh()">1</method>
			<method name="public volatile Object asin()">1</method>
			<method name="public transient org.apache.commons.math3.analysis.differentiation.DerivativeStructure compose(double[] f)">1</method>
			<method name="public void _init_(double a1, org.apache.commons.math3.analysis.differentiation.DerivativeStructure ds1, double a2, org.apache.commons.math3.analysis.differentiation.DerivativeStructure ds2, double a3, org.apache.commons.math3.analysis.differentiation.DerivativeStructure ds3)">0</method>
			<method name="private void _init_(org.apache.commons.math3.analysis.differentiation.DerivativeStructure ds)">0</method>
			<method name="public volatile Object asinh()">1</method>
			<method name="public volatile Object floor()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure a)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure cbrt()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure abs()">2</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure a)">1</method>
			<method name="public volatile Object atan2(Object x0)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure negate()">2</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure expm1()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure copySign(org.apache.commons.math3.analysis.differentiation.DerivativeStructure sign)">5</method>
			<method name="public void _init_(double a1, org.apache.commons.math3.analysis.differentiation.DerivativeStructure ds1, double a2, org.apache.commons.math3.analysis.differentiation.DerivativeStructure ds2, double a3, org.apache.commons.math3.analysis.differentiation.DerivativeStructure ds3, double a4, org.apache.commons.math3.analysis.differentiation.DerivativeStructure ds4)">0</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(double a)">2</method>
			<method name="public volatile Object tanh()">1</method>
			<method name="public volatile Object subtract(Object x0)">1</method>
			<method name="public volatile Object linearCombination(double x0, Object x1, double x2, Object x3, double x4, Object x5, double x6, Object x7)">1</method>
			<method name="public double[] getAllDerivatives()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure pow(int n)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure tan()">1</method>
			<method name="public volatile Object expm1()">1</method>
			<method name="public volatile Object linearCombination(double x0, Object x1, double x2, Object x3, double x4, Object x5)">1</method>
			<method name="public volatile Object atanh()">1</method>
			<method name="public volatile Object divide(Object x0)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure a)">1</method>
			<method name="public volatile Object copySign(Object x0)">1</method>
			<method name="public volatile Object pow(double x0)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure rint()">1</method>
			<method name="public volatile Object pow(int x0)">1</method>
			<method name="public volatile Object log1p()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure e)">1</method>
			<method name="public volatile Object acos()">1</method>
			<method name="public volatile Object acosh()">1</method>
			<method name="public volatile Object linearCombination(Object x0, Object x1, Object x2, Object x3)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure sqrt()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure acosh()">1</method>
			<method name="public int getFreeParameters()">1</method>
			<method name="public volatile Object linearCombination(double[] x0, Object[] x1)">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure cosh()">1</method>
			<method name="public volatile Object remainder(Object x0)">1</method>
			<method name="public volatile Object sin()">1</method>
			<method name="public volatile Object sinh()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure log10()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure scalb(int n)">2</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure divide(double a)">2</method>
			<method name="public transient double taylor(double[] delta)">1</method>
			<method name="public volatile Object linearCombination(Object[] x0, Object[] x1)">1</method>
			<method name="public volatile Object multiply(int x0)">1</method>
			<method name="public volatile Object hypot(Object x0)">1</method>
			<method name="public volatile Object multiply(double x0)">1</method>
			<method name="public volatile Object signum()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure atanh()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet$TranslationTransform</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>14</rfc>
		<lcom>9</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>6</npm>
		<lcom3>0.6666666666666667</lcom3>
		<loc>76</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.43333333333333335</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.166666666666666</amc>
		<cc>
			<method name="public org.apache.commons.math3.geometry.partitioning.SubHyperplane apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane sub, org.apache.commons.math3.geometry.partitioning.Hyperplane original, org.apache.commons.math3.geometry.partitioning.Hyperplane transformed)">2</method>
			<method name="public void _init_(org.apache.commons.math3.geometry.euclidean.threed.Vector3D translation)">0</method>
			<method name="public volatile org.apache.commons.math3.geometry.Point apply(org.apache.commons.math3.geometry.Point x0)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D apply(org.apache.commons.math3.geometry.Point point)">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.partitioning.Hyperplane apply(org.apache.commons.math3.geometry.partitioning.Hyperplane x0)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Plane apply(org.apache.commons.math3.geometry.partitioning.Hyperplane hyperplane)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>24</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>13</ce>
		<npm>9</npm>
		<lcom3>0.20833333333333337</lcom3>
		<loc>302</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3111111111111111</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>32.22222222222222</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] getPolynomials()">1</method>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">5</method>
			<method name="public boolean isValidPoint(double x)">3</method>
			<method name="public int getN()">1</method>
			<method name="public double value(double v)">5</method>
			<method name="public org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
			<method name="public double[] getKnots()">1</method>
			<method name="public void _init_(double[] knots, org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials)">0</method>
			<method name="public org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction polynomialSplineDerivative()">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.genetics.TournamentSelection</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>20</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>11</ce>
		<npm>4</npm>
		<lcom3>0.0</lcom3>
		<loc>94</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.45</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.6</amc>
		<cc>
			<method name="public int getArity()">1</method>
			<method name="private org.apache.commons.math3.genetics.Chromosome tournament(org.apache.commons.math3.genetics.ListPopulation population)">1</method>
			<method name="public org.apache.commons.math3.genetics.ChromosomePair select(org.apache.commons.math3.genetics.Population population)">1</method>
			<method name="public void _init_(int arity)">0</method>
			<method name="public void setArity(int arity)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.RegionFactory$XorMerger</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>8</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>32</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.333333333333334</amc>
		<cc>
			<method name="void _init_(org.apache.commons.math3.geometry.partitioning.RegionFactory x0, org.apache.commons.math3.geometry.partitioning.RegionFactory$1 x1)">0</method>
			<method name="private void _init_(org.apache.commons.math3.geometry.partitioning.RegionFactory)">0</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.BSPTree merge(org.apache.commons.math3.geometry.partitioning.BSPTree leaf, org.apache.commons.math3.geometry.partitioning.BSPTree tree, org.apache.commons.math3.geometry.partitioning.BSPTree parentTree, boolean isPlusChild, boolean leafFromInstance)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.BaseMultivariateMultiStartOptimizer$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>55</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.666666666666668</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="public int compare(org.apache.commons.math3.optimization.PointValuePair o1, org.apache.commons.math3.optimization.PointValuePair o2)">5</method>
			<method name="void _init_(org.apache.commons.math3.optimization.BaseMultivariateMultiStartOptimizer, org.apache.commons.math3.optimization.GoalType)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.GeometricDistribution</name>
		<wmc>11</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>19</rfc>
		<lcom>13</lcom>
		<ca>0</ca>
		<ce>7</ce>
		<npm>11</npm>
		<lcom3>0.7</lcom3>
		<loc>133</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.38636363636363635</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.909090909090908</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, double p)">0</method>
			<method name="public double logProbability(int x)">2</method>
			<method name="public void _init_(double p)">0</method>
			<method name="public boolean isSupportConnected()">1</method>
			<method name="public int getSupportUpperBound()">1</method>
			<method name="public double getNumericalVariance()">1</method>
			<method name="public double getNumericalMean()">1</method>
			<method name="public double cumulativeProbability(int x)">2</method>
			<method name="public double getProbabilityOfSuccess()">1</method>
			<method name="public double probability(int x)">2</method>
			<method name="public int getSupportLowerBound()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>13</cbo>
		<rfc>14</rfc>
		<lcom>13</lcom>
		<ca>2</ca>
		<ce>11</ce>
		<npm>4</npm>
		<lcom3>0.4</lcom3>
		<loc>325</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.43333333333333335</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>53.0</amc>
		<cc>
			<method name="public volatile org.apache.commons.math3.analysis.BivariateFunction interpolate(double[] x0, double[] x1, double[][] x2)">1</method>
			<method name="private int nextIndex(int i, int max)">2</method>
			<method name="public void _init_(boolean initializeDerivatives)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction interpolate(double[] xval, double[] yval, double[][] fval)">1</method>
			<method name="private int previousIndex(int i)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolator</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>14</rfc>
		<lcom>10</lcom>
		<ca>0</ca>
		<ce>10</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>593</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.55</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>117.6</amc>
		<cc>
			<method name="private int nextIndex(int i, int max)">2</method>
			<method name="public org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction interpolate(double[] xval, double[] yval, double[] zval, double[][][] fval)">1</method>
			<method name="public volatile org.apache.commons.math3.analysis.TrivariateFunction interpolate(double[] x0, double[] x1, double[] x2, double[][][] x3)">1</method>
			<method name="public void _init_()">0</method>
			<method name="private int previousIndex(int i)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.spherical.oned.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.StatisticalMultivariateSummary</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>11</rfc>
		<lcom>55</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>11</npm>
		<lcom3>2.0</lcom3>
		<loc>11</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double[] getMin()">1</method>
			<method name="public abstract double[] getStandardDeviation()">1</method>
			<method name="public abstract double[] getSumLog()">1</method>
			<method name="public abstract double[] getGeometricMean()">1</method>
			<method name="public abstract double[] getSum()">1</method>
			<method name="public abstract long getN()">1</method>
			<method name="public abstract double[] getMax()">1</method>
			<method name="public abstract int getDimension()">1</method>
			<method name="public abstract double[] getSumSq()">1</method>
			<method name="public abstract double[] getMean()">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealMatrix getCovariance()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.genetics.SelectionPolicy</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.genetics.ChromosomePair select(org.apache.commons.math3.genetics.Population)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.clustering.DBSCANClusterer$PointStatus</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.888888888888889</lcom3>
		<loc>45</loc>
		<dam>0.3333333333333333</dam>
		<moa>3</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>9.5</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public static org.apache.commons.math3.stat.clustering.DBSCANClusterer$PointStatus[] values()">1</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static org.apache.commons.math3.stat.clustering.DBSCANClusterer$PointStatus valueOf(String name)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.RealVectorChangingVisitor</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>3</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double end()">1</method>
			<method name="public abstract void start(int, int, int)">1</method>
			<method name="public abstract double visit(int, double)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.DefaultFieldMatrixChangingVisitor</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>17</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public org.apache.commons.math3.FieldElement visit(int row, int column, org.apache.commons.math3.FieldElement value)">1</method>
			<method name="public org.apache.commons.math3.FieldElement end()">1</method>
			<method name="public void _init_(org.apache.commons.math3.FieldElement zero)">0</method>
			<method name="public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.linear.Relationship$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>21</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.linear.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.AbstractIntegerDistribution</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>8</noc>
		<cbo>18</cbo>
		<rfc>32</rfc>
		<lcom>33</lcom>
		<ca>8</ca>
		<ce>10</ce>
		<npm>6</npm>
		<lcom3>0.8148148148148149</lcom3>
		<loc>294</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.38</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>28.1</amc>
		<cc>
			<method name="public double cumulativeProbability(int x0, int x1)">1</method>
			<method name="public int sample()">1</method>
			<method name="protected int solveInverseCumulativeProbability(double p, int lower, int upper)">5</method>
			<method name="protected void _init_(org.apache.commons.math3.random.RandomGenerator rng)">0</method>
			<method name="public double logProbability(int x)">1</method>
			<method name="public int[] sample(int sampleSize)">3</method>
			<method name="public int inverseCumulativeProbability(double p)">1</method>
			<method name="protected void _init_()">0</method>
			<method name="private double checkedCumulativeProbability(int argument)">1</method>
			<method name="public void reseedRandomGenerator(long seed)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.solvers.AbstractPolynomialSolver</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>6</cbo>
		<rfc>11</rfc>
		<lcom>13</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>0</npm>
		<lcom3>0.6</lcom3>
		<loc>46</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.5</amc>
		<cc>
			<method name="protected void _init_(double absoluteAccuracy)">0</method>
			<method name="protected volatile void setup(int x0, org.apache.commons.math3.analysis.UnivariateFunction x1, double x2, double x3, double x4)">1</method>
			<method name="protected double[] getCoefficients()">1</method>
			<method name="protected void _init_(double relativeAccuracy, double absoluteAccuracy)">0</method>
			<method name="protected void _init_(double relativeAccuracy, double absoluteAccuracy, double functionValueAccuracy)">0</method>
			<method name="protected void setup(int maxEval, org.apache.commons.math3.analysis.polynomials.PolynomialFunction f, double min, double max, double startValue)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.clustering.Cluster</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>6</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>5</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>0.75</lcom3>
		<loc>22</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.666666666666667</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public java.util.List getPoints()">1</method>
			<method name="public void addPoint(org.apache.commons.math3.ml.clustering.Clusterable point)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.exception.NonMonotonicSequenceException</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>24</cbo>
		<rfc>8</rfc>
		<lcom>7</lcom>
		<ca>20</ca>
		<ce>4</ce>
		<npm>6</npm>
		<lcom3>0.72</lcom3>
		<loc>79</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.333333333333334</amc>
		<cc>
			<method name="public Number getPrevious()">1</method>
			<method name="public org.apache.commons.math3.util.MathArrays$OrderDirection getDirection()">1</method>
			<method name="public int getIndex()">1</method>
			<method name="public boolean getStrict()">1</method>
			<method name="public void _init_(Number wrong, Number previous, int index, org.apache.commons.math3.util.MathArrays$OrderDirection direction, boolean strict)">0</method>
			<method name="public void _init_(Number wrong, Number previous, int index)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.Decimal64Field</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>26</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>6</npm>
		<lcom3>0.8571428571428571</lcom3>
		<loc>31</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.8571428571428571</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.75</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public Class getRuntimeClass()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public org.apache.commons.math3.util.Decimal64 getOne()">1</method>
			<method name="public org.apache.commons.math3.util.Decimal64 getZero()">1</method>
			<method name="public volatile Object getOne()">1</method>
			<method name="public volatile Object getZero()">1</method>
			<method name="public static final org.apache.commons.math3.util.Decimal64Field getInstance()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.RealMatrixPreservingVisitor</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>3</rfc>
		<lcom>3</lcom>
		<ca>10</ca>
		<ce>0</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>3</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double end()">1</method>
			<method name="public abstract void visit(int, int, double)">1</method>
			<method name="public abstract void start(int, int, int, int, int, int)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics</name>
		<wmc>37</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>71</rfc>
		<lcom>666</lcom>
		<ca>0</ca>
		<ce>6</ce>
		<npm>37</npm>
		<lcom3>1.0277777777777777</lcom3>
		<loc>197</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2594594594594595</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.297297297297297</amc>
		<cc>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.SummaryStatistics copy()">1</method>
			<method name="public synchronized double getSum()">1</method>
			<method name="public synchronized void setGeoMeanImpl(org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic geoMeanImpl)">1</method>
			<method name="public static void copy(org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics source, org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics dest)">1</method>
			<method name="public synchronized double getSumsq()">1</method>
			<method name="public synchronized double getPopulationVariance()">1</method>
			<method name="public synchronized org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic getSumsqImpl()">1</method>
			<method name="public synchronized org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic getSumLogImpl()">1</method>
			<method name="public synchronized org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic getSumImpl()">1</method>
			<method name="public synchronized void setMaxImpl(org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic maxImpl)">1</method>
			<method name="public synchronized org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics copy()">1</method>
			<method name="public synchronized double getGeometricMean()">1</method>
			<method name="public synchronized String toString()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public synchronized double getMin()">1</method>
			<method name="public synchronized boolean equals(Object object)">1</method>
			<method name="public synchronized org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic getVarianceImpl()">1</method>
			<method name="public synchronized void addValue(double value)">1</method>
			<method name="public synchronized long getN()">1</method>
			<method name="public synchronized double getStandardDeviation()">1</method>
			<method name="public synchronized void setMinImpl(org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic minImpl)">1</method>
			<method name="public synchronized org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic getMinImpl()">1</method>
			<method name="public void _init_(org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics original)">0</method>
			<method name="public synchronized double getMean()">1</method>
			<method name="public synchronized org.apache.commons.math3.stat.descriptive.StatisticalSummary getSummary()">1</method>
			<method name="public synchronized void clear()">1</method>
			<method name="public synchronized void setSumsqImpl(org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic sumsqImpl)">1</method>
			<method name="public synchronized int hashCode()">1</method>
			<method name="public synchronized void setSumLogImpl(org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic sumLogImpl)">1</method>
			<method name="public synchronized void setSumImpl(org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic sumImpl)">1</method>
			<method name="public synchronized org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic getMeanImpl()">1</method>
			<method name="public synchronized void setMeanImpl(org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic meanImpl)">1</method>
			<method name="public synchronized org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic getGeoMeanImpl()">1</method>
			<method name="public synchronized void setVarianceImpl(org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic varianceImpl)">1</method>
			<method name="public synchronized double getMax()">1</method>
			<method name="public synchronized org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic getMaxImpl()">1</method>
			<method name="public synchronized double getVariance()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.clustering.evaluation.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunctionFactory</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>9</rfc>
		<lcom>3</lcom>
		<ca>0</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>56</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.666666666666668</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public static org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunction exponentialDecay(double initValue, double valueAtNumCall, long numCall)">3</method>
			<method name="public static org.apache.commons.math3.ml.neuralnet.sofm.LearningFactorFunction quasiSigmoidDecay(double initValue, double slope, long numCall)">3</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.RegionFactory$UnionMerger</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>0.5</lcom3>
		<loc>31</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.0</amc>
		<cc>
			<method name="void _init_(org.apache.commons.math3.geometry.partitioning.RegionFactory x0, org.apache.commons.math3.geometry.partitioning.RegionFactory$1 x1)">0</method>
			<method name="private void _init_(org.apache.commons.math3.geometry.partitioning.RegionFactory)">0</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.BSPTree merge(org.apache.commons.math3.geometry.partitioning.BSPTree leaf, org.apache.commons.math3.geometry.partitioning.BSPTree tree, org.apache.commons.math3.geometry.partitioning.BSPTree parentTree, boolean isPlusChild, boolean leafFromInstance)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer</name>
		<wmc>17</wmc>
		<dit>1</dit>
		<noc>5</noc>
		<cbo>21</cbo>
		<rfc>37</rfc>
		<lcom>98</lcom>
		<ca>5</ca>
		<ce>16</ce>
		<npm>9</npm>
		<lcom3>0.7589285714285714</lcom3>
		<loc>338</loc>
		<dam>1.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.3025210084033613</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.470588235294116</amc>
		<cc>
			<method name="public double[] getLowerBound()">2</method>
			<method name="public int getMaxEvaluations()">1</method>
			<method name="private void checkParameters()">14</method>
			<method name="public org.apache.commons.math3.optimization.PointValuePair optimize(int maxEval, org.apache.commons.math3.analysis.MultivariateFunction f, org.apache.commons.math3.optimization.GoalType goalType, double[] startPoint)">1</method>
			<method name="public org.apache.commons.math3.optimization.GoalType getGoalType()">1</method>
			<method name="public org.apache.commons.math3.optimization.ConvergenceChecker getConvergenceChecker()">1</method>
			<method name="public double[] getStartPoint()">2</method>
			<method name="public double[] getUpperBound()">2</method>
			<method name="protected transient org.apache.commons.math3.optimization.PointValuePair optimizeInternal(int maxEval, org.apache.commons.math3.analysis.MultivariateFunction f, org.apache.commons.math3.optimization.GoalType goalType, org.apache.commons.math3.optimization.OptimizationData[] optData)">1</method>
			<method name="protected org.apache.commons.math3.optimization.PointValuePair optimizeInternal(int maxEval, org.apache.commons.math3.analysis.MultivariateFunction f, org.apache.commons.math3.optimization.GoalType goalType, double[] startPoint)">1</method>
			<method name="public transient org.apache.commons.math3.optimization.PointValuePair optimize(int maxEval, org.apache.commons.math3.analysis.MultivariateFunction f, org.apache.commons.math3.optimization.GoalType goalType, org.apache.commons.math3.optimization.OptimizationData[] optData)">1</method>
			<method name="protected abstract org.apache.commons.math3.optimization.PointValuePair doOptimize()">1</method>
			<method name="protected void _init_()">0</method>
			<method name="public int getEvaluations()">1</method>
			<method name="protected void _init_(org.apache.commons.math3.optimization.ConvergenceChecker checker)">0</method>
			<method name="protected double computeObjectiveValue(double[] point)">1</method>
			<method name="private transient void parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData[] optData)">4</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.GaussianFitter$1</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>1.0</lcom3>
		<loc>45</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.666666666666666</amc>
		<cc>
			<method name="public transient double[] gradient(double x, double[] p)">1</method>
			<method name="void _init_(org.apache.commons.math3.fitting.GaussianFitter)">0</method>
			<method name="public transient double value(double x, double[] p)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.sampling.DummyStepHandler</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>8</rfc>
		<lcom>15</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>18</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2777777777777778</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="void _init_(org.apache.commons.math3.ode.sampling.DummyStepHandler$1 x0)">0</method>
			<method name="private Object readResolve()">1</method>
			<method name="public static org.apache.commons.math3.ode.sampling.DummyStepHandler getInstance()">1</method>
			<method name="public void handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator interpolator, boolean isLast)">1</method>
			<method name="public void init(double t0, double[] y0, double t)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Power</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>25</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure t)">1</method>
			<method name="public void _init_(double p)">0</method>
			<method name="public double value(double x)">1</method>
			<method name="public org.apache.commons.math3.analysis.UnivariateFunction derivative()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.euclidean.threed.Vector3D</name>
		<wmc>56</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>38</cbo>
		<rfc>69</rfc>
		<lcom>560</lcom>
		<ca>27</ca>
		<ce>12</ce>
		<npm>55</npm>
		<lcom3>0.812987012987013</lcom3>
		<loc>1085</loc>
		<dam>0.2857142857142857</dam>
		<moa>10</moa>
		<mfa>0.0</mfa>
		<cam>0.20227272727272727</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>18.125</amc>
		<cc>
			<method name="public volatile org.apache.commons.math3.geometry.Vector scalarMultiply(double x0)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public double getY()">1</method>
			<method name="public double getX()">1</method>
			<method name="public void _init_(double x, double y, double z)">0</method>
			<method name="public double distance1(org.apache.commons.math3.geometry.Vector v)">1</method>
			<method name="public boolean isInfinite()">5</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D normalize()">1</method>
			<method name="public double getZ()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.Vector v)">1</method>
			<method name="public void _init_(double a1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D u1, double a2, org.apache.commons.math3.geometry.euclidean.threed.Vector3D u2)">0</method>
			<method name="public boolean isNaN()">4</method>
			<method name="public volatile org.apache.commons.math3.geometry.Vector getZero()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D add(double factor, org.apache.commons.math3.geometry.Vector v)">1</method>
			<method name="public double dotProduct(org.apache.commons.math3.geometry.Vector v)">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.Vector add(org.apache.commons.math3.geometry.Vector x0)">1</method>
			<method name="public void _init_(double a1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D u1, double a2, org.apache.commons.math3.geometry.euclidean.threed.Vector3D u2, double a3, org.apache.commons.math3.geometry.euclidean.threed.Vector3D u3)">0</method>
			<method name="public static double distanceInf(org.apache.commons.math3.geometry.euclidean.threed.Vector3D v1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D v2)">1</method>
			<method name="public void _init_(double a, org.apache.commons.math3.geometry.euclidean.threed.Vector3D u)">0</method>
			<method name="public double getNormInf()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D add(org.apache.commons.math3.geometry.Vector v)">1</method>
			<method name="public double distance(org.apache.commons.math3.geometry.Point v)">1</method>
			<method name="public double getNormSq()">1</method>
			<method name="public void _init_(double a1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D u1, double a2, org.apache.commons.math3.geometry.euclidean.threed.Vector3D u2, double a3, org.apache.commons.math3.geometry.euclidean.threed.Vector3D u3, double a4, org.apache.commons.math3.geometry.euclidean.threed.Vector3D u4)">0</method>
			<method name="public void _init_(double[] v)">0</method>
			<method name="public org.apache.commons.math3.geometry.Space getSpace()">1</method>
			<method name="public static org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D v1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D v2)">1</method>
			<method name="public double distance(org.apache.commons.math3.geometry.Vector v)">1</method>
			<method name="public static double dotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D v1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D v2)">1</method>
			<method name="public double distanceInf(org.apache.commons.math3.geometry.Vector v)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getZero()">1</method>
			<method name="public String toString()">1</method>
			<method name="public String toString(java.text.NumberFormat format)">1</method>
			<method name="public double distanceSq(org.apache.commons.math3.geometry.Vector v)">1</method>
			<method name="public static double distance1(org.apache.commons.math3.geometry.euclidean.threed.Vector3D v1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D v2)">1</method>
			<method name="public static double distanceSq(org.apache.commons.math3.geometry.euclidean.threed.Vector3D v1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D v2)">1</method>
			<method name="public double getNorm1()">1</method>
			<method name="public static double angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D v1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D v2)">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.Vector subtract(double x0, org.apache.commons.math3.geometry.Vector x1)">1</method>
			<method name="public double getDelta()">1</method>
			<method name="public static double distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D v1, org.apache.commons.math3.geometry.euclidean.threed.Vector3D v2)">1</method>
			<method name="public boolean equals(Object other)">7</method>
			<method name="public double getAlpha()">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.Vector negate()">1</method>
			<method name="public double[] toArray()">1</method>
			<method name="public double getNorm()">1</method>
			<method name="public int hashCode()">2</method>
			<method name="public volatile org.apache.commons.math3.geometry.Vector add(double x0, org.apache.commons.math3.geometry.Vector x1)">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.Vector normalize()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D negate()">1</method>
			<method name="public volatile org.apache.commons.math3.geometry.Vector subtract(org.apache.commons.math3.geometry.Vector x0)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D orthogonal()">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D scalarMultiply(double a)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D subtract(double factor, org.apache.commons.math3.geometry.Vector v)">1</method>
			<method name="public org.apache.commons.math3.geometry.euclidean.threed.Vector3D subtract(org.apache.commons.math3.geometry.Vector v)">1</method>
			<method name="public void _init_(double alpha, double delta)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.genetics.StoppingCondition</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract boolean isSatisfied(org.apache.commons.math3.genetics.Population)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9333333333333332</lcom3>
		<loc>67</loc>
		<dam>0.2</dam>
		<moa>5</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>14.5</amc>
		<cc>
			<method name="public static org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy[] values()">1</method>
			<method name="public static org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy valueOf(String name)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>3</noc>
		<cbo>10</cbo>
		<rfc>20</rfc>
		<lcom>8</lcom>
		<ca>3</ca>
		<ce>7</ce>
		<npm>4</npm>
		<lcom3>0.75</lcom3>
		<loc>82</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.2</amc>
		<cc>
			<method name="void _init_(int observationSize)">0</method>
			<method name="public org.apache.commons.math3.linear.RealVector getSigma(double covarianceSingularityThreshold)">2</method>
			<method name="public double getCost()">1</method>
			<method name="public double getRMS()">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getCovariances(double threshold)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.OpenIntToFieldHashMap$Iterator</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>13</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>0.25</lcom3>
		<loc>127</loc>
		<dam>0.75</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.5</amc>
		<cc>
			<method name="public int key()">1</method>
			<method name="public void advance()">1</method>
			<method name="private void _init_(org.apache.commons.math3.util.OpenIntToFieldHashMap)">0</method>
			<method name="public boolean hasNext()">2</method>
			<method name="void _init_(org.apache.commons.math3.util.OpenIntToFieldHashMap x0, org.apache.commons.math3.util.OpenIntToFieldHashMap$1 x1)">0</method>
			<method name="public org.apache.commons.math3.FieldElement value()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>10</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>5</npm>
		<lcom3>0.5</lcom3>
		<loc>45</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.8</amc>
		<cc>
			<method name="public double getSize()">1</method>
			<method name="public void visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree node)">3</method>
			<method name="public void _init_()">0</method>
			<method name="public void visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree node)">1</method>
			<method name="public org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree node)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.Frequency$NaturalComparator</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>6</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>22</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.25</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="private void _init_()">0</method>
			<method name="void _init_(org.apache.commons.math3.stat.Frequency$1 x0)">0</method>
			<method name="public int compare(Comparable o1, Comparable o2)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>454</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>112.25</amc>
		<cc>
			<method name="protected org.apache.commons.math3.ode.sampling.StepInterpolator doCopy()">1</method>
			<method name="protected void computeInterpolatedStateAndDerivatives(double theta, double oneMinusThetaH)">4</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolator interpolator)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$DoubleIndex</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>9</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>4</npm>
		<lcom3>0.5</lcom3>
		<loc>67</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.36666666666666664</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>9.833333333333334</amc>
		<cc>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="static int access$300(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$DoubleIndex x0)">1</method>
			<method name="public int compareTo(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$DoubleIndex o)">1</method>
			<method name="public int hashCode()">1</method>
			<method name="void _init_(double value, int index)">0</method>
			<method name="public boolean equals(Object other)">4</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.complex.ComplexField$LazyHolder</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>0.5</lcom3>
		<loc>15</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.6666666666666665</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="static org.apache.commons.math3.complex.ComplexField access$000()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.moment.StandardDeviation</name>
		<wmc>19</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>37</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>9</ce>
		<npm>19</npm>
		<lcom3>0.5277777777777778</lcom3>
		<loc>164</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.2556390977443609</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.526315789473684</amc>
		<cc>
			<method name="public long getN()">1</method>
			<method name="public void clear()">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic copy()">1</method>
			<method name="public double getResult()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double evaluate(double[] values, int begin, int length)">1</method>
			<method name="public void _init_(org.apache.commons.math3.stat.descriptive.moment.SecondMoment m2)">0</method>
			<method name="public void _init_(boolean isBiasCorrected, org.apache.commons.math3.stat.descriptive.moment.SecondMoment m2)">0</method>
			<method name="public boolean isBiasCorrected()">1</method>
			<method name="public void _init_(boolean isBiasCorrected)">0</method>
			<method name="public double evaluate(double[] values, double mean, int begin, int length)">1</method>
			<method name="public org.apache.commons.math3.stat.descriptive.moment.StandardDeviation copy()">1</method>
			<method name="public static void copy(org.apache.commons.math3.stat.descriptive.moment.StandardDeviation source, org.apache.commons.math3.stat.descriptive.moment.StandardDeviation dest)">1</method>
			<method name="public void setBiasCorrected(boolean isBiasCorrected)">1</method>
			<method name="public void _init_(org.apache.commons.math3.stat.descriptive.moment.StandardDeviation original)">0</method>
			<method name="public double evaluate(double[] values, double mean)">1</method>
			<method name="public void increment(double d)">1</method>
			<method name="public double evaluate(double[] values)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.moment.SecondMoment</name>
		<wmc>11</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>12</cbo>
		<rfc>15</rfc>
		<lcom>25</lcom>
		<ca>7</ca>
		<ce>5</ce>
		<npm>11</npm>
		<lcom3>0.6</lcom3>
		<loc>100</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3939393939393939</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.909090909090909</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic copy()">1</method>
			<method name="public double getResult()">1</method>
			<method name="public volatile org.apache.commons.math3.stat.descriptive.moment.FirstMoment copy()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public volatile long getN()">1</method>
			<method name="public void _init_(org.apache.commons.math3.stat.descriptive.moment.SecondMoment original)">0</method>
			<method name="public org.apache.commons.math3.stat.descriptive.moment.SecondMoment copy()">1</method>
			<method name="public static void copy(org.apache.commons.math3.stat.descriptive.moment.SecondMoment source, org.apache.commons.math3.stat.descriptive.moment.SecondMoment dest)">1</method>
			<method name="public void increment(double d)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.util.ResizableDoubleArray$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>21</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.RandomGeneratorFactory</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>3</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>40</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.333333333333334</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public static long convertToLong(int[] seed)">2</method>
			<method name="public static org.apache.commons.math3.random.RandomGenerator createRandomGenerator(java.util.Random rng)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>13</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>0.5</lcom3>
		<loc>193</loc>
		<dam>0.6666666666666666</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.142857142857142</amc>
		<cc>
			<method name="static double[] access$000(org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction x0, double[] x1)">1</method>
			<method name="public void _init_(org.apache.commons.math3.optimization.direct.CMAESOptimizer)">0</method>
			<method name="public boolean isFeasible(double[] x)">4</method>
			<method name="private double penalty(double[] x, double[] repaired)">3</method>
			<method name="public double value(double[] point)">3</method>
			<method name="private double[] repair(double[] x)">4</method>
			<method name="public void setValueRange(double valueRange)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.UniformIntegerDistribution</name>
		<wmc>10</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>16</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>6</ce>
		<npm>10</npm>
		<lcom3>0.5185185185185186</lcom3>
		<loc>161</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.8</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, int lower, int upper)">0</method>
			<method name="public int sample()">2</method>
			<method name="public boolean isSupportConnected()">1</method>
			<method name="public void _init_(int lower, int upper)">0</method>
			<method name="public int getSupportUpperBound()">1</method>
			<method name="public double getNumericalVariance()">1</method>
			<method name="public double getNumericalMean()">1</method>
			<method name="public double cumulativeProbability(int x)">3</method>
			<method name="public double probability(int x)">3</method>
			<method name="public int getSupportLowerBound()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.Frequency</name>
		<wmc>37</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>78</rfc>
		<lcom>484</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>37</npm>
		<lcom3>0.5138888888888888</lcom3>
		<loc>622</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2042042042042042</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>15.756756756756756</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="public java.util.List getMode()">3</method>
			<method name="public long getCount(int v)">1</method>
			<method name="public void incrementValue(char v, long increment)">1</method>
			<method name="public long getSumFreq()">2</method>
			<method name="public long getCount(long v)">1</method>
			<method name="public long getCumFreq(Comparable v)">8</method>
			<method name="public long getCumFreq(char v)">1</method>
			<method name="public double getPct(Comparable v)">2</method>
			<method name="public long getCount(char v)">1</method>
			<method name="public void addValue(int v)">1</method>
			<method name="public void incrementValue(int v, long increment)">1</method>
			<method name="public double getPct(int v)">1</method>
			<method name="public void merge(org.apache.commons.math3.stat.Frequency other)">1</method>
			<method name="public long getCount(Comparable v)">2</method>
			<method name="public boolean equals(Object obj)">6</method>
			<method name="public String toString()">2</method>
			<method name="public void addValue(long v)">1</method>
			<method name="public long getCumFreq(long v)">1</method>
			<method name="public void addValue(Comparable v)">1</method>
			<method name="public java.util.Iterator valuesIterator()">1</method>
			<method name="public void addValue(char v)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double getCumPct(long v)">1</method>
			<method name="public java.util.Iterator entrySetIterator()">1</method>
			<method name="public double getCumPct(int v)">1</method>
			<method name="public double getCumPct(Comparable v)">2</method>
			<method name="public double getPct(long v)">1</method>
			<method name="public double getPct(char v)">1</method>
			<method name="public void incrementValue(Comparable v, long increment)">1</method>
			<method name="public int hashCode()">2</method>
			<method name="public void incrementValue(long v, long increment)">1</method>
			<method name="public double getCumPct(char v)">1</method>
			<method name="public void merge(java.util.Collection others)">1</method>
			<method name="public long getCumFreq(int v)">1</method>
			<method name="public void _init_(java.util.Comparator comparator)">0</method>
			<method name="public int getUniqueCount()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.OptimizationData</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>39</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>39</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.linear.RealVector</name>
		<wmc>63</wmc>
		<dit>1</dit>
		<noc>3</noc>
		<cbo>99</cbo>
		<rfc>95</rfc>
		<lcom>1953</lcom>
		<ca>80</ca>
		<ce>25</ce>
		<npm>59</npm>
		<lcom3>2.0</lcom3>
		<loc>947</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.23015873015873015</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>14.031746031746032</amc>
		<cc>
			<method name="public double getLInfNorm()">2</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public double getL1Norm()">2</method>
			<method name="public double walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor visitor)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector mapDivideToSelf(double d)">1</method>
			<method name="public abstract void setSubVector(int, org.apache.commons.math3.linear.RealVector)">1</method>
			<method name="public double walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor visitor)">2</method>
			<method name="public org.apache.commons.math3.linear.RealVector mapMultiply(double d)">1</method>
			<method name="public int getMinIndex()">2</method>
			<method name="public abstract org.apache.commons.math3.linear.RealVector append(double)">1</method>
			<method name="protected void checkVectorDimensions(org.apache.commons.math3.linear.RealVector v)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector add(org.apache.commons.math3.linear.RealVector v)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector mapSubtract(double d)">1</method>
			<method name="public double walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor visitor, int start, int end)">1</method>
			<method name="public double getL1Distance(org.apache.commons.math3.linear.RealVector v)">1</method>
			<method name="public abstract double getEntry(int)">1</method>
			<method name="public abstract void setEntry(int, double)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double dotProduct(org.apache.commons.math3.linear.RealVector v)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector combine(double a, double b, org.apache.commons.math3.linear.RealVector y)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealVector ebeDivide(org.apache.commons.math3.linear.RealVector)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealVector append(org.apache.commons.math3.linear.RealVector)">1</method>
			<method name="public double getDistance(org.apache.commons.math3.linear.RealVector v)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealVector ebeMultiply(org.apache.commons.math3.linear.RealVector)">1</method>
			<method name="public abstract boolean isInfinite()">1</method>
			<method name="public double walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor visitor)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector subtract(org.apache.commons.math3.linear.RealVector v)">1</method>
			<method name="protected void checkVectorDimensions(int n)">1</method>
			<method name="public java.util.Iterator sparseIterator()">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealVector copy()">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector mapAdd(double d)">1</method>
			<method name="public double getMinValue()">2</method>
			<method name="public double walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor visitor, int start, int end)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction function)">2</method>
			<method name="protected void checkIndex(int index)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector mapDivide(double d)">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix outerProduct(org.apache.commons.math3.linear.RealVector v)">5</method>
			<method name="public double getLInfDistance(org.apache.commons.math3.linear.RealVector v)">1</method>
			<method name="public double walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor visitor, int start, int end)">1</method>
			<method name="protected void checkIndices(int start, int end)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector map(org.apache.commons.math3.analysis.UnivariateFunction function)">1</method>
			<method name="public abstract int getDimension()">1</method>
			<method name="public static org.apache.commons.math3.linear.RealVector unmodifiableRealVector(org.apache.commons.math3.linear.RealVector v)">1</method>
			<method name="public void set(double value)">2</method>
			<method name="public int getMaxIndex()">2</method>
			<method name="public double getMaxValue()">2</method>
			<method name="public double walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor visitor, int start, int end)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector mapAddToSelf(double d)">2</method>
			<method name="public boolean equals(Object other)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector combineToSelf(double a, double b, org.apache.commons.math3.linear.RealVector y)">1</method>
			<method name="public abstract org.apache.commons.math3.linear.RealVector getSubVector(int, int)">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector projection(org.apache.commons.math3.linear.RealVector v)">1</method>
			<method name="public void unitize()">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector mapMultiplyToSelf(double d)">1</method>
			<method name="public double[] toArray()">2</method>
			<method name="public double cosine(org.apache.commons.math3.linear.RealVector v)">1</method>
			<method name="public double getNorm()">2</method>
			<method name="public int hashCode()">1</method>
			<method name="public double walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor visitor)">2</method>
			<method name="public org.apache.commons.math3.linear.RealVector unitVector()">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector mapSubtractToSelf(double d)">1</method>
			<method name="public void addToEntry(int index, double increment)">1</method>
			<method name="public abstract boolean isNaN()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.descriptive.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.RandomData</name>
		<wmc>13</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>13</rfc>
		<lcom>78</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>13</npm>
		<lcom3>2.0</lcom3>
		<loc>13</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.358974358974359</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double nextExponential(double)">1</method>
			<method name="public abstract double nextGaussian(double, double)">1</method>
			<method name="public abstract long nextPoisson(double)">1</method>
			<method name="public abstract String nextHexString(int)">1</method>
			<method name="public abstract int[] nextPermutation(int, int)">1</method>
			<method name="public abstract String nextSecureHexString(int)">1</method>
			<method name="public abstract int nextInt(int, int)">1</method>
			<method name="public abstract int nextSecureInt(int, int)">1</method>
			<method name="public abstract long nextLong(long, long)">1</method>
			<method name="public abstract double nextUniform(double, double)">1</method>
			<method name="public abstract Object[] nextSample(java.util.Collection, int)">1</method>
			<method name="public abstract double nextUniform(double, double, boolean)">1</method>
			<method name="public abstract long nextSecureLong(long, long)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$LocalLeastSquaresProblem$UnweightedEvaluation</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>8</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>0.5</lcom3>
		<loc>40</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.4</amc>
		<cc>
			<method name="private void _init_(org.apache.commons.math3.linear.RealVector values, org.apache.commons.math3.linear.RealMatrix jacobian, org.apache.commons.math3.linear.RealVector target, org.apache.commons.math3.linear.RealVector point)">0</method>
			<method name="public org.apache.commons.math3.linear.RealVector getResiduals()">1</method>
			<method name="void _init_(org.apache.commons.math3.linear.RealVector x0, org.apache.commons.math3.linear.RealMatrix x1, org.apache.commons.math3.linear.RealVector x2, org.apache.commons.math3.linear.RealVector x3, org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$1 x4)">0</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getJacobian()">1</method>
			<method name="public org.apache.commons.math3.linear.RealVector getPoint()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>14</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>5</npm>
		<lcom3>0.625</lcom3>
		<loc>88</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.48</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.2</amc>
		<cc>
			<method name="public volatile boolean converged(int x0, Object x1, Object x2)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean converged(int iteration, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair previous, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair current)">5</method>
			<method name="public void _init_(double relativeThreshold, double absoluteThreshold, int maxIter)">0</method>
			<method name="public void _init_(double relativeThreshold, double absoluteThreshold)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.interpolation.SplineInterpolator</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>9</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>11</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>338</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>111.66666666666667</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction interpolate(double[] x, double[] y)">1</method>
			<method name="public volatile org.apache.commons.math3.analysis.UnivariateFunction interpolate(double[] x0, double[] x1)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.function.Logit$Parametric</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>8</rfc>
		<lcom>6</lcom>
		<ca>0</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>67</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.75</amc>
		<cc>
			<method name="public transient double value(double x, double[] param)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public transient double[] gradient(double x, double[] param)">1</method>
			<method name="private void validateParameters(double[] param)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.geometry.partitioning.BSPTree$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>75</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>72.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.interval.NormalApproximationInterval</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>8</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>54</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public org.apache.commons.math3.stat.interval.ConfidenceInterval createInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.optim.InitialGuess</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>16</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.5</amc>
		<cc>
			<method name="public double[] getInitialGuess()">1</method>
			<method name="public void _init_(double[] startPoint)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fraction.package-info</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.solvers.BrentSolver</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>20</rfc>
		<lcom>15</lcom>
		<ca>2</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>1.2</lcom3>
		<loc>357</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>58.333333333333336</amc>
		<cc>
			<method name="protected double doSolve()">1</method>
			<method name="public void _init_(double absoluteAccuracy)">0</method>
			<method name="public void _init_(double relativeAccuracy, double absoluteAccuracy, double functionValueAccuracy)">0</method>
			<method name="public void _init_()">0</method>
			<method name="private double brent(double lo, double hi, double fLo, double fHi)">14</method>
			<method name="public void _init_(double relativeAccuracy, double absoluteAccuracy)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizer$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>5</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.filter.DefaultProcessModel</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>11</rfc>
		<lcom>18</lcom>
		<ca>0</ca>
		<ce>8</ce>
		<npm>8</npm>
		<lcom3>0.5714285714285714</lcom3>
		<loc>86</loc>
		<dam>1.0</dam>
		<moa>5</moa>
		<mfa>0.0</mfa>
		<cam>0.325</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.125</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.linear.RealMatrix stateTransition, org.apache.commons.math3.linear.RealMatrix control, org.apache.commons.math3.linear.RealMatrix processNoise, org.apache.commons.math3.linear.RealVector initialStateEstimate, org.apache.commons.math3.linear.RealMatrix initialErrorCovariance)">0</method>
			<method name="public void _init_(double[][] stateTransition, double[][] control, double[][] processNoise, double[] initialStateEstimate, double[][] initialErrorCovariance)">0</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getInitialErrorCovariance()">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getControlMatrix()">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getProcessNoise()">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getStateTransitionMatrix()">1</method>
			<method name="public void _init_(double[][] stateTransition, double[][] control, double[][] processNoise)">0</method>
			<method name="public org.apache.commons.math3.linear.RealVector getInitialStateEstimate()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.stat.correlation.StorelessCovariance</name>
		<wmc>12</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>20</rfc>
		<lcom>40</lcom>
		<ca>0</ca>
		<ce>7</ce>
		<npm>8</npm>
		<lcom3>0.36363636363636365</lcom3>
		<loc>232</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3194444444444444</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.166666666666668</amc>
		<cc>
			<method name="public void _init_(int dim, boolean biasCorrected)">0</method>
			<method name="public double getCovariance(int xIndex, int yIndex)">1</method>
			<method name="public double[][] getData()">1</method>
			<method name="public org.apache.commons.math3.linear.RealMatrix getCovarianceMatrix()">1</method>
			<method name="public void increment(double[] data)">1</method>
			<method name="public int getN()">1</method>
			<method name="public void _init_(int dim)">0</method>
			<method name="private int indexOf(int i, int j)">2</method>
			<method name="private void initializeMatrix(boolean biasCorrected)">3</method>
			<method name="private void setElement(int i, int j, org.apache.commons.math3.stat.correlation.StorelessBivariateCovariance cov)">1</method>
			<method name="private org.apache.commons.math3.stat.correlation.StorelessBivariateCovariance getElement(int i, int j)">1</method>
			<method name="public void append(org.apache.commons.math3.stat.correlation.StorelessCovariance sc)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.solvers.PolynomialSolver</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.random.StableRandomGenerator</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>15</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>7</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>256</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>125.0</amc>
		<cc>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator generator, double alpha, double beta)">0</method>
			<method name="public double nextNormalizedDouble()">6</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.CurveFitter</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>3</noc>
		<cbo>17</cbo>
		<rfc>30</rfc>
		<lcom>0</lcom>
		<ca>6</ca>
		<ce>12</ce>
		<npm>8</npm>
		<lcom3>0.375</lcom3>
		<loc>155</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.25</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.0</amc>
		<cc>
			<method name="public double[] fit(org.apache.commons.math3.analysis.ParametricUnivariateFunction f, double[] initialGuess)">1</method>
			<method name="public void _init_(org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer optimizer)">0</method>
			<method name="public org.apache.commons.math3.fitting.WeightedObservedPoint[] getObservations()">1</method>
			<method name="public void clearObservations()">1</method>
			<method name="public void addObservedPoint(double weight, double x, double y)">1</method>
			<method name="public double[] fit(int maxEval, org.apache.commons.math3.analysis.ParametricUnivariateFunction f, double[] initialGuess)">2</method>
			<method name="public void addObservedPoint(org.apache.commons.math3.fitting.WeightedObservedPoint observed)">1</method>
			<method name="public void addObservedPoint(double x, double y)">1</method>
			<method name="static java.util.List access$000(org.apache.commons.math3.fitting.CurveFitter x0)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.solvers.RiddersSolver</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>17</rfc>
		<lcom>6</lcom>
		<ca>0</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>184</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>44.75</amc>
		<cc>
			<method name="protected double doSolve()">1</method>
			<method name="public void _init_(double absoluteAccuracy)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(double relativeAccuracy, double absoluteAccuracy)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>7</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[])">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>11</cbo>
		<rfc>29</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>6</npm>
		<lcom3>0.1</lcom3>
		<loc>266</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.36666666666666664</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>43.0</amc>
		<cc>
			<method name="public double[] sample()">4</method>
			<method name="public void _init_(org.apache.commons.math3.random.RandomGenerator rng, java.util.List components)">0</method>
			<method name="public void _init_(java.util.List components)">0</method>
			<method name="public java.util.List getComponents()">2</method>
			<method name="public double density(double[] values)">2</method>
			<method name="public void reseedRandomGenerator(long seed)">2</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.transform.FastCosineTransformer</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>17</rfc>
		<lcom>4</lcom>
		<ca>0</ca>
		<ce>14</ce>
		<npm>3</npm>
		<lcom3>0.8333333333333334</lcom3>
		<loc>309</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.42857142857142855</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>75.75</amc>
		<cc>
			<method name="protected double[] fct(double[] f)">1</method>
			<method name="public double[] transform(double[] f, org.apache.commons.math3.transform.TransformType type)">1</method>
			<method name="public void _init_(org.apache.commons.math3.transform.DctNormalization normalization)">0</method>
			<method name="public double[] transform(org.apache.commons.math3.analysis.UnivariateFunction f, double min, double max, int n, org.apache.commons.math3.transform.TransformType type)">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.fitting.GaussianFitter</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>9</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>28</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.333333333333334</amc>
		<cc>
			<method name="public double[] fit(double[] initialGuess)">1</method>
			<method name="public void _init_(org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer optimizer)">0</method>
			<method name="public double[] fit()">1</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.genetics.TournamentSelection$1</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>1.0</lcom3>
		<loc>12</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.5</amc>
		<cc>
			<method name="public org.apache.commons.math3.genetics.Population nextGeneration()">1</method>
			<method name="void _init_(org.apache.commons.math3.genetics.TournamentSelection, int x0)">0</method>
		</cc>
	</class>
	<class>
		<name>org.apache.commons.math3.complex.ComplexUtils</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>9</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>58</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.333333333333332</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public static org.apache.commons.math3.complex.Complex polar2Complex(double r, double theta)">1</method>
			<method name="public static org.apache.commons.math3.complex.Complex[] convertToComplex(double[] real)">2</method>
		</cc>
	</class>
</ckjm>
