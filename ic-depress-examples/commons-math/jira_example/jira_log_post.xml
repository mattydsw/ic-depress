<rss version="0.92"><channel><title>ASF JIRA</title><link>https://issues.apache.org/jira/secure/IssueNavigator.jspa?reset=tr</link><description>An XML representation of a search request</description><language>en-uk</language><issue start="0" end="200" total="263"/><build-info><version>6.3.4</version><build-number>6332</build-number><build-date>15-08-2014</build-date></build-info><item><title>[MATH-729] Add an implementation for Holt-Winters triple exponential smoothing</title><link>https://issues.apache.org/jira/browse/MATH-729</link><project id="12310485" key="MATH">Commons Math</project><description><p>Add an implementation for Holt-Winters triple exponential smoothing</p></description><environment/><key id="12536023">MATH-729</key><summary>Add an implementation for Holt-Winters triple exponential smoothing</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status><statusCategory id="2" key="new" colorName="blue-gray"/><resolution id="-1">Unresolved</resolution><assignee username="-1">Unassigned</assignee><reporter username="nishantc">Nishant Chandra</reporter><labels><label>exponential</label><label>smoothing</label><label>triple</label></labels><created>Wed, 21 Dec 2011 15:02:11 +0000</created><updated>Fri, 16 Aug 2013 12:50:54 +0100</updated><due/><votes>0</votes><watches>1</watches><comments><comment id="13174129" author="nishantc" created="Wed, 21 Dec 2011 15:03:33 +0000"><p>See <a href="http://markmail.org/thread/a5uvdnsh26tpvk7m" class="external-link" rel="nofollow">http://markmail.org/thread/a5uvdnsh26tpvk7m</a> for details. I will upload the patch by 24/12/2011.</p></comment><comment id="13415709" author="erans" created="Mon, 16 Jul 2012 23:14:30 +0100"><p>Would you provide the patch?</p></comment><comment id="13654366" author="tn" created="Fri, 10 May 2013 11:50:28 +0100"><p>Code from author available at github <a href="https://github.com/nchandra/ExponentialSmoothing" class="external-link" rel="nofollow">https://github.com/nchandra/ExponentialSmoothing</a> under Apache license.</p></comment><comment id="13654374" author="erans" created="Fri, 10 May 2013 12:06:17 +0100"><p>IMHO, this does not belong in a general-purpose math library.</p>

<p>Moreover, it does not fit the design (or any of the several designs) used in CM.<br/>
And the code is not fully documented.</p></comment><comment id="13742125" author="erans" created="Fri, 16 Aug 2013 12:50:54 +0100"><p>Closing?</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Mon, 16 Jul 2012 22:14:30 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>221706</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>11061</customfieldvalue></customfieldvalues></customfield></customfields></item><item><title>[MATH-728] Errors in BOBYQAOptimizer when numberOfInterpolationPoints is greater than 2*dim+1</title><link>https://issues.apache.org/jira/browse/MATH-728</link><project id="12310485" key="MATH">Commons Math</project><description><p>I've been having trouble getting BOBYQA to minimize a function (actually a non-linear least squares fit) so as one change I increased the number of interpolation points.  It seems that anything larger than 2*dim+1 causes an error (typically at</p>

<p>line 1662<br/>
                   interpolationPoints.setEntry(nfm, ipt, interpolationPoints.getEntry(ipt, ipt));</p>

<p>I'm guessing there is an off by one error in the translation from FORTRAN.  Changing the BOBYQAOptimizerTest as follows (increasing number of interpolation points by one) will cause failures.</p>

<p>Bruce</p>



<p>Index: src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java<br/>
===================================================================<br/>
&#8212; src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java	(revision 1221065)<br/>
+++ src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java	(working copy)<br/>
@@ -258,7 +258,7 @@<br/>
 //        RealPointValuePair result = optim.optimize(100000, func, goal, startPoint);<br/>
         final double[] lB = boundaries == null ? null : boundaries<span class="error">&#91;0&#93;</span>;<br/>
         final double[] uB = boundaries == null ? null : boundaries<span class="error">&#91;1&#93;</span>;</p>
<ul class="alternate" type="square">
	<li>BOBYQAOptimizer optim = new BOBYQAOptimizer(2 * dim + 1);<br/>
+        BOBYQAOptimizer optim = new BOBYQAOptimizer(2 * dim + 2);<br/>
         RealPointValuePair result = optim.optimize(maxEvaluations, func, goal, startPoint, lB, uB);<br/>
 //        System.out.println(func.getClass().getName() + " = " <br/>
 //              + optim.getEvaluations() + " f(");</li>
</ul>
</description><environment><p>Mac Java(TM) SE Runtime Environment (build 1.6.0_29-b11-402-11M3527)</p></environment><key id="12535776">MATH-728</key><summary>Errors in BOBYQAOptimizer when numberOfInterpolationPoints is greater than 2*dim+1</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="bjohnson">Bruce A Johnson</reporter><labels>
                    </labels><created>Tue, 20 Dec 2011 02:05:20 +0000</created><updated>Sat, 24 Mar 2012 16:16:28 +0000</updated><resolved>Sat, 11 Feb 2012 23:15:55 +0000</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13172888" author="bjohnson" created="Tue, 20 Dec 2011 03:22:04 +0000"><p>Making this change fixes the problem and seems reasonable, but one of the original translators (from FORTRAN to Java) should look this section of code over.</p>


<p>@@ -1657,10 +1657,10 @@<br/>
                     final int tmp2 = jpt;<br/>
                     jpt = ipt - n;<br/>
                     ipt = tmp2;</p>
<ul class="alternate" type="square">
	<li>throw new PathIsExploredException(); // XXX<br/>
+                    //throw new PathIsExploredException(); // XXX<br/>
                 }</li>
	<li>interpolationPoints.setEntry(nfm, ipt, interpolationPoints.getEntry(ipt, ipt));</li>
	<li>interpolationPoints.setEntry(nfm, jpt, interpolationPoints.getEntry(jpt, jpt));<br/>
+                interpolationPoints.setEntry(nfm, ipt-1, interpolationPoints.getEntry(ipt, ipt-1));<br/>
+                interpolationPoints.setEntry(nfm, jpt-1, interpolationPoints.getEntry(jpt, jpt-1));</li>
</ul>

</comment><comment id="13173194" author="erans" created="Tue, 20 Dec 2011 13:47:18 +0000"><p>Thanks for spotting this. Revision 1221253 contains your fix, together with a unit test that exercises the setting of more interpolation points.</p></comment><comment id="13173238" author="bjohnson" created="Tue, 20 Dec 2011 15:15:25 +0000"><p>Thanks for checking this in, and it's worth noting that my function now minimizes properly.  It seems that with a large number of interpolation points there was an out of bounds error, but even where that out of bounds error wasn't thrown, the interpolation was set up wrong for the last few points, causing a failure to converge.  Others who have had trouble with convergence would do well to recheck with this fix.</p></comment><comment id="13173259" author="erans" created="Tue, 20 Dec 2011 15:43:35 +0000"><p>Anyone who wishes to use the "BOBYQAOptimizer" class should have a look at the <a href="https://issues.apache.org/jira/browse/MATH-621" title="BOBYQA is missing in optimization" class="issue-link" data-issue-key="MATH-621">MATH-621</a> issue.<br/>
As you have figured out, the code is really not ready yet. Unfortunately, the implementation being not "natural" in Java, it is not easy to separate algorithm complexity from Fortran-driven optimizations (which should be removed).<br/>
The problem is all compounded by the fall-through switch-cases which should also be recoded properly.</p>

<p>We are still in the middle of the river: Many things have been improved structure-wise but bugs could have crept in while doing so. Bugs like the one you discovered.<br/>
And we don't have a thorough test suite to ensure that every code path works as in the original Fortran.</p>

<p>The code was checked in under the assumption that it would be converted into "natural" Java, so that people can maintain it.<br/>
I wonder whether it should not be removed for the upcoming release...</p></comment><comment id="13173266" author="bjohnson" created="Tue, 20 Dec 2011 15:55:42 +0000"><p>I, for one, am very happy to see BOBYQA in CM and will continue with "real world" testing.  If I find more issues I'll certainly report them, but so far it's looking very promising with my applications.</p></comment><comment id="13175424" author="erans" created="Fri, 23 Dec 2011 13:40:59 +0000"><p>It would be very useful if you could provide unit tests that cover the still unexplored code paths (cf. lines containing "throw new PathIsExploredException();").<br/>
Thanks in advance for your contributions.</p></comment><comment id="13203505" author="erans" created="Wed, 8 Feb 2012 12:14:27 +0000"><p>Hi Bruce.</p>

<p>Would you be interested in testing your code with a large number of "additional" interpolation points?<br/>
I'm referring to the unit test "testConstrainedRosenWithMoreInterpolationPoints" in "BOBYQAOptimizerTest", at lines 236-256. It would be nice to know whether the failures, for some values of the number of points, reveal yet other bugs. (Or whether they are expected; in which case, the reason would be a welcome addition to the documentation...)</p></comment><comment id="13203540" author="bjohnson" created="Wed, 8 Feb 2012 12:46:26 +0000"><p>Hi Giles,</p>

<p>I'll try to do so over the next couple days.</p>

<p>cheers,</p>

<p>Bruce</p></comment><comment id="13206281" author="bjohnson" created="Sat, 11 Feb 2012 22:11:55 +0000"><p>I've been playing with BOBYQA (downloaded from svn repository today, and commenting out the PathNotExplored exceptions).  A couple observations.<br/>
1) I can't make it fail with large number of interpolation points (as long as you stay under the (2n+1)*(2n+2)/2 recommended max. So this issue is resolved.<br/>
2) With large number of interpolation points the algorithm is significantly slower.  I'm minimizing a function  with a 169 parameters.  The function evaluation takes ~50 msec.  With n+2 interpolation points, the additional time for each step is about 10 msec.  With 2*n+1 points, the additional time is about 50 msec, and with about 6*n, the additional time is 250 msec.  So with larger nInterpolation points a lot of time is spent in the algorithm, besides evaluating the function.   At some point I'll try to do some profiling of the code.<br/>
3) It makes a big difference to normalize the parameters as the initial search region is dependent on the point with the smallest boundary difference.  So it seems one shouldn't directly fit the "natural" parameters but normalized values.</p></comment><comment id="13206296" author="erans" created="Sat, 11 Feb 2012 23:15:55 +0000"><p>Although the bug that triggered this issue is fixed, failures of the unit test still miss an explanation...</p>

<p>The poor performance is to be expected given the current state of the code (e.g. many matrix calculations are done explicitly, with getters and setters, instead of calling methods of the matrix objects).</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 20 Dec 2011 13:47:18 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>221460</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60274</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-727] too large first step with embedded Runge-Kutta integrators (Dormand-Prince 8(5,3) ...)</title><link>https://issues.apache.org/jira/browse/MATH-727</link><project id="12310485" key="MATH">Commons Math</project><description><p>Adaptive step size integrators compute the first step size by themselves if it is not provided.<br/>
For embedded Runge-Kutta type, this step size is not checked against the integration range, so if the integration range is extremely short, this step size may evaluate the function out of the range (and in fact it tries afterward to go back, and fails to stop). Gragg-Bulirsch-Stoer integrators do not have this problem, the step size is checked and truncated if needed.</p></description><environment/><key id="12535580">MATH-727</key><summary>too large first step with embedded Runge-Kutta integrators (Dormand-Prince 8(5,3) ...)</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="luc">Luc Maisonobe</reporter><labels>
                    </labels><created>Sat, 17 Dec 2011 16:36:13 +0000</created><updated>Sat, 24 Mar 2012 16:16:42 +0000</updated><resolved>Sat, 17 Dec 2011 16:56:04 +0000</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13171603" author="luc" created="Sat, 17 Dec 2011 16:56:04 +0000"><p>Fixed in subversion repository as of r1215524.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>221264</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60275</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-726] Ridders derivative</title><link>https://issues.apache.org/jira/browse/MATH-726</link><project id="12310485" key="MATH">Commons Math</project><description><p>Implementation of the numerical first derivative, as described in:</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>Accurate computation of F'(x) and F'(x) F''(x)
C. J. F. Ridders
Adv. Eng. Software, 1982, Vol 4, No. 2
</pre>
</div></div></description><environment/><key id="12535451">MATH-726</key><summary>Ridders derivative</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status><statusCategory id="3" key="done" colorName="green"/><resolution id="4">Incomplete</resolution><assignee username="erans">Gilles</assignee><reporter username="erans">Gilles</reporter><labels><label>features</label></labels><created>Fri, 16 Dec 2011 12:43:36 +0000</created><updated>Sat, 26 May 2012 22:18:47 +0100</updated><resolved>Sat, 26 May 2012 22:18:47 +0100</resolved><due/><votes>0</votes><watches>1</watches><comments><comment id="13170949" author="erans" created="Fri, 16 Dec 2011 12:48:46 +0000"><p>Attached proposed implementation. OK to add?</p></comment><comment id="13170958" author="luc" created="Fri, 16 Dec 2011 13:09:28 +0000"><p>If we want to implement derivatives, I would rather set up a top level interface and several implementations, including this one. We could for example import the definitions from Nabla core package (<a href="http://svn.apache.org/viewvc/commons/sandbox/nabla/trunk/src/main/java/org/apache/commons/nabla/core/" class="external-link" rel="nofollow">http://svn.apache.org/viewvc/commons/sandbox/nabla/trunk/src/main/java/org/apache/commons/nabla/core/</a>) and the implementations of Nabla numerical package (<a href="http://svn.apache.org/viewvc/commons/sandbox/nabla/trunk/src/main/java/org/apache/commons/nabla/numerical/" class="external-link" rel="nofollow">http://svn.apache.org/viewvc/commons/sandbox/nabla/trunk/src/main/java/org/apache/commons/nabla/numerical/</a>). Of course, once imported these packages would be removed from Nabla itself and replaced by a dependency to Math.</p></comment><comment id="13170977" author="erans" created="Fri, 16 Dec 2011 13:49:36 +0000"><p>The proposed code was modelled against the structure of solvers and optimizers classes (method "derivative" is the counterpart of "solve" and "optimize", respectively).<br/>
What you propose seems to depart from this, but I cannot really judge because I don't know anything about "nabla".</p>

<p>It may be the right way in the longer term... However, given the resources devoted to "nabla", I don't think that it is wise to force Commons Math to fit the current design of "nabla". I see well that "nabla" and CM could converge at the time of CM version 4.0. <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/><br/>
But for v3.x it could be fine to provide the low-level bits <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/help_16.gif" height="16" width="16" align="absmiddle" alt="" border="0"/>.</p>

<p>But it can also be that I completely missed your point. If so, could you please post the code that would help me figure out what you propose?</p></comment><comment id="13171044" author="psteitz" created="Fri, 16 Dec 2011 16:15:07 +0000"><p>+1 to moving the <span class="error">&#91;nabla&#93;</span> numerics code into <span class="error">&#91;math&#93;</span> and standardizing on the <span class="error">&#91;nabla&#93;</span> API (which will become the <span class="error">&#91;math&#93;</span> API that <span class="error">&#91;nabla&#93;</span> will depend on). If the API is not to everyone's liking, we can change it.  The relevant classes are in o.a.c.nabla.numerical and o.a.c.nabla.core in the <span class="error">&#91;nabla&#93;</span> sandbox svn, per Luc's links above.</p>

<p>Might be best to postpone this until post-3.0, as the package additions could be done in 3.1 without breaks; but I would personally be OK with a lift and load from <span class="error">&#91;nabla&#93;</span> (along with the proposed Ridder's impl) for 3.0 if someone is willing to do the work.</p></comment><comment id="13194102" author="luc" created="Thu, 26 Jan 2012 19:22:37 +0000"><p>I think we can wait to 3.1, as this would be mainly a new package.</p></comment><comment id="13194607" author="erans" created="Fri, 27 Jan 2012 11:15:53 +0000"><p>We could wait, but I don't understand why we should.<br/>
The code is there, and could already be useful as is. Moreover, what you propose regarding the convergence with "nabla" is far from clear to me.<br/>
IIUC, "nabla" computes the derivative of a function, <em>without any additional input</em>. The Ridders algorithm however is an approximating procedure where you must specify a tolerance, an initial "delta" and a maximum number of function evaluations (just like for the solvers and optimizers algorithms).<br/>
For CM design consistency's sake (and ease of use), this algorithm must be introduced in a form that relates to the existing codes in CM, not in a form that one expects will conform to a future requirement from another library.</p>

<p>Later, we can always create adapters that will bridge the CM API to the "nabla" API (e.g. possibly passing the additional parameters needed by the "derivative" method of "RiddersFirstDerivative" in the constructor of the adapter class).</p></comment><comment id="13195726" author="luc" created="Sun, 29 Jan 2012 09:55:58 +0000"><p>OK then, I'll take care of this issue and will import Nabla interfaces in Math, trying to merge the two interfaces.</p>

<p>I don't think thee are so much differences. The additional input like tolerances can be specified in the Ridders constructor, just like absolute and relative accuracy are set up in solvers. We could also merge the various Nabla finite differences schemes into one class and use a constructor parameter to choose the number of points in the finite differences. The max evaluations in the would not be used in finite differences.</p>

<p>Here is what I intend to do:</p>

<ul>
	<li>replace Nabla UnivariateDifferentiable by Math UnivariateFunction</li>
	<li>adapt Nabla UnivariateDerivative to the change above</li>
	<li>keep Nabla DifferentialPair as is</li>
	<li>adapt UnivariateDifferentiator to have an additional max evaluation parameter, in the Solvers spirit</li>
</ul>
</comment><comment id="13195890" author="erans" created="Mon, 30 Jan 2012 00:27:03 +0000"><blockquote><p>The additional input like tolerances can be specified in the Ridders constructor, <span class="error">&#91;...&#93;</span></p></blockquote>

<p>This sentence makes me think that we don't understand each other: the tolerance currently <em>is</em> passed in the constructor. It is the method that computes the derivative (which takes additional parameters and returns a <tt>double</tt> in "RiddersFirstDerivative", while in "nabla" I think that the equivalent method would return a "function" object).</p>

<p>Anyways, this should not be a blocking issue, while at the same time, we should probably not jump too quickly to a conclusion concerning the API (here and there). So probably better to leave this for later.</p></comment><comment id="13197123" author="luc" created="Tue, 31 Jan 2012 19:01:19 +0000"><p>OK, so can we postpone this to 3.1 ?</p></comment><comment id="13197370" author="erans" created="Tue, 31 Jan 2012 23:19:39 +0000"><p>Postponed.</p></comment><comment id="13284068" author="erans" created="Sat, 26 May 2012 22:18:47 +0100"><p>The provided code was buggy.</p>

<p>Since the proposed API is not satisfying, and this does not seem to be high priority, it's better to revisit this once the basic interfaces have been set up.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Fri, 16 Dec 2011 13:09:28 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>221135</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>56917</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-725] use initialized static final arrays, instead of initializing it in constructors</title><link>https://issues.apache.org/jira/browse/MATH-725</link><project id="12310485" key="MATH">Commons Math</project><description><p>The Well PRNG's implementations have arrays iRm1, iRm2, iRm3, i1, i2, i3. All these arrays are unmodifiable, so we can replace this arrays initialization block</p>

<p>        final int w = 32;<br/>
 	final int r = (k + w - 1) / w;<br/>
 	this.v = new int<span class="error">&#91;r&#93;</span>;<br/>
 	this.index = 0;</p>

<p> 	// precompute indirection index tables. These tables are used for optimizing access<br/>
 	// they allow saving computations like "(j + r - 2) % r" with costly modulo operations<br/>
 	iRm1 = new int<span class="error">&#91;r&#93;</span>;<br/>
 	iRm2 = new int<span class="error">&#91;r&#93;</span>;<br/>
 	i1 = new int<span class="error">&#91;r&#93;</span>;<br/>
 	i2 = new int<span class="error">&#91;r&#93;</span>;<br/>
 	i3 = new int<span class="error">&#91;r&#93;</span>;<br/>
 	for (int j = 0; j &lt; r; ++j) </p>
{
 	iRm1[j] = (j + r - 1) % r;
 	iRm2[j] = (j + r - 2) % r;
 	i1[j] = (j + m1) % r;
 	i2[j] = (j + m2) % r;
 	i3[j] = (j + m3) % r;
 	}


<p>with inline initialized static final arrays.</p>

<p>This is much better and faster implementation, freed from unnecessary costly calculations (such as %).</p>


<p>Another solution: leave as is, but make all these arrays static.</p></description><environment/><key id="12535062">MATH-725</key><summary>use initialized static final arrays, instead of initializing it in constructors</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="4">Incomplete</resolution><assignee username="-1">Unassigned</assignee><reporter username="filosofem">Eldar Agalarov</reporter><labels>
                    </labels><created>Tue, 13 Dec 2011 23:46:32 +0000</created><updated>Sat, 24 Mar 2012 16:23:40 +0000</updated><resolved>Tue, 14 Feb 2012 00:32:07 +0000</resolved><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><timeoriginalestimate seconds="3600">1h</timeoriginalestimate><timeestimate seconds="3600">1h</timeestimate><comments><comment id="13189860" author="erans" created="Fri, 20 Jan 2012 15:50:02 +0000"><p>The problem is that arrays are <em>mutable</em>. If they are made "static", a buggy or malicious subclass of <tt>AbstractWell</tt> will be able to affect all instances.</p>

<p>We could do that if the arrays are never exposed, i.e. they would become "private" and their contents must be accessed through methods. Not sure whether it won't be slower in the end...</p>
</comment><comment id="13189862" author="sebb@apache.org" created="Fri, 20 Jan 2012 15:59:20 +0000"><p>AFAIK, getters will be inlined by optimising compilers. <br/>
So they won't be noticeably slower than direct access.</p></comment><comment id="13189872" author="erans" created="Fri, 20 Jan 2012 16:18:12 +0000"><p>Fine then.</p>

<p>Eldar,<br/>
Would you provide a patch along those lines ("static" initializations + getter methods)?<br/>
Thanks.</p></comment><comment id="13199279" author="erans" created="Thu, 2 Feb 2012 22:13:13 +0000"><p>Those arrays cannot be "static" since their size depends on a parameter ("k") passed to the constructor.<br/>
Please clarify what you proposed (or, better: provide a patch). Thanks.</p></comment><comment id="13207395" author="erans" created="Tue, 14 Feb 2012 00:32:07 +0000"><p>The proposal is unclear (and patch missing).</p></comment><comment id="13237594" author="luc" created="Sat, 24 Mar 2012 16:23:40 +0000"><p>changing status to closed as 3.0 has been released</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Fri, 20 Jan 2012 15:50:02 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>220746</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160407</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-724] RandomDataImpl.nextInt does not distribute uniformly for negative lower bound</title><link>https://issues.apache.org/jira/browse/MATH-724</link><project id="12310485" key="MATH">Commons Math</project><description><p>When using the RandomDataImpl.nextInt function to get a uniform sample in a <span class="error">&#91;lower, upper&#93;</span> interval, when the lower value is less than zero, the output is not uniformly distributed, as the lowest value is practically never returned.</p>

<p>See the attached NextIntUniformTest.java file. It uses a <span class="error">&#91;-3, 5&#93;</span> interval. For several values between 0 and 1, testNextIntUniform1 prints the return value of RandomDataImpl.nextInt (as double and as int). We see that -2 through 5 are returned several times. The -3 value however, is only returned for 0.0, and is thus under-respresented in the integer samples. The output of test method testNextIntUniform2 also clearly shows that value -3 is never sampled.</p></description><environment/><key id="12534797">MATH-724</key><summary>RandomDataImpl.nextInt does not distribute uniformly for negative lower bound</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="dhendriks">Dennis Hendriks</reporter><labels>
                    </labels><created>Mon, 12 Dec 2011 15:03:41 +0000</created><updated>Sat, 24 Mar 2012 16:16:27 +0000</updated><resolved>Tue, 20 Dec 2011 21:14:16 +0000</resolved><version>1.0</version><version>1.1</version><version>1.2</version><version>2.0</version><version>2.1</version><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13167518" author="dhendriks" created="Mon, 12 Dec 2011 15:04:41 +0000"><p>NextIntUniformTest.java: see issue description</p></comment><comment id="13167594" author="psteitz" created="Mon, 12 Dec 2011 16:49:17 +0000"><p>Thanks for reporting this. The problem is in the rounding, which does not work correctly for negative values.  My first inclination is to test for negative lower bound and just shift the interval in that case.  Any better ideas?</p></comment><comment id="13168218" author="dhendriks" created="Tue, 13 Dec 2011 08:23:11 +0000"><p>math-724.patch: it first scales the [0..1) interval to [0..length), then discretizes it, and finally shifts it to <span class="error">&#91;lower, upper&#93;</span>.</p>

<p>It may be a good idea to also add some tests for cases such as <span class="error">&#91;0,3&#93;</span>, <span class="error">&#91;3,5&#93;</span>, <span class="error">&#91;-3,5&#93;</span>, <span class="error">&#91;-5, -3&#93;</span>, and see if the distribution of sampled values is uniform. It seems RandomDataTest.testNextInt does this using chiSquare, but since I'm not familiar with that, I'm not sure how to add more tests for the other lower/upper bound pairs...</p></comment><comment id="13168225" author="dhendriks" created="Tue, 13 Dec 2011 08:33:52 +0000"><p>I just ran the unit tests with my patch applied, an the following test, in RandomDataTest:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
    @Test
    <span class="code-keyword">public</span> void testNextIntExtremeValues() {
        <span class="code-object">int</span> x = randomData.nextInt(<span class="code-object">Integer</span>.MIN_VALUE, <span class="code-object">Integer</span>.MAX_VALUE);
        <span class="code-object">int</span> y = randomData.nextInt(<span class="code-object">Integer</span>.MIN_VALUE, <span class="code-object">Integer</span>.MAX_VALUE);
        Assert.assertFalse(x == y);
    }
</pre>
</div></div>

<p>fails, as does testNextLongExtremeValues. Both x and y become equal to Integer.MIN_VALUE, making x == y to become true, causing the assertion to fail...</p></comment><comment id="13168249" author="dhendriks" created="Tue, 13 Dec 2011 09:14:05 +0000"><p>Also note that RandomDataImpl.nextUniform uses a similar scale/shift method to transform the range. It may thus suffer from the same failure in case of extreme values...</p></comment><comment id="13169384" author="dhendriks" created="Wed, 14 Dec 2011 14:16:39 +0000"><p>math-724-v2.patch: 2nd patch.</p>

<ul class="alternate" type="square">
	<li>I think all unit tests work now, including the ones for the Integer.MIN_VALUE to Integer.MAX_VALUE interval.</li>
	<li>The original problem was that negative values were rounded up by the conversion from double to int, while positive numbers were rounded down. By using floor, we first round the numbers down, and then convert to integer, thus ensuring a proper uniform distribution.</li>
	<li>Test cases for negative values are still missing... Could someone else add them?</li>
	<li>RandomDataImpl.nextUniform: I haven't changed this, as the change that I used for integers does not have the desired effect for doubles... This may be caused by the fact that Double.MIN_VALUE is more negative than Double.MAX_VALUE is positive, but I'm not really sure. Maybe it is not even an issue for the nextUniform method?</li>
</ul>
</comment><comment id="13169406" author="erans" created="Wed, 14 Dec 2011 14:41:26 +0000"><blockquote><p><span class="error">&#91;...&#93;</span> the fact that Double.MIN_VALUE is more negative <span class="error">&#91;...&#93;</span></p></blockquote>

<p><a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Double.html#MIN_VALUE" class="external-link" rel="nofollow">Double.Min_VALUE</a> is a <em>positive</em> number.</p></comment><comment id="13170025" author="dhendriks" created="Thu, 15 Dec 2011 08:23:17 +0000"><blockquote><p>Double.Min_VALUE is a positive number.</p></blockquote>

<p>Oops...</p>

<p>OK, I uploaded a third version of the patch (math-724-v3.patch), which also applies the new formula for nextUniform. I included two test files (NextUniformTest3.java and NextIntTest3.java), that show the results for nextInt and nextUniform, for both the old and new formulas. As for as I can see, the new formula works equally well or better in all cases. Also, all existing unit tests pass.</p></comment><comment id="13173508" author="psteitz" created="Tue, 20 Dec 2011 21:14:16 +0000"><p>Thanks for reporting and diagnosing this, Dennis.</p>

<p>Slightly modified version of the third patch (just removing unecessary parens), along with tests, committed in r1221490.  The "negativeToPositiveRange" tests fail before the fix.  The change to nextUniform is also needed to prevent overflows. I changed the relevant test cases to use the TestUtils chisquare test, which is more straightforward and has better output.  This was added after the original versions of these tests were written.  Others in this class should be similarly updated.  Patches welcome to further tidy the tests, but this issue can be resolved.</p></comment></comments><attachments><attachment id="12507485" name="NextIntTest3.java" size="5847" author="dhendriks" created="Thu, 15 Dec 2011 08:23:17 +0000"/><attachment id="12507005" name="NextIntUniformTest.java" size="2779" author="dhendriks" created="Mon, 12 Dec 2011 15:04:41 +0000"/><attachment id="12507486" name="NextUniformTest3.java" size="5778" author="dhendriks" created="Thu, 15 Dec 2011 08:23:17 +0000"/><attachment id="12507355" name="math-724-v2.patch" size="1754" author="dhendriks" created="Wed, 14 Dec 2011 14:16:39 +0000"/><attachment id="12507487" name="math-724-v3.patch" size="1942" author="dhendriks" created="Thu, 15 Dec 2011 08:23:17 +0000"/><attachment id="12507147" name="math-724.patch" size="1532" author="dhendriks" created="Tue, 13 Dec 2011 08:23:11 +0000"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>6.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Mon, 12 Dec 2011 16:49:17 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>220481</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60276</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-723] BitStreamGenerators (MersenneTwister, Well generators) do not clear normal deviate cache on setSeed</title><link>https://issues.apache.org/jira/browse/MATH-723</link><project id="12310485" key="MATH">Commons Math</project><description><p>The BitStream generators generate normal deviates (for nextGaussian) in pairs, caching the last value generated. When reseeded, the cache should be cleared; otherwise seeding two generators with the same value is not guaranteed to generate the same sequence.</p></description><environment/><key id="12534683">MATH-723</key><summary>BitStreamGenerators (MersenneTwister, Well generators) do not clear normal deviate cache on setSeed</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="psteitz">Phil Steitz</assignee><reporter username="psteitz">Phil Steitz</reporter><labels>
                    </labels><created>Sun, 11 Dec 2011 21:03:37 +0000</created><updated>Sat, 24 Mar 2012 16:16:48 +0000</updated><resolved>Sun, 11 Dec 2011 21:59:41 +0000</resolved><version>2.0</version><version>2.1</version><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13167220" author="psteitz" created="Sun, 11 Dec 2011 21:59:41 +0000"><p>Fixed in r1213087.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>220404</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60277</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-722] [math] Complex Tanh for "big" numbers</title><link>https://issues.apache.org/jira/browse/MATH-722</link><project id="12310485" key="MATH">Commons Math</project><description><p>Hi,</p>

<p>In Complex.java the tanh is computed with the following formula:</p>

<p>tanh(a + bi) = sinh(2a)/(cosh(2a)+cos(2b)) + <span class="error">&#91;sin(2b)/(cosh(2a)+cos(2b))&#93;</span>i</p>

<p>The problem that I'm finding is that as soon as "a" is a "big" number,<br/>
both sinh(2a) and cosh(2a) are infinity and then the method tanh returns in<br/>
the real part NaN (infinity/infinity) when it should return 1.0.</p>

<p>Wouldn't it be appropiate to add something as in the FastMath library??:</p>

<p>if (real&gt;20.0)</p>
{
      return createComplex(1.0, 0.0);
}
<p>if (real&lt;-20.0)</p>
{
      return createComplex(-1.0, 0.0);
}


<p>Best regards,</p>

<p>JBB</p></description><environment><p>I'm working with Eclipse 3.6.2 on Windows XP, but the bug is Enviroment independent</p></environment><key id="12534547">MATH-722</key><summary>[math] Complex Tanh for "big" numbers</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="celestin">Sébastien Brisard</assignee><reporter username="jbbpopo">Juan Barandiaran</reporter><labels><label>patch</label></labels><created>Fri, 9 Dec 2011 21:34:40 +0000</created><updated>Sat, 24 Mar 2012 16:16:50 +0000</updated><resolved>Fri, 27 Jan 2012 07:01:40 +0000</resolved><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><timeoriginalestimate seconds="900">0.25h</timeoriginalestimate><timeestimate seconds="900">0.25h</timeestimate><comments><comment id="13167068" author="celestin" created="Sun, 11 Dec 2011 08:35:52 +0000"><p>Even when a is not large enough to cause overflows, I'm not sure the general expression used is quite accurate (because <tt>cosh(2 * a)</tt> and <tt>sinh(2 * a)</tt> are very close, but not equal). I've often come accross this issue, and found that reverting to exponential representation (keeping only the exponentials with negative argument) was much better behaved.</p>

<p>In the present case, maybe the following representation of the real part<br/>
<tt>(1 - exp(-4 * a)) / (1 + 2 * exp(-2 * a) * cos(2 * b) + exp(-4 * a))</tt><br/>
would avoid overflows (for <tt>a &gt; 0</tt>, while remaining fairly accurate (otherwise, the threshold needs to be tuned).</p>

<p>Similar expressions can be derived for <tt>a &lt; 0</tt>.</p>

<p>What do you think?<br/>
Sébastien</p></comment><comment id="13167071" author="luc" created="Sun, 11 Dec 2011 09:18:31 +0000"><p>Very good idea Sébastien. Using stable formulas according to argument size is surely a good thing. We can also use FastMath.expm1() both in numerator and denominator, it will improve accuracy when a is close to 0.</p></comment><comment id="13194419" author="celestin" created="Fri, 27 Jan 2012 03:55:18 +0000"><p>I've run some tests comparing the two formulas: I didn't notice any major difference. Therefore I suggest to stick with the existing formula.<br/>
Meanwhile, the fix proposed by Juan must be implemented. It can be proved mathematically that for any value of <tt>b</tt>, the value of <tt>tanh(a + i * b)</tt> is within one ulp of 1.0 for <tt>abs(a) &gt; 18.9</tt>, so the proposed threshold (20.0) is fairly safe, and consistent with other parts of CM. Note that the same fix must be implemented for <tt>tan</tt> also.</p></comment><comment id="13194521" author="celestin" created="Fri, 27 Jan 2012 07:01:40 +0000"><p>Changes proposed by Juan committed in <tt>r1236548</tt>.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 11 Dec 2011 08:35:52 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>220269</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60278</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-721] building common-math on Solaris SPARC gives "error: floating point number too small"</title><link>https://issues.apache.org/jira/browse/MATH-721</link><project id="12310485" key="MATH">Commons Math</project><description><p>It seems the assumption in MathUtils.java </p>


<p>    /** Safe minimum, such that 1 / SAFE_MIN does not overflow.</p>
<ul>
	<li>&lt;p&gt;In IEEE 754 arithmetic, this is also the smallest normalized</li>
	<li>number 2&lt;sup&gt;-1022&lt;/sup&gt;.&lt;/p&gt;<br/>
     */<br/>
    public static final double SAFE_MIN = 0x1.0p-1022;</li>
</ul>


<p>does not work on my openjdk 1.7.0_1 on Solaris SPARC, because I get the following build error:</p>

<p><span class="error">&#91;INFO&#93;</span> Compiling 457 source files to /opt/builder/projects/commons-math-2.2-src/target/classes<br/>
<span class="error">&#91;INFO&#93;</span> -------------------------------------------------------------<br/>
<span class="error">&#91;ERROR&#93;</span> COMPILATION ERROR : <br/>
<span class="error">&#91;INFO&#93;</span> -------------------------------------------------------------<br/>
<span class="error">&#91;ERROR&#93;</span> /opt/builder/projects/commons-math-2.2-src/src/main/java/org/apache/commons/math/util/MathUtils.java:<span class="error">&#91;42,42&#93;</span> error: floating point number too small</p>

<p><span class="error">&#91;INFO&#93;</span> 1error<br/>
<span class="error">&#91;INFO&#93;</span> -------------------------------------------------------------<br/>
<span class="error">&#91;INFO&#93;</span> ------------------------------------------------------------------------<br/>
<span class="error">&#91;INFO&#93;</span> BUILD FAILURE</p>

<p>and also in the tests I encounter the error when parsing floating point constants</p>

<p><span class="error">&#91;ERROR&#93;</span> Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.1:testCompile (default-testCompile) on project commons-math: Compilation failure: Compilation failure:<br/>
<span class="error">&#91;ERROR&#93;</span> /opt/builder/projects/commons-math-2.2-src/src/test/java/org/apache/commons/math/util/FastMathTest.java:<span class="error">&#91;1050,69&#93;</span> error: floating point number too small<br/>
<span class="error">&#91;ERROR&#93;</span> <br/>
<span class="error">&#91;ERROR&#93;</span> /opt/builder/projects/commons-math-2.2-src/src/test/java/org/apache/commons/math/util/FastMathTest.java:<span class="error">&#91;1055,28&#93;</span> error: floating point number too small<br/>
<span class="error">&#91;ERROR&#93;</span> <br/>
<span class="error">&#91;ERROR&#93;</span> /opt/builder/projects/commons-math-2.2-src/src/test/java/org/apache/commons/math/util/FastMathTest.java:<span class="error">&#91;1055,69&#93;</span> error: floating point number too small<br/>
<span class="error">&#91;ERROR&#93;</span> <br/>
<span class="error">&#91;ERROR&#93;</span> /opt/builder/projects/commons-math-2.2-src/src/test/java/org/apache/commons/math/util/FastMathTest.java:<span class="error">&#91;1056,28&#93;</span> error: floating point number too small<br/>
<span class="error">&#91;ERROR&#93;</span> <br/>
<span class="error">&#91;ERROR&#93;</span> /opt/builder/projects/commons-math-2.2-src/src/test/java/org/apache/commons/math/util/FastMathTest.java:<span class="error">&#91;1062,70&#93;</span> error: floating point number too small<br/>
<span class="error">&#91;ERROR&#93;</span> <br/>
<span class="error">&#91;ERROR&#93;</span> /opt/builder/projects/commons-math-2.2-src/src/test/java/org/apache/commons/math/util/FastMathTest.java:<span class="error">&#91;1063,70&#93;</span> error: floating point number too small<br/>
<span class="error">&#91;ERROR&#93;</span> <br/>
<span class="error">&#91;ERROR&#93;</span> /opt/builder/projects/commons-math-2.2-src/src/test/java/org/apache/commons/math/util/FastMathTest.java:<span class="error">&#91;1068,70&#93;</span> error: floating point number too small<br/>
<span class="error">&#91;ERROR&#93;</span> <br/>
<span class="error">&#91;ERROR&#93;</span> /opt/builder/projects/commons-math-2.2-src/src/test/java/org/apache/commons/math/util/FastMathTest.java:<span class="error">&#91;1069,70&#93;</span> error: floating point number too small<br/>
<span class="error">&#91;ERROR&#93;</span> <br/>
<span class="error">&#91;ERROR&#93;</span> /opt/builder/projects/commons-math-2.2-src/src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java:<span class="error">&#91;503,51&#93;</span> error: floating point number too small<br/>
<span class="error">&#91;ERROR&#93;</span> <br/>
<span class="error">&#91;ERROR&#93;</span> /opt/builder/projects/commons-math-2.2-src/src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java:<span class="error">&#91;503,66&#93;</span> error: floating point number too small<br/>
<span class="error">&#91;ERROR&#93;</span> <br/>
<span class="error">&#91;ERROR&#93;</span> /opt/builder/projects/commons-math-2.2-src/src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java:<span class="error">&#91;583,52&#93;</span> error: floating point number too small<br/>
<span class="error">&#91;ERROR&#93;</span> <br/>
<span class="error">&#91;ERROR&#93;</span> /opt/builder/projects/commons-math-2.2-src/src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java:<span class="error">&#91;585,52&#93;</span> error: floating point number too small</p>


<p>I suggest using java.lang.Double.MIN_NORMAL for a platform normalized minimal floating point value.</p>


<p>A quick program for printing Double.MIN_NORMAL gives the following result.</p>

<p>class test {<br/>
   public static void main(String[] args) </p>
{
       System.out.println("min float = " + Double.MIN_NORMAL );
   }
<p>}</p>

<p>java test<br/>
min float = 2.2250738585072014E-308</p>

<p>Could it be an openjdk glitch? Thank you for any comments and help how this could be fixed.</p></description><environment><p>Build environment is:<br/>
mvn --version<br/>
Apache Maven 3.0.3 (rNON-CANONICAL_2011-10-13_22-23_builder; 2011-10-13 22:23:49+0200)<br/>
Maven home: /usr/local/share/maven-3.0.3<br/>
Java version: 1.7.0-internal, vendor: Oracle Corporation<br/>
Java home: /usr/local/share/jdk1.7.0_1/jre<br/>
Default locale: de_DE, platform encoding: UTF-8<br/>
OS  "sunos", version: "5.10", arch: "sparc", family: "unix"</p></environment><key id="12534416">MATH-721</key><summary>building common-math on Solaris SPARC gives "error: floating point number too small"</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="jprante">Jörg Prante</reporter><labels>
                    </labels><created>Thu, 8 Dec 2011 23:51:21 +0000</created><updated>Mon, 4 Mar 2013 18:53:20 +0000</updated><resolved>Sat, 21 Apr 2012 13:16:06 +0100</resolved><version>2.2</version><fixVersion>3.1</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13165922" author="luc" created="Fri, 9 Dec 2011 08:03:48 +0000"><p>We can't use Double.MIN_NORMAL because it is only available since Java 6 and Apache Commons Math currently targets Java 1.5.<br/>
It may be an openjdk glitch as you say. This number is a perfectly regular number, and even smaller number exists and should be able to be used: the subnormal numbers.</p>

<p>Could you try using a conversion from hexadecimal encoding on your platform, using something along this line:</p>

<p>  public static final double SAFE_MIN = Double.longBitsToDouble(1L &lt;&lt; 52);</p></comment><comment id="13191117" author="erans" created="Mon, 23 Jan 2012 11:24:00 +0000"><p>Any follow-ups on this issue?</p></comment><comment id="13221696" author="jprante" created="Sat, 3 Mar 2012 21:03:34 +0000"><p>Replacing constant 2.2250738585072014E-308 (MIN_NORMAL) with java.lang.Double.longBitsToDouble(0x0010000000000000L)<br/>
is a workaround. Could be a Solaris SPARC compiler optimization issue when parsing float constants.</p></comment><comment id="13258843" author="luc" created="Sat, 21 Apr 2012 13:16:06 +0100"><p>Fixed in subversion repository as of r1328492</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Fri, 9 Dec 2011 08:03:48 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>220138</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160408</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-720] RandomDataImpl uses both JDKRandomGenerator and Well19937c, while contract/javadoc only specifies Well19937c.</title><link>https://issues.apache.org/jira/browse/MATH-720</link><project id="12310485" key="MATH">Commons Math</project><description><p>See attached unit test. I create a distribution, sample it (not printed), set the seed to 0, and then print the next sample. I also create the same distribution again, set the seed to 0, and then print the next sample. I expect the same sample, as in both cases the seed was set to 0, just before sampling. I however get this output:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
5
4
</pre>
</div></div>

<p>The problem is in the org.apache.commons.math.random.RandomDataImpl class:</p>
<ul class="alternate" type="square">
	<li>The RandomDataImpl(RandomGenerator rand) constructor states in javadoc: "@param rand the source of (non-secure) random data (may be null, resulting in default JDK-supplied generator)"</li>
	<li>reSeed(long seed) method does: if (rand == null) rand = new JDKRandomGenerator();</li>
	<li>reSeed() method does: if (rand == null) rand = new JDKRandomGenerator();</li>
	<li>class javadoc states: "If no &lt;code&gt;RandomGenerator&lt;/code&gt; is provided in the constructor, the default is to use a Well19937c generator."</li>
	<li>getRan() does: if (rand == null) rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));</li>
	<li>getRan() states in javadoc: "Creates and initializes a default generator if null. Uses a Well19937c generator with System.currentTimeMillis() + System.identityHashCode(this)) as the default seed."</li>
</ul>


<p>It seems that only Well19937c should be used, but the constructor javadoc, and the implementation of the reSeed methods was not updated to match this. I think the partial changes were done in <a href="https://issues.apache.org/jira/browse/MATH-701" title="Seeding a default RNG" class="issue-link" data-issue-key="MATH-701"><del>MATH-701</del></a>, more specifically, in commit <span class="error">&#91;1197626&#93;</span> (and related commit <span class="error">&#91;1197716&#93;</span>).</p></description><environment/><key id="12534185">MATH-720</key><summary>RandomDataImpl uses both JDKRandomGenerator and Well19937c, while contract/javadoc only specifies Well19937c.</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="dhendriks">Dennis Hendriks</reporter><labels><label>random</label><label>seed</label></labels><created>Wed, 7 Dec 2011 14:04:39 +0000</created><updated>Tue, 24 Jul 2012 00:24:47 +0100</updated><resolved>Mon, 12 Dec 2011 01:35:37 +0000</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13164408" author="dhendriks" created="Wed, 7 Dec 2011 14:05:27 +0000"><p>TestRandom.java: shows the problem, as described in the issue description.</p></comment><comment id="13164783" author="erans" created="Wed, 7 Dec 2011 22:30:08 +0000"><p>Good catch!</p>

<p>This bug shows how safer it would be to have the "rand" field "final" (no need to test for "null" all over the place).</p></comment><comment id="13167306" author="psteitz" created="Mon, 12 Dec 2011 01:35:37 +0000"><p>Fixed in r1213130.</p></comment></comments><issuelinks><issuelinktype id="12310010"><name>Incorporates</name><inwardlinks description="is part of"><issuelink><issuekey id="12530041">MATH-701</issuekey></issuelink></inwardlinks></issuelinktype></issuelinks><attachments><attachment id="12506444" name="TestRandom.java" size="461" author="dhendriks" created="Wed, 7 Dec 2011 14:05:27 +0000"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 7 Dec 2011 22:30:08 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>219907</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60279</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-719] Strange deprecations in API</title><link>https://issues.apache.org/jira/browse/MATH-719</link><project id="12310485" key="MATH">Commons Math</project><description><p>Sorry if this doesn't belong here. I couldn't find any sort of mailing list or other feedback mechanism on the website.</p>

<p>RealMatrix has some very odd deprecations. In particular inverse(), getDeterminant() and isSingular(). The last has the message:</p>

<blockquote><p>Deprecated. as of release 2.0, replaced by the boolean negation of new LUDecompositionImpl(m).getSolver().isNonSingular()</p></blockquote>

<p>That's an implementation, not an interface. The whole point of having an interface is that </p>
<ul>
	<li>I can query whether a matrix is singular withou having to know about LUDecompositions</li>
	<li>You guys can change the implementation of isSingular() if something better pops up without us guys having to change our code.</li>
</ul>


<p>I'm not using these methods now, because they're deprecated, but I've basically recreated them in as static methods in a utility class. Wouldn't it be much better to just put code from the deprecation message into the method and remove the deprecation?</p>
</description><environment/><key id="12534055">MATH-719</key><summary>Strange deprecations in API</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="7">Later</resolution><assignee username="-1">Unassigned</assignee><reporter username="pbloem">Peter Bloem</reporter><labels><label>api-change</label><label>deprecated</label></labels><created>Tue, 6 Dec 2011 17:07:24 +0000</created><updated>Sat, 24 Mar 2012 16:16:38 +0000</updated><resolved>Mon, 23 Jan 2012 11:28:07 +0000</resolved><version>2.0</version><version>2.1</version><version>2.2</version><due/><votes>0</votes><watches>0</watches><comments><comment id="13163737" author="erans" created="Tue, 6 Dec 2011 18:50:10 +0000"><blockquote><p>Sorry if this doesn't belong here.</p></blockquote>

<p>Indeed, you'd better bring this kind of issue to the "dev" ML. <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/><br/>
The more so that there have been recent discussions about changing the matrix API and decisions ought to be made quite soon now.</p></comment><comment id="13163786" author="pbloem" created="Tue, 6 Dec 2011 20:07:17 +0000"><p>Ah, so there is a mailing list. I guess I should have looked a little harder. I'll bring it up there.</p></comment><comment id="13191118" author="erans" created="Mon, 23 Jan 2012 11:28:07 +0000"><p>It is unlikely that we can come up with a new design before the release of v3.0.<br/>
This must be thoroughly discussed first on the "dev" ML, together with other matrix interface issues.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 6 Dec 2011 18:50:10 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>219781</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160409</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-718] inverseCumulativeProbability of BinomialDistribution returns wrong value for large trials.</title><link>https://issues.apache.org/jira/browse/MATH-718</link><project id="12310485" key="MATH">Commons Math</project><description><p>The inverseCumulativeProbability method of the BinomialDistributionImpl class returns wrong value for large trials.  Following code will be reproduce the problem.</p>

<p><tt>System.out.println(new BinomialDistributionImpl(1000000, 0.5).inverseCumulativeProbability(0.5));</tt></p>

<p>This returns 499525, though it should be 499999.</p>

<p>I'm not sure how it should be fixed, but the cause is that the cumulativeProbability method returns Infinity, not NaN.  As the result the checkedCumulativeProbability method doesn't work as expected.</p></description><environment/><key id="12533757">MATH-718</key><summary>inverseCumulativeProbability of BinomialDistribution returns wrong value for large trials.</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="uchiyama">Yuji Uchiyama</reporter><labels>
                    </labels><created>Sun, 4 Dec 2011 00:40:44 +0000</created><updated>Mon, 4 Mar 2013 18:53:26 +0000</updated><resolved>Mon, 21 May 2012 20:56:36 +0100</resolved><version>2.2</version><version>3.0</version><fixVersion>3.1</fixVersion><due/><votes>1</votes><watches>3</watches><comments><comment id="13162326" author="celestin" created="Sun, 4 Dec 2011 09:22:55 +0000"><p>Hi Yuji,<br/>
thanks for reporting this. For version 3.0, we are currently reshaping the package distribution, and this will probably get resolved once we are over with <a href="https://issues.apache.org/jira/browse/MATH-692" title="Cumulative probability and inverse cumulative probability inconsistencies" class="issue-link" data-issue-key="MATH-692"><del>MATH-692</del></a>.<br/>
Best regards,<br/>
Sébastien</p></comment><comment id="13170599" author="cwinter" created="Thu, 15 Dec 2011 23:55:35 +0000"><p>There seem to be stability problems with Beta.regularizedBeta(...) when using extreme parameters. <tt>PascalDistribution.cumulativeProbability(Integer.MAX_VALUE)</tt> returns <tt>NaN</tt> instead of 1. We should look for a way to avoid both infinite values and NaNs in the implementation of the regularized beta function.</p></comment><comment id="13200346" author="celestin" created="Sat, 4 Feb 2012 06:33:37 +0000"><p>As rightly pointed out by Christian, this issue is strongly related to <a href="https://issues.apache.org/jira/browse/MATH-738" title="Incomplete beta function I(x, a, b) is inaccurate for large values of a and/or b" class="issue-link" data-issue-key="MATH-738">MATH-738</a>.</p></comment><comment id="13200347" author="celestin" created="Sat, 4 Feb 2012 06:35:20 +0000"><p>Sorry, I only meant to postpone this issue.</p></comment><comment id="13252598" author="jhkauf" created="Thu, 12 Apr 2012 18:09:56 +0100"><p>I just wanted to let you know that our open source project (<a href="http://www.eclipse.org/stem/" class="external-link" rel="nofollow">http://www.eclipse.org/stem/</a>) needs this function and we are eagerly awaiting the update. We are experiencing the issue of wrong values for large trials.</p></comment><comment id="13252722" author="celestin" created="Thu, 12 Apr 2012 19:48:34 +0100"><p>Hi James,<br/>
thanks for your interest. STEM is a very interesting project!<br/>
I will try and find a fix for this issue as soon as possible. Any ideas are welcome!<br/>
Sébastien</p></comment><comment id="13253360" author="tn" created="Fri, 13 Apr 2012 14:20:10 +0100"><p>The problem Christian described wrt the PascalDistribution is a simple integer overflow in the class itself:</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>    public double cumulativeProbability(int x) {
        double ret;
        if (x &lt; 0) {
            ret = 0.0;
        } else {
            ret = Beta.regularizedBeta(probabilityOfSuccess,
                    numberOfSuccesses, x + 1);
        }
        return ret;
    }
</pre>
</div></div>

<p>when x = Integer.MAX_VALUE, adding 1 to it will result in an overflow. As the parameter of regularizedBeta is anyway a double, so it should be changed to something like "1L + x" to enforce a long addition.</p>

<p>Edit: Similar things happen btw also in other Distribution implementations, so it should be fixed also there, e.g. BinomialDistribution</p></comment><comment id="13253381" author="tn" created="Fri, 13 Apr 2012 14:57:40 +0100"><p>The problem is not only related to the Beta function, also the ContinuedFraction.evaluate is numerically unstable.</p>

<p>The reason the cumulativeProbability returns infinity instead of NaN is because the evaluate return 0.0 when called from Beta.regularizedBeta, which leads to a division by zero. The used default epsilon of 10e-15 seems also quite restrictive, when relaxing the epsilon I got much better results (e.g. with 10e-5 I got a result of 499997).</p></comment><comment id="13279875" author="tn" created="Sun, 20 May 2012 22:42:00 +0100"><p>I further looked into this with relation to <a href="https://issues.apache.org/jira/browse/MATH-785" title="Numerical Underflow in ContinuedFraction" class="issue-link" data-issue-key="MATH-785"><del>MATH-785</del></a>. First of all, in the original bug report, the reporter mentions that the expected result should be 499999 which is wrong, imho it should be 500000.</p>

<p>After implementing the modified Lentz-Thompson algorithm, the results for the BinomialDistribution of large trials show correct results.</p></comment><comment id="13279877" author="tn" created="Sun, 20 May 2012 22:55:54 +0100"><p>The attached diff file shows the (preliminary) implementation of the modified Lentz-Thompson algorithm.</p>

<p>Edit: re-uploaded the diff file as it was broken.</p>

<p>Edit2: the failing unit tests I mentioned before were due to a wrong loop, the latest diff shows no unit test errors.</p></comment><comment id="13280421" author="tn" created="Mon, 21 May 2012 20:56:36 +0100"><p>Fixed in r1341171.</p></comment></comments><issuelinks><issuelinktype id="10030"><name>Reference</name><outwardlinks description="relates to"><issuelink><issuekey id="12553447">MATH-785</issuekey></issuelink></outwardlinks></issuelinktype></issuelinks><attachments><attachment id="12528359" name="MATH-718.diff" size="4460" author="tn" created="Sun, 20 May 2012 22:59:23 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 4 Dec 2011 09:22:55 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>219484</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160410</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-717] A varied class of Array2DRowRealMatrix is needed to contain float type instead of double.</title><link>https://issues.apache.org/jira/browse/MATH-717</link><project id="12310485" key="MATH">Commons Math</project><description><p>The current implementation of Array2DRowRealMatrix takes only double type as its base element value in the matrix.<br/>
However, the memory size of double is bigger than float, the downside of which makes the matrix dimension quite limited, compared to float type as its base element type. For small sized problem, this does not make such a big difference, but for large problems, this limits the usability of this library quite severely. In my case, I easily hit an error even after I increase the memory option to 1G. This could have been much more enhanced just by using 'float[][]' instead of the current Array2DRowRealMatrix.</p>

<p>Therefore, the solution I may suggest is to add another class similar to Array2DRowRealMatrix containing float type for its matrix variable instead of double. Of course, a better way is welcome as long as the needs can be fulfilled.</p></description><environment><p>All</p></environment><key id="12533452">MATH-717</key><summary>A varied class of Array2DRowRealMatrix is needed to contain float type instead of double.</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="8">Not a Problem</resolution><assignee username="-1">Unassigned</assignee><reporter username="ninedus">Dusan Ku</reporter><labels><label>features</label></labels><created>Thu, 1 Dec 2011 14:05:28 +0000</created><updated>Mon, 4 Mar 2013 18:58:53 +0000</updated><resolved>Fri, 16 Dec 2011 12:39:27 +0000</resolved><version>2.2</version><due/><votes>0</votes><watches>0</watches><comments><comment id="13166280" author="erans" created="Fri, 9 Dec 2011 16:09:23 +0000"><p>What kind of use do you have for very large matrices?</p></comment><comment id="13167233" author="ninedus" created="Sun, 11 Dec 2011 22:47:20 +0000"><p>It is very natural to have very large matrices in mathematical programmings. In many of my experiments, usually linear programming, this happens frequently. If you're not sure of the potential problem between float and double, please run the below samples separately under the following VM option: -Xmx1G</p>

<p>#case 1) for float:<br/>
	public static void main(String[] args) </p>
{
		float[][] d = new float[15000][15000];
		System.out.println("OK");
	}

<p>#case 2) for double:<br/>
	public static void main(String[] args) </p>
{
		double[][] d = new double[15000][15000];
		System.out.println("OK");
	}</comment><comment id="13167290" author="erans" created="Mon, 12 Dec 2011 00:18:28 +0000"><p>It's clear that one needs 0.9 GB to store 225,000,000 "float" entries and 1.8 GB for "double" entries (not counting the overhead induced from having an array of arrays). That's not really a use-case from which we can decide whether a matrix class backed with a 2-d array of floats is necessary in Commons Math.<br/>
I'm certainly not the appropriate person to have this discussion...</p>

<p>Did you try the "BlockRealMatrix" class?</p></comment><comment id="13167298" author="ninedus" created="Mon, 12 Dec 2011 01:02:12 +0000"><p>No, I haven't tried 'BlockRealMatrix'. Is is worth trying that? I mean 'does this push the limit of the dimension posed by the type size?'</p></comment><comment id="13167387" author="celestin" created="Mon, 12 Dec 2011 07:14:22 +0000"><p>Hello,<br/>
this might be a silly question, but I was wondering about the nature of the data collected in your matrix. Is it "experimental"? In my case, I often have huge matrices, but all coefficients are generated procedurally, which calls for implementations where the matrix is <b>not</b> stored. <tt>o.a.c.m.linear.RealLinearOperator</tt> was recently added to CM in order to fullfill this need, together with iterative solvers. Not sure if that would be of any help to you; besides, this is a very new feature, which would need to be extended.</p>

<p>As for me, I was initially adverse to your proposal, because <tt>floats</tt> are really ugly regarding precision. I am now only half adverse, <b>as long as all internal calculations are carried out in double precision</b>.</p></comment><comment id="13169041" author="ninedus" created="Wed, 14 Dec 2011 03:13:35 +0000"><p>Hi Sébastien,</p>

<p>I also agree with you on the downside of float - ugly precision and its workaround. <br/>
Just like your case, my huge matrices can be generated procedurally, which means no need to store the matrix. I just felt the diversity (or flexibility) of the choice between the matrix dimension and the type size might benefit us (the developers who are using the library). In this way, for some small problems, small enough to test against the full matrices with float type but not possible with double type, we can test the fully generated matrices with float type. "double" type sometimes does not allow me to test these matrices because the maximum java heap size I could specify under 32-bit OS is somewhere between 1.3G and 1.4G and any attempt over this memory limit throws an OutOfMemory exception. When that happens, my current solution is to make the same classes with float type as the basis.</p>

<p>What conclusions can we draw on this issue? Well, for now, let's just assume that there were some opinions like mine regarding the fact that the basic type is fixed to "double" type. </p>
</comment><comment id="13169059" author="celestin" created="Wed, 14 Dec 2011 03:54:24 +0000"><p>Hi Dusan,<br/>
I still think that your proposal deserve that we think about it, let's see what the others say. Implementation of the class you're asking for would be fairly easy.</p>

<p>Best regards,<br/>
Sébastien</p></comment><comment id="13169327" author="erans" created="Wed, 14 Dec 2011 13:21:19 +0000"><p>If I'm not mistaken, that would mean a complete copy/paste of the code of the class (and its parents), replacing "double" by "float". This is easy to do once; not nearly as easy to maintain!<br/>
I don't think that a feature aimed only at testing "small enough" problems is a quite good reason to push in that direction. What would you be testing anyway, since for the "real" problems, you'd have to switch to Sébastien's linear operator framework?</p>

<p>Furthermore, the matrix API has been under discussion, and if we are going to modify it, it should rather be done before adding more implementations.<br/>
Another thing to be aware is that if the "float" implementation exists, users might start to ask for other classes in the "linear" package to be converted (e.g. the "...Decomposition" classes).<br/>
Further discussions (about design issues) should probably be brought over to the "dev" ML.</p>

<p>If your limitation is the Java heap memory in a 32-bit system, I'd suggest going 64-bit and buying more RAM.</p></comment><comment id="13169385" author="celestin" created="Wed, 14 Dec 2011 14:18:52 +0000"><blockquote>
<p>If I'm not mistaken, that would mean a complete copy/paste of the code of the class (and its parents), replacing "double" by "float". This is easy to do once; not nearly as easy to maintain!</p></blockquote>
<p>I think you're right: from this perspective <tt>ImageJ</tt> (to name but one) is a little bit of a nightmare (byte images, short images, float images, and so on...). It's such a shame that type parameters require Objects, and not primitive types...</p>

<blockquote>
<p>Another thing to be aware is that if the "float" implementation exists, users might start to ask for other classes in the "linear" package to be converted (e.g. the "...Decomposition" classes).</p></blockquote>
<p>Actually, I didn't think of that, Gilles, and you convinced me: I was +0 and am now -1.</p>

<p>While writing this post, I'm wondering whether using <tt>FieldMatrix</tt> could be an option. For other purposes, I have implemented doubles and floats as <tt>FieldElements</tt>. If required, I can polish up these implementations, and contribute them. However, I suspect that the memory footprint of such an object would be larger than that of a primitive <tt>double</tt> so that's probably not the answer you're expecting, Dusan.</p>

<p>To sum up, Dusan, here is another answer you might not like: you could try and implement the proposed class yourself, and use it locally, without it being included into CM? I'm sure we would be able to give you a little hand if needed (but I'm also sure it <b>won't</b> be needed).</p></comment><comment id="13169904" author="ninedus" created="Thu, 15 Dec 2011 01:19:58 +0000"><p>Hi all</p>

<p>Thank you for all considerate discussions. <br/>
Apparently, having additional set of classes just for float type has far more downsides I initially thought. You guys convinced me as well. <br/>
I can work on my own classes to work around this limitation. <br/>
Again, thank you for all. </p>

<p>Last but not the least, do you think it's worth adding 'revised simplex method' to CM for solving a typical linear programming? I've recently implemented the revised simplex method via eta factorisation though it still needs to be polished further. As you might know well, it's proven to be faster than the standard simplex method (which was contributed by Ben McCain for CM), especially for sparse large matrices. <br/>
Actually, it was the beginning of my study on CM. With the current simplex method implemented in CM, the whole tableau is being maintained in a form of a matrix, for which a large problem cannot be solved. I tried to keep my implementation in line with the current structure of 'o.a.c.m.optimization.linear', but I felt the refactoring of the class structure might be needed if the diversified version of simplex method had to be introduced.<br/>
One thing I needed initially was to compare the performance between the current simplex method in CM and the revised simplex method I implemented for a large-sized problem. For this purpose only, I can do it by rewriting the classes using float member.</p></comment><comment id="13170156" author="erans" created="Thu, 15 Dec 2011 12:35:38 +0000"><blockquote><p>Last but not the least, do you think it's worth adding 'revised simplex method' to CM for solving a typical linear programming? <span class="error">&#91;...&#93;</span></p></blockquote>

<p>Please post this question on the "dev" ML, where it will catch the attention of more people.<br/>
If what you propose "is proven to be faster", I'm sure that it will be welcome. And if its implementation would require changes in the existing API, <em>now</em> is the time to do it, before the upcoming release of CM version 3.<br/>
Thanks.</p></comment><comment id="13170687" author="ninedus" created="Fri, 16 Dec 2011 02:01:24 +0000"><p>Noted well.<br/>
Thanks</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Fri, 9 Dec 2011 16:09:23 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>219180</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>56918</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-716] BracketingNthOrderBrentSolver exceeds maxIterationCount while updating always the same boundary</title><link>https://issues.apache.org/jira/browse/MATH-716</link><project id="12310485" key="MATH">Commons Math</project><description><p>In some cases, the aging feature in BracketingNthOrderBrentSolver fails.<br/>
It attempts to balance the bracketing points by targeting a non-zero value instead of the real root. However, the chosen target is too close too zero, and the inverse polynomial approximation is always on the same side, thus always updates the same bracket.<br/>
In the real used case for a large program, I had a bracket point xA = 12500.0, yA = 3.7e-16, agingA = 0, which is the (really good) estimate of the zero on one side of the root and xB = 12500.03, yB = -7.0e-5, agingB = 97. This shows that the bracketing interval is completely unbalanced, and we never succeed to rebalance it as we always updates (xA, yA) and never updates (xB, yB).</p></description><environment/><key id="12533416">MATH-716</key><summary>BracketingNthOrderBrentSolver exceeds maxIterationCount while updating always the same boundary</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="pparraud">Pascal Parraud</reporter><labels>
                    </labels><created>Thu, 1 Dec 2011 09:36:15 +0000</created><updated>Sat, 24 Mar 2012 16:16:37 +0000</updated><resolved>Thu, 1 Dec 2011 23:25:58 +0000</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13160780" author="luc" created="Thu, 1 Dec 2011 09:55:18 +0000"><p>The problem Pascal (who works with me) describes has already been encountered during the development of the algorithm. The solution found at that time seems to be insufficient. What happens is that in order to still gain a few digits while rebalancing the bracketing interval, we base our retargeting on the currently best solution. In this case, we set targetY = -yA/16 and fail to rebalance. Using the other bracket would improve rebalancing but waste evaluations as was observed during development. So its not a perfect solution either.</p>

<p>I think a compromise would be to attempt rebalancing with a progressively more aggressive target. We could start from the current setting (i.e -1/16 of the best bracket), and if we still update the same side, move towards larger targets.</p></comment><comment id="13161241" author="luc" created="Thu, 1 Dec 2011 22:15:56 +0000"><p>The following simple test reproduces the bad behavior with a trivial function:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
    @Test
    <span class="code-keyword">public</span> void testIssue716() {
        BracketingNthOrderBrentSolver solver =
                <span class="code-keyword">new</span> BracketingNthOrderBrentSolver(1.0e-12, 1.0e-10, 0.0, 5);
        UnivariateFunction sharpTurn = <span class="code-keyword">new</span> UnivariateFunction() {
            <span class="code-keyword">public</span> <span class="code-object">double</span> value(<span class="code-object">double</span> x) {
                <span class="code-keyword">return</span> (2 * x + 1) / (1.0e9 * (x + 1));
            }
        };
        <span class="code-object">double</span> result = solver.solve(100, sharpTurn, -0.9999999, 30, 15, AllowedSolution.RIGHT_SIDE);
        Assert.assertEquals(0, sharpTurn.value(result), solver.getFunctionValueAccuracy());
        Assert.assertTrue(sharpTurn.value(result) &gt;= 0);
        Assert.assertEquals(-0.5, result, 1.0e-10);
    }
</pre>
</div></div>
<p>The test fails with TooManyEvaluationsException. In fact, only the right side of the bracketing interval is updated and very slowly decreases from 15.0 to 14.999677603318897 while the left side of the bracketing interval is stuck at -0.9999999.</p></comment><comment id="13161293" author="luc" created="Thu, 1 Dec 2011 23:25:58 +0000"><p>Fixed in subversion repository as of r1209307.</p>

<p>Thanks for the report.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Thu, 1 Dec 2011 09:55:18 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>219144</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60280</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-715] PascalDistribution returns wrong values of mean and variance</title><link>https://issues.apache.org/jira/browse/MATH-715</link><project id="12310485" key="MATH">Commons Math</project><description><p>The header of the Javadoc states that the random variable (say X) being represented by this <tt>o.a.c.m.distribution.PascalDistribution</tt> is the number of <b>failures</b>. The current Javadoc is slightly confusing, because it refers to the Wikipedia website, where the opposite convention is adopted (X is the number of <b>successes</b>) : different formulas therefore apply for the mean and variance of X. The javadoc should be made clearer, for example by inclusion of full formulas. Also the parameters differing from the Wikipedia reference should not have the same </p>
<ul>
	<li><tt>p</tt> is the probability of success in both cases: OK,</li>
	<li><tt>r</tt> is the number of failures in Wikipedia, but the number of successes in CM. This could be renamed (say) <tt>s</tt>.</li>
</ul>


<p>Finally, with the current notations of CM, the mean of X is given by <tt>mean(X) = r * (1 - p) / p</tt>, while the currently implemented formula is <tt>r * p / (1 - p)</tt>, which is actually the formula corresponding to the Wikipedia convention.</p>

<p>The following piece of code shows that the current implementation is faulty</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> class PascalDistributionDemo {
   <span class="code-keyword">public</span> <span class="code-keyword">static</span> void main(<span class="code-object">String</span>[] args) {
       <span class="code-keyword">final</span> <span class="code-object">int</span> r = 10;
       <span class="code-keyword">final</span> <span class="code-object">double</span> p = 0.2;
       <span class="code-keyword">final</span> <span class="code-object">int</span> numTerms = 1000;
       <span class="code-keyword">final</span> PascalDistribution distribution = <span class="code-keyword">new</span> PascalDistribution(r, p);
       <span class="code-object">double</span> mean = 0.;
       <span class="code-keyword">for</span> (<span class="code-object">int</span> k = numTerms - 1; k &gt;= 0; k--) {
           mean += k * distribution.probability(k);
       }
       <span class="code-comment">// The following prints 40.00000000000012
</span>       <span class="code-object">System</span>.out.println(<span class="code-quote">"Estimate of the mean = "</span> + mean);
       <span class="code-comment">// The following prints 2.5
</span>       <span class="code-object">System</span>.out.println(<span class="code-quote">"CM implementation = "</span> +
                          distribution.getNumericalMean());
       <span class="code-comment">// The following prints 2.5
</span>       <span class="code-object">System</span>.out.println(<span class="code-quote">"r * p / (1 - p) = "</span> + (r * p / (1 - p)));
       <span class="code-comment">// The following prints 40.0
</span>       <span class="code-object">System</span>.out.println(<span class="code-quote">"r * (1 - p) / p = "</span> + (r * (1 - p) / p));
   }
}
</pre>
</div></div></description><environment/><key id="12533064">MATH-715</key><summary>PascalDistribution returns wrong values of mean and variance</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="celestin">Sébastien Brisard</assignee><reporter username="celestin">Sébastien Brisard</reporter><labels>
                    </labels><created>Tue, 29 Nov 2011 03:56:11 +0000</created><updated>Sun, 18 Mar 2012 09:26:32 +0000</updated><resolved>Tue, 6 Dec 2011 08:19:06 +0000</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13163427" author="celestin" created="Tue, 6 Dec 2011 08:19:06 +0000"><p>Fixed in <tt>r1210359</tt>.</p></comment><comment id="13232229" author="celestin" created="Sun, 18 Mar 2012 09:26:32 +0000"><p>Fixed in 3.0.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>218792</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60281</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-714] init methods for event handler and stap handler in ODE</title><link>https://issues.apache.org/jira/browse/MATH-714</link><project id="12310485" key="MATH">Commons Math</project><description><p>The EventHandler interface does not provide any way to initialize the step handler at integration start.<br/>
The StepHandler interface does have this feature, but it uses a confusing  (reset) which can easily be confused with the resetState method of the EventHandler interface despite it has nothing to do with events based resets.</p>

<p>Both interfaces being often used together, it would be nice to have an init method in both interfaces, with arguments t0, y0 and t representing the integration boundaries. The init method would simply replace the reset method in the StepHandler interface and it would be a new method in the EventHandler interface.</p></description><environment/><key id="12532886">MATH-714</key><summary>init methods for event handler and stap handler in ODE</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="luc">Luc Maisonobe</reporter><labels>
                    </labels><created>Mon, 28 Nov 2011 10:06:20 +0000</created><updated>Sat, 24 Mar 2012 16:16:35 +0000</updated><resolved>Mon, 28 Nov 2011 10:22:50 +0000</resolved><version>2.1</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13158333" author="luc" created="Mon, 28 Nov 2011 10:22:50 +0000"><p>Fixed in subversion repository as of r1207054.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>218619</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60282</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-713] Negative value with restrictNonNegative</title><link>https://issues.apache.org/jira/browse/MATH-713</link><project id="12310485" key="MATH">Commons Math</project><description><p>Problem: commons-math-2.2 SimplexSolver.</p>

<p>A variable with 0 coefficient may be assigned a negative value nevertheless restrictToNonnegative flag in call:<br/>
SimplexSolver.optimize(function, constraints, GoalType.MINIMIZE, true);</p>

<p>Function<br/>
1 * x + 1 * y + 0</p>

<p>Constraints:<br/>
1 * x + 0 * y = 1</p>

<p>Result:<br/>
x = 1; y = -1;</p>

<p>Probably variables with 0 coefficients are omitted at some point of computation and because of that the restrictions do not affect their values.</p></description><environment><p>commons-math-2.2</p></environment><key id="12532737">MATH-713</key><summary>Negative value with restrictNonNegative</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="mskrzypczak">Michał Skrzypczak</reporter><labels><label>nonnegative</label><label>simplex</label><label>solver</label></labels><created>Fri, 25 Nov 2011 16:35:02 +0000</created><updated>Sat, 24 Mar 2012 16:16:30 +0000</updated><resolved>Mon, 28 Nov 2011 20:17:44 +0000</resolved><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><timeoriginalestimate seconds="10800">3h</timeoriginalestimate><timeestimate seconds="10800">3h</timeestimate><comments><comment id="13157713" author="luc" created="Sun, 27 Nov 2011 09:28:55 +0000"><p>Could you please check this against the latest development version from the subversion repository ?<br/>
There have been several fixes concerning these coefficients in simplex solver since 2.2</p></comment><comment id="13158340" author="mskrzypczak" created="Mon, 28 Nov 2011 10:53:11 +0000"><p>I'm quite busy at work now... When I'll find some time, I'll try to test it. Of course I'd be glad if one of developers would do it before <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p></comment><comment id="13158513" author="tn" created="Mon, 28 Nov 2011 15:38:17 +0000"><p>I have tested this problem with the latest trunk, and the problem still remains.</p>

<p>The attached patch handles the case of unconstrained variables that still occur in the objective function. I have also added a unit test.</p></comment><comment id="13158717" author="luc" created="Mon, 28 Nov 2011 20:17:46 +0000"><p>Fixed in subversion repository as of r1207566.</p>

<p>Patch applied directly.</p>

<p>Thanks to Michal for the report and thanks to Thomas for the patch.</p></comment></comments><attachments><attachment id="12505337" name="MATH-713.patch" size="2471" author="tn" created="Mon, 28 Nov 2011 15:38:17 +0000"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 27 Nov 2011 09:28:55 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>218470</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60283</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-712] Remove the marker "throw" clauses from "BOBYQAOptimizer"</title><link>https://issues.apache.org/jira/browse/MATH-712</link><project id="12310485" key="MATH">Commons Math</project><description><p>I added throw clauses to mark code paths that are not covered by the unit tests.<br/>
They must be commented out before release.<br/>
Ideally, we should add more unit tests...</p></description><environment/><key id="12532662">MATH-712</key><summary>Remove the marker "throw" clauses from "BOBYQAOptimizer"</summary><type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type><priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="erans">Gilles</assignee><reporter username="erans">Gilles</reporter><labels>
                    </labels><created>Thu, 24 Nov 2011 23:42:24 +0000</created><updated>Sat, 24 Mar 2012 16:16:42 +0000</updated><resolved>Thu, 16 Feb 2012 13:45:06 +0000</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13209353" author="erans" created="Thu, 16 Feb 2012 13:45:06 +0000"><p>Revision 1244975.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>218395</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60284</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-711] Merge xxxDistribution and xxxDistributionImpl in package distribution</title><link>https://issues.apache.org/jira/browse/MATH-711</link><project id="12310485" key="MATH">Commons Math</project><description><p>This ticket follows the general trend aiming at removing unnecessary interfaces. In this package, the concerned interfaces are<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>BetaDistribution</tt>: done in r1205739<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>BinomialDistribution</tt>: done in r1205963<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>CauchyDistribution</tt>: done in r1206053<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>ChiSquaredDistribution</tt>: done in r1206060<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>ExponentialDistribution</tt>: done in r1206399<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>FDistribution</tt>: done in r1206399<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>GammaDistribution</tt>: done in r1206399<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>HypergeometricDistribution</tt>: done in r1206406<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>KolmogorovSmirnovDistribution</tt>: done in r1206425<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>NormalDistribution</tt>: done in r1206421<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>PascalDistribution</tt>: done in r1206421<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>PoissonDistribution</tt>: done in r1206434<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>TDistribution</tt>: done in r1206434<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>WeibullDistribution</tt>: done in r1206434<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>ZipfDistribution</tt>: done in r1206451<br/>
Corresponding implementations <tt>xxxDistributionImpl</tt> will be renamed <tt>xxxDistribution</tt>.</p></description><environment/><key id="12532518">MATH-711</key><summary>Merge xxxDistribution and xxxDistributionImpl in package distribution</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="celestin">Sébastien Brisard</assignee><reporter username="celestin">Sébastien Brisard</reporter><labels>
                    </labels><created>Wed, 23 Nov 2011 19:13:18 +0000</created><updated>Sun, 18 Mar 2012 09:25:36 +0000</updated><resolved>Sat, 26 Nov 2011 14:59:56 +0000</resolved><version>3.0</version><due/><votes>0</votes><watches>0</watches><comments><comment id="13156240" author="sebb@apache.org" created="Wed, 23 Nov 2011 20:03:15 +0000"><p>Just trying to clarify: is the idea to just remove the interface classes, or remove the interface classes and rename the Impl classes?</p></comment><comment id="13156299" author="erans" created="Wed, 23 Nov 2011 21:33:12 +0000"><blockquote><p>remove the interface classes and rename the Impl classes?</p></blockquote>

<p>Yes.</p></comment><comment id="13157504" author="psteitz" created="Sat, 26 Nov 2011 14:48:57 +0000"><p>We need to remember to update the code in the User Guide to reflect the changes made here.</p></comment><comment id="13232227" author="celestin" created="Sun, 18 Mar 2012 09:25:36 +0000"><p>Fixed in 3.0.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 23 Nov 2011 20:03:15 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>218251</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160411</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-710] Add support for fast cryptographically secure pseudorandom number generator ISAAC</title><link>https://issues.apache.org/jira/browse/MATH-710</link><project id="12310485" key="MATH">Commons Math</project><description><p>Dear developers, please add to Commons Math library support for ISAAC random number generator. This is a free and open-source CSPRNG (see at <a href="http://burtleburtle.net/bob/rand/isaacafa.html" class="external-link" rel="nofollow">http://burtleburtle.net/bob/rand/isaacafa.html</a>). </p>

<p>Rewrited (with some improvements) Java code from original C version is attached.</p></description><environment/><key id="12532074">MATH-710</key><summary>Add support for fast cryptographically secure pseudorandom number generator ISAAC</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="filosofem">Eldar Agalarov</reporter><labels>
                    </labels><created>Sun, 20 Nov 2011 01:11:40 +0000</created><updated>Sat, 24 Mar 2012 16:16:56 +0000</updated><resolved>Thu, 1 Dec 2011 19:22:27 +0000</resolved><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><timeoriginalestimate seconds="3600">1h</timeoriginalestimate><timeestimate seconds="3600">1h</timeestimate><comments><comment id="13153647" author="filosofem" created="Sun, 20 Nov 2011 02:49:44 +0000"><p>Java code of ISAAC CSPRNG. Translated to Java from original C version with improvements.</p></comment><comment id="13153750" author="luc" created="Sun, 20 Nov 2011 09:32:36 +0000"><p>Hi Eldar, thanks for the proposal.<br/>
Could you please update the patch so it meets Apache Commons Math checkstyle configuration (Apache header, one statement per line, curly braces around while bodies, javadoc) and add some reference test cases ?<br/>
I see you have put an effort on initialization, for example with the golden ratio and shuffling. Does this imply the sequence generated by this implementation is different from the sequence generated by the original algorithm from the same input ? Is it possible to use compatible inputs in your implementation and the original sequence ?</p></comment><comment id="13154093" author="filosofem" created="Mon, 21 Nov 2011 09:57:53 +0000"><p>Hi dear Luc! Thank you for message.<br/>
I will do as you requested. The reference tests are ready - I'll post them soon, too.<br/>
I did not make any changes to the algorithm. I just added the full seeding feature (reference version allows you to have an empty seed, which is not good) and some optimizations, which does not change the logic of the algorithm.</p></comment><comment id="13157443" author="filosofem" created="Sat, 26 Nov 2011 11:49:32 +0000"><p>Algorithm and reference test is attached.</p></comment><comment id="13158703" author="luc" created="Mon, 28 Nov 2011 20:01:52 +0000"><p>Fixed in subversion repository as of r1207554.</p>

<p>Patch applied with minor changes in javadoc (added javadoc for all methods, moved author to pom file as per Apache Commons policy).</p>

<p>Thanks for the report and for the patch.</p></comment><comment id="13160840" author="filosofem" created="Thu, 1 Dec 2011 11:52:02 +0000"><p>Thank you Luc!</p>

<p>SVN patch files with minor changes added.</p></comment><comment id="13160856" author="filosofem" created="Thu, 1 Dec 2011 12:30:01 +0000"><p>Patch files added with minor changes</p></comment><comment id="13161061" author="luc" created="Thu, 1 Dec 2011 19:22:27 +0000"><p>New patch applied as of r1209198.</p>

<p>Thanks again.</p></comment></comments><attachments><attachment id="12505309" name="ISAACRandom.java" size="7743" author="filosofem" created="Mon, 28 Nov 2011 08:12:15 +0000"/><attachment id="12505757" name="ISAACRandom.java.patch" size="17059" author="filosofem" created="Thu, 1 Dec 2011 11:52:28 +0000"/><attachment id="12505190" name="ISAACTest.java" size="36535" author="filosofem" created="Sat, 26 Nov 2011 11:50:45 +0000"/><attachment id="12505759" name="ISAACTest.java.patch" size="75101" author="filosofem" created="Thu, 1 Dec 2011 11:52:45 +0000"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>4.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 20 Nov 2011 09:32:36 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>217810</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60285</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-709] BigFraction percentageValue does BigInteger divide.</title><link>https://issues.apache.org/jira/browse/MATH-709</link><project id="12310485" key="MATH">Commons Math</project><description><p>integer divide of 1/2 returns 0</p></description><environment/><key id="12531883">MATH-709</key><summary>BigFraction percentageValue does BigInteger divide.</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="bmilton">Brent D. Milton</reporter><labels>
                    </labels><created>Fri, 18 Nov 2011 03:17:03 +0000</created><updated>Sat, 24 Mar 2012 16:16:26 +0000</updated><resolved>Fri, 18 Nov 2011 07:43:31 +0000</resolved><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13152708" author="luc" created="Fri, 18 Nov 2011 07:43:31 +0000"><p>Fixed in subversion repository as of r1203516.</p>

<p>I have also added the percentage method to Fraction.</p>

<p>Thanks for the report.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Fri, 18 Nov 2011 07:43:31 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>217619</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60286</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-708] Add method "representableDelta" in class "Precision"</title><link>https://issues.apache.org/jira/browse/MATH-708</link><project id="12310485" key="MATH">Commons Math</project><description><p>Cf. <a href="http://www.mail-archive.com/dev@commons.apache.org/msg26683.html" class="external-link" rel="nofollow">this post</a> on the "dev" ML.</p></description><environment/><key id="12531789">MATH-708</key><summary>Add method "representableDelta" in class "Precision"</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="erans">Gilles</assignee><reporter username="erans">Gilles</reporter><labels>
                    </labels><created>Thu, 17 Nov 2011 13:20:50 +0000</created><updated>Sat, 24 Mar 2012 16:16:39 +0000</updated><resolved>Mon, 23 Jan 2012 11:28:56 +0000</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13152075" author="erans" created="Thu, 17 Nov 2011 14:34:15 +0000"><p>Proposed code committed in revision 1203205.<br/>
Comments?</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>217525</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60287</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-707] Naming confusion</title><link>https://issues.apache.org/jira/browse/MATH-707</link><project id="12310485" key="MATH">Commons Math</project><description><p>This issue was raised in <a href="http://markmail.org/thread/4h6omyqsik65rcgv" class="external-link" rel="nofollow">this thread</a> on the "dev" ML.<br/>
It proposes to consistently  classes/interfaces that refer to number types (e.g. "Real", "Complex", ...) and structure (e.g. "Scalar", "Vectorial", ...), with "Real" and "Scalar" components in names being assumed (thus, not to be included in the ).</p>

<p>For example, for the "Univariate..." interfaces (in package "analysis"), the proposal is to operate the following renaming:</p>
<ul>
	<li><tt>UnivariateRealFunction</tt> -&gt; <tt>UnivariateFunction</tt></li>
	<li><tt>UnivariateRealVectorialFunction</tt> -&gt; <tt>UnivariateVectorFunction</tt></li>
	<li><tt>UnivariateMatrixFunction</tt> -&gt; <tt>UnivariateMatrixFunction</tt></li>
</ul>


<p>Similar changes are in order in the package "optimization" (where "Real" is sometimes included in the name and sometimes not, or used instead of "Scalar").</p></description><environment/><key id="12531642">MATH-707</key><summary>Naming confusion</summary><type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="erans">Gilles</assignee><reporter username="erans">Gilles</reporter><labels><label>api-change</label></labels><created>Wed, 16 Nov 2011 16:30:07 +0000</created><updated>Sat, 24 Mar 2012 16:16:30 +0000</updated><resolved>Tue, 14 Feb 2012 00:25:51 +0000</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13158048" author="erans" created="Sun, 27 Nov 2011 22:20:54 +0000"><p>Changed <tt>...UnivariateRealFunction</tt> to <tt>...UnivariateFunction</tt> (revision 1206867).</p></comment><comment id="13158063" author="erans" created="Sun, 27 Nov 2011 22:41:29 +0000"><p>Changed <tt>...MultivariateRealFunction</tt> to <tt>...MultivariateFunction</tt> (revision 1206889).</p></comment><comment id="13158883" author="erans" created="Mon, 28 Nov 2011 22:43:43 +0000"><p>Changed <tt>...MultivariateVectorialFunction</tt> to <tt>...MultivariateVectorFunction</tt> (revision 1207671).</p></comment><comment id="13158893" author="erans" created="Mon, 28 Nov 2011 22:53:38 +0000"><p>Changed <tt>...UnivariateVectorialFunction</tt> to <tt>...UnivariateVectorFunction</tt> (revision 1207675).</p></comment><comment id="13166084" author="erans" created="Fri, 9 Dec 2011 11:15:38 +0000"><p>Changed <tt>BaseAbstractScalarOptimizer</tt> to <tt>BaseAbstractMultivariateOptimizer</tt> (revision 1212332).</p></comment><comment id="13166100" author="erans" created="Fri, 9 Dec 2011 11:34:17 +0000"><p>Changed "...SimpleBounds..." (r1212336).</p></comment><comment id="13166117" author="erans" created="Fri, 9 Dec 2011 12:01:09 +0000"><p>Changed "...RealOptimizer" (r1212344, r1212373 and r1212377).</p></comment><comment id="13166123" author="erans" created="Fri, 9 Dec 2011 12:22:58 +0000"><p>Changed "...VectorialOptimizer" (r1212361 and r1212371).</p></comment><comment id="13166137" author="erans" created="Fri, 9 Dec 2011 13:01:18 +0000"><p>Changed "...Univariate...Optimizer" (r1212385).</p></comment><comment id="13191122" author="erans" created="Mon, 23 Jan 2012 11:33:41 +0000"><p>The same changes must still be performed in package "solvers".</p></comment><comment id="13191149" author="erans" created="Mon, 23 Jan 2012 13:34:46 +0000"><blockquote><p>The same changes must still be performed in package "solvers".</p></blockquote>

<p>Done in revision 1234784.</p></comment><comment id="13193858" author="erans" created="Thu, 26 Jan 2012 14:23:48 +0000"><p><tt>BivariateRealFunction</tt> and <tt>TrivariateRealFunction</tt> (in package "analysis") must be renamed.</p></comment><comment id="13194698" author="erans" created="Fri, 27 Jan 2012 13:23:36 +0000"><p><tt>BivariateRealFunction</tt> renamed in r1236676.</p></comment><comment id="13195256" author="erans" created="Sat, 28 Jan 2012 00:07:11 +0000"><p><tt>TrivariateRealFunction</tt> renamed in r1236932.</p></comment><comment id="13195869" author="erans" created="Sun, 29 Jan 2012 23:03:05 +0000"><p>"Real" to be suppressed in the names of the interpolator classes (package "o.a.c.m.analysis.interpolation").</p></comment><comment id="13196798" author="erans" created="Tue, 31 Jan 2012 08:56:37 +0000"><p>Done in r1238279.</p></comment><comment id="13198299" author="erans" created="Wed, 1 Feb 2012 23:11:16 +0000"><p>Revision 1239390:</p>
<ul>
	<li><tt>UnivariateRealIntegrator</tt> renamed to <tt>UnivariateIntegrator</tt></li>
	<li><tt>UnivariateRealIntegratorImpl</tt> to <tt>BaseAbstractUnivariateIntegrator</tt></li>
</ul>


<p>Concerning the second point, discussed on the ML, I propose that the decision to drop "Base" and/or "Abstract" be postponed to after 3.0 since there are other occurrences of a similar situation (e.g. in package "o.a.c.m.optimization").</p></comment><comment id="13203584" author="erans" created="Wed, 8 Feb 2012 13:36:13 +0000"><p>In the "o.a.c.m.optimization" package, I propose to change the following:</p>
<ul>
	<li><tt>RealPointValuePair</tt> -&gt; <tt>Pair&lt;double[], Double&gt;</tt></li>
	<li><tt>VectorialPointValuePair</tt> -&gt; <tt>Pair&lt;double[], double[]&gt;</tt></li>
	<li><tt>SimpleRealPointChecker</tt> <b>and</b> <tt>SimpleVectorialPointChecker</tt> -&gt; <tt>SimplePointChecker&lt;P extends Pair&lt;double[], Object&gt;&gt;</tt><br/>
where current instantiations will be replaced by
	<ul>
		<li><tt>SimpleRealPointChecker</tt> -&gt; <tt>SimplePointChecker&lt;Pair&lt;double[], Double&gt;&gt;</tt></li>
		<li><tt>SimpleVectorialPointChecker</tt> -&gt; <tt>SimplePointChecker&lt;Pair&lt;double[], double[]&gt;</tt></li>
	</ul>
	</li>
	<li><tt>SimpleScalarValueChecker</tt> -&gt; <tt>SimpleValueChecker</tt></li>
	<li><tt>SimpleVectorialValueChecker</tt> -&gt; <tt>SimpleVectorValueChecker</tt></li>
</ul>


<p>What do you think?</p></comment><comment id="13203613" author="celestin" created="Wed, 8 Feb 2012 13:57:50 +0000"><p>I like that. S.</p></comment><comment id="13203712" author="luc" created="Wed, 8 Feb 2012 16:23:13 +0000"><p>I don't like the lack of symmetry for SimpleXxxValueChecker with respect to the point checkers.<br/>
If we want to go for simpler name, then we could probably also merge SimpleScalarValueChecker and SimpleVectorialValueChecker into SimpleValueChecker&lt;Object&gt;.</p></comment><comment id="13203738" author="erans" created="Wed, 8 Feb 2012 16:52:10 +0000"><p>The lack of symmetry is inherent in the check: For "SimplePointChecker", the check is the same (on the "point", a <tt>double[]</tt>), whatever the type of "value"; for the 2 "value" checkers the types used to check are different (<tt>double[]</tt> vs <tt>Double</tt>).<br/>
The idea was certainly not to bypass the Java strong type-checking system: Having the <tt>Object</tt> type in the "value" part of the <tt>Pair</tt> (in "SimplePointChecker") is because it is <em>not</em> used!</p>

<p>The proposal will make it clearer which type is the "point" and which is the "value" because it will be explicit (through the instantiation of the generic type arguments).</p></comment><comment id="13204416" author="luc" created="Thu, 9 Feb 2012 10:04:26 +0000"><p>OK then, sorry for the misunderstanding.</p></comment><comment id="13206566" author="erans" created="Mon, 13 Feb 2012 00:05:31 +0000"><p>Done as of revision 1243370.</p>

<p>Instead of removing <tt>RealPointValuePair</tt> and <tt>VectorialPointValuePair</tt>, I've just renamed them <tt>PointValuePair</tt> and <tt>PointVectorValuePair</tt> (according to the convention agreed on here) and made them subclasses of <tt>Pair</tt>. This is needed in order to be able to keep the old semantics of "getPoint" and "getValue" which returned copies of the stored data; by using the <tt>Pair</tt> directly, we can only return a reference to the "key" and "value". Personally, I think that it shouldn't be a problem in this context (the pair is just used to check convergence, and probably discarded afterwards: the optimizer will instantiates another pair in the next iteration...).<br/>
So, proceeding with a semantic change ("getKey" would replace "getPointRef" and "getValue" would replace "getValueRef"; the current "getPoint" and "getValue", returning copies, would disappear)?</p></comment><comment id="13206891" author="erans" created="Mon, 13 Feb 2012 14:10:21 +0000"><p>Interface <tt>VectorialConvergenceChecker</tt> deleted in revision 1243521.</p></comment><comment id="13207390" author="erans" created="Tue, 14 Feb 2012 00:25:51 +0000"><p>Current state is considered satisfactory.</p></comment><comment id="13208956" author="erans" created="Wed, 15 Feb 2012 23:26:35 +0000"><p>A forgotten change: <tt>UnivariateRealOptimizer</tt> renamed to <tt>UnivariateOptimizer</tt> in revision 1244787.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 8 Feb 2012 13:57:50 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>217378</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60288</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-706] Bad interaction between step handlers and events detectors that reset state in ODE integrators</title><link>https://issues.apache.org/jira/browse/MATH-706</link><project id="12310485" key="MATH">Commons Math</project><description><p>During ODE integration, when en event detector attempts to reset a state, if there are also step handlers<br/>
associated with the integrator, the reset state is not called with the state at event time, but may be called with some other state. The time provided always correspond to the real event time (and hence is inconsistent with the state).</p></description><environment/><key id="12531198">MATH-706</key><summary>Bad interaction between step handlers and events detectors that reset state in ODE integrators</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="luc">Luc Maisonobe</reporter><labels>
                    </labels><created>Fri, 11 Nov 2011 23:33:33 +0000</created><updated>Sat, 24 Mar 2012 16:16:31 +0000</updated><resolved>Fri, 11 Nov 2011 23:40:33 +0000</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13148844" author="luc" created="Fri, 11 Nov 2011 23:40:33 +0000"><p>Fixed in subversion repository as of r1201105.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>216935</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60289</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-705] DormandPrince853 integrator leads to revisiting of state events</title><link>https://issues.apache.org/jira/browse/MATH-705</link><project id="12310485" key="MATH">Commons Math</project><description><p>See the attached ReappearingEventTest.java. It has two unit tests, which use either the DormandPrince853 or the GraggBulirschStoer integrator, on the same ODE problem. It is a problem starting at time 6.0, with 7 variables, and 1 state event. The state event was previously detected at time 6.0, which is why I start there now. I provide and end time of 10.0. Since I start at the state event, I expect to integrate all the way to the end (10.0). For the GraggBulirschStoer this is what happens (see attached ReappearingEventTest.out). For the DormandPrince853Integerator, it detects a state event and stops integration at 6.000000000000002.</p>

<p>I think the problem becomes clear by looking at the output in ReappearingEventTest.out, in particular these lines:</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>computeDerivatives: t=6.0                  y=[2.0                 , 2.0                 , 2.0                 , 4.0                 , 2.0                 , 7.0                 , 15.0                ]
(...)
g                 : t=6.0                  y=[1.9999999999999996  , 1.9999999999999996  , 1.9999999999999996  , 4.0                 , 1.9999999999999996  , 7.0                 , 14.999999999999998  ]
(...)
final result      : t=6.000000000000002    y=[2.0000000000000013  , 2.0000000000000013  , 2.0000000000000013  , 4.000000000000002   , 2.0000000000000013  , 7.000000000000002   , 15.0                ]
</pre>
</div></div>

<p>The initial value of the last variable in y, the one that the state event refers to, is 15.0. However, the first time it is given to the g function, the value is 14.999999999999998. This value is less than 15, and more importantly, it is a value from the past (as all functions are increasing), <b>before</b> the state event. This makes that the state event re-appears immediately, and integration stops at 6.000000000000002 because of the detected state event.</p>

<p>I find it puzzling that for the DormandPrince853Integerator the y array that is given to the first evaluation of the g function, has different values than the y array that is the input to the problem. For GraggBulirschStoer is can be seen that the y arrays have identical values.</p></description><environment><p>Commons Math trunk, Java 6, Linux</p></environment><key id="12530878">MATH-705</key><summary>DormandPrince853 integrator leads to revisiting of state events</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="dhendriks">Dennis Hendriks</reporter><labels>
                    </labels><created>Wed, 9 Nov 2011 13:29:25 +0000</created><updated>Sat, 24 Mar 2012 16:16:54 +0000</updated><resolved>Sun, 27 Nov 2011 14:34:04 +0000</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13147039" author="dhendriks" created="Wed, 9 Nov 2011 13:31:35 +0000"><p>The Java unit tests that show the problem, and the console output they give, as described in the issue description.</p></comment><comment id="13147240" author="luc" created="Wed, 9 Nov 2011 19:57:08 +0000"><p>The reason for this strange behavior is that g function evaluations are based on the integrator-specific interpolator.</p>

<p>Each integration method has its specific algorithm and preserve a rich internal data set. From this data set, it is possible to build an interpolator which is specific to the integrator and in fact share part of the data set (they reference the same arrays). So integrator and interpolator are tightly bound together.</p>

<p>For embedded Runge-Kutta methods like Dormand-Prince 8(5,3), this data set corresponds to one state vector value and several state vector derivatives sampled throughout the step. When the step is accepted after error estimation, the state value is set to the value at end of step and the interpolator is called. So the equations of the interpolator are written in such a way interpolation is backward: we start from the end state and roll back to beginning of step. This explains why when we roll all the way back to step start, we may find a state that is not exactly the one we started from, due to both the integration order and interpolation order.</p>

<p>For Gragg-Bulirsch-Stoer, the data set corresponds to one state vector value and derivatives at several orders, all taken at step middle point. When the step is accepted after error estimation, the interpolator is called before the state value is set to the value at end of step and. So the equations of the interpolator are written in such a way interpolation is forward: we start from the start state and go on towards end of step. This explains why when we go all the way to step end, we may find a state that is not exactly the one that will be used for next step, due to both the integration order and interpolation order.</p>

<p>So one integrator type is more consistent at step start and has more error at step end, while the other integrator has a reversed behavior.</p>

<p>In any case, the interpolation that is used (and in fact the integration data set it is based upon) are not error free. The error is related to step size.</p>

<p>We could perhaps rewrite some interpolators by preserving both start state s(t<span class="error">&#91;k&#93;</span>) and end state s(t<span class="error">&#91;k+1&#93;</span>) and switching between two hal model as follows:<br/>
  i(t) = s(t<span class="error">&#91;k&#93;</span>)   + forwardModel(t<span class="error">&#91;k&#93;</span>, t)    if t &lt;= (t<span class="error">&#91;k&#93;</span> + t<span class="error">&#91;k+1&#93;</span>)/2<br/>
and<br/>
  i(t) = s(t<span class="error">&#91;k+1&#93;</span>) + backwardModel(t, t<span class="error">&#91;k+1&#93;</span>) if t &gt; (t<span class="error">&#91;k&#93;</span> + t<span class="error">&#91;k+1&#93;</span>)/2</p>

<p>This would make interpolator more consistent with integrator at both step start and step end and perhaps reduce this problem. This would however not be perfect, as it will introduce a small error at junction point. I'm not sure if it would be easy or not, we would have to review all interpolators and all integrators for that. All models are polynomial ones.</p>

<p>Note that the problem should not appear for Adams methods (when they will be considered validated ...), because in this case, it is the interpolator that is built first and the integrator is in fact an application of the interpolator at step end! So interpolator and integrator are by definition always perfectly consistent with each other.</p>

<p>What do you think ?</p>

<p>Should we let this problem alone and consider we are in the grey zone of expected numerical inaccuracy due to integration/interpolation orders or should we attempt the two half-models trick ?</p></comment><comment id="13147712" author="dhendriks" created="Thu, 10 Nov 2011 14:31:18 +0000"><blockquote><p>Should we let this problem alone and consider we are in the grey zone of expected numerical inaccuracy due to integration/interpolation orders or should we attempt the two half-models trick?</p></blockquote>

<p>I consider it important that events are properly detected, and are detected exactly once (if they occur exactly once). Therefore, in general, I think the half-models trick would be a good idea, as it is more important (to me) to have higher accuracy at the end points than in the middle. For me, the DormandPrince853Integrator is now practically useless.</p></comment><comment id="13153884" author="luc" created="Sun, 20 Nov 2011 21:44:21 +0000"><p>This issue should be fixed in subversion repository as of r1204270.</p>

<p>Could you check it works for you ? If so, I will use the same trick for other Runge-Kutta type step interpolators.</p></comment><comment id="13154054" author="dhendriks" created="Mon, 21 Nov 2011 07:46:33 +0000"><blockquote><p>This issue should be fixed in subversion repository as of r1204270. Could you check it works for you ? If so, I will use the same trick for other Runge-Kutta type step interpolators.</p></blockquote>

<p>It seems to work perfectly. Thanks!</p></comment><comment id="13157908" author="luc" created="Sun, 27 Nov 2011 14:34:04 +0000"><p>Fixed in subversion repository as of r1206723.</p>

<p>Applied same method to all Runge-Kutta based integrators.</p>

<p>Thanks for the report.</p></comment></comments><attachments><attachment id="12503077" name="ReappearingEventTest.java" size="2919" author="dhendriks" created="Wed, 9 Nov 2011 13:31:35 +0000"/><attachment id="12503078" name="ReappearingEventTest.out" size="20882" author="dhendriks" created="Wed, 9 Nov 2011 13:31:35 +0000"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 9 Nov 2011 19:57:08 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>216616</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60290</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-704] One of Variance.evaluate() methods does not work correctly</title><link>https://issues.apache.org/jira/browse/MATH-704</link><project id="12310485" key="MATH">Commons Math</project><description><p>The method org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[] values, double[] weights, double mean, int begin, int length) does not work properly. Looks loke it ignores the length parameter and grabs the whole dataset.<br/>
Similar method in Mean class seems to work.<br/>
I did not check other methods taking the part of the array; they may have the same problem.</p>

<p>Workaround: I had to shrink my arrays and use the method without the length.</p></description><environment><p>Java 1.6</p></environment><key id="12530782">MATH-704</key><summary>One of Variance.evaluate() methods does not work correctly</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="psteitz">Phil Steitz</assignee><reporter username="lilyevsky">Leonid Ilyevsky</reporter><labels>
                    </labels><created>Tue, 8 Nov 2011 23:08:28 +0000</created><updated>Sat, 24 Mar 2012 16:16:55 +0000</updated><resolved>Wed, 30 Nov 2011 06:25:55 +0000</resolved><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13157670" author="psteitz" created="Sun, 27 Nov 2011 06:01:57 +0000"><p>I can't seem to make this fail and I have added tests that would indicate that array segments are being handled properly.  Can you provide an example showing a failure?</p></comment><comment id="13158395" author="tn" created="Mon, 28 Nov 2011 12:51:28 +0000"><p>I have found a small bug wrt this bug report. The sum of the weights is calculated on the whole weight array rather than the specified sub-array [begin, begin + length).</p>

<p>See the attached patch for more details. Still need a testcase to verify that it finally addresses the original bug report.</p></comment><comment id="13159855" author="psteitz" created="Wed, 30 Nov 2011 06:25:55 +0000"><p>Good catch, Thomas.  Thanks!  Patch, with test case added, committed in r1208291.</p></comment></comments><attachments><attachment id="12505328" name="MATH-704.patch" size="610" author="tn" created="Mon, 28 Nov 2011 12:51:28 +0000"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 27 Nov 2011 06:01:57 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>216520</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60291</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-703] Splitting up the distribution hierarchy</title><link>https://issues.apache.org/jira/browse/MATH-703</link><project id="12310485" key="MATH">Commons Math</project><description><p>As discussed on the mailing list (<a href="http://apache-commons.680414.n4.nabble.com/math-Distributions-over-sample-spaces-other-than-R-tp3931349p3931349.html" class="external-link" rel="nofollow">http://apache-commons.680414.n4.nabble.com/math-Distributions-over-sample-spaces-other-than-R-tp3931349p3931349.html</a>), the distribution interfaces should be restructured.</p>

<p>The most important point is to create one root interface for each domain. There should <b>not</b> be a common super-interace because different domains require different functionality. Additionally, a super-inferface would require to parametrize the domain which makes things more complicated (e.g., "double" would have to be replaced by "Double"). Currently, Commons Math supports distributions with real domain and distributions with integer domain. Thus there will be the interfaces RealDistribution and IntegerDistribution.</p>

<p>Another point is to drop the special cases of distributions with real domain in order to simplify the structure. There won't be an interface for absolutely continuous distributions, and there won't be an interface for discrete distributions on the real domain. All the functionality required by the special cases can be defined in RealDistribution.</p></description><environment/><key id="12530765">MATH-703</key><summary>Splitting up the distribution hierarchy</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="cwinter">Christian Winter</reporter><labels>
                    </labels><created>Tue, 8 Nov 2011 20:17:08 +0000</created><updated>Sat, 24 Mar 2012 16:16:33 +0000</updated><resolved>Sat, 3 Dec 2011 15:08:10 +0000</resolved><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13156950" author="cwinter" created="Fri, 25 Nov 2011 01:08:28 +0000"><p>Here comes the patch for this issue.</p>

<p>However, there are two design points in the patch which might be worth a discussion:</p>

<p>1. Should we remove the function toRealDistribution() from (Abstract)IntegerDistribution?<br/>
=&gt; The test cases for integer distributions need to be adjusted.</p>

<p>2. Should we merge AbstractDefaultXxxDistribution into AbstractXxxDistribution?<br/>
=&gt; The methods from AbstractDefaultXxxDistribution must not be final when moved to AbstractXxxDistribution.<br/>
=&gt; The documentation of AbstractXxxDistribution must clearly state that some methods (those which were adopted from AbstractDefaultXxxDistribution) are implemented based on assumptions which might not be true for every inheriting class and thus must be overwritten in some cases.</p></comment><comment id="13156993" author="celestin" created="Fri, 25 Nov 2011 05:23:11 +0000"><p>Hi,<br/>
thanks for the patch! I'll look into it (but might need help from other committers in case of conflicts with current changes to the distribution package &#8211; see <a href="https://issues.apache.org/jira/browse/MATH-711" title="Merge xxxDistribution and xxxDistributionImpl in package distribution" class="issue-link" data-issue-key="MATH-711"><del>MATH-711</del></a>).<br/>
Sébastien</p>

<p>PS: OK Christian, I see you took care of <a href="https://issues.apache.org/jira/browse/MATH-711" title="Merge xxxDistribution and xxxDistributionImpl in package distribution" class="issue-link" data-issue-key="MATH-711"><del>MATH-711</del></a>! Thanks <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p></comment><comment id="13157001" author="celestin" created="Fri, 25 Nov 2011 06:52:50 +0000"><p>Hi Christian,<br/>
I've reviewed your patch, and have some concerns</p>
<ul>
	<li>in class <tt>AbstractRealDistribution</tt>, the mean and variance of the actual distribution is cached, which is good, but I think that nothing guarantees immutability of classes inheriting <tt>AbstractRealDistribution</tt>. For example, I might implement my own normal distribution, with <tt>setMean(double)</tt> and <tt>setVariance(double)</tt> methods, and I would then need to make sure the proper private fields in the <tt>AbstractRealDistribution</tt> are updated accordingly. While caching should be allowed for in this hierarchy of classes, I think no default implementation of <tt>getNumericalMean()</tt> and <tt>getNumericalVariance()</tt> should be provided at this stage. This might be silly, please correct me if I'm wrong. I think people raised the same concerns about the dimensions of the domain and codomain of linear operators, when I first submitted an implementation where these dimensions where stored in the base abstract class.</li>
	<li>I'm not convinced about <tt>AbstractDefaultRealDistribution</tt> and <tt>AbstractDefaultIntegerDistribution</tt>: not having them would only mean that we would need to implement one or two additional methods, with very simple (in fact, constant, as you noticed) values. So we need to compare this slight inconvenience on the one hand with the encumbrance of the class hierarchy on the other hand... And in any case, people would <b>always</b> have to refer to the Javadoc of these default implementations to make sure that what they want to implement is indeed a <tt>AbstractDefaultXxxDistribution</tt></li>
</ul>


<p>These are only my views, though, and I'm going to post an invitation on the mailing-list in order to invite others to review your work.</p></comment><comment id="13157311" author="psteitz" created="Fri, 25 Nov 2011 21:49:15 +0000"><p>I would say yes to removing toRealDistribution.  I may be missing a range of practical use cases for this, though.  How might the need for this arise in applications?  I am also +1 for merging <b>Default</b> into the children.  </p>

<p>I agree with Sebastian's first point.  Lets drop the caching support in the parent for the characteristics.  While we have agreed within <span class="error">&#91;math&#93;</span> that our distributions should be immutable, there is no guarantee that someone else might not want to implement a mutable one.</p>

<p>Sebastien's second point is what I mean be merging the <b>Default</b> into the children.</p>

<p>With those changes, I am +1 to applying the patch.  THANKS!</p></comment><comment id="13157368" author="celestin" created="Sat, 26 Nov 2011 05:13:33 +0000"><p>@Christian: <a href="https://issues.apache.org/jira/browse/MATH-711" title="Merge xxxDistribution and xxxDistributionImpl in package distribution" class="issue-link" data-issue-key="MATH-711"><del>MATH-711</del></a> is now resolved, which should make your life a lot easier.</p>

<p>Thanks again,<br/>
Sébastien</p>

<p>PS: our distributions are immutable, yes, but not their potential children. See eg <tt>GammaDistributionImpl</tt>: none of the accessors are final.</p></comment><comment id="13157961" author="cwinter" created="Sun, 27 Nov 2011 18:41:39 +0000"><p>Thanks for the comments. I'm going to prepare a new patch based on them. I appreciate removing the caching support for mean and variance (thanks for the point with mutable distributions) as well as the method <tt>toRealDistribution()</tt>. When preparing the first version of the patch, I just wanted to retain the old code/functionality in some form in order to have a discussion basis which doesn't drop anything tacitly.<br/>
I will move "Default" to its children as there are two votes for it. I don't have a preference on another possibility (keeping "Default" or moving it to the parents).</p></comment><comment id="13161947" author="cwinter" created="Sat, 3 Dec 2011 00:09:37 +0000"><p>Here is the new patch <a href="https://issues.apache.org/jira/browse/MATH-703" title="Splitting up the distribution hierarchy" class="issue-link" data-issue-key="MATH-703"><del>MATH-703</del></a>_patch2.zip which replaces the first patch.</p>

<p>I removed the unnecessary "implements Serializable" statements from the distribution implementations because this assurance is already made in the abstract distribution classes.</p></comment><comment id="13162056" author="celestin" created="Sat, 3 Dec 2011 06:20:45 +0000"><p>Patch committed in <tt>r1209836</tt>. Thanks Christian! I think you can resolve this issue, now.</p></comment></comments><attachments><attachment id="12505049" name="MATH-703_patch.zip" size="14148" author="cwinter" created="Fri, 25 Nov 2011 01:08:28 +0000"/><attachment id="12505946" name="MATH-703_patch2.zip" size="19428" author="cwinter" created="Sat, 3 Dec 2011 00:09:37 +0000"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Fri, 25 Nov 2011 05:23:11 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>216503</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60292</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-702] CMA-ES optimizer input sigma should not be normalized by user</title><link>https://issues.apache.org/jira/browse/MATH-702</link><project id="12310485" key="MATH">Commons Math</project><description><p>I am trying to use CMA-ES optimizer with simple boundaries.</p>

<p>It seems the inputSigma parameter should be normalized as it is checked against the <span class="error">&#91;0 - 1&#93;</span> range in the checkParameters private method and as its value defaults to 0.3 if not not set in the initializeCMA private method.</p>

<p>I would have expected this value to be in the same units as the user parameters and to be normalized as part of an internal processing step instead of relying to the user doing this. I think the method need normalized values internally, as per the encode/decode methods in the inner class FitnessFunction suggest.</p>

<p>The optimizer should accept values in the same units as the other parameters and use "encode" (or a similar function) to do the normalization. This way, normalization is considered an internal implementation detail.</p>
</description><environment/><key id="12530572">MATH-702</key><summary>CMA-ES optimizer input sigma should not be normalized by user</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="luc">Luc Maisonobe</reporter><labels>
                    </labels><created>Mon, 7 Nov 2011 13:47:38 +0000</created><updated>Sat, 24 Mar 2012 16:16:48 +0000</updated><resolved>Mon, 7 Nov 2011 14:13:43 +0000</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13145515" author="luc" created="Mon, 7 Nov 2011 14:13:43 +0000"><p>Fixed in subversion repository as of r1198741.</p></comment><comment id="13145736" author="nikolaus.hansen@lri.fr" created="Mon, 7 Nov 2011 19:46:51 +0000"><p>good point. However, if the encoding/decoding methods can be defined<br/>
coordinate-wise differently or are even non-linear (I am not aware whether<br/>
they can be or not), I am not sure you can come up with a sufficiently<br/>
reasonable and comprehensible way to apply this transformation to sigma.<br/>
sigma is a scalar and positive, so it is a different object than the<br/>
encoding/decoding methods are operating on, right?</p>

<p>The interplay between sigma and an encoding is an unfortunately delicate<br/>
part in the user interface, but I don't really see a way to make it right<br/>
<b>and</b> look entirely obvious to the user.</p>


<p>On Mon, 07 Nov 2011 14:48:51 +0100, Luc Maisonobe (Created) (JIRA)</p>



<p>&#8211; <br/>
Science is a way of trying not to fool yourself.</p>

<p>The first principle is that you must not fool yourself, and you<br/>
are the easiest person to fool. So you have to be very careful<br/>
about that. After you've not fooled yourself, it's easy not to<br/>
fool other[ scientist]s. You just have to be honest in a<br/>
conventional way after that.<br/>
                                         &#8211; Richard P. Feynman</p>

<p>Nikolaus Hansen<br/>
INRIA, Research Centre Saclay – Ile-de-France<br/>
Machine Learning and Optimization group (TAO)<br/>
University Paris-Sud (Orsay)<br/>
LRI (UMR 8623), building 490<br/>
91405 ORSAY Cedex, France<br/>
Phone: +33-1-691-56495, Fax: +33-1-691-54240<br/>
URL: <a href="http://www.lri.fr/~hansen" class="external-link" rel="nofollow">http://www.lri.fr/~hansen</a></p></comment><comment id="13145744" author="luc" created="Mon, 7 Nov 2011 19:59:51 +0000"><p>You are right.<br/>
for now, encoding/decoding is both liner only and hidden in a private inner class (FitnessFunction), so users only see simple bounds and inside these bounds the transform is linear.<br/>
For sure if we come up with a different mapping, we will need to come up with a way to define also the mapping of covariance. One way would be to rely on the Jacobian, but it would be strange to propose mapping function and requiring them to be smooth while the goal function by itself could be highly non-smooth.<br/>
So for now, the simple linear mapping seems sufficient to me, and would need improvement only if we change some internals of the class.</p></comment><comment id="13146592" author="nikolaus.hansen@lri.fr" created="Tue, 8 Nov 2011 21:51:51 +0000"><p>unfortunately, the problem already arises with a linear coordinate-wise  <br/>
mapping: which coordinate gives the unit where sigma is defined on?</p>

<p> from a practical viewpoint it is important to consider coordinate-wise  <br/>
non-linear mappings. Multidimensional mappings (e.g. with "covariance") I  <br/>
have never been able to apply successfully.</p>

<p>Cheers,<br/>
Niko</p>

<p>On Mon, 07 Nov 2011 21:00:51 +0100, Luc Maisonobe (Commented) (JIRA)  </p>



<p>&#8211; <br/>
Science is a way of trying not to fool yourself.</p>

<p>The first principle is that you must not fool yourself, and you<br/>
are the easiest person to fool. So you have to be very careful<br/>
about that. After you've not fooled yourself, it's easy not to<br/>
fool other[ scientist]s. You just have to be honest in a<br/>
conventional way after that.<br/>
                                     &#8211; Richard P. Feynman</p>

<p>Nikolaus Hansen<br/>
INRIA, Research Centre Saclay – Ile-de-France<br/>
Machine Learning and Optimization group (TAO)<br/>
University Paris-Sud (Orsay)<br/>
LRI (UMR 8623), building 490<br/>
91405 ORSAY Cedex, France<br/>
Phone: +33-1-691-56495, Fax: +33-1-691-54240<br/>
URL: <a href="http://www.lri.fr/~hansen" class="external-link" rel="nofollow">http://www.lri.fr/~hansen</a></p></comment><comment id="13146597" author="luc" created="Tue, 8 Nov 2011 21:57:18 +0000"><p>Does "coordinate-wise" means that each coordinate has its dedicated sigma ?<br/>
If so, this is what I have set up. The sigma vector was already an array with the same dimension as both the state vector and the lower/upper bounds, so I have simply used upper<span class="error">&#91;i&#93;</span> - lower<span class="error">&#91;i&#93;</span> as a multiplication factor for sigma<span class="error">&#91;i&#93;</span>.<br/>
Does what I did make sense ?</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Mon, 7 Nov 2011 19:46:51 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>216310</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60293</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-701] Seeding a default RNG</title><link>https://issues.apache.org/jira/browse/MATH-701</link><project id="12310485" key="MATH">Commons Math</project><description><p>In "RandomDataImpl":</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">private</span> RandomGenerator getRan() {
    <span class="code-keyword">if</span> (rand == <span class="code-keyword">null</span>) {
        rand = <span class="code-keyword">new</span> JDKRandomGenerator();
        rand.setSeed(<span class="code-object">System</span>.currentTimeMillis());
    }
    <span class="code-keyword">return</span> rand;
}
</pre>
</div></div>
<p>The conditional branch is used by "sample()" in "AbstractContinuousDistribution".</p>

<p>When several "...Distribution" objects are instantiated in a short time interval, they are seeded with the same value.</p></description><environment/><key id="12530041">MATH-701</key><summary>Seeding a default RNG</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="erans">Gilles</assignee><reporter username="erans">Gilles</reporter><labels>
                    </labels><created>Thu, 3 Nov 2011 13:26:43 +0000</created><updated>Sat, 24 Mar 2012 16:16:47 +0000</updated><resolved>Sat, 5 Nov 2011 06:50:22 +0000</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13143287" author="mikl" created="Thu, 3 Nov 2011 16:31:22 +0000"><p>I see your point, but at the same time it might be difficult to deal with correctly. One work-around is to use the serialVersionUID field together with System.currentTimeMillis(), but I am not sure if that is a good idea nor how well it can be implemented.</p></comment><comment id="13143300" author="erans" created="Thu, 3 Nov 2011 16:43:16 +0000"><p>No, my point was that the seeding should just be removed: When several distribution objects are instantiated, we usually don't want the samples to be the same...</p></comment><comment id="13143322" author="psteitz" created="Thu, 3 Nov 2011 17:09:28 +0000"><p>I agree that there is a problem here; but I would solve it in AbstractContinuousDistribution by passing a seeded generator to the RandomDataImpl constructor.  The code above is for the default case where no generator has been supplied or set.  For sampling, a Well generator would be a better choice.</p></comment><comment id="13143559" author="erans" created="Thu, 3 Nov 2011 22:10:11 +0000"><p>IIRC we discarded the solution of passing a RNG in the distribution's constructor because the "sample" methods was construed as syntactic sugar in order to access the "RandomData" functionality from within the "...Distribution" classes.<br/>
It was also argued that people who would use this API (instead of directly instantiating a "RandomDataImpl" object) would be satisfied with a default RNG, whatever was deemed the best choice by the CM developers. Thus, if another generator is indeed better, we should just plug it in instead of the current "JDKRandomGenerator".<br/>
In the same line of argument, the possibility of seeding was also supposed to be given up in exchange for a "sample" API at the distribution level.</p>

<p>In "AbstractContinuousDistribution", we have:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">protected</span> <span class="code-keyword">final</span> RandomDataImpl randomData = <span class="code-keyword">new</span> RandomDataImpl();
</pre>
</div></div>
<p>In effect, there is no reason not to replace that statement with:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">protected</span> <span class="code-keyword">final</span> RandomDataImpl randomData = <span class="code-keyword">new</span> RandomDataImpl(<span class="code-keyword">new</span> Well44497a());
</pre>
</div></div>

<p>As as side note: I don't understand why there is a default constructor in "RandomDataImpl"; since all the methods need a RNG, it does not make much sense to allow the object to be constructed without one!</p>

<p>Second side note: Why not separate the "secure" alternatives into another implementation? There would be "RandomData" (with a "nextHexString" method) and a "SecureRandomData" (also with a "nextHexString" method, instead of the current "nextSecureHexString").</p>

<p>Back to this report's issue: The parent class "AbstractWell" seems to suffer from the same problem because the default constructor calls <tt>System.currentTimeMillis()</tt>.<br/>
We should have a look at how "java.util.Random" seeds its default instances so that they can claim (excerpt form Javadoc):</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>This constructor sets the seed of the random number generator to a value very likely to be
distinct from any other invocation of this constructor.
</pre>
</div></div></comment><comment id="13143706" author="psteitz" created="Fri, 4 Nov 2011 02:43:49 +0000"><p>+1 to changing the default in the RandomDataImpl to a Well generator (documenting this)<br/>
+1 as well to trying to find a better default seed (documenting how it works).  Harmony still belongs to us, so we can certainly look at / imitate the impl there.</p>

<p>The reason that the argumentless constructor exists is to allow users to accept the default generator. The lazy initialization idiom was chosen because in some cases, users may choose to invoke the setter instead of passing a generator as a constructor argument.  This is an older style no longer in use much in <span class="error">&#91;math&#93;</span>.  I would be OK getting rid of this - i.e., having the argumentless constructor take the hit to create a default instance.</p>

<p>-0 for separating out the secure stuff.  RandomDataImpl is an aggregate class that bundles a lot of commonly used random data generation methods.  Just as the random generator is pluggable, so is the secure random generator, which makes the class convenient to use for applications that require both kinds of random values.  I think its simpler and more convenient to bundle things as they are.  Of course, I have been using this class for a long time, so I may not be the best judge of what is simplest / easiest to use.</p></comment><comment id="13143870" author="sebb@apache.org" created="Fri, 4 Nov 2011 09:40:44 +0000"><p>If lazy init is dropped, then the rand field can be made final.</p>

<p>Can secRand be made final? This would mean dropping setSecureAlgorithm() in favour of an extra ctor.<br/>
Since secRand is not always needed, this is an argument for making the secure stuff a sub-class.<br/>
Alternatively, IODH could perhaps be used with secRand.</p></comment><comment id="13143944" author="erans" created="Fri, 4 Nov 2011 12:10:04 +0000"><ul>
	<li>From Harmony's implementation of "java.util.Random":
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> Random() {
    setSeed(<span class="code-object">System</span>.currentTimeMillis() + hashCode());
}
</pre>
</div></div></li>
</ul>


<ul>
	<li>I'd also prefer setting both RNGs at construction.<br/>
A user would have to write
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
SecureRandom secRand = SecureRandom.getInstance(algorithm, provider);
</pre>
</div></div>
<p>in his application's code, and that would make it clearer for him why and how an exception can be generated (and that CM's code is not the cause of it).</p></li>
</ul>


<ul>
	<li>I also favour a new "SecureRandomDataImpl" as a subclass of "RandomDataImpl"; the constructor would be something like:
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> SecureRandomDataImpl(SecureRandom rng) {
    <span class="code-keyword">super</span>(rng);
}
</pre>
</div></div>
<p>This would ensure that <em>all</em> the <tt>next...</tt> methods use a secure RNG, whereas currently only some of the accessors have a secure alternative (e.g. "nextGaussian" is not using "secRand"). This would be less confusing without requiring long explanations...</p></li>
</ul>
</comment><comment id="13144122" author="psteitz" created="Fri, 4 Nov 2011 16:23:33 +0000"><p>I just committed (r1197626) a) change to Well generator as default for non-secure generator b) seeding like the Harmony code.  Can we resolve this and take the refactoring discussion to the dev list?</p></comment><comment id="13144161" author="erans" created="Fri, 4 Nov 2011 16:59:29 +0000"><p>Okay for the design discussion! <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p>

<p>But don't resolve just yet.<br/>
To avoid nasty surprises, I think that the "AbstractWell" (maybe others?) should be modified so that default constructors are all seeded similarly.<br/>
"RandomDataImpl" as a "user" of the RNG should not have to worry how to best seed the generator.</p></comment><comment id="13144170" author="psteitz" created="Fri, 4 Nov 2011 17:09:47 +0000"><p>I thought about changing the default seeding in AbstractWell and agree that would be a good idea.  I still like to supply the seed explicitly and document it in RandomDataImpl, though, so users of that class know exactly what they are getting by default.  There is a little wrinkle here, too that keeping the seeding expressed and documented in RandomDataImpl makes easier to keep track of.  If we ever implement hashcode in RandomDataImpl (or the Well generators), things could get messed up if it does not separate generator instances the way the system identity haschcode does.</p></comment><comment id="13144613" author="psteitz" created="Sat, 5 Nov 2011 06:50:23 +0000"><p>Changes to WELL, MersenneTwister committed in r1197896.</p></comment></comments><issuelinks><issuelinktype id="12310010"><name>Incorporates</name><outwardlinks description="incorporates"><issuelink><issuekey id="12534185">MATH-720</issuekey></issuelink></outwardlinks></issuelinktype></issuelinks><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Thu, 3 Nov 2011 16:31:22 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>215900</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60294</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-700] Alter the contract of UnivariateRealSolverUtils.bracket() to handle piecewise constant functions</title><link>https://issues.apache.org/jira/browse/MATH-700</link><project id="12310485" key="MATH">Commons Math</project><description><p>The current contract of <tt>o.a.c.m.analysis.solvers.UnivariateRealSolverUtils.bracket(UnivariateRealFunction function, double initial, double lowerBound, double upperBound, int maximumIterations)</tt> states that</p>
<blockquote>
<p>This method attempts to find two values a and b satisfying</p>
<ul>
	<li><tt>lowerBound &lt;= a &lt; initial &lt; b &lt;= upperBound</tt></li>
	<li><tt>f(a) * f(b) &lt;= 0</tt></li>
</ul>


<p>If f is continuous on <span class="error">&#91;a,b&#93;</span>, this means that a and b bracket a root of f. </p></blockquote>

<p>I don't think there is any problem with the current implementation. However, if f is constant, equal to zero on a whole interval, this implementation does not guarantee that the whole interval is bracketed. I therefore propose that the contract is changed to</p>
<ul>
	<li><tt>f(a) * f(b) &lt; 0</tt></li>
</ul>


<p>This entails only a minor correction to the <tt>bracket()</tt> method: line 267 of UnivariateRealSolverUtils currently reads<br/>
...<tt>while ((fa * fb &gt; 0.0) &amp;&amp; (numIterations &lt; maximumIterations)</tt>...<br/>
I think it would be safe to replace this line with<br/>
...<tt>while ((fa * fb &gt;= 0.0) &amp;&amp; (numIterations &lt; maximumIterations)</tt>...</p>

<p>Do you agree in principle? I'll run the current tests to check that this change is indeed safe.</p></description><environment/><key id="12529631">MATH-700</key><summary>Alter the contract of UnivariateRealSolverUtils.bracket() to handle piecewise constant functions</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="2">Won't Fix</resolution><assignee username="-1">Unassigned</assignee><reporter username="celestin">Sébastien Brisard</reporter><labels>
                    </labels><created>Tue, 1 Nov 2011 08:49:03 +0000</created><updated>Sat, 5 Nov 2011 17:21:37 +0000</updated><resolved>Sat, 5 Nov 2011 17:21:37 +0000</resolved><version>3.0</version><due/><votes>0</votes><watches>0</watches><comments><comment id="13141041" author="celestin" created="Tue, 1 Nov 2011 09:14:18 +0000"><p>With the proposed modification, the following unit test actually fails.<br/>
<tt>org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest:111</tt></p>

<p> I'll look into it.</p></comment><comment id="13141066" author="luc" created="Tue, 1 Nov 2011 10:27:33 +0000"><p>I don't agree with this change.</p>

<p>It implies that user cannot provide an interval that ends exactly at a root, they must enlarge their interval and then wait for the algorithm to reduce it back. When a root is at the boundary of a function definition interval (think about finding the root for sqrt<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/error.gif" height="16" width="16" align="absmiddle" alt="" border="0"/>), enlarging the interval is not only cumbersome, it triggers an error.</p></comment><comment id="13141069" author="celestin" created="Tue, 1 Nov 2011 10:38:49 +0000"><p>Thanks for this counter-example. This proposal actually comes from <a href="https://issues.apache.org/jira/browse/MATH-699" title="inverseCumulativeDistribution fails with cumulative distribution having a plateau" class="issue-link" data-issue-key="MATH-699"><del>MATH-699</del></a>. To solve this bug, I think I need to alter the default bracketing method. I was just wondering if this alteration would be useful to other parts of CM. It it's not, then I can define a custom protected bracketing method within <tt>AbstractDistribution</tt>. </p></comment><comment id="13141103" author="erans" created="Tue, 1 Nov 2011 12:29:17 +0000"><p>We could create a new "bracket" method with an additional boolean parameter to indicate whether "strict" bracketing is required.</p></comment><comment id="13142824" author="celestin" created="Thu, 3 Nov 2011 04:23:50 +0000"><p>Attached file <tt><a href="https://issues.apache.org/jira/browse/MATH-700" title="Alter the contract of UnivariateRealSolverUtils.bracket() to handle piecewise constant functions" class="issue-link" data-issue-key="MATH-700"><del>MATH-700</del></a>-bracketStrict.diff</tt> proposes a new method, <tt>bracketStrict</tt>, to handle the case considered here.<br/>
Do you think there is any use for this method (otherwise, I'll declare it as a protected method in <tt>ContinuousDistribution</tt>).</p></comment><comment id="13144753" author="celestin" created="Sat, 5 Nov 2011 17:21:37 +0000"><p>This issue is closed because the proposed improvement is too specific.</p></comment></comments><attachments><attachment id="12502097" name="MATH-700-bracketStrict.diff" size="6501" author="celestin" created="Thu, 3 Nov 2011 04:23:50 +0000"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 1 Nov 2011 10:27:33 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>215490</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160412</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-699] inverseCumulativeDistribution fails with cumulative distribution having a plateau</title><link>https://issues.apache.org/jira/browse/MATH-699</link><project id="12310485" key="MATH">Commons Math</project><description><p>This bug report follows <a href="https://issues.apache.org/jira/browse/MATH-692" title="Cumulative probability and inverse cumulative probability inconsistencies" class="issue-link" data-issue-key="MATH-692"><del>MATH-692</del></a>. The attached unit test fails. As required by the definition in <a href="https://issues.apache.org/jira/browse/MATH-692" title="Cumulative probability and inverse cumulative probability inconsistencies" class="issue-link" data-issue-key="MATH-692"><del>MATH-692</del></a>, the lower-bound of the interval on which the cdf is constant should be returned. This is not so at the moment.</p></description><environment/><key id="12529630">MATH-699</key><summary>inverseCumulativeDistribution fails with cumulative distribution having a plateau</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="celestin">Sébastien Brisard</assignee><reporter username="celestin">Sébastien Brisard</reporter><labels>
                    </labels><created>Tue, 1 Nov 2011 08:35:34 +0000</created><updated>Sun, 18 Mar 2012 09:27:52 +0000</updated><resolved>Mon, 5 Dec 2011 06:50:36 +0000</resolved><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13144256" author="celestin" created="Fri, 4 Nov 2011 19:13:06 +0000"><h4><a name="Shouldthisbeconsideredasanerror%3F"></a>Should this be considered as an error?</h4>
<p>Please have a look to lines <a href="http://commons.apache.org/math/xref/org/apache/commons/math/distribution/AbstractContinuousDistribution.html#103" class="external-link" rel="nofollow">103-108</a> of <tt>AbstractContinuousDistribution</tt>.<br/>
I think the logics is flawed, I have the feeling that <tt>rootFindingFunction.value(lowerBound)</tt> should be compared with <tt>solver.getFunctionValueAccuracy()</tt>, and not with <tt>getSolverAbsoluteAccuracy()</tt>. The problem is that <tt>AbstractContinuousDistribution</tt> should then have a method called <tt>getSolverFunctionValueAccuracy()</tt>. Should I add one?<br/>
Thanks for your comments,<br/>
Sébastien</p></comment><comment id="13144740" author="psteitz" created="Sat, 5 Nov 2011 16:21:04 +0000"><p>I agree that the wrong solver property is being used. I would say yes, add the property, possibly protected.  Assuming protected access, it might even be better to just expose the solver itself.</p></comment><comment id="13144761" author="cwinter" created="Sat, 5 Nov 2011 17:46:23 +0000"><p>I also agree that the mentioned code lines use the wrong property. But I'm not sure whether the bracketing step is necessary and efficient at all. Maybe it's better to pass lowerBound and upperBound directly to the solving step because the solver will shrink the interval efficiently. The bracketing algorithm, however, is very inefficient in expanding the interval around the initial point to a bracket (At least the current implementation is inefficient as it makes linear steps. Geometrical steps would be better for distribution functions, but valid brackets might be missed for non-monotonic functions.). The only problem I see for the solver is if lowerBound or upperBound is infinite. The JavaDoc of getDomainLowerBound() and getDomainUpperBound() just could mention that an implementation must return a finite value.</p>

<p>I'm fine with protected access to the solver.</p></comment><comment id="13144927" author="celestin" created="Sun, 6 Nov 2011 06:04:45 +0000"><p>I think Christian has a point here. The bracketing step is superfluous. I'll propose a new impl getting rid of it, so that you can decide whether or not to restore it.</p>

<p>However, we cannot forbit getDomainLowerBound() and getDomainUpperBound() to return <tt>Double.POSITIVE_INFINITY</tt> (for <tt>p == 1</tt>) or <tt>Double.NEGATIVE_INFINITY</tt> (for <tt>p == 0</tt>). I will prepare something along these lines.</p></comment><comment id="13144933" author="psteitz" created="Sun, 6 Nov 2011 06:12:45 +0000"><p>Be careful eliminating the bracketing step.  IIRC it is in there to resolve a bug involving some corner case.  In theory, the unit tests should pick up any regressions, but it would be a good idea to review the commit logs and issue reports for this class before ripping out the bracketing step.</p></comment><comment id="13144939" author="celestin" created="Sun, 6 Nov 2011 06:34:29 +0000"><p>OK, thanks for the tip. I will do so.<br/>
Sébastien</p>

<p>Additional note: Phil, you are referring to r141391. This was 7 years, 3 months ago, you do have a good memory! Will look into that more closely.</p></comment><comment id="13145211" author="celestin" created="Mon, 7 Nov 2011 04:04:06 +0000"><p>Hi,<br/>
I thought I would keep you up to date with the problems I'm facing at the moment.</p>

<p>First of all, I see no smart way to check that for sure, <tt>inverseCumulativeProbability(0)</tt> (resp. <tt>inverseCumulativeProbability(1)</tt>) should return <tt>Double.NEGATIVE_INFINITY</tt> (resp. <tt>Double.POSITIVE_INFINITY</tt>). What could be done would be to test for a neighbouring value, and check that the cumulative probability is slightly above zero (resp. below one). But this makes no sense, because the only neighbouring value which would make sense would be <tt>+/-Double.MAX_VALUE</tt>, and this surely return 0.0 or 1.0. So this is my first problem.</p>

<p>The way I see things is as follows: users might have no clue about the inverse cumulative probability, but they <b>must</b> know the values of this inverse for p = 0 and p = 1. So I would suggest to change the contract of <tt>getInitialDomain(p)</tt>. I would make clear in the javadoc that <tt>getInitialDomain(p)</tt> should return <tt>Double.NEGATIVE_INFINITY</tt> <b>if, and only if</b> <tt>inverseCumulativeProbability(0) == Double.NEGATIVE_INFINITY</tt>. Similarly, <tt>getInitialDomain(p)</tt> should return <tt>Double.POSITIVE_INFINITY</tt> <b>if, and only if</b> <tt>inverseCumulativeProbability(1) == Double.POSITIVE_INFINITY</tt>.</p>

<p>My second problem is to check for the presence of plateaux, consistently with finite precision. Here is my initial idea. I first define the two absolute accuracies</p>
<ul>
	<li><tt>dx = getSolverAbsoluteAccuracy()</tt>,</li>
	<li><tt>dp = getSolverFunctionValueAccuracy()</tt>.</li>
</ul>


<p>Then, if <tt>x</tt> is the root found by the solver: we do have <tt>cumulativeProbability( x ) == p</tt> (within a specified accuracy). The problem is to check whether there is a <b>smaller</b> value which also satisfies this requirement (in which case, the smallest such value must be returned).</p>

<p>My initial test was <tt>cumulativeProbability(x - dx) == p</tt>. Then, I tried <tt>FastMath.abs(cumulativeProbability(x - dx) - p) &lt;= dp</tt>. Although more consistent with finite precision, this is not fully satisfactory, because in simple cases (where there is no plateau), it might lead to the solver moving to a somewhat less good point. At the very least, it would lead to additional iterations... to finally get back to the initial point <tt>x</tt>.</p>

<p>Then, I thought of checking for <b>exact</b> nullity of the pdf at x. The problem is that the pdf might have discontinuities, in which case, this simple test might fail (if <tt>x</tt> turns out to be the higher-end of the plateau, and there is a slope discontinuity here).</p>

<p>So, I'm now back to this test: <tt>cumulativeProbability(x - dx) == cumulativeProbability( x )</tt>. Please note</p>
<ul>
	<li><b>exact</b> equality test,</li>
	<li>I'm no longer testing for equality with the target value <tt>p</tt>, but with its estimate <tt>cumulativeProbability( x )</tt>.</li>
</ul>


<p>I would be grateful for some feedback on these issues. Also, I think it is clear that</p>
<ul>
	<li>my code will require careful reviewers!!!</li>
	<li>it won't be completely fool-proof.</li>
</ul>
</comment><comment id="13145544" author="psteitz" created="Mon, 7 Nov 2011 15:11:10 +0000"><p>My inclination would be to keep the implementation in the base class as simple as possible, documenting what it does and pushing the responsibility for dealing with plateaus in the distribution to the implementations that have these.  I don't think any of the currently implemented real distributions have this problem.  Correct?  </p>

<p>The invariant you are proposing for when to return infinities for domain lower and upper bounds would make sense if these were intended to be the bounds of support for the distribution, but this is not what these properties represent.  They are initial guesses for where to start when trying to bracket a root.  That means they have to be values that can be fed into the cumulative probability function. I may be missing the point that you and Christian are making, but the basic problem is that as Christian points out, we always need to start with finite values and that is what led to the somewhat inelegant construct of the domain lower/upper bounds as guesses and the need to do the bracketing step.  The code you reference is trying to do the bracketing, starting with the domain upper and lower bounds as initial guesses.  </p>

<p>Remember to consider convergence problems when the actual parameter to inverse cum is close to or exactly equal to 0 or 1.  Per the comment in the code above the test that uses (or should use) the function value absolute accuracy, if the distribution has bounded support and the argument is 0 or 1, bracketing will fail.</p>
</comment><comment id="13145718" author="celestin" created="Mon, 7 Nov 2011 19:18:01 +0000"><blockquote>
<p>I don't think any of the currently implemented real distributions have this problem. Correct?</p></blockquote>
<p>Maybe I misunderstood, but in <a href="https://issues.apache.org/jira/browse/MATH-692" title="Cumulative probability and inverse cumulative probability inconsistencies" class="issue-link" data-issue-key="MATH-692"><del>MATH-692</del></a> asked for a more precise definition of <tt>inverseCumulativeProbability</tt> as inf</p>
{x in R | P(X&lt;=x) &gt;= p}
<p>. If we exclude distribution with plateaus, I think that the current implementation is  satisfactory (but for the use of the wrong tolerance I've already pointed out). But it was agreed that this implementation should be made more robust. So what was it exactly that needed improvement? What do you want me to do on this method?</p>

<blockquote>
<p>They are initial guesses for where to start when trying to bracket a root. That means they have to be values that can be fed into the cumulative probability function.</p></blockquote>
<p>I'm aware of that, but the current solver does fail when <tt>inverseCumulativeProbability(0)</tt> should return -inf, or <tt>inverseCumulativeProbability(1)</tt> should return +inf. See for example the implementation of <tt>NormalDistributionImpl</tt>.</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
    <span class="code-keyword">public</span> <span class="code-object">double</span> inverseCumulativeProbability(<span class="code-keyword">final</span> <span class="code-object">double</span> p)
     {
        <span class="code-keyword">if</span> (p == 0) {
            <span class="code-keyword">return</span> <span class="code-object">Double</span>.NEGATIVE_INFINITY;
        }
        <span class="code-keyword">if</span> (p == 1) {
            <span class="code-keyword">return</span> <span class="code-object">Double</span>.POSITIVE_INFINITY;
        }
        <span class="code-keyword">return</span> <span class="code-keyword">super</span>.inverseCumulativeProbability(p);
    }
</pre>
</div></div>
<p>So currently, people who want to implement a distribution must be aware of the fact that the default implementation of <tt>inverseCumulativeProbability</tt> <b>must</b> be overriden. This rather unusual fact should be made clear in the Javadoc, unless a workaround can be thought of. I agree the one I proposed was far from perfect.</p>

<blockquote>
<p>Remember to consider convergence problems when the actual parameter to inverse cum is close to or exactly equal to 0 or 1.</p></blockquote>
<p>Thank you for pointing this out earlier. I do keep this important point in mind. But again, if we do not widen the scope of this method, I don't see what is required of me (appart from some cosmetic alterations to the Javadoc).</p></comment><comment id="13146060" author="psteitz" created="Tue, 8 Nov 2011 03:22:50 +0000"><p>I am sorry, Sebastien.  I am not being very helpful here. As I dig deeper into the code and archaeology, I am having a hard time seeing how we can really improve the default impl without knowledge of the underlying distribution.  I agree with you that we should clearly document its limitations, though, and fix the javadoc contracts everywhere to be correct and consistent.  The default impl was never really intended to be universal - just a simple solver-based impl that would work for well-behaved distributions. The normal distribution example above points to a slight improvement that could now be done.  When that code was written, we had yet to define the supportLowerBound and supportUpperBound properties.  Now that we have those, the test in the normal dist case could be moved up into the default impl, using the getters on the distribution for the return values.</p>

<p>By all means if you can find a way to deal with plateaus or otherwise improve robustness of the default impl, go for it.  In particular, if you can come up with a better way to set up the solver, possibly eliminating the domainLower/upperBound methods, that would be great.  It has always seemed a little ugly to me that we had to implement these methods for every distribution just so we could get initial guesses for the inverse cum solver.</p>

</comment><comment id="13146108" author="celestin" created="Tue, 8 Nov 2011 06:54:41 +0000"><p>I agree with you: however careful we are, the default implementation will never be perfect, and it should be clearly stated in the javadoc. I see (but haven't dug into it yet) there is an abstract test for continuous distributions. I'll try and make sure that most possible cases of failure of <tt>inverseCumulativeProbability</tt> are tested in this abstract framework, so that users could be <b>strongly</b> encouraged to implement this test for their very specific distribution.</p>

<p>I do think we can widen a little bit the scope of the default implementation. I actually worked towards eliminating the bracketing step, but you convinced me that it should be the other way round: can we eliminate the domainLower/upperBound methods (which I agree are very efficient, but a little bit of a pain in the neck...).</p>

<p>Here is an idea I'm going to check (keeping in mind the accuracy issues you've already pointed at)</p>
<ul>
	<li>for distributions with bounded support: maybe the bounds (possibly shifted if the bounds are not inclusive) of the support itself could be used as an initial bracketting range.</li>
	<li>for distributions with unbounded support: start from <b>any</b> (? or a better guess? average value?) point in the support, and do bracketting. However, I do agree with Christian, we should use geometric progressions in this case, instead of arithmetic progressions. This would probably lead to a very large interval, but it would provide us an interval more quickly, and the solver itself would probably be quite good at narrowing it very quickly. I can try some monitoring on this issue.</li>
</ul>


<p>As for plateaus, I think what I'm currently working on is not too inefficient. I'm sure it's not <b>the</b> answer (which is, anyway, 42 <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/>), but I'm struggling to fail this algo... Don't worry, I'll break it. I think that what I've done entails very little additional cost (maybe one more evaluation of cumulativeProbability) for distributions <b>without</b> plateau, but I need to check that (we do not want to pay a heavy price for plateaus, since most of our distributions do not have one, as you rightly pointed out).</p>

<p>I would be grateful for any idea on these topics, and will keep you informed. All the best for now,<br/>
Sébastien</p></comment><comment id="13146614" author="cwinter" created="Tue, 8 Nov 2011 22:38:17 +0000"><p>Much discussion has happened here in the recent days. Thanks!</p>

<p>Now I realize that it is hard to get rid of the bracketing step in the case of unbounded support. I guess a default bracket of <tt><span class="error">&#91;-Double.MAX_VALUE;+Double.MAX_VALUE&#93;</span></tt> for  <tt>0&lt;p&lt;1</tt> isn't a good idea for such cases. Maybe we can move the bracketing step into a <tt>getBracket(double p)</tt> method (only <tt>0&lt;p&lt;1</tt> needs to be handled), which makes use of the support bounds where possible and performs an bracketing algorithm only as last option. For specific distributions this method can be overridden by providing brackets through precomputed cdf-values or clever estimations, which removes using an bracketing algorithm at all. Such a method allows to delete <tt>getDomainLowerBound</tt>/<tt>getDomainUpperBound</tt>/<tt>getInitialDomain</tt>. However, this replacement doesn't remove the pain caused by <tt>getDomainLowerBound</tt>/<tt>getDomainUpperBound</tt>/<tt>getInitialDomain</tt> completely. It is just a little mitigation to this pain as <tt>getBracket</tt> doesn't have to be overridden (though it should be overridden to increase performance unless <tt>inverseCumulativeProbability</tt> is overridden entirely).</p>

<p>For the plateau issue I unfortunately don't see a way to avoid implementing a modified solver so that it approximates the solution by moving together <tt>x0</tt> and <tt>x1</tt> satisfying <tt>P(X&lt;=x0) &lt; p</tt> and <tt>P(X&lt;=x1) &gt;= p</tt>.</p></comment><comment id="13146627" author="cwinter" created="Tue, 8 Nov 2011 22:56:15 +0000"><p>A different idea for solving the bracketing issue: We could solve the inverse cdf calculation by transforming the domain <span class="error"></span> to <span class="error">&#91;-1;+1&#93;</span> with arctan. More precisely, we could do the first iterations of the solving step on the transformed domain, and we can go back to original domain as soon as +/-1 aren't interval limits any more.</p></comment><comment id="13146739" author="psteitz" created="Wed, 9 Nov 2011 03:06:02 +0000"><p>Interesting idea.  Worth playing with.  One more archaeological fact that occurred to me is that the current setup with domain upper / lower bounds used in bracketing was developed before we required either mean or variance from distributions.  We now have getNumericalMean and getNumericalVariance.  When these both exist and are finite, inequalities such as Chebyshev's might be useful in setting up brackets.</p></comment><comment id="13146814" author="celestin" created="Wed, 9 Nov 2011 06:54:43 +0000"><blockquote>
<p>A different idea for solving the bracketing issue: We could solve the inverse cdf calculation by transforming the domain <span class="error">&#91;-∞;+∞&#93;</span> to <span class="error">&#91;-1;+1&#93;</span> with arctan. More precisely, we could do the first iterations of the solving step on the transformed domain, and we can go back to original domain as soon as +/-1 aren't interval limits any more.</p></blockquote>

<p>Is it not a "disguised" bracketting step, with a somewhat more clever way of sampling the reals (as opposed to arithmetic progression)? In this case, maybe it would be just as simple to perform a bracketting step, with <b>geometric</b> progression (as proposed by Christian), when one of the bounds of the support is not finite.</p>

<blockquote>
<p>only 0&lt;p&lt;1 needs to be handled</p></blockquote>
<p>I guess you mean by that that what should be done is</p>
<ul>
	<li>return <tt>getSupportLowerBound()</tt> when <tt>p == 0</tt>,</li>
	<li>return <tt>getSupportUpperBound()</tt> when <tt>p == 1</tt>.</li>
</ul>


<p>This means that the contract of <tt>getSupportLowerBound()</tt>/<tt>getSupportUpperBound()</tt> <b>requires</b> that the returned values are actually the <b>best</b> bounds on the support. While I have no problem with this sound requirement, I don't think this is currently stated clearly in the Javadoc, but I'm no native english speaker...</p></comment><comment id="13147315" author="cwinter" created="Wed, 9 Nov 2011 21:40:34 +0000"><p>The Javadoc of <tt>getSupportLowerBound()</tt>/<tt>getSupportUpperBound()</tt> in fact needs to be sharpened. I didn't see this before. If I didn't overlook anything, all current implementations already return the best bounds.</p>

<p>Regarding the bracketing issue there are now several ideas (thanks for the Chebyshev idea, Phil). But I don't have a preference for a particular solution which can be built from these ideas. Thus, Sébastien, just choose a strategy which you consider to be beneficial.</p></comment><comment id="13154924" author="celestin" created="Tue, 22 Nov 2011 07:33:05 +0000"><p>Hi,<br/>
please find attached a proposal for a new implementation of <tt>inverseCumulativeDistribution</tt>. For the time being, this new implementation is implemented as a static (utility) class, as I would like you to check the logics before committing it.<br/>
Highlights are</p>
<ul>
	<li>use of Chebyshev's inequality (thanks Phil) to bracket the root</li>
	<li>in cases where the random variable has no mean or no variance, and is not compactly supported, the method falls back to geometric bracketing, instead of arithmetic bracketing.</li>
	<li>removal of calls to <tt>getDomainLowerBound(p)</tt>, <tt>getDomainUpperBound(p)</tt>, <tt>getInitialDomain(p)</tt>.</li>
</ul>


<p>The attached class has a main() method which runs some performance checks (new impl vs old impl). The report on my machine (Intel Core i5 M540 @2.53GHz, 4Go RAM) tends to indicate that the new implementation is slightly quicker than the old one.</p>

<p>Commented out is also a plateau detection which proves fairly robust (although I'm sure we can fail it), but induces a slight decrease of the overall performances. I'm just wondering if we should set a flag in the constructor, to indicate whether or not plateaux should be detected ? Alternatively, we could remove plateau detection altogether, and clearly state in the javadoc that the default impl <b>fails</b> with plateaux.</p>

<p>Looking forward to reading your comments,<br/>
Sébastien</p></comment><comment id="13156897" author="cwinter" created="Thu, 24 Nov 2011 20:48:35 +0000"><p>Thanks for the patch, Sébastien.<br/>
There is no need for a plateaux detection flag in the constructor. While dealing with the distribution classes and interfaces, I saw the method isSupportConnected(). This method will tell whether plateaux might occur because a plateau in the cdf corresponds to a gap in the support.</p></comment><comment id="13157310" author="psteitz" created="Fri, 25 Nov 2011 21:43:01 +0000"><p>Wow, we can really improve the code when we put our heads together <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p>

<p>Great observation by Christian - we can switch on plateau detection iff isSupportConnected is false.  Otherwise, I would say the "new" implementation is good to go.  I would also be happy to celebrate dropping all of the getXxx(p) methods, which are not needed any more.</p>

<p>We can all thank Mikkel, btw, for suggesting a while back that we add the numerical mean, variance and connected support properties.  Came in very handy here!</p></comment><comment id="13157369" author="celestin" created="Sat, 26 Nov 2011 05:18:03 +0000"><blockquote>
<p>Great observation by Christian - we can switch on plateau detection iff isSupportConnected is false. Otherwise, I would say the "new" implementation is good to go.</p></blockquote>
<p>Yes, it is indeed a very neat way to proceed. I'll make the changes once Christian's patch for <a href="https://issues.apache.org/jira/browse/MATH-703" title="Splitting up the distribution hierarchy" class="issue-link" data-issue-key="MATH-703"><del>MATH-703</del></a> is committed.</p>

<blockquote>
<p>I would also be happy to celebrate dropping all of the getXxx(p) methods, which are not needed any more.</p></blockquote>
<p>Good! So I do not need to post on the mailing list on this issue?</p>

<blockquote>
<p>We can all thank Mikkel, btw, for suggesting a while back that we add the numerical mean, variance and connected support properties. Came in very handy here!</p></blockquote>
<p>I would also thank the guy who suggested Chebyshev's inequality (I wonder who that is <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.gif" height="16" width="16" align="absmiddle" alt="" border="0"/>). Overall, I personnally enjoyed working on this issue, as it truly was team work.<br/>
Sébastien</p></comment><comment id="13162169" author="celestin" created="Sat, 3 Dec 2011 16:28:12 +0000"><p>New implementation (+ unit tests) committed in <tt>r1209942</tt>. <tt>getDomainLowerBound(double)</tt>, <tt>getDomainUpperBound(double)</tt> and <tt>getInitialDomain(double p)</tt> have now become superfluous: removed in <tt>r1209963</tt>.</p>

<p>The same kind of approach might probably be adopted for <tt>IntegerDistribution</tt>. I suggest we look into it before we resolve this issue.</p></comment><comment id="13162458" author="cwinter" created="Sun, 4 Dec 2011 20:14:46 +0000"><p>Yes, we can get rid of <tt>IntegerDistribution.getDomainLowerBound(double)</tt> and <tt>IntegerDistribution.getDomainUpperBound(double)</tt>. I will do this in the reimplementation of <tt>IntegerDistribution.inverseCumulativeProbability(double)</tt> based on <a href="https://issues.apache.org/jira/browse/MATH-692" title="Cumulative probability and inverse cumulative probability inconsistencies" class="issue-link" data-issue-key="MATH-692"><del>MATH-692</del></a>.</p>

<p>Using Chebyshev's inequality also can be adopted. But a plateau detection step is not needed there because <tt>IntegerDistribution</tt> requires its own solver for finding the inverse cumulative probability anyway. Thus this solver can apply the correct inequalities for finding the "right" quantile automatically. (Using the "correct" inequalies for the solver in <tt>RealDistribution</tt> wasn't an option because an existing general purpose solver is utilized there.)</p></comment><comment id="13162638" author="celestin" created="Mon, 5 Dec 2011 06:50:36 +0000"><p>Thanks Christian for your help: this issue can therefore be considered as "solved".</p></comment><comment id="13163297" author="celestin" created="Tue, 6 Dec 2011 02:59:13 +0000"><p>I've realized that boundary cases (<tt>p == 0</tt> and <tt>p == 1</tt>) are now handled correctly: concrete instances of <tt>AbstractRealDistribution</tt> no longer need to override this method, which are removed in rev <tt>1210756</tt>.</p></comment><comment id="13232231" author="celestin" created="Sun, 18 Mar 2012 09:27:52 +0000"><p>Fixed in 3.0.</p></comment></comments><attachments><attachment id="12501747" name="AbstractContinuousDistributionTest.java" size="2936" author="celestin" created="Tue, 1 Nov 2011 08:36:50 +0000"/><attachment id="12504710" name="inv-cum-new-impl.zip" size="31792" author="celestin" created="Tue, 22 Nov 2011 07:33:05 +0000"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sat, 5 Nov 2011 16:21:04 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>215489</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60295</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-698] Bounds in "BOBYQAOptimizer" and "CMAESOptimizer"</title><link>https://issues.apache.org/jira/browse/MATH-698</link><project id="12310485" key="MATH">Commons Math</project><description><p>The bounds should be passed as arguments to the "optimize" method, instead of through the constructor.<br/>
This is now possible, following the resolution of <a href="https://issues.apache.org/jira/browse/MATH-697" title="Allow simple bounds to be specified for the (scalar) optimizers classes" class="issue-link" data-issue-key="MATH-697"><del>MATH-697</del></a>.</p></description><environment/><key id="12529350">MATH-698</key><summary>Bounds in "BOBYQAOptimizer" and "CMAESOptimizer"</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="erans">Gilles</reporter><labels><label>api-change</label></labels><created>Sat, 29 Oct 2011 12:29:44 +0100</created><updated>Sat, 24 Mar 2012 16:16:49 +0000</updated><resolved>Sun, 19 Feb 2012 00:05:56 +0000</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13139411" author="erans" created="Sat, 29 Oct 2011 20:36:24 +0100"><p>"BOBYQAOptimizer" modified in revision 1194989.</p></comment><comment id="13150492" author="erans" created="Tue, 15 Nov 2011 13:51:46 +0000"><p>Attached modified version of "CMAESOptimizer" and "CMAESOptimizerTest" to take into account the new way to handle bounds (base class "BaseAbstractSimpleBoundsScalarOptimizer" contains the "boiler-plate" code).</p>

<p>Unfortunately, the changes generate many test failures...</p></comment><comment id="13150496" author="erans" created="Tue, 15 Nov 2011 13:53:56 +0000"><p>Dietmar,</p>

<p>Could you please have a look at the changes in the attached files? Hopefully, you'll find what I did wrong. Thanks.</p></comment><comment id="13211166" author="erans" created="Sun, 19 Feb 2012 00:05:37 +0000"><p>The code does not support mixing finite and infinite bounds: A workaround has been introduced in revision 1290909. We want might to try and remove that limitation but it requires non trivial changes to the code, and my initial attempt led many unit tests failing. Anyways, it can be done later, as a new issue.</p></comment></comments><attachments><attachment id="12503737" name="CMAESOptimizer.java.NEW" size="52168" author="erans" created="Tue, 15 Nov 2011 13:51:46 +0000"/><attachment id="12503738" name="CMAESOptimizerTest.java.NEW" size="24171" author="erans" created="Tue, 15 Nov 2011 13:51:46 +0000"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>215210</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60296</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-697] Allow simple bounds to be specified for the (scalar) optimizers classes</title><link>https://issues.apache.org/jira/browse/MATH-697</link><project id="12310485" key="MATH">Commons Math</project><description><p>As proposed <a href="http://markmail.org/message/fncosz5blie47m6j" class="external-link" rel="nofollow">here</a>, the API needs an "optimize" method that will accommodate algorithms such as BOBYQA and CMA-ES.</p></description><environment/><key id="12529237">MATH-697</key><summary>Allow simple bounds to be specified for the (scalar) optimizers classes</summary><type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="erans">Gilles</assignee><reporter username="erans">Gilles</reporter><labels><label>api-change</label></labels><created>Fri, 28 Oct 2011 12:51:40 +0100</created><updated>Sat, 24 Mar 2012 16:16:30 +0000</updated><resolved>Fri, 28 Oct 2011 21:45:00 +0100</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13138731" author="erans" created="Fri, 28 Oct 2011 21:45:00 +0100"><p>Done in revision 1190556.</p></comment><comment id="13150403" author="erans" created="Tue, 15 Nov 2011 11:50:37 +0000"><p>Revision 1202140 contains the new interface and abstract class that allow to specify whether an optimizer supports (simple bounds) constraints or not.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>215097</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60297</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-696] "addToEntry" and "multiplyEntry" are abstract in "AbstractRealMatrix"</title><link>https://issues.apache.org/jira/browse/MATH-696</link><project id="12310485" key="MATH">Commons Math</project><description><p>Methods "addToEntry" and "multiplyEntry" can have a default implementation instead of being declared "abstract".</p></description><environment/><key id="12528765">MATH-696</key><summary>"addToEntry" and "multiplyEntry" are abstract in "AbstractRealMatrix"</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="erans">Gilles</assignee><reporter username="erans">Gilles</reporter><labels>
                    </labels><created>Tue, 25 Oct 2011 22:24:23 +0100</created><updated>Sat, 24 Mar 2012 16:16:49 +0000</updated><resolved>Tue, 25 Oct 2011 22:55:45 +0100</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13135460" author="erans" created="Tue, 25 Oct 2011 22:55:45 +0100"><p>Revision 1188941.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>214625</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60298</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-695] Incomplete reinitialization with some events handling</title><link>https://issues.apache.org/jira/browse/MATH-695</link><project id="12310485" key="MATH">Commons Math</project><description><p>I get a bug with event handling: I track 2 events that occur in the same step, when the first one is accepted, it resets the state but the reinitialization is not complete and the second one becomes unable to find its way.<br/>
I can't give my context, which is rather large, but I tried a patch that works for me, unfortunately it breaks the unit tests.</p></description><environment/><key id="12528715">MATH-695</key><summary>Incomplete reinitialization with some events handling</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="pparraud">Pascal Parraud</reporter><labels>
                    </labels><created>Tue, 25 Oct 2011 17:52:29 +0100</created><updated>Sat, 24 Mar 2012 16:16:57 +0000</updated><resolved>Wed, 26 Oct 2011 10:09:54 +0100</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13135233" author="pparraud" created="Tue, 25 Oct 2011 17:57:32 +0100"><p>this patch resolves my problem but breaks some unit tests.</p></comment><comment id="13135351" author="luc" created="Tue, 25 Oct 2011 20:26:20 +0100"><p>As I work with Pascal (we share the same office at work), I have seen how the bug occurs and am trying to set up a simplified test case that reproduces it. It seems that there is a combination of conditions that is not handled properly. We have seen the bug occurring when both following conditions are true:</p>

<ul>
	<li>there are several events occurring in the same integration step</li>
	<li>when one of the earliest events occurrence is triggered, it returns RESET_DERIVATIVES</li>
</ul>


<p>In this case, the acceptStep method in AbstractIntegrator returns early from inside the while loop and the remaining events that where expected to occur later on are left in an inconsistent state with respect to the integrator. The t0 and g0 fields in the corresponding EventState instance still contain values from the beginning of the step, they do not reflect the fact the event has been triggered. This implies that when next step is started with the updated derivatives, evaluateStep tries to catch up from t0 to current t and calls the g function at times that do not belong to the current step.</p>

<p>Up to now, I have not been able to set up a simplified test case that exhibits this, but I'm working on it.</p></comment><comment id="13135798" author="luc" created="Wed, 26 Oct 2011 09:24:00 +0100"><p>The attached test case reproduces the error.</p></comment><comment id="13135823" author="luc" created="Wed, 26 Oct 2011 10:09:54 +0100"><p>Fixed in subversion repository as of r1189086.</p>

<p>The fix is different from the proposed patch, it directly updates the events when the step truncation occurs, thus preventing even transient inconsistency.</p>

<p>Thanks for the report and for the patch.</p></comment></comments><attachments><attachment id="12500719" name="events.patch" size="1097" author="pparraud" created="Tue, 25 Oct 2011 17:57:32 +0100"/><attachment id="12500839" name="test-case-MATH-695.patch" size="2977" author="luc" created="Wed, 26 Oct 2011 09:24:00 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 25 Oct 2011 19:26:20 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>214575</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60299</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-694] Remove XxMoment statistics from the public API</title><link>https://issues.apache.org/jira/browse/MATH-694</link><project id="12310485" key="MATH">Commons Math</project><description><p>The Second, Third and FourthMoment statistics in o.a.c.m.stat.descriptive.moment are non-standard and are really just there to make updating more efficient in other statistics that embed them and the aggregates.  The naming is misleading and I am not sure there is much independent value to these statistics, so I propose that we change them to have package scope in 3.0.  I am happy to close this as WONT_FIX if anyone has objections.</p></description><environment/><key id="12528384">MATH-694</key><summary>Remove XxMoment statistics from the public API</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="psteitz">Phil Steitz</reporter><labels>
                    </labels><created>Sat, 22 Oct 2011 17:03:27 +0100</created><updated>Sat, 24 Mar 2012 16:16:35 +0000</updated><resolved>Sun, 27 Nov 2011 03:16:54 +0000</resolved><version>1.0</version><version>1.1</version><version>1.2</version><version>2.0</version><version>2.1</version><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13157645" author="psteitz" created="Sun, 27 Nov 2011 03:16:54 +0000"><p>Classes made package scope in r1206658.</p></comment><comment id="13157650" author="psteitz" created="Sun, 27 Nov 2011 04:06:31 +0000"><p>I did not reduce visibility of SecondMoment, because that statistic is used in several places outside its package. If anyone feels strongly that it should be renamed, please reopen and we can do that.  The new name I considered was "TotalSumOfSquares,"  That is a little misleading though, because it sits in the hierarchy between the now hidden First and Third moments and carries an embedded FirstMoment.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>214244</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60300</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-693] StatUtils, DescriptiveStatistics and SummaryStatistics should expose population variance</title><link>https://issues.apache.org/jira/browse/MATH-693</link><project id="12310485" key="MATH">Commons Math</project><description><p>Javadoc should be clearer that what is returned in the bias-corrected variance (rather than just linking to the Variance javadoc).  StatUtils should add variance methods that take a boolean bias correction parameter and DescriptiveStatistics and SummaryStatistics should either expose a setter or similarly add methods with boolean arguments.  We need to remember to fix the synchronized versions as well.  Patches welcome!</p></description><environment/><key id="12528382">MATH-693</key><summary>StatUtils, DescriptiveStatistics and SummaryStatistics should expose population variance</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="psteitz">Phil Steitz</reporter><labels>
                    </labels><created>Sat, 22 Oct 2011 16:56:18 +0100</created><updated>Sat, 24 Mar 2012 16:16:38 +0000</updated><resolved>Sat, 26 Nov 2011 21:24:00 +0000</resolved><version>1.0</version><version>1.1</version><version>1.2</version><version>2.0</version><version>2.1</version><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>214242</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60301</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-692] Cumulative probability and inverse cumulative probability inconsistencies</title><link>https://issues.apache.org/jira/browse/MATH-692</link><project id="12310485" key="MATH">Commons Math</project><description><p>There are some inconsistencies in the documentation and implementation of functions regarding cumulative probabilities and inverse cumulative probabilities. More precisely, '&lt;' and '&lt;=' are not used in a consistent way.</p>

<p>Besides I would move the function inverseCumulativeProbability(double) to the interface Distribution. A true inverse of the distribution function does neither exist for Distribution nor for ContinuosDistribution. Thus we need to define the inverse in terms of quantiles anyway, and this can already be done for Distribution.</p>

<p>On the whole I would declare the (inverse) cumulative probability functions in the basic distribution interfaces as follows:</p>

<p>Distribution:</p>
<ul class="alternate" type="square">
	<li>cumulativeProbability(double x): returns P(X &lt;= x)</li>
	<li>cumulativeProbability(double x0, double x1): returns P(x0 &lt; X &lt;= x1) <span class="error">&#91;see also 1)&#93;</span></li>
	<li>inverseCumulativeProbability(double p):<br/>
  returns the quantile function inf
{x in R | P(X&lt;=x) &gt;= p}
<p> <span class="error">&#91;see also 2), 3), and 4)&#93;</span></p></li>
</ul>


<p>1) An aternative definition could be P(x0 &lt;= X &lt;= x1). But this requires to put the function probability(double x) or another cumulative probability function into the interface Distribution in order be able to calculate P(x0 &lt;= X &lt;= x1) in AbstractDistribution.<br/>
2) This definition is stricter than the definition in ContinuousDistribution, because the definition there does not specify what to do if there are multiple x satisfying P(X&lt;=x) = p.<br/>
3) A modification could be defined for p=0: Returning sup</p>
{x in R | P(X&lt;=x) = 0}
<p> would yield the infimum of the distribution's support instead of a mandatory -infinity.<br/>
4) This affects issue <a href="https://issues.apache.org/jira/browse/MATH-540" title="AbstractIntegerDistribution.inverseCumulativeProbability(...) Bug" class="issue-link" data-issue-key="MATH-540"><del>MATH-540</del></a>. I'd prefere the definition from above for the following reasons:</p>
<ul class="alternate" type="square">
	<li>This definition simplifies inverse transform sampling (as mentioned in the other issue).</li>
	<li>It is the standard textbook definition for the quantile function.</li>
	<li>For integer distributions it has the advantage that the result doesn't change when switching to "x in Z", i.e. the result is independent of considering the intergers as sole set or as part of the reals.</li>
</ul>


<p>ContinuousDistribution:<br/>
nothing to be added regarding (inverse) cumulative probability functions</p>

<p>IntegerDistribution:</p>
<ul class="alternate" type="square">
	<li>cumulativeProbability(int x): returns P(X &lt;= x)</li>
	<li>cumulativeProbability(int x0, int x1): returns P(x0 &lt; X &lt;= x1) <span class="error">&#91;see also 1) above&#93;</span></li>
</ul>
</description><environment/><key id="12527632">MATH-692</key><summary>Cumulative probability and inverse cumulative probability inconsistencies</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="cwinter">Christian Winter</reporter><labels>
                    </labels><created>Tue, 18 Oct 2011 19:01:57 +0100</created><updated>Tue, 24 Jul 2012 00:18:14 +0100</updated><resolved>Thu, 2 Feb 2012 06:45:59 +0000</resolved><version>1.0</version><version>1.1</version><version>1.2</version><version>2.0</version><version>2.1</version><version>2.2</version><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13131245" author="psteitz" created="Thu, 20 Oct 2011 02:13:06 +0100"><p>Thanks for raising this issue, Christian - especially now as we finalize the 3.0 API.</p>

<p>I am +1 for these changes.  I agree that the inf-based definition of inverse cum is more standard and we are in a position now make the change, so I say lets do it.  I am also +1 on the move of this up to the distribution interface.  The reason we did not include it there originally was that we thought we might implement distributions for which we could not define inverses.  That has not happened in the last 8 years, so I think its safe enough to push it up.</p>

<p>The code, test, user guide and doc changes for this have to be done carefully.  Patches most welcome.</p>

<p>Is everyone else OK with this change?</p></comment><comment id="13131402" author="celestin" created="Thu, 20 Oct 2011 07:09:32 +0100"><p>I have neither used nor developed this part of CM, so my view on this is of but little value. Having said that, anything improving consistency can only be desirable, especially at this stage. So I'm all for it, and will be soon available (when I'm done on SYMMLQ) for an (novice on these issues) help.</p>

<p>Sébastien</p></comment><comment id="13131407" author="mikl" created="Thu, 20 Oct 2011 07:26:53 +0100"><p>+1</p></comment><comment id="13133440" author="cwinter" created="Sat, 22 Oct 2011 18:10:35 +0100"><p>Thanks for the feedback to all. Sébastien, thanks for offering your help. If you like and find time for it, you could implement AbstractDistribution.inverseCumulativeProbability(double p).</p>

<p>I will provide some patches next week, but adjusting AbstractContinuousDistribution.inverseCumulativeProbability(double p) will take some more time.</p>

<p>After thinking a little more about the structure of the interfaces, I'd like to put the function probability(double x) to Distribution anyway (independently of the thought in point 1) above).</p>

<p>Are there any preferences on P(x0 &lt;= X &lt;= x1) or P(x0 &lt; X &lt;= x1) for cumulativeProbability(double x0, double x1)?</p></comment><comment id="13133464" author="psteitz" created="Sat, 22 Oct 2011 21:24:40 +0100"><p>I am not sure it is really makes sense to add probability(double x) to the Distribution interface.  It would have to be defined as density (referring to the distribution function) to make sense in the continuous case, since defined as p(X = x) it would in most cases be identically 0 for continuous distributions.</p>

<p>Regarding the cum definition, I am fine with P(x0 &lt; X &lt;= x1).</p></comment><comment id="13133594" author="celestin" created="Sun, 23 Oct 2011 09:39:52 +0100"><p>Happy to help on the inverse cumulative probability. You will have to be patient and forgieving with me, though, as I discover this part of CM.</p>

<p>As for the definition, I think that one of the bounds should be excluded, so that these cumulative probabilities can be summed<br/>
P(a &lt; X &lt;= c) = P(a &lt; X &lt;= b) + P(b &lt; X &lt;= c),<br/>
even in the case of discrete PDFs.</p>

<p>Whether the lower or upper bound should be excluded is another matter. I usually work with continuous pdfs, so I don't know if there is a common practice in the probability community. If there is none, I would tend to chose the following definition<br/>
P(x0 &lt;= X &lt; x1)<br/>
(sorry Phil!), because it would be consistent with the way things are usually indexed in java (a<span class="error">&#91;0&#93;</span>.. a<span class="error">&#91;a.length-1&#93;</span>). See also <tt>org.apache.commons.math.util.MultidimensionalCounter</tt>. Although this type of consistency is not an absolute requirement, I think it is nice for the user to have such simple principle: "lower bound always included, upper bound always excluded". Appart from this small point, I really have no objection to any choice.</p></comment><comment id="13133665" author="psteitz" created="Sun, 23 Oct 2011 16:22:44 +0100"><p>Have a look at the default implementation of cum(x0,x1) now in AbstractDistribution.  I think the incorrectness in the documentation there may have been what triggered Christian to raise this issue.  The equation cum(a,b) = F(b) - F(a) where F is the distribution function is natural and what the impl there is trying to do.  In the discrete case, this equation fails, however, unless you define the cum to exclude the <b>lower</b> endpoint.  That's why P(x0 &lt; X &lt;= x1) is a better definition.</p></comment><comment id="13133668" author="celestin" created="Sun, 23 Oct 2011 16:31:27 +0100"><p>OK, Phil, it makes perfect sense.</p></comment><comment id="13133718" author="cwinter" created="Sun, 23 Oct 2011 20:57:58 +0100"><p>Good, the definition of cum(x0,x1) will be P(x0 &lt; X &lt;= x1). Phil, you are right: cum(x0,x1) in AbstractDistribution was a reason for raising this issue. Another reason was cum(int x0, int x1) in AbstractIntegerDistribution.</p>

<p>The idea behind probability(double x) is in fact to define it as p(X = x) and to return 0 for continuous distributions. This function would be useful for discrete distributions not inheriting from IntergerDistribution and for distributions being composed of discrete and continuous parts.</p></comment><comment id="13133745" author="psteitz" created="Sun, 23 Oct 2011 21:59:59 +0100"><p>I guess I am OK with pushing p<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/error.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> up.  See related post to follow in commons-dev. </p></comment><comment id="13136853" author="celestin" created="Thu, 27 Oct 2011 08:07:31 +0100"><p>Hi Christian,<br/>
I've started looking into this issue. As I said, you will have to be patient with me <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.gif" height="16" width="16" align="absmiddle" alt="" border="0"/>.<br/>
I can see there already is a default implementation of <tt>AbstractContinuousDistribution.inverseCumulativeProbability</tt>. So what exactly would you like me to do? Is this implementation fragile? Would you like me to improve robustness? Provide full testing?</p>

<p>I think there might be issues when the PDF falls down to zero in a range (in which case the cum exhibits a plateau). The returned value might differ from the mathematical definition you proposed. Is this what you want me to work on? Have you already identified other issues?</p>

<p>Best regards,<br/>
Sébastien</p></comment><comment id="13138795" author="cwinter" created="Fri, 28 Oct 2011 22:36:45 +0100"><p>Hi Sébastien,</p>

<p>the problem with the plateau is indeed one issue which needs to be solved.</p>

<p>Additionally, AbstractDistribution will need an implementation of inverseCumulativeProbability. In fact both implementations should be the same except for the solver to be used. Thus inverseCumulativeProbability should be implemented just once in AbstractDistribution, and invoking the solver should be put to a separate procedure so that it can be overridden in AbstractContinuousDistribution.</p>

<p>A third point is the choice of the solvers. For AbstractDistribution we need a solver which works even for discontinuous cdfs (BisectionSolver can do the job, but maybe the implementations of the faster IllinoisSolver, PegasusSolver, BrentSolver, or another solver can cope with discontinuities, too). For AbstractContinuousDistribution it would be beneficial to use a DifferentiableUnivariateRealSolver. However, the NewtonSolver cannot be used due to uncertainty of convergence and an alternative doesn't seem to exist by now. So we have to choose one of the other solvers for now.</p>

<p>As all these points are interdependent, I guess it's best to solve them as a whole. If you like, you can do this.</p>

<p>Best Regards,<br/>
Christian</p></comment><comment id="13138835" author="cwinter" created="Fri, 28 Oct 2011 23:02:18 +0100"><p>Another point for discussion:<br/>
I'd like to introduce<br/>
getDomainBracket(double p): returns double[]<br/>
to AbstractDistribution as helper function for inverseCumulativeProbability. This allows to avoid searching a bracket where a bracket can be specified directly.<br/>
The function getDomainBracket could be made abstract (which means to remove getInitialDomain, getDomainLowerBound, and getDomainUpperBound as these functions aren't needed any more), or it could have a default implementation (according to the corresponding part of the current implementation of inverseCumulativeProbability) which uses getInitialDomain, getDomainLowerBound, and getDomainUpperBound. However, getInitialDomain, getDomainLowerBound, and getDomainUpperBound should not be abstract in the latter case. Otherwise a derived class would be forced to implement something it potentially doesn't use. Thus the functions getInitialDomain, getDomainLowerBound, and getDomainUpperBound should have default implementations which either return default values (0, -infinity, +infinity) or throw an exception saying something like "has to be implemented".</p></comment><comment id="13139105" author="celestin" created="Sat, 29 Oct 2011 05:23:08 +0100"><p>Hi Christian,</p>

<blockquote>
<p>Hi Sébastien,</p>

<p>the problem with the plateau is indeed one issue which needs to be solved.</p></blockquote>
<p>I'm working on it...</p>

<blockquote>
<p>Additionally, AbstractDistribution will need an implementation of inverseCumulativeProbability. In fact both implementations should be the same except for the solver to be used. Thus inverseCumulativeProbability should be implemented just once in AbstractDistribution, and invoking the solver should be put to a separate procedure so that it can be overridden in AbstractContinuousDistribution.</p></blockquote>
<p>OK, for now, I'm concentrating on making the current impl in <tt>AbstractContinuousDistribution</tt> more robust. The other impl should be easier.</p>

<blockquote>
<p>A third point is the choice of the solvers. For AbstractDistribution we need a solver which works even for discontinuous cdfs (BisectionSolver can do the job, but maybe the implementations of the faster IllinoisSolver, PegasusSolver, BrentSolver, or another solver can cope with discontinuities, too). For AbstractContinuousDistribution it would be beneficial to use a DifferentiableUnivariateRealSolver. However, the NewtonSolver cannot be used due to uncertainty of convergence and an alternative doesn't seem to exist by now. So we have to choose one of the other solvers for now.</p></blockquote>
<p>The current implementation uses a Brent solver. I think the solver itself is only one side of the issue. The other point is the algorithm used to bracket the solution, in order to ensure that the result is consistent with the definition of the cumprob. As for the <tt>DifferentiableUnivariateRealSolver</tt>, I'm not too sure. I guess it depends on what is meant by "continuous distribution". For me, it means that the random variable takes values in a continuous set, and possibly its distribution is defined by a density. However, in my view, nothing prevents occurences of Dirac functions, in which case the cum sum is only piecewise C1. It's all a matter of definition, of course, and I'll ask the question on the forum to check whether or not people want to allow for such a situation.</p>

<blockquote>
<p>As all these points are interdependent, I guess it's best to solve them as a whole. If you like, you can do this.</p>

<p>Best Regards,<br/>
Christian</p></blockquote>
<p>Yes, I'm very interested.</p>

<p>Best regards,<br/>
Sébastien</p></comment><comment id="13144630" author="celestin" created="Sat, 5 Nov 2011 08:29:02 +0000"><p>Please note that <a href="https://issues.apache.org/jira/browse/MATH-699" title="inverseCumulativeDistribution fails with cumulative distribution having a plateau" class="issue-link" data-issue-key="MATH-699"><del>MATH-699</del></a> has been created specifically to handle plateaux.</p>

<p>Sébastien</p></comment><comment id="13146535" author="cwinter" created="Tue, 8 Nov 2011 20:28:17 +0000"><p>Here is the first patch for this issue (unfortunately with some delay). It adjusts the distributions with real domain to the definitions in this issue, and it mainly changes documentations.</p>

<p>I could not move inverseCumulativeProbability(double) up to Distribution because there would be a conflict with IntegerDistribution.inverseCumulativeProbability(double): This method returns int. This problem will be removed by solving issue <a href="https://issues.apache.org/jira/browse/MATH-703" title="Splitting up the distribution hierarchy" class="issue-link" data-issue-key="MATH-703"><del>MATH-703</del></a>.</p>

<p>The implementation of inverseCumulativeProbability(double) is not changed as Sébastien is working on this.</p>

<p>I will provide the patch for the integer distributions as soon as I have adjusted the test data to the new inequalities and reverified the adjusted test data.</p></comment><comment id="13146823" author="celestin" created="Wed, 9 Nov 2011 07:22:46 +0000"><p>All,<br/>
since I'm already working on this package, I'm happy to commit the patch on behalf of Christian. However, since I'm a relatively new committer, I would feel more confident if one of the "old, wise committers" could double check the svn log afterwards.</p>

<p>Best,<br/>
Sébastien</p></comment><comment id="13147115" author="psteitz" created="Wed, 9 Nov 2011 15:48:10 +0000"><p>Hey, that's how it always works <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/>  </p>

<p>I don't know about "wise" but I certainly qualify as "old" by any standard, so will have a look once you have reviewed and committed.</p>

<p>Thanks!</p></comment><comment id="13147514" author="celestin" created="Thu, 10 Nov 2011 06:23:39 +0000"><p>Patch <tt>Math-692_realDomain_patch1.patch</tt> (20111108) applied in rev 1200179, with minor modifications (mostly checkstyle fixes).<br/>
Thanks Christian!</p></comment><comment id="13162487" author="cwinter" created="Sun, 4 Dec 2011 21:02:48 +0000"><p>As mentioned by Sébastien in <a href="https://issues.apache.org/jira/browse/MATH-699" title="inverseCumulativeDistribution fails with cumulative distribution having a plateau" class="issue-link" data-issue-key="MATH-699"><del>MATH-699</del></a>, the implementation of <tt>IntegerDistribution.inverseCumulativeProbability(double p)</tt> can benefit from the ideas which came up for <tt>RealDistribution.inverseCumulativeProbability(double p)</tt> in that thread.</p>

<p>Thus I will remove <tt>getDomainLowerBound(double p)</tt> and <tt>getDomainUpperBound(double p)</tt> from the integer distributions. I checked that all current implementations of the lower/upper bound methods provide the whole support of the distribution as starting bracket. This means that using <tt>getSupportLowerBound()</tt> and <tt>getSupportUpperBound()</tt> for the starting bracket won't degrade the performance of the current distribution implementations. However, a user might want the improve the performance of his distribution implementations by providing a more targeted starting bracket for probability <tt>p</tt>. Thus I will swap the solving step to a protected function <tt>solveInverseCumulativeProbability(double p, int lower, int upper)</tt>, so that it gets easy to override <tt>inverseCumulativeProbability</tt> with an implementation which finds a better starting bracket.</p>

<p>Furthermore, Phil's idea with Chebyshev's inequality can be applied to the generic implementation of <tt>inverseCumulativeProbability</tt> in order to get a better starting bracket.</p></comment><comment id="13162639" author="celestin" created="Mon, 5 Dec 2011 06:51:59 +0000"><p>Hi Christian,<br/>
If you agree with that, I suggest that you also take care of <a href="https://issues.apache.org/jira/browse/MATH-718" title="inverseCumulativeProbability of BinomialDistribution returns wrong value for large trials." class="issue-link" data-issue-key="MATH-718"><del>MATH-718</del></a>, as the two issues seem to be very much connected.<br/>
Sébastien</p></comment><comment id="13170588" author="cwinter" created="Thu, 15 Dec 2011 23:44:09 +0000"><p>Hi Sébastien,</p>

<p>my changes in the integer distributions don't solve <a href="https://issues.apache.org/jira/browse/MATH-718" title="inverseCumulativeProbability of BinomialDistribution returns wrong value for large trials." class="issue-link" data-issue-key="MATH-718"><del>MATH-718</del></a>. Instead I found a probably related problem with the Pascal distribution.</p>

<p>The integer distribution patch for this issue still isn't ready. I will provide it next week.</p>

<p>Christian</p></comment><comment id="13172699" author="cwinter" created="Mon, 19 Dec 2011 22:47:34 +0000"><p>This is the patch which adjusts the integer distributions to the agreements above.</p>

<p>The changes to the test cases for the random generators may be unexpected. But these changes initially were triggered by adjusting <tt>RandomDataTest.checkNextPoissonConsistency(double)</tt> to the new contract for integer distributions. Then some random generator tests failed due to chance. While adjusting their seeds, I found some other tests with a high failure probability. Thus I also set some failure probabilities to 0.01 in order to find suitable seeds more quickly.</p>

<p>My next task on this issue is to adjust the user guid.</p></comment><comment id="13173481" author="celestin" created="Tue, 20 Dec 2011 20:27:19 +0000"><p>Hi Christian,<br/>
thanks for this contribution. I am away for a few days, but am very happy to commit this patch as soon as I am back, if you are not in too much of a hurry.<br/>
Thanks again,<br/>
Sébastien</p></comment><comment id="13177903" author="celestin" created="Sat, 31 Dec 2011 05:25:04 +0000"><p>Well, we've recently run into some troubles with SVN, but it seems everything is working fine again. Patch <tt><a href="https://issues.apache.org/jira/browse/MATH-692" title="Cumulative probability and inverse cumulative probability inconsistencies" class="issue-link" data-issue-key="MATH-692"><del>MATH-692</del></a>_integerDomain_patch1.patch</tt> (with minor checkstyle changes) committed in revision <tt>1226041</tt>.</p>

<p>Please do not forget to run <tt>mvn clean; mvn site:site</tt> and check the reports (in particular, <tt>checkstyle</tt>) prior to submitting a patch!</p>

<p>Thanks for this contribution.</p></comment><comment id="13177915" author="celestin" created="Sat, 31 Dec 2011 08:39:23 +0000"><p>The committed patch actually causes failure of <tt>Well1024Test</tt> in <tt>o.a.c.m.random</tt>.</p></comment><comment id="13178047" author="cwinter" created="Sat, 31 Dec 2011 17:01:41 +0000"><p>Thanks for committing the patch, Sébastien. I see you already changed the seed in <tt>Well1024aTest</tt>. This hopefully removes the failure.</p>

<p>I'll have a look into Maven to prepare a better patch next time. <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p></comment><comment id="13178048" author="celestin" created="Sat, 31 Dec 2011 17:11:34 +0000"><blockquote>
<p>I see you already changed the seed in Well1024aTest.</p></blockquote>

<p>Yes I did, but is this really how we want <tt>Well2004aTest</tt> to pass?</p></comment><comment id="13178481" author="cwinter" created="Mon, 2 Jan 2012 17:51:59 +0000"><p>I guess there is no alternative to this way of making probabilistic test cases pass. However, I understand your bad feeling with this kind of failure fixing. The problem is that probabilistic tests are quiet fuzzy: Neither a passed test nor a failed test provides a clear answer whether something is right or wrong in the implementation. There is just a high chance to pass such a test with a correct implementation. The chance for failure increases with an erroneous implementation due to systematic deviations in the generated data. These chances tell whether it is easy to find a seed which passes the tests or not. Thus difficulties in finding a suitable seed are an indicator for problems in the code.</p></comment><comment id="13178508" author="celestin" created="Mon, 2 Jan 2012 18:53:57 +0000"><blockquote>
<p>Thus difficulties in finding a suitable seed are an indicator for problems in the code.</p></blockquote>

<p>That's exactly the point I've raised on the mailing-list: out of three seeds (100, 1000 and 1001), only one works. Of course, I would not dare to call that representative statistics, but I'm wondering whether or not we should be worried...</p></comment><comment id="13198562" author="celestin" created="Thu, 2 Feb 2012 06:45:59 +0000"><p>The issue about selection of an appropriate seed has been raised elsewhere. No definitive answer has been provided so far, so I suggest we consider this issue as solved for the time being.</p></comment></comments><attachments><attachment id="12507992" name="MATH-692_integerDomain_patch1.patch" size="56779" author="cwinter" created="Mon, 19 Dec 2011 22:47:34 +0000"/><attachment id="12502956" name="Math-692_realDomain_patch1.patch" size="26367" author="cwinter" created="Tue, 8 Nov 2011 20:28:17 +0000"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Thu, 20 Oct 2011 01:13:06 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>88883</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60302</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-691] Statistics.setVarianceImpl makes getStandardDeviation produce NaN</title><link>https://issues.apache.org/jira/browse/MATH-691</link><project id="12310485" key="MATH">Commons Math</project><description><p>Invoking SummaryStatistics.setVarianceImpl(new Variance(true/false) makes getStandardDeviation produce NaN. The code to reproduce it:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-object">int</span>[] scores = {1, 2, 3, 4};
SummaryStatistics stats = <span class="code-keyword">new</span> SummaryStatistics();
stats.setVarianceImpl(<span class="code-keyword">new</span> Variance(<span class="code-keyword">false</span>)); <span class="code-comment">//use <span class="code-quote">"population variance"</span>
</span><span class="code-keyword">for</span>(<span class="code-object">int</span> i : scores) {
  stats.addValue(i);
}
<span class="code-object">double</span> sd = stats.getStandardDeviation();
<span class="code-object">System</span>.out.println(sd);
</pre>
</div></div>

<p>A workaround suggested by Mikkel is:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
  <span class="code-object">double</span> sd = FastMath.sqrt(stats.getSecondMoment() / stats.getN());
</pre>
</div></div></description><environment><p>Windows 7 64-bit, java version 1.6.0_23</p></environment><key id="12527363">MATH-691</key><summary>Statistics.setVarianceImpl makes getStandardDeviation produce NaN</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="psteitz">Phil Steitz</assignee><reporter username="warrentang">Warren Tang</reporter><labels>
                    </labels><created>Sun, 16 Oct 2011 18:18:34 +0100</created><updated>Sat, 24 Mar 2012 16:16:57 +0000</updated><resolved>Sun, 27 Nov 2011 05:20:46 +0000</resolved><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><timeoriginalestimate seconds="18000">5h</timeoriginalestimate><timeestimate seconds="18000">5h</timeestimate><comments><comment id="13128454" author="psteitz" created="Sun, 16 Oct 2011 18:29:43 +0100"><p>Thanks for reporting this.  Another workaround is to work with the default impl:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
SummaryStatistics stats = <span class="code-keyword">new</span> SummaryStatistics();
Variance variance = (Variance) stats.getVarianceImpl();
variance.setBiasCorrected(<span class="code-keyword">false</span>);
</pre>
</div></div>
<p>and then just use the stats instance directly. </p>

<p>The problem in the SummaryStatistics code is in addValue:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-comment">// If mean, variance or geomean have been overridden,
</span><span class="code-comment">// need to increment these
</span><span class="code-keyword">if</span> (!(meanImpl <span class="code-keyword">instanceof</span> Mean)) {
    meanImpl.increment(value);
}
<span class="code-keyword">if</span> (!(varianceImpl <span class="code-keyword">instanceof</span> Variance)) {
    varianceImpl.increment(value);
}
<span class="code-keyword">if</span> (!(geoMeanImpl <span class="code-keyword">instanceof</span> GeometricMean)) {
    geoMeanImpl.increment(value);
}
</pre>
</div></div>

<p>The default impls get incremented via their embedded moments, so the code above skips incrementing them.  If, however, they have been overridden by instances of the same class (as in this bug report), this causes a problem.</p></comment><comment id="13128497" author="psteitz" created="Sun, 16 Oct 2011 20:32:21 +0100"><p>Warren reported that the second workaround above does not work.  He is correct.  That is the result of yet another problem in this class.</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> <span class="code-object">double</span> getVariance() {
    <span class="code-keyword">if</span> (varianceImpl == variance) {
        <span class="code-keyword">return</span> <span class="code-keyword">new</span> Variance(secondMoment).getResult();
    } <span class="code-keyword">else</span> {
        <span class="code-keyword">return</span> varianceImpl.getResult();
    }
}
</pre>
</div></div>

<p>In the first case, varianceImpl is not used, so setting its properties has no effect.  The mean has a similar problem.  The root cause of all of these problems is the reuse of momemts (i.e., just incrementing the moments instead of both them and the Mean and Variance instances).  We could either toss this (slight loss in performance, but likely trivial) or expose or allow moments to be attached to Mean, Variance instances.</p>
</comment><comment id="13157658" author="psteitz" created="Sun, 27 Nov 2011 05:20:47 +0000"><p>Fixed in r1206666.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 16 Oct 2011 17:29:43 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>87511</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60303</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-690] Remove methods from "MathUtils"</title><link>https://issues.apache.org/jira/browse/MATH-690</link><project id="12310485" key="MATH">Commons Math</project><description><p>I propose to remove the following methods from "MathUtils":</p>

<p>  public static double sign(final double x)<br/>
  public static float sign(final float x)<br/>
  public static double sinh(double x)<br/>
  public static double cosh(double x)</p>

<p>Also, "sign" and "indicator" functions seem redundant (and the "float" and<br/>
"double" versions are not dealing correctly with -0.0).</p></description><environment/><key id="12527047">MATH-690</key><summary>Remove methods from "MathUtils"</summary><type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="erans">Gilles</assignee><reporter username="erans">Gilles</reporter><labels><label>api-change</label></labels><created>Thu, 13 Oct 2011 17:58:53 +0100</created><updated>Sat, 24 Mar 2012 16:16:48 +0000</updated><resolved>Thu, 1 Dec 2011 14:29:28 +0000</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13126729" author="erans" created="Thu, 13 Oct 2011 18:05:10 +0100"><p>For "byte", "short", "int", "long", do we keep "sign" or "indicator"?<br/>
Another alternative would be to replace them with "signum" or "copySign" in order to have a consistent naming with their counterpart in "FastMath".</p></comment><comment id="13126747" author="luc" created="Thu, 13 Oct 2011 18:36:52 +0100"><p>Yes, consistency is better.</p></comment><comment id="13126995" author="erans" created="Thu, 13 Oct 2011 22:59:10 +0100"><p>"sinh" and "cosh" removed in revision 1183128.</p></comment><comment id="13127035" author="erans" created="Thu, 13 Oct 2011 23:22:03 +0100"><p>"sign" removed in revision 1183138.</p></comment><comment id="13130005" author="erans" created="Tue, 18 Oct 2011 21:38:06 +0100"><p>Please have a look at revision 1185841.</p>

<p>I've implemented "copySign" for "byte" arguments. It can replace the "sign" method; however, the additional functionality comes at the cost of a more complex method that must also check for overflow.<br/>
Shall I go on and implement "copySign" for the other integral types?<br/>
Shall I remove "sign"?</p>

<p>The "indicator" methods are slightly different: They return -1 or 1 (whereas "sign", and "copySign", can return 0). There is a single use of it in CM (in class "Complex"). Is it safe to remove them, and replace with "copySign"?</p></comment><comment id="13135474" author="erans" created="Tue, 25 Oct 2011 23:05:32 +0100"><p>The "indicator" functionality could be replaced by a call to "copySign(one, x)" (with "one" being "1" of the appropriate type) <em>if</em> we drop the special case for a "NaN" argument: "indicator" returns "NaN" while "copySign" does not.</p></comment><comment id="13156889" author="luc" created="Thu, 24 Nov 2011 20:03:43 +0000"><p>OK with your proposals.</p></comment><comment id="13157271" author="erans" created="Fri, 25 Nov 2011 18:04:03 +0000"><p>Revision 1206274:</p>
<ul>
	<li>Implemented "copySign" methods.</li>
	<li>Removed "indicator" methods.</li>
</ul>

</comment><comment id="13160927" author="erans" created="Thu, 1 Dec 2011 14:22:42 +0000"><p>Revision 1209100:</p>
<ul>
	<li>Removed "sign" methods.</li>
</ul>
</comment><comment id="13160943" author="erans" created="Thu, 1 Dec 2011 15:23:27 +0000"><p>Modified unit tests committed in r1209118.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Thu, 13 Oct 2011 17:36:52 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>85412</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60304</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-689] Breaking up "MathUtils"</title><link>https://issues.apache.org/jira/browse/MATH-689</link><project id="12310485" key="MATH">Commons Math</project><description><p>Issue related to this <a href="http://www.mail-archive.com/dev@commons.apache.org/msg25617.html" class="external-link" rel="nofollow">proposal</a>.</p>

<p>There seemed to be a global agreement on the following break-up:</p>
<ul>
	<li>Arithmetics (for "addAndCheck", "factorial", "gcd", ...)</li>
	<li>Precision (for "equals", "compare", ...)</li>
	<li>Binomial (for "binomialCoefficient")</li>
	<li>MathArrays (for "linearCombination", "distance", "safeNorm", "sortInPlace", "copyOf", ...)</li>
</ul>


<p>I think that "ordinary" mathematical functions ("pow", "cosh", ...) should go into "FastMath" (if not already available there).</p>

<p>Those who are willing to work on this issue, please coordinate here.</p></description><environment/><key id="12526520">MATH-689</key><summary>Breaking up "MathUtils"</summary><type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="erans">Gilles</reporter><labels><label>api-change</label></labels><created>Mon, 10 Oct 2011 22:37:51 +0100</created><updated>Sat, 24 Mar 2012 16:17:04 +0000</updated><resolved>Thu, 1 Dec 2011 14:31:18 +0000</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13124499" author="erans" created="Mon, 10 Oct 2011 22:40:10 +0100"><p>I'm going to move the functions to the "Precision" class.</p></comment><comment id="13124541" author="erans" created="Mon, 10 Oct 2011 23:36:59 +0100"><blockquote><p>I'm going to move the functions to the "Precision" class.</p></blockquote>

<p>Done in revision 1181282.</p></comment><comment id="13124731" author="celestin" created="Tue, 11 Oct 2011 07:13:00 +0100"><p>Happy to help. Just let me know which part you would like me to work on.<br/>
Sébastien</p></comment><comment id="13124883" author="celestin" created="Tue, 11 Oct 2011 10:33:43 +0100"><p>OK, I'll work on <tt>Arithmetics</tt>.<br/>
Sébastien</p></comment><comment id="13125447" author="erans" created="Tue, 11 Oct 2011 23:36:31 +0100"><p>I'll do "MathArrays".</p></comment><comment id="13125462" author="erans" created="Tue, 11 Oct 2011 23:55:55 +0100"><blockquote><p>I'll do "MathArrays".</p></blockquote>

<p>Done in revisions 1182134, 1182137, 1182147.</p></comment><comment id="13125618" author="celestin" created="Wed, 12 Oct 2011 07:18:59 +0100"><p><tt>ArithmeticsUtils</tt> TODO list<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>addAndCheck(int x, int y)</tt>: done in rev r1182213<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>addAndCheck(long a, long b)</tt>: done in rev r1182213<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>binomialCoefficient(int n, int k)</tt>: done in rev r1182658<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>binomialCoefficientDouble(int n, int k)</tt>: done in rev r1182658<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>binomialCoefficientLog(int n, int k)</tt>: done in rev r1182658<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>factorial(int n)</tt>: done in rev r1182213<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>factorialDouble(int n)</tt>: done in rev r1182213<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>factorialLog(int n)</tt>: done in rev r1182213<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>gcd(int p, int q)</tt>: done in rev r1182213<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>gcd(long p, long q)</tt>: done in rev r1182213<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>lcm(int a, int b)</tt>: done in rev r1182658<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>lcm(long a, long b)</tt>: done in rev r1182658<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>mulAndCheck(int x, int y)</tt>: done in rev r1182658<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>mulAndCheck(long a, long b)</tt>: done in rev r1182658<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>subAndCheck(int x, int y)</tt>: done in rev r1182213<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>subAndCheck(long a, long b)</tt>: done in rev r1182213</p></comment><comment id="13126356" author="psteitz" created="Thu, 13 Oct 2011 06:38:03 +0100"><p>Sorry I missed this before.  Can we change "ArithmeticsUtils" to "ArithmeticUtils."</p></comment><comment id="13126494" author="celestin" created="Thu, 13 Oct 2011 12:25:29 +0100"><blockquote>
<p>Can we change "ArithmeticsUtils" to "ArithmeticUtils."</p></blockquote>
<p>Sure. Done in rev 1182787. I forgot to set an entry log for this rev, and do not know if it's possible to do it now.</p></comment><comment id="13135439" author="erans" created="Tue, 25 Oct 2011 22:15:50 +0100"><p>"round" methods moved to "Precision" (revision 1188915).</p></comment><comment id="13135499" author="erans" created="Tue, 25 Oct 2011 23:25:38 +0100"><p>"log(double base, double x)" moved to "FastMath" (revision 1188949).</p></comment><comment id="13135510" author="erans" created="Tue, 25 Oct 2011 23:37:48 +0100"><ul>
	<li>OK to move "reduce" and "normalizeAngle" over to "FastMath"?</li>
	<li>OK to move the constants "EPSILON" and "SAFE_MIN" over to "Precision"?</li>
</ul>
</comment><comment id="13135524" author="erans" created="Tue, 25 Oct 2011 23:57:20 +0100"><p>"Arithmetics" is advantageously shorter than "ArithmeticUtils". Adding a "Utils" suffix to the name of a class that belongs to a package "util" seems unnecessary.</p></comment><comment id="13135744" author="luc" created="Wed, 26 Oct 2011 07:20:52 +0100"><p>I don't agree with moving reduce and normalizeAngle. They are specific dedicated functions that are not present in Math/StrictMath and are not close enough to existing functions to be merged (which is the reason why inverse hyperbolic functions for examples are in FastMath despite they are not in Math/StrictMath).</p>

<p>+1 For Arithmetics.</p></comment><comment id="13135832" author="erans" created="Wed, 26 Oct 2011 10:45:06 +0100"><p>I've no strong feelings, but I feel a little sorry that only these two little "double" functions are left alone in "MathUtils"...</p>

<p>Do you have an objection to my other suggestions (about the constants and "indicator")?<br/>
I also propose to move the "pow" (of an integer) functions to "Arithmetic<span class="error">&#91;Util&#93;</span>s".</p></comment><comment id="13135841" author="luc" created="Wed, 26 Oct 2011 11:01:11 +0100"><p>Then MathUtils is less bloated, so its good. I don't think we want to remove completely MathUtils.</p>

<p>Moving the constants and indicator functions is a good idea.</p></comment><comment id="13136928" author="erans" created="Thu, 27 Oct 2011 10:40:11 +0100"><p>Constants moved in r1189593 (commit done by Phil, because of a problem with svn).</p></comment><comment id="13157178" author="erans" created="Fri, 25 Nov 2011 14:49:35 +0000"><p>"pow" functions moved in r1206199.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 11 Oct 2011 06:13:00 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>56984</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60305</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-688] "FastMath" contains fractions of constants</title><link>https://issues.apache.org/jira/browse/MATH-688</link><project id="12310485" key="MATH">Commons Math</project><description><p>Fractions such as 1.0 / 3.0, 1.0 / 5.0, ... could be replaced with static final constants.<br/>
In "asinh", for example, the change can sometimes result in more than halving the computation time (when the argument is in the range of values where the constants are used).</p>

<p>In absolute times, the gain is not huge, amounting (on my machine) to something like 370 ms for 10 million computations.</p>

<p>And, of course, the downside will be that these constants will be computed at the loading of "FastMath", leading to an additional penalty of about 16 divisions at initialization... <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p></description><environment/><key id="12526349">MATH-688</key><summary>"FastMath" contains fractions of constants</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="erans">Gilles</assignee><reporter username="erans">Gilles</reporter><labels>
                    </labels><created>Sun, 9 Oct 2011 01:23:39 +0100</created><updated>Sat, 24 Mar 2012 16:16:52 +0000</updated><resolved>Mon, 10 Oct 2011 21:07:11 +0100</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13123811" author="sebb@apache.org" created="Mon, 10 Oct 2011 01:12:09 +0100"><blockquote><p>the downside will be that these constants will be computed at the loading of "FastMath"</p></blockquote>

<p>AFAIK, the constant calculations will be done at compile time.</p></comment><comment id="13123984" author="erans" created="Mon, 10 Oct 2011 11:14:20 +0100"><p>If so, how would you explain the benchmark result?</p></comment><comment id="13123996" author="erans" created="Mon, 10 Oct 2011 11:56:55 +0100"><p>OK, I now understand that there is no problem making the change then.</p></comment><comment id="13124442" author="erans" created="Mon, 10 Oct 2011 21:07:11 +0100"><p>Revision 1181175.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Mon, 10 Oct 2011 00:12:09 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>50906</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60306</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-687] Add the Jacobi polynomials in the class PolynomialsUtils</title><link>https://issues.apache.org/jira/browse/MATH-687</link><project id="12310485" key="MATH">Commons Math</project><description><p>Jacobi polynomials Pk(vw) are a generalization of the legendre polynomial. Legendre Polynomials are Jacobi polynomials for v = w = 0.<br/>
They are orthogonal polynomials and are defined from a recursion formula, giving the n+1 element of the polynomial from the nth element and the (n-1)'s one<br/>
Therefore, they could be implemented in the PolynomialsUtils and use the generic frame already used in this class to create and store them.</p></description><environment><p>all</p></environment><key id="12526216">MATH-687</key><summary>Add the Jacobi polynomials in the class PolynomialsUtils</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="romdicos">DI COSTANZO</reporter><labels>
                    </labels><created>Fri, 7 Oct 2011 15:42:24 +0100</created><updated>Sat, 24 Mar 2012 16:16:52 +0000</updated><resolved>Fri, 7 Oct 2011 17:32:30 +0100</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13122841" author="romdicos" created="Fri, 7 Oct 2011 15:46:09 +0100"><p>Here is the patch for the Jacobi polynomials. This implementation is using a Map of JacobiKey to store every computed polynomials for a given key value (u,v). The cache process is used and some test have been added in to the PolynomialsUtilsTest class.</p></comment><comment id="13122932" author="luc" created="Fri, 7 Oct 2011 17:32:31 +0100"><p>Fixed in subversion repository as of r1180092.</p>

<p>Thanks for the report and the patch.</p></comment></comments><attachments><attachment id="12498168" name="jacobi.patch" size="8421" author="romdicos" created="Fri, 7 Oct 2011 15:46:09 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Fri, 7 Oct 2011 16:32:31 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>50301</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60307</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-686] Add methods negate() / reciprocal() to the FieldElement interface</title><link>https://issues.apache.org/jira/browse/MATH-686</link><project id="12310485" key="MATH">Commons Math</project><description><p>As discussed on the mailing list, it is proposed to add two methods to the <tt>FieldElement</tt> interface</p>
<ul>
	<li><tt>negate()</tt> : returns the additive inverse of <tt>this</tt> element.</li>
	<li><tt>reciprocal()</tt> : returns the multiplicative inverse of <tt>this</tt> element.</li>
</ul>


<p>Several name couples have been proposed by Phil</p>
<ol>
	<li><tt>negate</tt>, <tt>invert</tt></li>
	<li><tt>opposite</tt>, <tt>reciprocal</tt></li>
	<li><tt>additiveInverse</tt>, <tt>multiplicativeInverse</tt></li>
</ol>


<p>Looking at the classes implementing this interface in the core CM library, we find that</p>
<ul>
	<li><tt>Complex</tt>, <tt>Dfp</tt>, <tt>BigFraction</tt> and <tt>Fraction</tt> already have a <tt>negate()</tt> method.</li>
	<li>Besides, <tt>BigFraction</tt> and <tt>Fraction</tt> already have a <tt>reciprocal()</tt> method.</li>
</ul>


<p>So the best naming option would seem to be (for the time being) a mixture of what Phil proposed. I realize it's not completely satisfactory because one is a noun and one a verb. Do we want to have good grammar, or preserve what's already implemented? I tend to favour the first option (consistently change the name of existing methods).</p></description><environment/><key id="12526196">MATH-686</key><summary>Add methods negate() / reciprocal() to the FieldElement interface</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="celestin">Sébastien Brisard</reporter><labels>
                    </labels><created>Fri, 7 Oct 2011 14:05:06 +0100</created><updated>Sun, 18 Mar 2012 09:33:32 +0000</updated><resolved>Sat, 8 Oct 2011 05:55:04 +0100</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13123371" author="celestin" created="Sat, 8 Oct 2011 05:22:39 +0100"><p>As discussed on the mailing list, retained option was <tt>negate()</tt>/<tt>reciprocal{</tt>. These methods were introduced in rev r1180312.</p></comment><comment id="13232238" author="celestin" created="Sun, 18 Mar 2012 09:33:32 +0000"><p>Fixed in 3.0.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>50032</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60308</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-685] Add method "addToEntry" to the "RealVector" interface</title><link>https://issues.apache.org/jira/browse/MATH-685</link><project id="12310485" key="MATH">Commons Math</project><description><p>Method "addToEntry":</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
m.addToEntry(i, j, addend);
</pre>
</div></div>
<p>as a shortcut to:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
m.setEntry(i, j, m.getEntry(i, j) + addend);
</pre>
</div></div>

<p>It has been argued (on the "dev" ML) that some functional style would be a powerful and elegant way to implement a whole set of related functionality ("scale", "scaleAndAdd", etc.). However some simple things (like when the "addend" depends on "i" and "j") cannot be achieved without writing many more lines of code.</p>

<p>Method "addToEntry" exists in "RealMatrix". If and when some satisfactory solution is found in order to remove it there, "RealVector" can always be aligned with it.</p></description><environment/><key id="12525835">MATH-685</key><summary>Add method "addToEntry" to the "RealVector" interface</summary><type id="5" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Wish</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="erans">Gilles</assignee><reporter username="erans">Gilles</reporter><labels><label>api-change</label></labels><created>Wed, 5 Oct 2011 15:13:40 +0100</created><updated>Sat, 24 Mar 2012 16:16:58 +0000</updated><resolved>Mon, 17 Oct 2011 23:11:09 +0100</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13129254" author="erans" created="Mon, 17 Oct 2011 23:11:09 +0100"><p>Revision 1185398.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>46459</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60309</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-684] Add method multiply(int) to FieldElement</title><link>https://issues.apache.org/jira/browse/MATH-684</link><project id="12310485" key="MATH">Commons Math</project><description><p>As discussed on the ML. n * x := x + x + ... + x (n times) is always meaningful.</p></description><environment/><key id="12525632">MATH-684</key><summary>Add method multiply(int) to FieldElement</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="celestin">Sébastien Brisard</reporter><labels>
                    </labels><created>Tue, 4 Oct 2011 09:10:32 +0100</created><updated>Sun, 18 Mar 2012 09:29:44 +0000</updated><resolved>Tue, 4 Oct 2011 09:13:27 +0100</resolved><version>3.0</version><due/><votes>0</votes><watches>0</watches><comments><comment id="13119954" author="celestin" created="Tue, 4 Oct 2011 09:13:14 +0100"><p>Done in rev r1178715.</p></comment><comment id="13232234" author="celestin" created="Sun, 18 Mar 2012 09:29:44 +0000"><p>Fixed in 3.0.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>44223</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160413</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-683] Create a method shift in the PolynomialFunction class</title><link>https://issues.apache.org/jira/browse/MATH-683</link><project id="12310485" key="MATH">Commons Math</project><description><p>Create a method shift to transform a polynomial P(k) in P(k + a) where a is any double value.<br/>
The polynomial sum(ai * k^i) turns into sum(ai * (k+a)^i)</p></description><environment><p>All</p></environment><key id="12525524">MATH-683</key><summary>Create a method shift in the PolynomialFunction class</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="romdicos">DI COSTANZO</reporter><labels>
                    </labels><created>Mon, 3 Oct 2011 11:19:04 +0100</created><updated>Sat, 24 Mar 2012 16:16:56 +0000</updated><resolved>Thu, 6 Oct 2011 16:47:44 +0100</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13119256" author="erans" created="Mon, 3 Oct 2011 12:49:50 +0100"><p>You obtain the result by calling the "value" method with "k + a" as the argument.<br/>
Or did I miss something?<br/>
Please explain what you want to achieve.</p></comment><comment id="13119267" author="romdicos" created="Mon, 3 Oct 2011 13:23:53 +0100"><p>No. I don't want to modify the "value" method. I just want to add a new "shift" method transforming the current polynomial defined as an array of coeffcient in increasing 'x' power, by a new polynomial where 'x' is replaced by 'x+a', a beeing a double value. The signature could be something like this :</p>

<p>PolynomialFunction shift(final double shift){<br/>
}</p>

<p>So, if the initial polynomial is given by :<br/>
P1 = sum(ai * x^i) (i = 0...n)</p>

<p>The new polynomial created by the "shift" method will be :<br/>
P2 = sum(ai * (x + a)^i) (i = 0...n)</p></comment><comment id="13119273" author="celestin" created="Mon, 3 Oct 2011 13:48:18 +0100"><p>I think you might want to specify whether or not you would like at some point to be able to retrieve the coefficients of <tt>P2</tt>. In other words, do you need <tt>P2</tt> to be a <tt>PolynomialFunction</tt> or do you merely need to be able to compose <tt>P1</tt> and a shifter, which would return <tt>P2</tt> as a <tt>UnivariateRealFunction</tt>, e.g</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">final</span> PolynomialFunction p1 = PolynomialsUtils.createLegendrePolynomial(10);
<span class="code-keyword">final</span> <span class="code-object">double</span> a = 1.;
UnivariateRealFunction p2 = <span class="code-keyword">new</span> UnivariateRealFunction(){
  <span class="code-keyword">public</span> <span class="code-object">double</span> value(<span class="code-keyword">final</span> <span class="code-object">double</span> x){
    <span class="code-keyword">return</span> p1.value(x+a);
  }
}
</pre>
</div></div>
<p>I suspect the answer is the first option, since you also requested for the Pascale Triangle...<br/>
Sébastien</p></comment><comment id="13119278" author="romdicos" created="Mon, 3 Oct 2011 13:54:30 +0100"><p>You're right, I'm interested by the first option, I need P2 to be a PolynomialFunction. <br/>
And effectively, my post on the Pascal Triangle goes in this sense.<br/>
Romain</p></comment><comment id="13119304" author="erans" created="Mon, 3 Oct 2011 14:31:20 +0100"><p>Maybe that I'm being a little dense, but I think that you've not explained why the following class, which you could create in your application, is not what you need:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> class ShiftedPolynomial <span class="code-keyword">extends</span> PolynomialFunction {
    <span class="code-keyword">private</span> <span class="code-object">double</span> shift;

    <span class="code-keyword">public</span> ShiftedPolynomial(PolynomialFunction f, <span class="code-object">double</span> a) {
        <span class="code-keyword">this</span>(f.getCoefficients(), a);
    }
    <span class="code-keyword">public</span> ShiftedPolynomial(<span class="code-object">double</span> c[], <span class="code-object">double</span> a) {
        <span class="code-keyword">super</span>(c);
        shift = a;
    }

    <span class="code-keyword">public</span> <span class="code-object">double</span> value(<span class="code-object">double</span> x) {
        <span class="code-keyword">super</span>.value(x + shift);
    }

    <span class="code-keyword">public</span> ShiftedPolynomial polynomialDerivative() {
        <span class="code-keyword">return</span> <span class="code-keyword">new</span> ShiftedPolynomial(<span class="code-keyword">super</span>.polynomialDerivative(), shift);
    }
}
</pre>
</div></div></comment><comment id="13119313" author="romdicos" created="Mon, 3 Oct 2011 14:49:12 +0100"><p>Effectivelly, the code you posted above can be a solution for someone who only want to evaluate a polynomial function shifted by a specific value.<br/>
Unfortunately, I can't deal with that representation, as I need to have the coefficients of the shifted polynomial :<br/>
I'm facing this problem in a recurrence formula. To achieve it, I need to sum polynomial, some of them being shifted by real values.</p></comment><comment id="13119315" author="romdicos" created="Mon, 3 Oct 2011 14:52:16 +0100"><p>Just a last precision,I need to implement this method anyway to achieve my work on those recurrence formul. What I can do is to send you the corresponding code, and you could add it if you think it could be usefull to others...<br/>
Romain</p></comment><comment id="13119334" author="erans" created="Mon, 3 Oct 2011 15:34:07 +0100"><p>Yes, please attach everything that could be useful to figure out what is the required functionality.<br/>
So, if I understand correctly, what you really request is the function that would compute the new  coefficients ("bi"):</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>Ps(k) = Sum bi * k^i
      = Sum ai * (k + a)^i
      = P(k + a)
</pre>
</div></div>

<p>This functionality should probably go in the "PolynomialsUtils" class:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> <span class="code-keyword">static</span> <span class="code-object">double</span>[] shiftedPolynomialCoefficients(<span class="code-object">double</span>[] c, <span class="code-object">double</span> shift) {
    <span class="code-comment">// ...
</span>}
</pre>
</div></div></comment><comment id="13119339" author="romdicos" created="Mon, 3 Oct 2011 15:49:24 +0100"><p>That's it. I'll send you the code when completed.</p></comment><comment id="13121819" author="romdicos" created="Thu, 6 Oct 2011 10:52:53 +0100"><p>Hello,</p>

<p>Here is the code for the shift method described above, and its associated test. As wanted, I add this functionnality in the PolynomailsUtils class.<br/>
Romain</p></comment><comment id="13122014" author="erans" created="Thu, 6 Oct 2011 16:47:45 +0100"><p>Committed (with some stylistic changes) in revision 1179671.</p>

<p>Thanks for the contribution. But when submitting changes to an existing file, it is better to provide a "patch". Also, do not forget to check whether there are any warnings generated by the "CheckStyle" tool.</p></comment><comment id="13122018" author="erans" created="Thu, 6 Oct 2011 16:49:26 +0100"><p>I also changed the return type of the method, in order to emphasize the transformation of the coefficients. It is trivial for the user to create the "PolynomialFunction".</p></comment><comment id="13122664" author="romdicos" created="Fri, 7 Oct 2011 10:29:58 +0100"><p>Thanks !<br/>
I didn't know for the patch, I'll provide one next time. And I'll will also check the CheckStyle warnings. </p></comment></comments><attachments><attachment id="12497966" name="PolynomialsUtils.java" size="13584" author="romdicos" created="Thu, 6 Oct 2011 10:52:53 +0100"/><attachment id="12497967" name="PolynomialsUtilsTest.java" size="11295" author="romdicos" created="Thu, 6 Oct 2011 10:52:53 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Mon, 3 Oct 2011 11:49:50 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>43642</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60310</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-682] Pascal triangle </title><link>https://issues.apache.org/jira/browse/MATH-682</link><project id="12310485" key="MATH">Commons Math</project><description><p>Create a method to get Pascal's triangle coefficient. This method could be implemented in MathUtils, in a static way, with the following signature :<br/>
double[] getTriangleCoefficient(final int order)</p></description><environment><p>All</p></environment><key id="12525523">MATH-682</key><summary>Pascal triangle </summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="8">Not a Problem</resolution><assignee username="-1">Unassigned</assignee><reporter username="romdicos">DI COSTANZO</reporter><labels>
                    </labels><created>Mon, 3 Oct 2011 11:09:02 +0100</created><updated>Mon, 4 Mar 2013 18:58:52 +0000</updated><resolved>Mon, 10 Oct 2011 20:27:51 +0100</resolved><version>3.0</version><due/><votes>0</votes><watches>0</watches><comments><comment id="13119235" author="celestin" created="Mon, 3 Oct 2011 11:52:44 +0100"><p>I have an implementation based on JScience which I need to port to Commons-Math for personal use. I use it for symbolic calcs on polynomials. I need it to return FieldElement&lt;T&gt;, but it could be easily adapted to double[] as requested.<br/>
So, if this indeed is found useful for 3.0 by others, and no one else has any ready piece of code for it, I'm happy to work on that.</p></comment><comment id="13119249" author="erans" created="Mon, 3 Oct 2011 12:36:05 +0100"><p>It should not be implemented in "MathUtils"; this class is already too bloated.<br/>
This concept could easily go in its own class; moreover it would make it easier to e.g. implement caching of previously computed entries. This would also allow for <a href="http://en.wikipedia.org/wiki/Pascal&#39;s_triangle" class="external-link" rel="nofollow">additional functionality</a>.</p></comment><comment id="13119255" author="celestin" created="Mon, 3 Oct 2011 12:48:59 +0100"><p>Please find attached what I have for the moment. It needs some polishing to meet the CM standards, I believe. Also, it is based on JScience, which has both concepts of Field (like CM, but less convenient, I think) and Variable (which allowed me to have a method to expand binomials. As this feature is absent from CM, this would probably go).<br/>
Previously computed lines are indeed cached.<br/>
Please let me know if you think it's a good start.<br/>
As for me, I need this class to work with FieldElement, but if this is far-fetched for CM, then I'm happy keeping this feature for the specific use I have.</p></comment><comment id="13119282" author="erans" created="Mon, 3 Oct 2011 14:01:07 +0100"><p>Given the API differences and style problems, I think that it would be better to start from scratch, and have a class "PascalTriangle" (in package "util" if there is no better place) implement the basic functionality . Then whatever functionality relates to "PolynomialFunction" should better go to package "analysis.polynomials".</p></comment><comment id="13119284" author="celestin" created="Mon, 3 Oct 2011 14:07:23 +0100"><p>Fine by me! I can have a go on this one if you want (as I said, I <b>need</b> to do it fairly soon anyway, as I'm completely giving up JScience).<br/>
Sébastien</p>

<p>(except of course if Romain or anyone else has an implementation, I do not want to walk on anyone's feet!)</p></comment><comment id="13119285" author="romdicos" created="Mon, 3 Oct 2011 14:10:49 +0100"><p>Bonjour,</p>

<p>Voici mon implémentation pour le triangle de pascal. Elle est déclarée pour le package Utils. <br/>
La classe contient un système de cache permettant de sauvegarder les précédents coefficients calculés. <br/>
J'y ai joint un fichier de test permettant de valider l'implémentation.<br/>
Cette dernière vous convient elle ?<br/>
Merci d'avance,</p>

<p>Romain</p></comment><comment id="13119286" author="erans" created="Mon, 3 Oct 2011 14:11:05 +0100"><p>Note also that the above link contains an algorithm to compute individual rows (i.e. not needing to first compute the one above it) and the diagonals. Maybe that this could speed up some types of requests.</p></comment><comment id="13119288" author="romdicos" created="Mon, 3 Oct 2011 14:12:58 +0100"><p>I'm sorry, I wrote my last post in french ! <br/>
I was saying :</p>

<p>This is my implementation for the triangle pascal declared under the 'Utils' package. The class contains a cache system to save previous computed coefficients. I also put a test file to validate the implementation. Are you ok with it ?<br/>
Thanks,</p>

<p>Romain</p></comment><comment id="13119311" author="erans" created="Mon, 3 Oct 2011 14:42:55 +0100"><p>We should probably add some way to prevent an unlimited filling of the memory. It seems that the possibility to compute a single row (cf. my previous comment) would be handy if the requested order is very large.</p></comment><comment id="13119331" author="romdicos" created="Mon, 3 Oct 2011 15:30:08 +0100"><p>I agree with you. It could be important to prevent too large entries. <br/>
In the files newly added, I add a static variable defining the maximum order at which a row can be computed (arbitrary set at 50). If the entry is superior to this maximum value, another method is called and only compute the individual row. The user can arbitrary call any one of the method.<br/>
I updated the previous test class.</p></comment><comment id="13119349" author="psteitz" created="Mon, 3 Oct 2011 16:04:30 +0100"><p>This is already available via the various binomial coefficient methods. What am I missing here?</p></comment><comment id="13119358" author="romdicos" created="Mon, 3 Oct 2011 16:24:52 +0100"><p>Effectively, this is a way to get Pascal triangle elements. I didn't know this method was existing and it fulfil my need. <br/>
Actually, I was thinking to create method to retrieve every element at once for  given order, but I can build it by myself from those binomial coefficient method. <br/>
Thanks,<br/>
Regards,</p>

<p>Romain</p></comment><comment id="13124411" author="luc" created="Mon, 10 Oct 2011 20:27:51 +0100"><p>The existing binomial coefficients methods in MathUtils already provide this feature.</p></comment></comments><attachments><attachment id="12497466" name="PascalTriangle.java" size="4001" author="romdicos" created="Mon, 3 Oct 2011 15:30:08 +0100"/><attachment id="12497452" name="PascalTriangle.java" size="2786" author="romdicos" created="Mon, 3 Oct 2011 14:10:49 +0100"/><attachment id="12497447" name="PascalTriangle.java" size="5854" author="celestin" created="Mon, 3 Oct 2011 12:48:59 +0100"/><attachment id="12497465" name="PascalTriangleTest.java" size="3855" author="romdicos" created="Mon, 3 Oct 2011 15:30:08 +0100"/><attachment id="12497453" name="PascalTriangleTest.java" size="2223" author="romdicos" created="Mon, 3 Oct 2011 14:10:49 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>5.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Mon, 3 Oct 2011 10:52:44 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>43641</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160414</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-679] Integer overflow in OpenMapRealMatrix</title><link>https://issues.apache.org/jira/browse/MATH-679</link><project id="12310485" key="MATH">Commons Math</project><description><p>computeKey() has an integer overflow. Since it is a sparse matrix, this is quite easily encountered long before heap space is exhausted. The attached code demonstrates the problem, which could potentially be a security vulnerability (for example, if one was to use this matrix to store access control information).</p>

<p>Workaround: never create an OpenMapRealMatrix with more cells than are addressable with an int.</p></description><environment/><key id="12525510">MATH-679</key><summary>Integer overflow in OpenMapRealMatrix</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="cberner">Christopher Berner</reporter><labels>
                    </labels><created>Mon, 3 Oct 2011 06:36:20 +0100</created><updated>Sat, 24 Mar 2012 16:16:57 +0000</updated><resolved>Mon, 10 Oct 2011 20:57:12 +0100</resolved><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13119140" author="cberner" created="Mon, 3 Oct 2011 06:37:44 +0100"><p>Move code to an attachment</p></comment><comment id="13124434" author="luc" created="Mon, 10 Oct 2011 20:57:12 +0100"><p>Fixed in subversion repository as of r1181181.</p>

<p>Thanks for the report and the workaround.</p></comment></comments><attachments><attachment id="12497426" name="Flaw.java" size="332" author="cberner" created="Mon, 3 Oct 2011 06:37:12 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Mon, 10 Oct 2011 19:57:12 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>43524</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60311</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-678] NonLinear Optimizers seem to have a hard time hitting NIST standards</title><link>https://issues.apache.org/jira/browse/MATH-678</link><project id="12310485" key="MATH">Commons Math</project><description><p>As per a discussion on the mailing list, I am opening this ticket. In applying the nonlinear optimizers in commons, I noticed what I believe to be instability in the techniques. Further investigation investigation (both of my tests) and the code in prod is warranted. </p>

<p>I will be pushing a first set of tests which should illustrate what I am seeing. </p>

</description><environment><p>Java </p></environment><key id="12525387">MATH-678</key><summary>NonLinear Optimizers seem to have a hard time hitting NIST standards</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status><statusCategory id="2" key="new" colorName="blue-gray"/><resolution id="-1">Unresolved</resolution><assignee username="-1">Unassigned</assignee><reporter username="gsteri1">greg sterijevski</reporter><labels><label>NIST</label><label>NonLinear</label><label>Optimization</label></labels><created>Sat, 1 Oct 2011 02:59:53 +0100</created><updated>Mon, 3 Dec 2012 13:01:40 +0000</updated><version>3.0</version><due/><votes>0</votes><watches>1</watches><comments><comment id="13416262" author="erans" created="Tue, 17 Jul 2012 16:00:13 +0100"><p>IMHO, this issue is too vague to be useful.<br/>
The unit tests referred to have been removed from the CM test suite (cf. <a href="https://issues.apache.org/jira/browse/MATH-763" title="Recover source files that were not included in release 3.0" class="issue-link" data-issue-key="MATH-763">MATH-763</a>) because they were all failing (although such big problems were not revealed by the other unit tests). Nobody seems eager to determine whether there could be a problem in the test methodology (e.g. too stringent tolerances) or in some way clean them up so that the potential problems can be sorted out.</p>

<p>I would thus suggest to resolve this issue as "Won't fix".</p></comment><comment id="13461238" author="erans" created="Sat, 22 Sep 2012 19:34:44 +0100"><p>Greg Sterijevski does not seem to be around this forum anymore.</p></comment></comments><issuelinks><issuelinktype id="10032"><name>Blocker</name><outwardlinks description="blocks"><issuelink><issuekey id="12545114">MATH-763</issuekey></issuelink></outwardlinks></issuelinktype></issuelinks><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 17 Jul 2012 15:00:13 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>41752</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>11062</customfieldvalue></customfieldvalues></customfield></customfields></item><item><title>[MATH-677] About package "transform"</title><link>https://issues.apache.org/jira/browse/MATH-677</link><project id="12310485" key="MATH">Commons Math</project><description><p>Classes in package "o.a.c.m.transform" might require some changes in order to conform to goals set for the next major release.</p>

<p>Some observations:</p>
<ol>
	<li>Exceptions <font color="red">done (see below)</font>
	<ol>
		<li>Should remove use of deprecated "MathRuntimeException"</li>
		<li>Should throw more specific "Math...Exception" instances instead of standard IAE</li>
	</ol>
	</li>
	<li>Interface "RealTransformer" (and implementations) contain non-conformant method names (e.g. "inversetransform" instead of "inverseTransform"). <font color="red">Fixed in <tt>r1208293</tt>.</font></li>
	<li>"FastFourierTransformer":
	<ol>
		<li>Methods "mdfft" and "verifyDataSet" take an argument of type "Object" (to allow an argument with an unspecified number of dimensions)</li>
		<li>The "RootsOfUnity" helper class could be moved to the "complex" package. <font color="red">Done in <tt>r1238898</tt></font>.</li>
		<li>For clarity, multidimensional transform should be moved to a class of its own (and I also wonder whether the "MultiDimensionalComplexMatrix" name is not misleading)</li>
	</ol>
	</li>
	<li>"FastFourierTransformer", "FastSineTranformer" and "FastCosineTranformer" define public methods "tranform2" and "inversetransform2" but they are not part of an interface. <font color="red">As of <tt>r1213157</tt>, these methods have been removed, and replaced by factory methods <tt>create()</tt> and <tt>createUnitary()</tt> (FFT) or <tt>createOrthogonal()</tt> (FCT, FST).</font></li>
	<li>Code uses variables that start with an uppercase. <font color="red">Fixed, together with various formatting issues.</font></li>
	<li>"FastHadamardTransformer" contains illegible developer documentation (see Javadoc for protected method "fht"). <font color="red">Tried to improve things in <tt>r1208986</tt>, but things are still a bit obscure. Besides, the link provided is broken. Will look into that.</font></li>
</ol>
</description><environment/><key id="12525174">MATH-677</key><summary>About package "transform"</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="celestin">Sébastien Brisard</assignee><reporter username="erans">Gilles</reporter><labels><label>api-change</label></labels><created>Thu, 29 Sep 2011 12:57:40 +0100</created><updated>Sat, 24 Mar 2012 16:17:02 +0000</updated><resolved>Thu, 2 Feb 2012 06:17:54 +0000</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13159856" author="celestin" created="Wed, 30 Nov 2011 06:30:39 +0000"><p>Regarding point 4., transform2 and inversetransform2 merely correspond to different normalization conventions. Correct me if I'm wrong, the user is unlikely to use mixed conventions in the <b>same</b> calculation (well, <b>I</b> never do!), maybe we could use parameterized constructors to specify this normalization convention. In which case, <tt>transform2</tt> and <tt>inverseTransform2</tt> could go.</p>

<p>Otherwise, we would need an altogether new interface, because the Hadamard transform does not offer such a choice.</p>

<p>This option would also offer the possibility to implement other types of DCT/DST in the future. This is just a thought, though, because in this case, maybe factory methods would be better.</p></comment><comment id="13159964" author="erans" created="Wed, 30 Nov 2011 10:43:35 +0000"><p>Thanks Sébastien for having a look at this.</p>

<p>As I never used these classes, I couldn't come up with concrete change proposals regarding the API.<br/>
Rather than different constructors, we could have a new class. I recall that the "solvers" package used to contain a single "MullerSolver" class with a "solve2" method (in addition to the "solve" defined in the interface). Now, there is a "MullerSolver2" that conforms to the interface.</p>

<p>If no-one objects, you could perform that change; but I'm afraid that a thorough review of all those classes will have to wait for 4.0. The handling of multiple dimension (through arguments of type "Object") is particularly awkward (for a strongly typed language like Java).</p>

<p>In addition to the observations indicated in the issue description, I also notice a (private) class ("MultiDimensionalComplexMatrix" in "FastFourierTransformer") that "implements" the standard "Cloneable" interface. This is best to be avoided (cf. "Effective Java").</p></comment><comment id="13159988" author="celestin" created="Wed, 30 Nov 2011 11:39:16 +0000"><p>Hi Gilles,<br/>
thanks for your advice. So I'll confine to the cosmetic changes, and we will postpone the rest to the next major release. I'm a regular user of FFTs, and I've been involved in debugging JTransforms, as well as setting up the whole set of unit tests for this library. In short, I am quite willing to dive deeper into this package... when we get some time.</p>


<p>Regarding point 4, I like your solution, because one class would correspond to one unique pair <tt>transform</tt>/<tt>inverseTransform</tt>, with no risk to invoke <tt>transform</tt> followed by <tt>inverseTransform2</tt> (and vice-versa).</p>

<p>However, if I may be the devil's advocate, I have a very small objection (but I can live with that). <tt>transform</tt> and <tt>transform2</tt> actually perform the <b>same</b> transform, only with a different prefactor. But the transform is essentially the same (see the implementation).</p>

<p>On the other hand, there are other <b>types</b> of DCTs/DSTs on the market. The currently implemented DCT is in fact DCT-I. It would be nice at some point to have in CM DCT-II, DCT-III, ... which would be different classes. But then, we would need classes for DCT-Ia, DCT-Ib, ..., DCT-IIa, DCT-IIb, ... for different normalizing factors. It might be a bit complicated, and would put on the same logical level <b>variants</b> of the same type of DCT, with different types of DCTs, which I'm slightly (but only very slightly) uncomfortable with.</p>

<p>To sum up: the two versions of DCT currently implemented in the same class are essentially the same up to a scaling factor. I dislike the existence of <tt>transform2</tt>/<tt>inverseTransform2</tt>, but I think version 2 of the DCT should be performed by the same class. That's the reason why I was proposing factory methods (say <tt>createVersion1()</tt>/<tt>createVersion2()</tt>. Different classes would be reserved to different versions of the DCT/DST.</p>

<p>Again, these thoughts are only for the sake of arguing, I'm quite happy with any solution anyone would prefer.</p>

<p>Sébastien</p></comment><comment id="13159993" author="erans" created="Wed, 30 Nov 2011 11:56:33 +0000"><p>By all means, if you have clear ideas about how to improve the package, I'm all for it. If the changes can included in the upcoming release, even better.<br/>
If you have practical use-cases for FFT, then you are in the best position to decide.</p>

<p>Factories may indeed be the way (although with better names than "createVersionX"): I agree that a "detail" like a scaling factor might not warrant a new class.</p></comment><comment id="13160709" author="celestin" created="Thu, 1 Dec 2011 07:50:04 +0000"><blockquote>
<p>although with better names than "createVersionX"</p></blockquote>
<p>... goes without saying! <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/biggrin.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p>

<p>What do you think of</p>
<ul>
	<li><tt>create()</tt> for default normalization (corresponding to the current <tt>transform()</tt>),</li>
	<li><tt>createOrthogonal()</tt> for the other normalization (correspondind to the current <tt>transform2()</tt>). From <a href="http://en.wikipedia.org/wiki/Discrete_cosine_transform" class="external-link" rel="nofollow">Wikipedia</a>
<blockquote>
<p>This makes the DCT-I matrix orthogonal <span class="error">&#91;...&#93;</span> but breaks the direct correspondence with a real-even DFT.</p></blockquote></li>
</ul>
</comment><comment id="13164212" author="celestin" created="Wed, 7 Dec 2011 07:44:21 +0000"><p><tt>FastFourierTransformer</tt> has been modified according to the above discussion in revisions <tt>1211318</tt> and <tt>1211319</tt>.</p>
<ul>
	<li><tt>transform2()</tt> and <tt>inverseTransform2()</tt> have gone,</li>
	<li>constructors have been made private,</li>
	<li>two factory methods are provided <tt>create()</tt> and <tt>createUnitary</tt>.</li>
</ul>


<p>This has a beneficial side effect: multi-dimensional FFT is no longer restricted to the former <tt>transform2()</tt>/<tt>inverseTransform2()</tt> normalization convention, as was previously the case.</p></comment><comment id="13165887" author="celestin" created="Fri, 9 Dec 2011 06:49:06 +0000"><p><tt>FastCosineTransformer</tt> has been modified according to the above discussion in revision <tt>1212262</tt>.</p>
<ul>
	<li><tt>transform2()</tt> and <tt>inverseTransform2()</tt> have gone,</li>
	<li>constructors have been made private,</li>
	<li>two factory methods are provided <tt>create()</tt> and <tt>createOrthogonal()</tt>.</li>
</ul>
</comment><comment id="13167390" author="celestin" created="Mon, 12 Dec 2011 07:25:30 +0000"><p><tt>FastSineTransformer</tt> has been modified according to the above discussion in revision <tt>1213157</tt>.</p>
<ul>
	<li><tt>transform2()</tt> and <tt>inverseTransform2()</tt> have gone,</li>
	<li>constructors have been made private,</li>
	<li>two factory methods are provided <tt>create()</tt> and <tt>createOrthogonal()</tt>.</li>
</ul>
</comment><comment id="13177966" author="celestin" created="Sat, 31 Dec 2011 09:45:27 +0000"><h4><a name="Exceptions"></a>Exceptions</h4>
<ul>
	<li>remove references to <tt>MathRuntimeException</tt>,</li>
	<li>throw more specific <tt>Math...Exception</tt> instances instead of standard <tt>IAE</tt>.</li>
</ul>


<p>As discussed on the <a href="http://mail-archives.apache.org/mod_mbox/commons-dev/201112.mbox/%3CCAGRH7Hq24t8O5hCPawVWFU1tOLAhcBrBjF%2BYh69zZivTnZRKFQ%40mail.gmail.com%3E" class="external-link" rel="nofollow">mailing-list</a>, <tt>MathIllegalArgumentException</tt> (as opposed to more specific subclasses) are returned for non-power-of-two datasets.</p>

<p><img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>FastCosineTransformer</tt>: done in <tt>r1226359</tt><br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>FastFourierTransformer</tt>: done in <tt>r1226053</tt><br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>FastHadamardTransformer</tt>: done in <tt>r1227008</tt><br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>FastSineTransformer</tt>: done in <tt>r1226669</tt></p></comment><comment id="13179252" author="celestin" created="Wed, 4 Jan 2012 03:48:43 +0000"><p>Moved <tt>FastFourierTransformer.isPowerOf2(long)</tt> to <tt>ArithmeticUtils.isPowerOfTwo(long)</tt> in <tt>r1227042</tt>.</p></comment><comment id="13188315" author="celestin" created="Wed, 18 Jan 2012 07:18:19 +0000"><p>Improved testing of <tt>FastFourierTransformer</tt> in <tt>r1232767</tt>.</p></comment><comment id="13190111" author="celestin" created="Fri, 20 Jan 2012 21:05:51 +0000"><p>In <tt>r1234136</tt>, added a new<br/>
<tt>RealTransformAbstractTest</tt> allowing for automatic testing of <tt>RealTransformers</tt>, with various data sizes (not only powers of two and the likes). This will ease testing procedures if we ever implement transforms for other types of data sizes.</p></comment><comment id="13190902" author="celestin" created="Mon, 23 Jan 2012 06:48:44 +0000"><p>Used <tt>RealTransformAbstractTest</tt> for testing of <tt>FastSineTransformer</tt> (see <tt>r1234685</tt>).</p></comment><comment id="13195965" author="celestin" created="Mon, 30 Jan 2012 07:01:45 +0000"><h4><a name="Refactoringof%7B%7BRootsOfUnity%7D%7D"></a>Refactoring of <tt>RootsOfUnity</tt></h4>

<p><tt>RootsOfUnity</tt> is now exposed as a public class in package <tt>o.a.c.m.complex</tt>. Therefore the connection with FFT is lost</p>
<ul>
	<li><tt>isForward()</tt> must be renamed</li>
	<li><tt>computeOmega(int n)</tt> computes the roots of unity <tt>exp(-i * k / n)</tt>. I think the minus sign is quite unexpected for a self-standing <tt>RootsOfUnity</tt> class (in the FFT context, this minus sign does make perfect sense, of course). So I propose to change this behavior (remove this minus sign).</li>
</ul>
</comment><comment id="13196749" author="celestin" created="Tue, 31 Jan 2012 07:03:08 +0000"><h4><a name="Refactoringof%7B%7BRootsOfUnity%7D%7D"></a>Refactoring of <tt>RootsOfUnity</tt></h4>
<p>In <tt>r1238179</tt>, the following changes have been adopted</p>
<ul>
	<li><tt>computeOmega(int n)</tt> now computes the roots of unity <tt>exp(i * k / n)</tt>. <tt>FastFourierTransformer</tt> has been updated accordingly.</li>
	<li><tt>isForward()</tt> has been renamed <tt>isCounterClockwise()</tt>, which refers to the way the roots are ordered depending on the sign of <tt>n</tt>.</li>
</ul>


<p>What do you think of these changes?</p></comment><comment id="13197122" author="luc" created="Tue, 31 Jan 2012 19:00:28 +0000"><p>These changes sounds good to me.</p></comment><comment id="13197497" author="celestin" created="Wed, 1 Feb 2012 01:53:54 +0000"><p>In <tt>r1238898</tt></p>
<ul>
	<li>renamed <tt>computeOmega(int)</tt> to <tt>computeRoots(int)</tt></li>
	<li>renamed <tt>getOmegaReal(int)</tt> to <tt>getReal(int)</tt></li>
	<li>renamed <tt>getOmegaImaginary(int)</tt> to <tt>getImaginary(int)</tt></li>
	<li>added <tt>int getNumberOfRoots()</tt></li>
	<li>added unit tests.</li>
</ul>
</comment><comment id="13197502" author="celestin" created="Wed, 1 Feb 2012 01:59:11 +0000"><p>All suggested changes but 3.1 and 3.3 have now been applied. I think this issue can be resolved for the time being. Indeed, FFT implementation will probably evolve in future versions of Commons-Math, especially for multidimensional transforms. This should require thorough discussion.</p></comment><comment id="13198558" author="celestin" created="Thu, 2 Feb 2012 06:17:54 +0000"><p>Changes proposed to multidimensional FFT will be applied later.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 30 Nov 2011 06:30:39 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>39775</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60312</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-676] More efficient multiplication of small matrices</title><link>https://issues.apache.org/jira/browse/MATH-676</link><project id="12310485" key="MATH">Commons Math</project><description><p>A benchmark shows that the "multiply" method in "Array2DRowRealMatrix" could be faster.</p></description><environment/><key id="12525051">MATH-676</key><summary>More efficient multiplication of small matrices</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="erans">Gilles</assignee><reporter username="erans">Gilles</reporter><labels>
                    </labels><created>Wed, 28 Sep 2011 14:19:02 +0100</created><updated>Sat, 24 Mar 2012 16:16:53 +0000</updated><resolved>Sun, 2 Oct 2011 14:02:49 +0100</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13116486" author="erans" created="Wed, 28 Sep 2011 14:44:30 +0100"><p>Benchmark (10 million multiplications) results: total time (in ms) vs matrix size.</p></comment><comment id="13119004" author="erans" created="Sun, 2 Oct 2011 14:02:49 +0100"><p>Revision 1178186.</p></comment></comments><attachments><attachment id="12496882" name="cm_issue.dat" size="661" author="erans" created="Wed, 28 Sep 2011 14:44:29 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>36632</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60313</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-675] MathUtils should have a static method which checks whether an array of doubles or Comparables is monotone </title><link>https://issues.apache.org/jira/browse/MATH-675</link><project id="12310485" key="MATH">Commons Math</project><description><p>The static method checkOrder in MathUtils is a useful piece of code which checks for monotonically increasing or decreasing elements in an array. It would be useful to have a similar method for Comparable. Furthermore, this new method would just return true or false. Unlike the current checkOrder, no exception would be thrown if monotonicity did not exist. </p></description><environment><p>Java</p></environment><key id="12524244">MATH-675</key><summary>MathUtils should have a static method which checks whether an array of doubles or Comparables is monotone </summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="gsteri1">greg sterijevski</assignee><reporter username="gsteri1">greg sterijevski</reporter><labels><label>MathUtils</label></labels><created>Thu, 22 Sep 2011 08:22:20 +0100</created><updated>Sat, 24 Mar 2012 16:17:04 +0000</updated><resolved>Wed, 16 Nov 2011 16:05:11 +0000</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due>Fri, 23 Sep 2011 00:00:00 +0000</due><votes>0</votes><watches>0</watches><timeoriginalestimate seconds="86400">24h</timeoriginalestimate><timeestimate seconds="86400">24h</timeestimate><comments><comment id="13116327" author="erans" created="Wed, 28 Sep 2011 11:30:41 +0100"><ol>
	<li>The new method is currently named "isMonotone". However, we agreed (on the "dev" ML) to use "Monotonic" (in a related exception name). Thus shouldn't the name be "isMonotonic"?</li>
	<li>I don't understand the purpose or/and implementation of those tests:
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
    @Test
    <span class="code-keyword">public</span> void testIsMonotone() {
        <span class="code-keyword">if</span>(MathUtils.isMonotone(<span class="code-keyword">new</span> <span class="code-object">double</span>[] {-15, -5.5, -1, -1, 2,15},
                             MathUtils.OrderDirection.INCREASING, <span class="code-keyword">true</span>) ){
            Assert.fail(<span class="code-quote">"an exception should have been thrown"</span>);
        }

        <span class="code-keyword">if</span>(MathUtils.isMonotone(<span class="code-keyword">new</span> <span class="code-object">double</span>[] {-15, -5.5,-1,-2,2},
                             MathUtils.OrderDirection.INCREASING, <span class="code-keyword">false</span>)){
            Assert.fail(<span class="code-quote">"an exception should have been thrown"</span>);
        }

        <span class="code-keyword">if</span>(MathUtils.isMonotone(<span class="code-keyword">new</span> <span class="code-object">double</span>[] {3,3,-5.5,-11,-27.5},
                             MathUtils.OrderDirection.DECREASING, <span class="code-keyword">true</span>)){
            Assert.fail(<span class="code-quote">"an exception should have been thrown"</span>);
        }
        <span class="code-keyword">if</span>( MathUtils.isMonotone(<span class="code-keyword">new</span> <span class="code-object">double</span>[] {3,-1,0,-5.5,-11,-27.5},
                             MathUtils.OrderDirection.DECREASING, <span class="code-keyword">false</span>) ){
        Assert.fail(<span class="code-quote">"an exception should have been thrown"</span>);
        }

    }
</pre>
</div></div>
<p>Since "isMonotone" never throws an exception, the message is misleading.<br/>
I think that you should just have used "Assert.assertTrue" and "Assert.assertFalse".</p></li>
	<li>"isMonotone" with a <tt>double[]</tt> argument is redundant with "checkOrder". Either we should remove the new method, or, if the syntactic sugar of the new naming is necessary, it should call "checkOrder" to avoid unnecessary code duplication.</li>
</ol>
</comment><comment id="13126983" author="erans" created="Thu, 13 Oct 2011 22:48:02 +0100"><p>All remarks implemented as part of <a href="https://issues.apache.org/jira/browse/MATH-689" title="Breaking up &quot;MathUtils&quot;" class="issue-link" data-issue-key="MATH-689"><del>MATH-689</del></a> (revisions 1182134, 1182137, 1182147) and in revision 1183119.</p></comment><comment id="13150390" author="erans" created="Tue, 15 Nov 2011 11:33:27 +0000"><p>Can we close this issue?</p></comment><comment id="13150976" author="gsteri1" created="Wed, 16 Nov 2011 02:34:51 +0000"><p>Yes, my apologies. Have had a lot of things going on.</p>

<p>On Tue, Nov 15, 2011 at 5:34 AM, Gilles (Commented) (JIRA)</p>
</comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 28 Sep 2011 10:30:41 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2180</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60314</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-674] Too much documentation in "UnivariateRealFunction.java"?</title><link>https://issues.apache.org/jira/browse/MATH-674</link><project id="12310485" key="MATH">Commons Math</project><description><p>I noticed that because they inherit the Javadoc for "UnivariateRealFunction", all functions in package "o.a.c.m.analysis.function" have their "value" method contain a fairly large amount of documentation that is related to a marginal issue (advice about why and when a user would need to implement his own exceptions for his own functions) <em>that does not apply to the function being documented</em>.<br/>
It might be confusing to have that documentation appear there (i.e. in a place where none of the functions are defined by the user). It should probably be moved elsewhere (user guide).</p></description><environment/><key id="12523874">MATH-674</key><summary>Too much documentation in "UnivariateRealFunction.java"?</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="erans">Gilles</reporter><labels><label>documentation</label></labels><created>Wed, 21 Sep 2011 15:42:28 +0100</created><updated>Sat, 24 Mar 2012 16:16:57 +0000</updated><resolved>Sun, 25 Sep 2011 22:44:52 +0100</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13109774" author="celestin" created="Wed, 21 Sep 2011 19:51:24 +0100"><p>I think it is valuable piece of information that should remain in the javadoc. How about moving it to the header (interface comment) of <tt>UnivariateRealFunction</tt>?</p>

<p>Also, is there a reason why</p>
<ul>
	<li>those classes should not be final? In the improbable case someone would reimplement eg Abs, it would probably be better to re-derive it from <tt>UnivariateRealFunction</tt></li>
	<li>the singleton pattern should not be used for these very basic functions?</li>
</ul>
</comment><comment id="13113515" author="erans" created="Fri, 23 Sep 2011 16:53:24 +0100"><blockquote><p>How about moving it to the header (interface comment) of UnivariateRealFunction?</p></blockquote>

<p>+1</p>

<blockquote><p>those classes should not be final?</p></blockquote>

<p>I don't see any drawback. Are there obvious advantages?</p>

<blockquote><p>the singleton pattern should not be used for these very basic functions?</p></blockquote>

<p>Why?</p></comment><comment id="13113891" author="celestin" created="Sat, 24 Sep 2011 05:15:56 +0100"><p>Got it. Sorry about that,<br/>
Sébastien</p></comment><comment id="13114376" author="erans" created="Sun, 25 Sep 2011 22:44:52 +0100"><p>Revision 1175588.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 21 Sep 2011 18:51:24 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>3418</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60315</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-673] FieldLUDecomposition.Solver is missing appropriate testing</title><link>https://issues.apache.org/jira/browse/MATH-673</link><project id="12310485" key="MATH">Commons Math</project><description><p>I could not find any unit test for this class.</p></description><environment/><key id="12523516">MATH-673</key><summary>FieldLUDecomposition.Solver is missing appropriate testing</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="celestin">Sébastien Brisard</assignee><reporter username="celestin">Sébastien Brisard</reporter><labels>
                    </labels><created>Mon, 19 Sep 2011 07:22:54 +0100</created><updated>Sun, 18 Mar 2012 09:27:11 +0000</updated><resolved>Tue, 20 Sep 2011 07:14:23 +0100</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13108391" author="celestin" created="Tue, 20 Sep 2011 07:14:23 +0100"><p>Revision r1172988 proposes <tt>FieldLUSolverTest</tt>, a unit test based on what was done with <tt>RealMatrix</tt> (see <tt>LUSolverTest</tt>). The entries are <tt>Fraction</tt>. The tests did not reveal any bug.</p></comment><comment id="13232230" author="celestin" created="Sun, 18 Mar 2012 09:27:11 +0000"><p>Fixed in 3.0.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>60136</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60316</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-672] EmpiricalDistribution(Impl) should implement the Distribution interface</title><link>https://issues.apache.org/jira/browse/MATH-672</link><project id="12310485" key="MATH">Commons Math</project><description><p>To compute cumulative probability at a point x<br/>
if no data have been loaded, throw IllegalStateException<br/>
if x is below the global min, return 0<br/>
if x is above the global max, return 1<br/>
otherwise find the bin that x belongs to, sum the probabilities of the bins below x's bin and use the configured kernel to compute how much of the containing bin's mass should be added the total</p></description><environment/><key id="12523498">MATH-672</key><summary>EmpiricalDistribution(Impl) should implement the Distribution interface</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="psteitz">Phil Steitz</reporter><labels>
                    </labels><created>Sun, 18 Sep 2011 22:35:46 +0100</created><updated>Sun, 7 Apr 2013 10:15:38 +0100</updated><resolved>Fri, 15 Mar 2013 18:27:08 +0000</resolved><version>2.2</version><fixVersion>3.2</fixVersion><due/><votes>0</votes><watches>2</watches><comments><comment id="13208976" author="erans" created="Wed, 15 Feb 2012 23:40:29 +0000"><p>It's not a bug and there is no patch: Postponed.</p></comment><comment id="13481393" author="psteitz" created="Mon, 22 Oct 2012 15:20:15 +0100"><p>I have this coded, am just finishing tests.  I may be able to get it in for 3.1, if <a href="https://issues.apache.org/jira/browse/MATH-878" title="G-Test (Log-Likelihood ratio - LLR test) in math.stat.inference" class="issue-link" data-issue-key="MATH-878"><del>MATH-878</del></a> does not take me too long.  I am OK waiting on this one though if we are ready to roll 3.1</p></comment><comment id="13603606" author="luc" created="Fri, 15 Mar 2013 18:00:58 +0000"><p>Is the code ready to be included?</p></comment><comment id="13603644" author="psteitz" created="Fri, 15 Mar 2013 18:27:08 +0000"><p>Sorry.  Forgot to resolve this when the fix was committed (r1420000) and changes.xml was updated to reflect it.</p></comment><comment id="13624808" author="luc" created="Sun, 7 Apr 2013 10:15:38 +0100"><p>Closing issue as version 3.2 has been released on 2013-04-06.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 15 Feb 2012 23:40:29 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2181</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>11063</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-671] EmpiricalDistribution(Impl) should support a pluggable kernel</title><link>https://issues.apache.org/jira/browse/MATH-671</link><project id="12310485" key="MATH">Commons Math</project><description><p>The normal distribution used to sample data within bins should be pluggable, replaceable by any distribution that can be parameterized by a StatisticalSummary. Adding a protected getKernel(StatisticalSummary) that defaults to provide a normal distribution will enable this.</p></description><environment/><key id="12523496">MATH-671</key><summary>EmpiricalDistribution(Impl) should support a pluggable kernel</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="psteitz">Phil Steitz</assignee><reporter username="psteitz">Phil Steitz</reporter><labels>
                    </labels><created>Sun, 18 Sep 2011 22:22:58 +0100</created><updated>Sun, 7 Apr 2013 10:15:28 +0100</updated><resolved>Sun, 17 Mar 2013 04:30:24 +0000</resolved><version>2.2</version><fixVersion>3.2</fixVersion><due/><votes>0</votes><watches>2</watches><comments><comment id="13604507" author="psteitz" created="Sun, 17 Mar 2013 04:30:24 +0000"><p>Fixed in r1457372</p></comment><comment id="13624807" author="luc" created="Sun, 7 Apr 2013 10:15:28 +0100"><p>Closing issue as version 3.2 has been released on 2013-04-06.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 7 Apr 2013 09:15:28 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2182</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>11064</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-670] Merge EmpiricalDistribution interface and implementation</title><link>https://issues.apache.org/jira/browse/MATH-670</link><project id="12310485" key="MATH">Commons Math</project><description><p>There is only one implementation of this interface.  The source of randomness is now pluggable and the kernel can be made pluggable in the implementation, so I am proposing that we eliminate the interface and rename EmpiricalDistributionImpl to EmpiricalDistribution.</p></description><environment/><key id="12523495">MATH-670</key><summary>Merge EmpiricalDistribution interface and implementation</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="tn">Thomas Neidhart</assignee><reporter username="psteitz">Phil Steitz</reporter><labels>
                    </labels><created>Sun, 18 Sep 2011 22:14:17 +0100</created><updated>Sat, 24 Mar 2012 16:16:39 +0000</updated><resolved>Tue, 7 Feb 2012 19:30:04 +0000</resolved><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13202660" author="tn" created="Tue, 7 Feb 2012 19:30:04 +0000"><p>Change performed in r1241567.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 7 Feb 2012 19:30:04 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2183</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60317</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-669] UnivariateRealIntegrator throws ConvergenceException</title><link>https://issues.apache.org/jira/browse/MATH-669</link><project id="12310485" key="MATH">Commons Math</project><description><p><tt>ConvergenceException</tt> is a checked exception, which goes against the developer's guide. It occurs in the <tt>throws</tt> clause of some methods in package o.a.c.m.analysis.integration. It seems that these occurences are remnants from previous versions, where exceptions were probably checked. This exception is actually never thrown : it is safe to remove it from the <tt>throws</tt> clause.</p></description><environment/><key id="12523194">MATH-669</key><summary>UnivariateRealIntegrator throws ConvergenceException</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="celestin">Sébastien Brisard</reporter><labels>
                    </labels><created>Thu, 15 Sep 2011 15:14:04 +0100</created><updated>Sun, 18 Mar 2012 09:32:51 +0000</updated><resolved>Thu, 15 Sep 2011 15:28:55 +0100</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13105390" author="celestin" created="Thu, 15 Sep 2011 15:28:32 +0100"><p>Done in rev1171111.</p></comment><comment id="13232237" author="celestin" created="Sun, 18 Mar 2012 09:32:51 +0000"><p>Fixed in 3.0.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>60559</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60318</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-668] Polygon difference function produces erroneous results with certain polygons</title><link>https://issues.apache.org/jira/browse/MATH-668</link><project id="12310485" key="MATH">Commons Math</project><description><p>For some polygons, the difference function produces erroneous results.  This appears to happen when one polygon is completely encompassed in another, and the outer has multiple concave sections.</p></description><environment/><key id="12522754">MATH-668</key><summary>Polygon difference function produces erroneous results with certain polygons</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="8">Not a Problem</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="jensenc">Curtis Jensen</reporter><labels><label>difference</label><label>math,</label><label>polygon,</label></labels><created>Mon, 12 Sep 2011 16:18:55 +0100</created><updated>Mon, 4 Mar 2013 18:58:52 +0000</updated><resolved>Fri, 20 Apr 2012 20:19:52 +0100</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><timeoriginalestimate seconds="604800">168h</timeoriginalestimate><timeestimate seconds="604800">168h</timeestimate><comments><comment id="13102732" author="jensenc" created="Mon, 12 Sep 2011 16:32:18 +0100"><p>There are two test cases here.  The first "testdifference1" produces 3 polygons, two of which are correct (one outer polygon and one inner hole polygon).  The third polygon is a rectangular region in the lower left corner of the outer polygon and should not be there.</p>

<p>The second test case "testdifference2" is a simpler example.  Technically, the results are not incorrect, but they are strange.  This example is included because it seems interesting and may help understand the problem.  The inner resultant polygon has two extra points that are collinear with two edges on the polygon.  The extra points don't change the shape of the polygon, but they don't need to be there.</p></comment><comment id="13102737" author="jensenc" created="Mon, 12 Sep 2011 16:38:13 +0100"><p>Never mind on testdifference1.  I think I see the problem (bottom left corner of outer polygon is ambiguous).  I'll work on creating a better example.  Though, testdifference2 is still an interesting case.</p></comment><comment id="13104558" author="jensenc" created="Wed, 14 Sep 2011 16:14:02 +0100"><p>This circle test case takes the difference of two concentric circles.  The results produces is an empty list of vertices, when it should be the outer circle with a hole where the inner circle is.</p></comment><comment id="13192076" author="tn" created="Tue, 24 Jan 2012 11:49:28 +0000"><p>I have checked the attached test cases:</p>

<ul class="alternate" type="square">
	<li>circle test: you remove the outer circle from the inner one, resulting in an empty polygon set, which is correct behaviour. If you switch the two circles, the correct result is returned: a PolygonsSet with two loops: the two circles itself.</li>
</ul>


<ul class="alternate" type="square">
	<li>testdifference2: the described behaviour is implementation specific due to the way the hyperplane is cut when subtracting the two regions.</li>
</ul>
</comment><comment id="13194099" author="luc" created="Thu, 26 Jan 2012 19:21:28 +0000"><p>The fix would probably not imply API change, so it can be delayed to 3.1.</p></comment><comment id="13258490" author="luc" created="Fri, 20 Apr 2012 20:19:52 +0100"><p>I agree with Thomas analyses.</p>

<p>Concerning the difference2 case, the two points are explained by the vertical line at x = 5.0 which comes from the outer shape. The internal representation is a BSP tree and one of this part of the outer boundary creates an hyperplane that splits the inner triangle. When the boundary representation is rebuilt, the two segments are glued together and the points appear there. There is no post-processing that simplifies the representation afterwards.</p>

<p>Concerning the circle test, I guess you mixed the arrays. What is really in the code is that the vertices2 array is build first from outer circle and the vertices1 array is built afterwards from inner circle. So you are really subtracting a big disk from a smaller one. As Thomas explained, computing set2 minus set1 give the expected two boundaries. Another possible change is to build the circles clockwise instead of counter-clockwise, and in this case the two regions are infinite wich a whole at the center, then subtracting set2 from set1 returns a disk with a hole.</p></comment></comments><attachments><attachment id="12494455" name="PolygonsSetCircleTest.java" size="4402" author="jensenc" created="Wed, 14 Sep 2011 16:14:02 +0100"/><attachment id="12494047" name="PolygonsSetTest.java" size="6042" author="jensenc" created="Mon, 12 Sep 2011 16:32:18 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 24 Jan 2012 11:49:28 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2184</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160415</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-667] Representations of the complex numbers</title><link>https://issues.apache.org/jira/browse/MATH-667</link><project id="12310485" key="MATH">Commons Math</project><description><p>Several issues have been raised about the current behaviour of the "Complex" class, located in package "o.a.c.m.complex" (e.g. <a href="https://issues.apache.org/jira/browse/MATH-657" title="Division by zero" class="issue-link" data-issue-key="MATH-657"><del>MATH-657</del></a>, <a href="https://issues.apache.org/jira/browse/MATH-620" title="multiplication of infinity" class="issue-link" data-issue-key="MATH-620"><del>MATH-620</del></a>).<br/>
The ensuing discussion revealed various, sometimes incompatible, requirements with focus on efficiency or consistency or backwards compatibility or comparison with other math packages (Octave) or faithfulness to standards (C99x).</p>

<p>It is thus proposed to create several classes, each with a clearly defined purpose.</p>

<p>The consensus seems to be that the first task is to implement a new "BasicComplex" class where the computational formulae (for computing real and imaginary part of a complex) will be applied directly without worrying about limiting cases (NaNs and infinities). Doing so will automatically produce a behaviour similar to the Java <tt>double</tt> primitive. It is also assumed that it will be the most efficient implementation for "normal" use (i.e. not involving limiting cases).<br/>
This task would consist in copying most of the code in the existing "Complex" class over to "BasicComplex". And similarly with "ComplexTest". Then, in "BasicComplex", one would remove all variables that refer to NaNs and infinities together with checks and special assignments, and adapt the unit tests along the way.</p>

<p>A new "ExtendedComplex" class would inherit from "BasicComplex". This class would aim at representing the compactified space of the complex numbers (one point-at-infinity).</p>

<p>A new "C99Complex" class would inherit from "BasicComplex". This class would aim at implementing the C99x standard.</p></description><environment/><key id="12522742">MATH-667</key><summary>Representations of the complex numbers</summary><type id="5" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Wish</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status><statusCategory id="2" key="new" colorName="blue-gray"/><resolution id="-1">Unresolved</resolution><assignee username="-1">Unassigned</assignee><reporter username="erans">Gilles</reporter><labels><label>features</label></labels><created>Mon, 12 Sep 2011 15:02:30 +0100</created><updated>Mon, 23 Jul 2012 15:39:41 +0100</updated><due/><votes>0</votes><watches>1</watches><comments><comment id="13114530" author="aploese" created="Mon, 26 Sep 2011 09:38:30 +0100"><p>Sounds interesting, </p>

<p>but you will have to make sure that each functions in math will operate and return the same class (ExtendedComplex|C99Complex) ...</p></comment><comment id="13114610" author="erans" created="Mon, 26 Sep 2011 12:52:51 +0100"><blockquote><p>Sounds interesting,</p></blockquote>

<p>Actually, I thought that <em>you</em> would be interested in implementing "BasicComplex" (along the lines described) as this would (supposedly) provide the same behaviour as Octave. And the the unit tests which you attached in <a href="https://issues.apache.org/jira/browse/MATH-620" title="multiplication of infinity" class="issue-link" data-issue-key="MATH-620"><del>MATH-620</del></a> would be the basis for ensuring this.</p>

<blockquote><p>but you will have to make sure that each functions <span class="error">&#91;...&#93;</span> return the same class <span class="error">&#91;...&#93;</span></p></blockquote>

<p>Currently, I see it as the returned instance will belong to the same class as "<tt>this</tt>".</p></comment><comment id="13114707" author="psteitz" created="Mon, 26 Sep 2011 16:00:27 +0100"><p>IIUC the examples and what is being proposed here, I suspect Octave is similar to C99X (preserve signed infinities, "recover" infinities from NaNs), not "BasicComplex." It would be instructive to compare Octave directly against the spec or to look at the source to see if they are just delegating to the gcc impls, which IIRC attempt to implement the spec.  "BasicComplex" could be implemented fairly easily by just removing code from what is now in trunk.  Patches welcome!</p></comment><comment id="13420680" author="erans" created="Mon, 23 Jul 2012 15:39:40 +0100"><p>A realistic "fix version" will be set when this improvement elicits more interest...</p></comment></comments><issuelinks><issuelinktype id="12310010"><name>Incorporates</name><outwardlinks description="incorporates"><issuelink><issuekey id="12554203">MATH-788</issuekey></issuelink></outwardlinks></issuelinktype></issuelinks><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Mon, 26 Sep 2011 08:38:30 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2185</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>11065</customfieldvalue></customfieldvalues></customfield></customfields></item><item><title>[MATH-666] Remove "getData" in "FieldVector" (package "o.a.c.m.linear")</title><link>https://issues.apache.org/jira/browse/MATH-666</link><project id="12310485" key="MATH">Commons Math</project><description><p>"getData()" is redundant with "toArray()".</p>

<p>This is the same kind of change as performed in <a href="https://issues.apache.org/jira/browse/MATH-663" title="Remove &quot;getData&quot; in &quot;RealVector&quot; (package &quot;o.a.c.m.linear&quot;)" class="issue-link" data-issue-key="MATH-663"><del>MATH-663</del></a>.</p></description><environment/><key id="12522660">MATH-666</key><summary>Remove "getData" in "FieldVector" (package "o.a.c.m.linear")</summary><type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="erans">Gilles</reporter><labels><label>api-change</label></labels><created>Sat, 10 Sep 2011 23:01:20 +0100</created><updated>Mon, 4 Mar 2013 18:53:30 +0000</updated><resolved>Sun, 16 Sep 2012 17:56:53 +0100</resolved><fixVersion>3.1</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13456604" author="tn" created="Sun, 16 Sep 2012 17:53:58 +0100"><p>Deprecated FieldVector#getData() and SparseFieldVector#getData() in favor of toArray().<br/>
Move implementation of SparseFieldVector#getData() to toArray().</p>

<p>Done in r1385316.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 16 Sep 2012 16:53:58 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2186</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160416</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-665] QRDecomposition does not have a singularity threshold</title><link>https://issues.apache.org/jira/browse/MATH-665</link><project id="12310485" key="MATH">Commons Math</project><description><p>QRDecompositionImpl tests elements of rDiag for exact equality to 0 in checking singularity.  A singularity threshold should be defined for this class and used in the singularity test.</p></description><environment/><key id="12522260">MATH-665</key><summary>QRDecomposition does not have a singularity threshold</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="psteitz">Phil Steitz</reporter><labels>
                    </labels><created>Thu, 8 Sep 2011 14:54:59 +0100</created><updated>Sat, 24 Mar 2012 16:16:27 +0000</updated><resolved>Mon, 23 Jan 2012 10:40:18 +0000</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13100350" author="celestin" created="Thu, 8 Sep 2011 15:24:07 +0100"><p>I've looked into NR and <a href="http://www.netlib.org/slatec/lin/dqrsl.f" class="external-link" rel="nofollow">SLATEC</a> (see above line 150). In both cases a similar test for strict equality is carried out. This is strange indeed; what would be a reasonable threshold?</p></comment><comment id="13100620" author="luc" created="Thu, 8 Sep 2011 20:29:36 +0100"><p>I guess MathUtils.SAFE_MIN would be an appropriate candidate. It was used in some LAPACK routines (for SVD if I remember correctly).</p></comment><comment id="13190993" author="erans" created="Mon, 23 Jan 2012 10:40:18 +0000"><p>A threshold setting has been provided (defaulting to "zero" so as to retain the previous behaviour) as part of <a href="https://issues.apache.org/jira/browse/MATH-664" title="Replace &quot;LUDecompostionImpl&quot; with &quot;QRDecompositionImpl&quot; in &quot;AbstractLeastSquaresOptimizer&quot;" class="issue-link" data-issue-key="MATH-664"><del>MATH-664</del></a> (r1230509).</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Thu, 8 Sep 2011 14:24:07 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2187</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60319</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-664] Replace "LUDecompostionImpl" with "QRDecompositionImpl" in "AbstractLeastSquaresOptimizer"</title><link>https://issues.apache.org/jira/browse/MATH-664</link><project id="12310485" key="MATH">Commons Math</project><description><p>In some cases, the "getCovariances()" method throws a "SingularMatrixException". This can be avoided by using "QR" instead of "LU" decomposition.</p></description><environment/><key id="12521588">MATH-664</key><summary>Replace "LUDecompostionImpl" with "QRDecompositionImpl" in "AbstractLeastSquaresOptimizer"</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="erans">Gilles</assignee><reporter username="erans">Gilles</reporter><labels>
                    </labels><created>Wed, 7 Sep 2011 14:14:47 +0100</created><updated>Sat, 24 Mar 2012 16:16:46 +0000</updated><resolved>Wed, 18 Jan 2012 11:57:06 +0000</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13100318" author="psteitz" created="Thu, 8 Sep 2011 14:48:32 +0100"><p>At the expense of returning nonsense if the problem is singular.  The only positive rationale for this change is that QR is more stable numerically for near-singular positive definite matrices.  It would be great to add some references supporting that statement.  While the covariance matrices are generally going to be small, performance should also be considered.  Cholesky should also be considered as a possible replacement for LU.</p>

<p>I will open a separate issue on QR's lack of a meaningful singularity test.</p></comment><comment id="13101290" author="erans" created="Fri, 9 Sep 2011 16:49:10 +0100"><p>Independently of the class to be used for computing the inverse, I propose to introduce an additional "getCovariances" method that allows to select the singularity threshold. Is that OK?</p></comment><comment id="13101545" author="psteitz" created="Fri, 9 Sep 2011 21:40:49 +0100"><p>I think that to meet the practical need that led you to open this, that is going to be needed, so I would say first just patch the current LU-based impl to allow the threshold parameter.</p></comment><comment id="13102160" author="erans" created="Sat, 10 Sep 2011 22:55:41 +0100"><p>Done in revision 1167612.</p>

<p>Changing the decomposition algorithm is still to be decided.</p></comment><comment id="13156892" author="luc" created="Thu, 24 Nov 2011 20:08:55 +0000"><p>I would agree with using QR if we don't let the algorithm be chosen.<br/>
From what I learned, least squares is one of the cases where numerical stability is really needed and LU fails.</p></comment><comment id="13183293" author="erans" created="Tue, 10 Jan 2012 14:33:38 +0000"><p>In the current design, it is difficult to allow a custom algorithm because the constructor of a decomposition class takes the matrix as an argument, while the Jacobian matrix is constructed internally (which would be <em>after</em> the instantiation of the decomposition class if created by the caller).</p>

<p>A clean way would be to have a new "Decomposition" interface, with a <tt>decompose(RealMatrix m)</tt> method. That would entail moving code that is currently in the decomposition classes' constructors over to implementations of that new method.<br/>
Since that's unlikely to occur before 3.0, I'll just change the internal algorithm to QR, for now.</p></comment><comment id="13184041" author="erans" created="Wed, 11 Jan 2012 13:03:18 +0000"><p>Slight problem: <tt>QRDecomposition</tt> does not provide for setting a singularity threshold. Allowing the user to set this value was recently added in <tt>AbstractLeastSquares</tt> (cf. above discussion).<br/>
Currently the singularity check in <tt>QRDecomposition</tt> is done through a strict comparison with zero (thus, the threshold is zero). Should that be changed, i.e. should the threshold be user-defined (and defaults to zero in order to not change the behaviour w.r.t previous releases)?<br/>
Or, with "QR", is it fine to always treat any value, however small, as non-singular? In that case the setting of a threshold in <tt>AbstractLeastSquares</tt> should be removed.</p></comment><comment id="13184046" author="luc" created="Wed, 11 Jan 2012 13:07:41 +0000"><p>+1 to add a user-defined threshold with a default to 0.</p></comment><comment id="13184925" author="erans" created="Thu, 12 Jan 2012 13:07:14 +0000"><blockquote><p>add a user-defined threshold <span class="error">&#91;in &quot;QRDecomposition&quot;&#93;</span>.</p></blockquote>

<p>Done in revision 1230509.</p></comment><comment id="13184963" author="erans" created="Thu, 12 Jan 2012 13:49:23 +0000"><p>When changing from "LUDecomposition" to "QRDecomposition" in "AbstractLeastSquares", one unit test fails: Method "testNonInvertible" does not throw the expected exception; i.e. "getCovariances()" completes successfully and returns:</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>-1.6604945575270566E14  1.6604945575270566E14   5.534981858423523E13
 1.6604945575270566E14 -1.6604945575270544E14  -5.534981858423523E13
 5.534981858423521E13  -5.53498185842352E13    -1.84499395280784E13
</pre>
</div></div>

<p>Numerical problem? Perhaps the default should not be zero...</p></comment><comment id="13185563" author="erans" created="Fri, 13 Jan 2012 12:29:30 +0000"><p>Hi Luc.</p>

<p>Assuming that you wrote the "testNonInvertible" unit test, could you remember what it was supposed to show?<br/>
I'm tempted to simply remove it, assuming that the "SingularMatrixException" thrown by "LUDecomposition" was a "coincidence" and did not indicate that the problem was not solvable. "QRDecomposition" performs the requested computation (and it will be up to the user to figure out what to do with the results).</p></comment><comment id="13186213" author="luc" created="Sat, 14 Jan 2012 13:56:40 +0000"><p>The testNonInvertible is really non-invertible. It is based on a singular 3x3 matrix: [<span class="error">&#91;1, 2, -3&#93;</span>, <span class="error">&#91;2, 1, 3&#93;</span>, <span class="error">&#91;-3, 0, -9&#93;</span>]. The third row of this matrix is a linear combination of the two first rows (it is row 1 minus twice row 2).</p>

<p>This is really a numerical problem. If you replace in this test the last call optimizer.getCovariances() with optimizer.getCovariances(1.5e-14), the expected exception is thrown. In this case, the computed diagonal rdiag are -33.34666400106613, -7.05859341563135 and 1.2434497875801753E-14. The last value should really be 0 if perfect arithmetic were available.</p>

<p>So I would suggest to keep the test but use it with a threshold that is consistent with the problem at hand. The value I suggest (1.5e-14) is slightly above the value of the last element and triggers the singularity detection.</p>

<p>The goal of this test is really to check error are handled properly when settings are good, so it makes sense to just update the test now that the threshold can be set by user.</p>

<p>Thanks for having digged into this.</p></comment><comment id="13188418" author="erans" created="Wed, 18 Jan 2012 11:57:07 +0000"><p>Revision 1232846.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Thu, 8 Sep 2011 13:48:32 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2188</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60320</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-663] Remove "getData" in "RealVector" (package "o.a.c.m.linear")</title><link>https://issues.apache.org/jira/browse/MATH-663</link><project id="12310485" key="MATH">Commons Math</project><description><p>"getData()" is redundant with "toArray()".</p></description><environment/><key id="12521561">MATH-663</key><summary>Remove "getData" in "RealVector" (package "o.a.c.m.linear")</summary><type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="erans">Gilles</assignee><reporter username="erans">Gilles</reporter><labels><label>api-change</label></labels><created>Wed, 7 Sep 2011 10:33:56 +0100</created><updated>Sat, 24 Mar 2012 16:17:03 +0000</updated><resolved>Sat, 10 Sep 2011 23:01:39 +0100</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13100232" author="erans" created="Thu, 8 Sep 2011 12:28:55 +0100"><p>"getData()" removed in revision 1166629.</p>

<p>Note: The same change should perhaps be performed for the "FieldVector" family.</p></comment><comment id="13100241" author="celestin" created="Thu, 8 Sep 2011 12:44:00 +0100"><p>And also to <tt>RealMatrix</tt> and <tt>FieldMatrix</tt> <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/help_16.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p></comment><comment id="13100288" author="erans" created="Thu, 8 Sep 2011 14:04:12 +0100"><p>Maybe, maybe not. Keeping "toArray" (in preference to "getData") was to increase similarity with standard Java classes. As there is no such pull for matrix classes, we might keep the existing method.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Thu, 8 Sep 2011 11:44:00 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>61176</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60321</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-662] DecompositionSolver: merging unique "...Impl" classes with their interface</title><link>https://issues.apache.org/jira/browse/MATH-662</link><project id="12310485" key="MATH">Commons Math</project><description><p>From the ML</p>
<blockquote>
<p>Hi.</p>

<p>The "...Decomposition" interfaces in package "linear" have a unique<br/>
implementation. Should the "...Impl" classes be renamed (removing the<br/>
interfaces)?</p>


<p>Regards,<br/>
Gilles</p></blockquote></description><environment/><key id="12521528">MATH-662</key><summary>DecompositionSolver: merging unique "...Impl" classes with their interface</summary><type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="celestin">Sébastien Brisard</assignee><reporter username="celestin">Sébastien Brisard</reporter><labels><label>linear</label></labels><created>Wed, 7 Sep 2011 03:23:02 +0100</created><updated>Sun, 18 Mar 2012 09:29:09 +0000</updated><resolved>Sat, 24 Sep 2011 06:15:05 +0100</resolved><version>3.0</version><due/><votes>0</votes><watches>0</watches><comments><comment id="13109237" author="celestin" created="Wed, 21 Sep 2011 04:10:24 +0100"><p><img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>CholeskyDecomposition</tt>: done in revs r1173475, r1173481 and r1173788.<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>EigenDecomposition</tt>: done in revs r1173964 and r 1173965.<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>LUDecomposition</tt>: done in rev r1175099.<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>QRDecomposition</tt>: done in rev r1175100.<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>RectangularCholeskyDecomposition</tt>: done in rev r1175105.<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>SingularValueDecomposition</tt>: done in rev r1175108.<br/>
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/check.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> <tt>FieldLUDecomposition</tt>: done in rev r1174537.</p></comment><comment id="13232233" author="celestin" created="Sun, 18 Mar 2012 09:29:09 +0000"><p>Fixed in 3.0.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>59448</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160417</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-661] Simplify interface FieldDecompositionSolver</title><link>https://issues.apache.org/jira/browse/MATH-661</link><project id="12310485" key="MATH">Commons Math</project><description><p>In accordance with <a href="https://issues.apache.org/jira/browse/MATH-660" title="Simplify interface FieldVector" class="issue-link" data-issue-key="MATH-660"><del>MATH-660</del></a>, <tt>T[] FieldDecompositionSolver.solve(T[] b)</tt> should be removed.</p></description><environment/><key id="12521527">MATH-661</key><summary>Simplify interface FieldDecompositionSolver</summary><type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="celestin">Sébastien Brisard</reporter><labels><label>linear</label></labels><created>Wed, 7 Sep 2011 03:14:17 +0100</created><updated>Sun, 18 Mar 2012 09:34:01 +0000</updated><resolved>Mon, 19 Sep 2011 07:21:29 +0100</resolved><version>3.0</version><due/><votes>0</votes><watches>0</watches><comments><comment id="13107644" author="celestin" created="Mon, 19 Sep 2011 07:21:15 +0100"><p>Done progressively in revs r1172470, r1172472 and r1172473.</p></comment><comment id="13232239" author="celestin" created="Sun, 18 Mar 2012 09:34:01 +0000"><p>Fixed in 3.0.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>60247</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160418</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-660] Simplify interface FieldVector</title><link>https://issues.apache.org/jira/browse/MATH-660</link><project id="12310485" key="MATH">Commons Math</project><description><p>Following what has been done on <tt>RealVector</tt>, <tt>FieldVector</tt> should be simplified by removing all methods which treat <tt>T[]</tt> as vectors</p>
<ul>
	<li><tt>add(T[])</tt></li>
	<li><tt>append(T[])</tt></li>
	<li><tt>dotProduct(T[])</tt></li>
	<li><tt>ebeDivide(T[])</tt></li>
	<li><tt>ebeMultiply(T[])</tt></li>
	<li><tt>outerProduct(T[])</tt></li>
	<li><tt>projection(T[])</tt></li>
	<li><tt>setSubVector(int, T[])</tt></li>
	<li><tt>subtract(T[])</tt></li>
</ul>
</description><environment/><key id="12521524">MATH-660</key><summary>Simplify interface FieldVector</summary><type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="celestin">Sébastien Brisard</assignee><reporter username="celestin">Sébastien Brisard</reporter><labels><label>linear</label></labels><created>Wed, 7 Sep 2011 03:12:00 +0100</created><updated>Sat, 24 Mar 2012 16:16:48 +0000</updated><resolved>Sat, 17 Sep 2011 19:42:44 +0100</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13107205" author="celestin" created="Sat, 17 Sep 2011 19:42:44 +0100"><p>Done in rev1172044.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>60313</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60322</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-659] Remove solve(double[][]) from DecompositionSolver</title><link>https://issues.apache.org/jira/browse/MATH-659</link><project id="12310485" key="MATH">Commons Math</project><description><p>Following <a href="https://issues.apache.org/jira/browse/MATH-653" title="Rename &quot;AbstractRealVector&quot; to &quot;RealVector&quot;" class="issue-link" data-issue-key="MATH-653"><del>MATH-653</del></a>, where <tt>double[]</tt> were removed from <tt>RealVector</tt>, and <tt>double[] solve(double[])</tt> was removed from <tt>DecompositionSolver</tt>, the method <tt>double[][] solve(double[][])</tt> should be removed from <tt>DecompositionSolver</tt>. <tt>RealMatrix solve(RealMatrix)</tt> should be called instead.</p></description><environment/><key id="12521522">MATH-659</key><summary>Remove solve(double[][]) from DecompositionSolver</summary><type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="celestin">Sébastien Brisard</assignee><reporter username="celestin">Sébastien Brisard</reporter><labels><label>linear</label></labels><created>Wed, 7 Sep 2011 03:00:38 +0100</created><updated>Sun, 18 Mar 2012 09:28:39 +0000</updated><resolved>Fri, 9 Sep 2011 03:15:49 +0100</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13099735" author="celestin" created="Thu, 8 Sep 2011 04:28:00 +0100"><p>Removed calls to this method in unit tests</p>
<ul>
	<li>rev1166512: <tt>CholeskySolverTest</tt></li>
	<li>rev1166513: <tt>EigenSolverTest</tt></li>
	<li>rev1166514: <tt>LUSolverTest</tt></li>
	<li>rev1166515: <tt>QRSolverTest</tt></li>
	<li>rev1166516: <tt>SingularValueSolverTest</tt></li>
</ul>
</comment><comment id="13100096" author="celestin" created="Thu, 8 Sep 2011 07:03:57 +0100"><p>In rev1166533, I removed the call to this method in <tt>AdamsNordsieckTransformer.initializeHighOrderDerivatives( )</tt>. This raises one important question. All across the package o.a.c.m.ode, matrix variables are explicitely declared as <tt>Array2DRowRealMatrix</tt> (as opposed to <tt>RealMatrix</tt>). This leads to an ugly cast (see the end of the presently modified method).<br/>
I was wondering how necessary that was. Would it be thinkable to use the most general supertype for all matrices <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/help_16.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p></comment><comment id="13100603" author="luc" created="Thu, 8 Sep 2011 20:16:34 +0100"><p>ODE code is one of the places where a lot of medium size data sets are changed all the time.<br/>
This means that allocating/deallocating is not negligible with respect to data overwriting. Also as is is a domain where the time to live of data is small (duration of one of few steps).</p>

<p>These two features implied that we selected to do overwriting and reuse of the same arrays and avoided reallocation for the sake of performance. In this specific case, the transformer also acts on matrices that are used by other classes (see both the parameters and the return type of the update updateHighOrderDerivativesPhase</p>
{1,2}
<p> methods) and in fact the layout of these arrays is used by the above classes to avoid both reallocation and copies.</p>

<p>This design in the general case was done several years ago, and the specific case for MultistepIntegrator is more recent. MultistepIntegrator is the base class of both Adams integrator and also the base class of another integrator I want to include, namely the BDFIntegrator).</p>

<p>This design may well not be adapted anymore to current processors and JVM. The multistep integrators are also quite in a flux, there are other JIRA issues about them. So I would really much like to have some benchmarks against real problems before changing this (i.e. state vector between 2 and 50 elements, integrations of several thousand steps, both very simple and very costly differential equations, a small set of events detectors ...). It may also be wise to wait a little on this class as work is done on it for the other issues</p>
</comment><comment id="13100871" author="celestin" created="Fri, 9 Sep 2011 03:14:46 +0100"><p>Removed <tt> solve()</tt> from</p>
<ul>
	<li><tt>DecompositionSolver</tt> in rev1166960</li>
	<li><tt>CholeskyDecompositionImpl.Solver</tt> in rev1166961</li>
	<li><tt>EigenDecompositionImpl.Solver</tt> in rev1166962</li>
	<li><tt>LUDecompositionImpl.Solver</tt> in rev1166963</li>
	<li><tt>QRDecompositionImpl.Solver</tt> in rev1166964</li>
	<li><tt>SingularValueDecompositionImpl.Solver</tt> in rev1166965</li>
</ul>
</comment><comment id="13232232" author="celestin" created="Sun, 18 Mar 2012 09:28:38 +0000"><p>Fixed in 3.0.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Thu, 8 Sep 2011 19:16:34 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>61875</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60323</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-658] Dead code in FastMath.pow(double, double) and some improvement in test coverage</title><link>https://issues.apache.org/jira/browse/MATH-658</link><project id="12310485" key="MATH">Commons Math</project><description><p>This issue concerns the FastMath class and its test class.</p>

<p>(1) In the double pow(double, double) function, there are 2 identical "if" blocks. The second one can be suppressed.<br/>
                if (y &lt; 0 &amp;&amp; y == yi &amp;&amp; (yi &amp; 1) == 1) </p>
{
                    return Double.NEGATIVE_INFINITY;
                }

<p>                // this block is never used -&gt; to be suppressed<br/>
                if (y &lt; 0 &amp;&amp; y == yi &amp;&amp; (yi &amp; 1) == 1) </p>
{
                    return -0.0;
                }<br/>
<br/>
                if (y &gt; 0 &amp;&amp; y == yi &amp;&amp; (yi &amp; 1) == 1) {
                    return -0.0;
                }


<p>(2) To obtain better code coverage, we added some tests case in FastMathTest.java (see attached file)</p>
<ul class="alternate" type="square">
	<li>Added test for log1p</li>
	<li>Added tests in testPowSpecialCases()</li>
	<li>Added tests for a 100% coverage of acos().</li>
	<li>Added tests for a 100% coverage of asin().</li>
</ul>
</description><environment/><key id="12521430">MATH-658</key><summary>Dead code in FastMath.pow(double, double) and some improvement in test coverage</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="ytanguy">Yannick TANGUY</reporter><labels>
                    </labels><created>Tue, 6 Sep 2011 10:28:56 +0100</created><updated>Sat, 24 Mar 2012 16:16:47 +0000</updated><resolved>Fri, 9 Sep 2011 15:15:01 +0100</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13097842" author="ytanguy" created="Tue, 6 Sep 2011 10:30:48 +0100"><p>This class contains some new tests to improve test coverage</p></comment><comment id="13098316" author="luc" created="Tue, 6 Sep 2011 21:16:41 +0100"><p>Could you provide the patch as a unified diff file with respect to current development tree so we can review it ?</p>

<p>Thanks</p></comment><comment id="13100355" author="ytanguy" created="Thu, 8 Sep 2011 15:34:26 +0100"><p>Is that the right format ? </p></comment><comment id="13100397" author="sebb@apache.org" created="Thu, 8 Sep 2011 16:42:32 +0100"><p>The body format (3rd line onwards) is OK, but the header lines are incorrect.<br/>
They should look something like:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
Index: src/main/java/org/apache/commons/math/util/FastMath.java
===================================================================
--- src/main/java/org/apache/commons/math/util/FastMath.java	(revision 1166437)
+++ src/main/java/org/apache/commons/math/util/FastMath.java	(working copy)
</pre>
</div></div>

<p>This was created by updating the file in an SVN working copy and then creating the patch (I used Eclipse, specifying project-relative mode, but svn diff would produce much the same output).</p>

<p>Your patch has completely different names and paths for the input and output files:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
--- D:/DOCUME~1/tanguyy/LOCALS~1/Temp/FastMath.java-revBASE.svn000.tmp.java       jeu. sept.  8 16:28:36 2011
+++ D:/DONNEES/ATELIER_JAVA/workspace/Commons-Math_Trunk/src/main/java/org/apache/commons/math/util/FastMath.java       jeu. sept.  8 16:10:02 2011
</pre>
</div></div>

<p>This means it's impossible to apply the patch automatically.</p>

<p>However, it's not too difficult to fix the header lines, e.g. in the above case to:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
--- FastMath.java       jeu. sept.  8 16:28:36 2011
+++ FastMath.java       jeu. sept.  8 16:10:02 2011
</pre>
</div></div>

<p>and the patch can then be applied in the appropriate directory.</p>

<p>No need to resubmit these particular patches, but if you submit any more please use the proper unified diff format relative to the top-level project directory, so paths start with src/.</p></comment><comment id="13100405" author="ytanguy" created="Thu, 8 Sep 2011 16:46:05 +0100"><p>Ok, thanks for the tip. I'll do it next time.</p></comment><comment id="13100413" author="sebb@apache.org" created="Thu, 8 Sep 2011 17:00:09 +0100"><p>Patches applied.</p></comment><comment id="13100627" author="luc" created="Thu, 8 Sep 2011 20:35:36 +0100"><p>Also try to avoid static imports (and even more static imports with * at the end).<br/>
I have fixed them.</p></comment><comment id="13100734" author="sebb@apache.org" created="Thu, 8 Sep 2011 23:03:10 +0100"><p>Thanks - I did see the wildcard import, but left it as it is test code so not so important.</p></comment><comment id="13100746" author="sebb@apache.org" created="Thu, 8 Sep 2011 23:18:45 +0100"><p>Also, just noticed some tab characters in the test class patch which I have just fixed. We don't allow tabs.</p></comment><comment id="13101078" author="luc" created="Fri, 9 Sep 2011 10:08:05 +0100"><p>I have looked at the added tests.<br/>
The way they are performed is really not clean.<br/>
Could you replace all instances of:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
x = FastMath.someMethod(parameter);
<span class="code-keyword">if</span> (x != <span class="code-object">Double</span>.NEGATIVE_INFINITY)
  <span class="code-keyword">throw</span> <span class="code-keyword">new</span> RuntimeException(<span class="code-quote">"xxx should be -Inf"</span>);
</pre>
</div></div>

<p>by</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
Assert.assertTrue(<span class="code-object">Double</span>.isInf(FastMath.someMethod(parameter)));
</pre>
</div></div>

<p>These are Junit tests so we need to get errors that are counted by the Junit framework, not exceptions that stop the test and whose messages are not directed in the same media.</p>

<p>Also instead of (x == x) or (x != x), you could use the more easy to understand method Double.isNaN<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/error.gif" height="16" width="16" align="absmiddle" alt="" border="0"/>. Most people would not understand why (x == x) could fail.</p>

<p>Could you set up a new patch, using the current state of the FastMathTest file as committed by Sebb ?</p>

<p>Thanks a lot</p></comment><comment id="13101186" author="ytanguy" created="Fri, 9 Sep 2011 13:57:59 +0100"><p>Ok, here is a new patch for FastMathTest.java : I replaced the new tests and also checked and transformed some former ones that also used exceptions.</p></comment><comment id="13101190" author="ytanguy" created="Fri, 9 Sep 2011 14:04:55 +0100"><p>Sorry, I made the same mistake with Tortoise SVN and the header lines are still incorrect : how do you produce a patch with Eclipse ?</p>

<p>-&gt; I'll try to correct it this afternoon.</p></comment><comment id="13101191" author="ytanguy" created="Fri, 9 Sep 2011 14:04:56 +0100"><p>Sorry, I made the same mistake with Tortoise SVN and the header lines are still incorrect : how do you produce a patch with Eclipse ?</p>

<p>-&gt; I'll try to correct it this afternoon.</p></comment><comment id="13101194" author="ytanguy" created="Fri, 9 Sep 2011 14:09:17 +0100"><p>Ok, I replaced the patch and it looks like it should be.</p></comment><comment id="13101203" author="sebb@apache.org" created="Fri, 9 Sep 2011 14:35:40 +0100"><p>Thanks, format looks OK now.</p>

<p>@Luc - sorry, should have noticed the incorrect testing code.</p>

<p>If I'm being picky, I'd say that code such as</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-comment">// Logp of -1.0 should be -Inf
</span>Assert.assertTrue(<span class="code-object">Double</span>.isInfinite(FastMath.log1p(-1.0)));
</pre>
</div></div>

<p>would be better expressed as</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
Assert.assertTrue(<span class="code-quote">"Logp of -1.0 should be -Inf"</span>,<span class="code-object">Double</span>.isInfinite(FastMath.log1p(-1.0)));
</pre>
</div></div>

<p>because it's then obvious what the error is without needing to check which line has failed.<br/>
<span class="error">&#91;And what if the test class has been amended since the test run?&#93;</span></p>

<p>No need to resubmit; I can fix that later, but please consider for future patches.</p></comment><comment id="13101209" author="ytanguy" created="Fri, 9 Sep 2011 14:43:26 +0100"><p>Ok Sebb, I'll put messages in the assertion for future patches.</p></comment><comment id="13101227" author="sebb@apache.org" created="Fri, 9 Sep 2011 15:15:01 +0100"><p>Hope this is now better resolved ...</p></comment></comments><attachments><attachment id="12493594" name="FastMath.java.diff" size="581" author="ytanguy" created="Thu, 8 Sep 2011 15:34:26 +0100"/><attachment id="12493772" name="FastMathTest.java.diff" size="23690" author="ytanguy" created="Fri, 9 Sep 2011 14:08:02 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 6 Sep 2011 20:16:41 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>61819</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60324</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-657] Division by zero</title><link>https://issues.apache.org/jira/browse/MATH-657</link><project id="12310485" key="MATH">Commons Math</project><description><p>In class <tt>Complex</tt>, division by zero always returns NaN. I think that it should return NaN only when the numerator is also <tt>ZERO</tt>, otherwise the result should be <tt>INF</tt>. See <a href="http://en.wikipedia.org/wiki/Riemann_sphere#Arithmetic_operations" class="external-link" rel="nofollow">here</a>.</p></description><environment/><key id="12521240">MATH-657</key><summary>Division by zero</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="2">Won't Fix</resolution><assignee username="erans">Gilles</assignee><reporter username="erans">Gilles</reporter><labels>
                    </labels><created>Fri, 2 Sep 2011 23:38:22 +0100</created><updated>Sat, 24 Mar 2012 16:22:37 +0000</updated><resolved>Sun, 2 Oct 2011 22:14:52 +0100</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13096457" author="erans" created="Sat, 3 Sep 2011 00:08:18 +0100"><p><tt>divide</tt> methods fixed in revision 1164756.</p>

<p>However, the change leads to a bug in <tt>atan</tt>: See test method <tt>testAtanI()</tt>, at line 575 in "ComplexTest.java".</p></comment><comment id="13096572" author="psteitz" created="Sat, 3 Sep 2011 05:06:02 +0100"><p>This is probably best discussed on the mailing list before making changes to contracts in the code.</p>

<p>There are two things going on here.  First, this - possibly - represents another case where the computational formula documented in the code returns NaN and it an argument could be made that another value would be better. The tradeoff is complexity in documentation and overhead in computation.  I would like to see a real practical use case justifying adding this overhead and added complexity in both the code and javadoc.</p>

<p>The second question is more interesting.  Again, decision should be based on practical use cases.  That question is, do we view our complex class as representing the compactified space, including a designated single point at infinity.  One could argue that the answer is yes already, because we have "INF" defined.  But to really do this, we need to identify all of the other infinite points (i.e., change equals) and also modify arithmetic operations uniformly.  I am not sure we really want to do that - first because of performance impacts and second because some users may in fact want to preserve directed infinities.  I would like to hear from users and see actual use cases justifying the changes before we walk down this path.</p></comment><comment id="13096621" author="erans" created="Sat, 3 Sep 2011 10:30:00 +0100"><p>I've just posted a mail on "dev".</p>

<p>IMO, the main argument is consistency. Also with how reals (i.e. <tt>double</tt>) work; IIUC, <a href="https://issues.apache.org/jira/browse/MATH-164" title="Complex - Issue with non-compliance to C99!" class="issue-link" data-issue-key="MATH-164"><del>MATH-164</del></a> triggered a change for that same reason.</p>

<p>Arne Plöse is a user and <a href="https://issues.apache.org/jira/browse/MATH-620" title="multiplication of infinity" class="issue-link" data-issue-key="MATH-620"><del>reported</del></a> that the previous behaviour was not fine for him.</p>

<p>I don't think that this one change can have a discernible performance impact.<br/>
It might not be necessary to map all <tt>Complex</tt> instances that have an infinite component to a single object. I pointed it as a convenient justification for fixing a bug (and for not fixing the other two points reported by Arne in <a href="https://issues.apache.org/jira/browse/MATH-620" title="multiplication of infinity" class="issue-link" data-issue-key="MATH-620"><del>MATH-620</del></a>).</p></comment><comment id="13119071" author="erans" created="Sun, 2 Oct 2011 22:14:52 +0100"><p>An alternative solution has been proposed: <a href="https://issues.apache.org/jira/browse/MATH-667" title="Representations of the complex numbers" class="issue-link" data-issue-key="MATH-667">MATH-667</a>.</p></comment><comment id="13237590" author="luc" created="Sat, 24 Mar 2012 16:22:37 +0000"><p>changing status to closed as 3.0 has been released</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sat, 3 Sep 2011 04:06:02 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2189</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160419</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-656] "isSparse()" method vs marker interfaces</title><link>https://issues.apache.org/jira/browse/MATH-656</link><project id="12310485" key="MATH">Commons Math</project><description><p>From discussions on the "dev" ML, it seems that it would be advantageous to introduce a method "isSparse()" in "RealVector" and in "RealMatrix".<br/>
For "RealVector", it will make sense to use it to select between "iterator()" and "sparseIterator()" in methods implemented in that class.<br/>
We could then remove the "SparseRealVector" and "SparseRealMatrix" interfaces.</p></description><environment/><key id="12521212">MATH-656</key><summary>"isSparse()" method vs marker interfaces</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status><statusCategory id="2" key="new" colorName="blue-gray"/><resolution id="-1">Unresolved</resolution><assignee username="-1">Unassigned</assignee><reporter username="erans">Gilles</reporter><labels>
                    </labels><created>Fri, 2 Sep 2011 18:32:11 +0100</created><updated>Mon, 16 Jul 2012 23:15:52 +0100</updated><fixVersion>4.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13202277" author="erans" created="Tue, 7 Feb 2012 12:19:25 +0000"><p>Postponing to next major version, as it is unlikely that a new discussion on these API issues will occur before the release of 3.0.</p></comment></comments><issuelinks><issuelinktype id="12310010"><name>Incorporates</name><inwardlinks description="is part of"><issuelink><issuekey id="12545537">MATH-765</issuekey></issuelink></inwardlinks></issuelinktype></issuelinks><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2190</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>11066</customfieldvalue></customfieldvalues></customfield></customfields></item><item><title>[MATH-655] General framework for iterative algorithms</title><link>https://issues.apache.org/jira/browse/MATH-655</link><project id="12310485" key="MATH">Commons Math</project><description><p>Following the thread <a href="http://mail-archives.apache.org/mod_mbox/commons-dev/201108.mbox/%3CCAGRH7HrgcgoBA=jcoKovjiQU=TjpQHnspBkOGNCu7oDdKk=K4w@mail.gmail.com%3E" class="external-link" rel="nofollow">Monitoring iterative algorithms</a>, here is a first attempt at defining a general enough framework for iterative algorithms at large. At the moment, the classes provide support for</p>
<ul>
	<li>maximum number of iterations</li>
	<li>events handling
	<ul>
		<li>initialization event (prior to entering the main loop),</li>
		<li>iteration event (after completion of one iteration),</li>
		<li>termination event (after termination of the main loop).</li>
	</ul>
	</li>
</ul>


<p>These classes do not yet provide support for a stopping criterion.<br/>
Some points worth to note</p>
<ul>
	<li>For the time being, the classes are part of the o.a.c.m.linear package.</li>
	<li>For the time being, <tt>IterativeAlgorithm.incrementIterationCount()</tt> throws a <tt>TooManyEvaluationsException</tt>. If the proposed new feature is integrated into CM, then a proper <tt>TooManyIterationsException</tt> should be created, from which the former could derive.</li>
</ul>
</description><environment/><key id="12521130">MATH-655</key><summary>General framework for iterative algorithms</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="2">Won't Fix</resolution><assignee username="-1">Unassigned</assignee><reporter username="celestin">Sébastien Brisard</reporter><labels><label>algorithm</label><label>events</label></labels><created>Fri, 2 Sep 2011 02:26:03 +0100</created><updated>Mon, 4 Mar 2013 18:57:31 +0000</updated><resolved>Thu, 24 Nov 2011 19:43:33 +0000</resolved><version>3.0</version><fixVersion>4.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13095737" author="gsteri1" created="Fri, 2 Sep 2011 04:04:48 +0100"><p>In the IterativeAlgorithm class you use the generic Collection class which you instantiate with an ArrayList. Don't you think it would be better to use one of the classes like CopyOnWriteArraySet? This way you can have listeners attach and detach without explicit synchronization. </p></comment><comment id="13095952" author="erans" created="Fri, 2 Sep 2011 13:51:45 +0100"><p>There are many families of algorithms that have iterative implementations but also share <em>other</em> basic functionality (like the "solvers" family or the "optimizers" family). But there is no multiple inheritance in Java; so, an implementation that would benefit from the boiler-plate code of <tt>IterativeAlgorithm</tt> cannot inherit from it and also from something else (like a solver base class).<br/>
A solution would be that all these families have <tt>IterativeAlgorithm</tt> as their common ancestor; but it would have major (IMHO) drawbacks:</p>
<ul>
	<li>An implementation detail (e.g. the fact that some root solver performs iterations) becomes most prominent.</li>
	<li>Some specific implementations that could in fact be "non-iterative" would nevertheless look like they are.</li>
</ul>


<p>So, how did you intend to plug <tt>IterativeAlgorithm</tt> into the design?<br/>
The presence of a "protected" method like <tt>resetIterationCount</tt> means that it is to be inherited from (i.e. the above "solution").</p></comment><comment id="13095971" author="celestin" created="Fri, 2 Sep 2011 14:22:51 +0100"><blockquote>
<p>A solution would be that all these families have <tt>IterativeAlgorithm</tt> as their common ancestor; but it would have major (IMHO) drawbacks:</p></blockquote>
<p>yes, that was what I had (naively) in mind. An alternative would be to change <tt>IterativeAlgorithm</tt> into an interface, but I'm not so sure of the benefit it would have.<br/>
I intially wanted to have a clean framework to handle events occuring during the iterations of <b>linear</b> solvers, and it came up on the ML that being a bit more general might be usefull. Maybe I over-did it...<br/>
Anyway, what I can do for the time being is merge <tt>IterativeAlgorithm</tt> into <tt>IterativeLinearSolver</tt>. Then, experience would probably reveal whether or not <tt>IterativeLinearSolver</tt> has some interesting features which could be reused elsewhere, in which case an interface could be extracted later on. What do you think of that?</p></comment><comment id="13095983" author="erans" created="Fri, 2 Sep 2011 14:46:39 +0100"><p>Do you mean that you are going back to the solution of merging monitoring with "actual work"?<br/>
If so, I'd prefer that you focus on the "actual work" part and leave the monitoring on the side for the time being. Otherwise, we'll again be stuck with methods that can't be removed because of the backward compatibility requirement...</p></comment><comment id="13095987" author="celestin" created="Fri, 2 Sep 2011 14:56:27 +0100"><p>No, sorry I wasn't very clear.<br/>
I just mean that for the time being, <tt>IterativeLinearSolver</tt> extends <tt>IterativeAlgorithm</tt>. What I'll do, is copy/paste all methods from <tt>IterativeAlgorithm</tt> into <tt>IterativeLinearSolver</tt>, and remove the abstract class <tt>IterativeAlgorithm</tt>.<br/>
So <tt>IterativeLinearSolver</tt> would still have methods to fire events, update the iteration count, etc... Only these methods would be part of <tt>IterativeLinearSolver</tt>, and not of a (too-general) super-class.<br/>
Then, I think it will always be possible to go back at a later point, and re-extract those methods so as to re-create a super-class.<br/>
Am I wrong? I think the event handling is fairly lightweight, but you're right, it might be utterly wrong in the end. I could just set this aside for the time being, as well as custom stopping criteria (as you suggested, a default stopping criterion is now hard-coded in the linear solver itself).</p></comment><comment id="13096011" author="erans" created="Fri, 2 Sep 2011 15:31:12 +0100"><blockquote>
<p>What I'll do, is copy/paste all methods from IterativeAlgorithm into IterativeLinearSolver, <span class="error">&#91;...&#93;</span></p></blockquote>

<p>That's what I understood; the monitoring methods will become part of the API of <tt>IterativeLinearSolver</tt> and it will be "difficult" to remove them (in 3.x).<br/>
I've no precise idea about how a general monitoring framework should be designed but my impression is that a math algorithm class should be (as much as possible) independent of it. We should probably explore all the various suggestions that came up during the discussion on the ML before trying anything lest we want to reinvent the wheel... <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p></comment><comment id="13096576" author="psteitz" created="Sat, 3 Sep 2011 05:28:40 +0100"><p>Another option would be to use composition.  In a sense, what you have created in IterativeAlgorithm is a generalization of the simple Incrementor that we already use composition to attach to classes that maintain iteration counts.  Why not have the IterativeLinerarSolver include an InterativeAlgorithm as a member and delegate the incrementing and event generation to the member?  In that caae, it would probably make sense to change the name to something like IterationMonitor or IterationManager or something like that.  In that way, what gets monitored, what events get raised, how stopping criteria get introduced etc., can evolve and be customized independently for the different classes; but reuse of the basic event propagation and exception generation machinery can be provided in the base class.</p></comment><comment id="13096640" author="luc" created="Sat, 3 Sep 2011 12:43:07 +0100"><p>As a side note, I have compared with design with the needs of the ODE package. Here are the main differences I see.</p>

<p>In ODE, event detection (i.e. what occurs before firing the event) is almost the main feature, it is done using the g() function which performs the bridge between a continuous state and discrete events. I think this could not be extended to general purpose events, so leaving detection out of the API as you proposed it is a good idea. We could use this framework and would still need out own code to adapt to it. Typically, we would keep our g function, and the ODE solver would use it to fire the event.</p>

<p>In ODE, event detection and handling are grouped in the same object, and independent of other events. This means that if class cA detects and handles event eA, class cB which is dedicated to event eB will never be notified for this. In your design the exact opposite approach is taken: events firing and handling are decoupled, and classes listening for events will be notified for all events, not only one. Here again, I think your approach is a good idea, and it is closer to well known design patterns. We could probably deprecate our EventHandler interface and replace it by one interface for detection (using the g function) and another interface for listening.</p></comment><comment id="13096670" author="psteitz" created="Sat, 3 Sep 2011 16:14:53 +0100"><p>Luc, what do you think about my idea of using composition - so the ODE classes would include a monitor element that extends the base monitor? </p></comment><comment id="13096676" author="luc" created="Sat, 3 Sep 2011 16:37:41 +0100"><p>I think composition would be fine. Most probably, most immediate changes in ODE would be limited to our own classes and not user classes. The changes in user classes could be dealt with progressively if we deprecate an interface and set up other interfaces.</p>

<p>We have to be aware that the continuous output and events handling features in ODE are really very important. But I think the proposed API improves things and suits our needs. I did not try to go all the way and check it on real code, but I am confident it will be possible.</p></comment><comment id="13096691" author="celestin" created="Sat, 3 Sep 2011 16:56:00 +0100"><p>All right. I also like Phil's idea. I'll do the indicated changes. It's true that the renamed <tt>IterationManager</tt> can be seen as a kind of improved <tt>Incrementor</tt>. I guess the best place to put the proposed classes would be o.a.c.m.utils (just like <tt>Incrementor</tt>).<br/>
I'll try and include this new feature in the ConjugateGradient method, see how it works.<br/>
Thanks for your advice!</p></comment><comment id="13098520" author="celestin" created="Wed, 7 Sep 2011 02:26:29 +0100"><p>In the attached file <tt>iteration-manager.zip</tt> is a new version which follows Phil's suggestion to use composition instead of inheritance. We now have three classes</p>
<ul>
	<li><tt>IterationManager</tt>: besides the methods to add/remove listeners, fire events and manage the iteration count, I've added <tt>shouldStop()</tt>, which returns <tt>true</tt> if the iterations should be stopped. This method should be called by the iterative algorithm at the end of each iteration; it allows the implementation of a custom stopping criterion. What do you think of this option <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/help_16.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></li>
	<li><tt>IterationListener</tt></li>
	<li><tt>IterationEvent</tt></li>
</ul>


<p>I should also add that I took Greg's suggestion into account, and replaced <tt>ArrayList</tt> by <tt>CopyOnWriteArrayList</tt>. Finally, you will see that <tt>TooManyEvaluationsException</tt> is potentially thrown. In the final version of these classes, I'll define a proper <tt>TooManyIterationsException</tt>, with localized message and so on.</p></comment><comment id="13098573" author="celestin" created="Wed, 7 Sep 2011 04:30:54 +0100"><p>Some minor changes (was too quick declaring some methods final).</p></comment><comment id="13101634" author="erans" created="Sat, 10 Sep 2011 00:11:01 +0100"><blockquote><p><span class="error">&#91;...&#93;</span> I'll define a proper TooManyIterationsException, <span class="error">&#91;...&#93;</span></p></blockquote>

<p>See the changes to the <tt>Incrementor</tt> class in revision 1167387: You can now avoid the trick of catching <tt>MaxCountExceededException</tt> in order to throw a more appropriate exception.</p></comment><comment id="13104329" author="celestin" created="Wed, 14 Sep 2011 08:48:27 +0100"><p>The files were committed (minus the IterationManager.shouldStop(), which was removed) in rev1170462.<br/>
Happy patching!</p></comment><comment id="13104404" author="erans" created="Wed, 14 Sep 2011 11:29:59 +0100"><p>An example to see how it actually works?<br/>
At some point, you might also want to provide unit tests.</p></comment><comment id="13104421" author="celestin" created="Wed, 14 Sep 2011 12:23:09 +0100"><p>Yes, I forgot to mention that I'm about to submit the Conjugate Gradient code, which is fully tested, and uses this framework. I just need to polish some last details up...</p></comment><comment id="13113975" author="celestin" created="Sat, 24 Sep 2011 14:23:45 +0100"><p>Just a quick note to say that the conjugate gradient attached to <a href="https://issues.apache.org/jira/browse/MATH-581" title="Support for iterative linear solvers" class="issue-link" data-issue-key="MATH-581"><del>MATH-581</del></a> uses this framework, in case you would like to see it experimented.<br/>
Sébastien</p></comment><comment id="13114087" author="erans" created="Sat, 24 Sep 2011 23:47:06 +0100"><p>Sébastien,</p>

<p>You should probably commit this new feature, if you think that it is in a good shape.<br/>
Maybe that people will come up with further comments once they see it at work in the unit tests...</p></comment><comment id="13156882" author="celestin" created="Thu, 24 Nov 2011 19:42:35 +0000"><p>As agreed on the mailing-list, resolution of this issue is deferred to later versions, as it requires a more thorough discussion.</p></comment></comments><attachments><attachment id="12493255" name="iteration-manager.zip" size="3565" author="celestin" created="Wed, 7 Sep 2011 02:27:04 +0100"/><attachment id="12493267" name="iterative-algorithm.zip" size="2301" author="celestin" created="Wed, 7 Sep 2011 04:30:54 +0100"/><attachment id="12492695" name="iterative-algorithm.zip" size="2301" author="celestin" created="Fri, 2 Sep 2011 02:27:11 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>3.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Fri, 2 Sep 2011 03:04:48 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2191</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160420</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-654] ValueServer not deterministic for a fixed random number seed</title><link>https://issues.apache.org/jira/browse/MATH-654</link><project id="12310485" key="MATH">Commons Math</project><description><p>I have built an agent-based model using the Apache Commons Math library, which has come in handy.</p>

<p>The ValueServer seemed particularly helpful, as explained at:<br/>
<a href="http://commons.apache.org/math/userguide/random.html" class="external-link" rel="nofollow">http://commons.apache.org/math/userguide/random.html</a></p>

<p>My simulation needs repeatable randomness, so I used this form of the ValueServer constructor:</p>

<p>    ValueServer(RandomData randomData) <br/>
    Construct a ValueServer instance using a RandomData as its source of random data.<br/>
    // <a href="http://commons.apache.org/math/api-2.2/org/apache/commons/math/random/ValueServer.html" class="external-link" rel="nofollow">http://commons.apache.org/math/api-2.2/org/apache/commons/math/random/ValueServer.html</a></p>

<p>However, in my simulation, I found that the ValueServer did not act deterministically if I supplied the same random number seed.</p>

<p>I have not inspected the source code, but I suspect that the ValueServer is not using the `randomData` generator correctly. If it was, then it should be deterministic.</p></description><environment/><key id="12520774">MATH-654</key><summary>ValueServer not deterministic for a fixed random number seed</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="psteitz">Phil Steitz</assignee><reporter username="d.james">David James</reporter><labels>
                    </labels><created>Tue, 30 Aug 2011 18:23:19 +0100</created><updated>Sat, 24 Mar 2012 16:16:32 +0000</updated><resolved>Thu, 1 Sep 2011 01:14:02 +0100</resolved><version>1.1</version><version>1.2</version><version>2.0</version><version>2.1</version><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13094002" author="psteitz" created="Tue, 30 Aug 2011 20:00:38 +0100"><p>Thanks for reporting this.  I assume you are using DIGEST_MODE.  If this is the case and you are comfortable compiling the code in trunk, the fix for <a href="https://issues.apache.org/jira/browse/MATH-634" title="EmpiricalDistributionImpl should use a pluggable RandomGenerator" class="issue-link" data-issue-key="MATH-634"><del>MATH-634</del></a> enables a workaround for this.  Using the reseed method added to EmpiricalDistributionImpl in trunk, you can use ValueServer's getEmpiricalDistribution to get the distribution and then invoke reseed.  Unfortunately, this method does not exist in any released version yet.</p>

<p>The problem is that ValueServer#getNextDigest (what it does for getNext in DIGEST_MODE) delegates to EmpiricalDistributionImpl#getNextValue.  EmpiricalDistributionImpl has its own RandomData instance.  To fix this issue, EmpiricalDistirbutionImpl should add a constructor taking a RandomData and ValueServer should provide this.</p></comment><comment id="13095018" author="psteitz" created="Thu, 1 Sep 2011 01:14:02 +0100"><p>Fixed in r1163875. ValueServer now exposes a reSeed method that when supplied a fixed seed will generate a fixed sequence in any stochastic mode. The RandomDataImpl that it uses internally is passed to the EmpiricalDistributionImpl it creates when used in DIGEST_MODE.  The changes for this issue include an incompatible (vs. 2.x) change: the constructor for EmpiricalDistributionImpl that previously took a RandomData now takes a RandomDataImpl.  The plan for 3.0 is to merge these.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 30 Aug 2011 19:00:38 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>62977</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60325</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-653] Rename "AbstractRealVector" to "RealVector"</title><link>https://issues.apache.org/jira/browse/MATH-653</link><project id="12310485" key="MATH">Commons Math</project><description><p>"AbstractRealVector" is the only implementation of the "RealVector" interface.</p></description><environment/><key id="12520306">MATH-653</key><summary>Rename "AbstractRealVector" to "RealVector"</summary><type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="erans">Gilles</assignee><reporter username="erans">Gilles</reporter><labels>
                    </labels><created>Fri, 26 Aug 2011 22:22:00 +0100</created><updated>Sat, 24 Mar 2012 16:16:36 +0000</updated><resolved>Wed, 7 Sep 2011 08:41:35 +0100</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13092083" author="erans" created="Fri, 26 Aug 2011 23:00:48 +0100"><p>From Sébastien, on the "dev" ML (in the thread with subject "RealMatrix.set(double)"):</p>
<blockquote>
<p>I personnaly have come to dislike the schizophrenia in the RealVector<br/>
interface between double[] and RealVector. As double[] is the simplest<br/>
representation of a vector, all methods which take a RealVector as an<br/>
argument in the RealVector interface are duplicated to also take a<br/>
double[] as an argument. While this is very flexible for end-users, it<br/>
is a bit of a pain when you want to extend this interface in a<br/>
consistent way (and it also make the classes implementing RealVector<br/>
quite cluttered). I'm just wondering what the real benefit is, since<br/>
the existing hierarchy allows (at virtually no cost) the creation of a<br/>
RealArrayVector from a double[] without taking first a (costly) deep<br/>
copy of the specified double[].<br/>
For example, for an end-user, it's not much of a hassle to write<br/>
v.add(new ArrayRealVector(w, false))<br/>
instead of v.add(w)<br/>
w being a double[].</p></blockquote>

<p>I agree.<br/>
Also for the reason that in "AbstractRealVector" many of the methods taking a "double[]" argument actually delegate to the sibling method that taking an "ArrayRealVector" argument, which looks fairly strange (a superclass relying on one of its subclasses). Even stranger, some methods of the "RealVector" interface are not defined in "AbstractRealVector" e.g.</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
RealVector ebeDivide(RealVector)
</pre>
</div></div>
<p>although its equivalent with a "double[]" is defined and seems to call the non-existent one above!<br/>
Of course, it works thanks to polymorphism and the fact that "AbstractRealVector" can never be instantiated; however it makes the code quite unobvious.</p>

<p>Hence, I'd like to remove all the methods that take a "double[]" argument as part of this issue.<br/>
Is there any objection?</p></comment><comment id="13092094" author="erans" created="Fri, 26 Aug 2011 23:18:44 +0100"><p>Also, as already noted elsewhere, the "getData()" method is redundant with "toArray()". One or the other should go.</p></comment><comment id="13092479" author="erans" created="Sun, 28 Aug 2011 14:00:13 +0100"><p>Renaming done in revision 1162511.</p></comment><comment id="13092503" author="psteitz" created="Sun, 28 Aug 2011 16:51:06 +0100"><p>Thanks for doing this, Gilles.  I am fine with getting rid of the double[] clutter and also tossing one of getData() and toArray().  I don't really care which one.  I guess I would marginally prefer toArray as the keeper.</p>

<p>I just committed a bunch of javadoc improvements (at least I hope they are improvements) in r1162543.</p></comment><comment id="13092593" author="erans" created="Mon, 29 Aug 2011 03:02:50 +0100"><p>Removed methods taking a "double[]" arguments from "RealVector" (revision 1162629).</p>

<p>I've left them in "ArrayRealVector"; they seem to make sense there because the "double[]" is the underlying storage of that class.<br/>
Also, they are called within methods that override the base class ones. However, if it is preferable that subclasses do not contain methods that are not in the base class interface, we can either</p>
<ul>
	<li>inline the specialized code and remove the methods, or</li>
	<li>make those methods private.</li>
</ul>


<p>What do you think?</p></comment><comment id="13092656" author="celestin" created="Mon, 29 Aug 2011 07:17:55 +0100"><p>Gilles,<br/>
I would favor inlining.<br/>
I'm still working on iterative solvers, so if you want, I can take care of <tt>RealLinearOperator</tt> (which was added for this special purpose). Indeed, following what you've just done <tt>double[] operate(double[] x)</tt> should probably be removed from this class. Question is: should it also disappear from the daughter class <tt>AbstractRealMatrix</tt>? As an aside, is there any plan to rename <tt>AbstractRealMatrix</tt> to <tt>RealMatrix</tt>?<br/>
Since I'm still working on the interface of linear solvers, I'll remove the method <tt>solve(RealLinearOperator, double[], double[]</tt>, and keep only <tt>solve(RealLinearOperator, RealVector, RealVector</tt> before I submit anything.<br/>
I guess the next step (setting apart the refactoring of RealMatrix/AbstractRealMatrix in the same fashion) would be to look into <tt>DecompositionSolver</tt> as well, and remove any methods taking <tt>double[]</tt> as an input.</p></comment><comment id="13092841" author="erans" created="Mon, 29 Aug 2011 14:55:14 +0100"><blockquote>
<p>I would favor inlining.</p></blockquote>

<p>Done in revision 1162800.</p>

<blockquote>
<p>I can take care of RealLinearOperator <span class="error">&#91;...&#93;</span></p></blockquote>

<p>OK.</p>

<blockquote>
<p>any plan to rename AbstractRealMatrix to RealMatrix?</p></blockquote>

<p>That certainly should be done. <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.gif" height="16" width="16" align="absmiddle" alt="" border="0"/><br/>
Maybe better wait for the conclusion of the ongoing discussion on what to remove/rename in that interface/class...</p>

<blockquote>
<p>DecompositionSolver <span class="error">&#91;...&#93;</span> remove any methods taking double[] as an input.</p></blockquote>

<p>You are welcome to do it.</p></comment><comment id="13094366" author="celestin" created="Wed, 31 Aug 2011 08:43:52 +0100"><blockquote>
<p>I can take care of RealLinearOperator <span class="error">&#91;...&#93;</span></p></blockquote>
<p>Done in revision 1163515 (took me some time to find out how to commit). As agreed, I left RealMatrix untouched (had to remove a @Override tag).</p></comment><comment id="13095795" author="celestin" created="Fri, 2 Sep 2011 07:21:53 +0100"><p>OK, I've started to look into the <tt>DecompositionSolver</tt>. Unfortunately, the method <tt>solve(double[])</tt> gets called in <tt>GaussNewtonOptimizer</tt>. This class makes thorough use of <tt>double[]</tt> as a representation of vectors. There might be a gain in replacing occurences of <tt>double[]</tt> by <tt>ArrayRealVector</tt>. This might be like opening Pandora's box, though.<br/>
For the time being, I can propose a quick fix for <tt>GaussNewtonOptimizer</tt> to call <tt>solve(RealVector)</tt> instead of <tt>solve(double[])</tt>, and work on all implementations of <tt>DecompositionSolver</tt> so as to remove <tt>solve(double[])</tt>, and keep only <tt>solve(RealVector)</tt> (and possibly <tt>solve(ArrayRealVector)</tt>).</p>

<p>How do you like that?</p></comment><comment id="13095834" author="luc" created="Fri, 2 Sep 2011 08:22:34 +0100"><p>OK from me.</p></comment><comment id="13096103" author="celestin" created="Fri, 2 Sep 2011 17:35:20 +0100"><p>Done in rev 1164615.</p></comment><comment id="13096111" author="celestin" created="Fri, 2 Sep 2011 17:41:40 +0100"><ul>
	<li>In rev. 1164618: removed references do <tt>DecompositionSolver.solve(double[])</tt> from all unit tests of <tt>RealMatrix</tt> implementations.</li>
	<li>In rev. 1164622: same with unit tests of <tt>DecompositionSolver</tt> implementations.</li>
</ul>
</comment><comment id="13096994" author="celestin" created="Mon, 5 Sep 2011 04:31:12 +0100"><p>Updated CholeskyDecompositionImpl in rev. 1165155</p></comment><comment id="13097760" author="celestin" created="Tue, 6 Sep 2011 07:25:31 +0100"><ul>
	<li><tt>EigenDecompositionImpl</tt> done with in rev. 1165505</li>
	<li><tt>LUDecompositionImpl</tt> in rev. 1165506</li>
	<li><tt>QRDecompositionSolver</tt> in rev. 1165507</li>
	<li><tt>SingularValueDecompositionSolver</tt> in rev. 1165508</li>
</ul>
</comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 28 Aug 2011 15:51:06 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>62114</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60326</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-652] Tridiagonal QR decomposition has a faulty test for zero... </title><link>https://issues.apache.org/jira/browse/MATH-652</link><project id="12310485" key="MATH">Commons Math</project><description><p>In the method getQT() of TriDiagonalTransformer we have:</p>

<p>    public RealMatrix getQT() {<br/>
        if (cachedQt == null) {<br/>
            final int m = householderVectors.length;<br/>
            cachedQt = MatrixUtils.createRealMatrix(m, m);</p>

<p>            // build up first part of the matrix by applying Householder transforms<br/>
            for (int k = m - 1; k &gt;= 1; --k) {<br/>
                final double[] hK = householderVectors<span class="error">&#91;k - 1&#93;</span>;<br/>
                cachedQt.setEntry(k, k, 1);<br/>
                final double inv = 1.0 / (secondary<span class="error">&#91;k - 1&#93;</span> * hK<span class="error">&#91;k&#93;</span>);<br/>
                if (hK<span class="error">&#91;k&#93;</span> != 0.0) {<br/>
                    double beta = 1.0 / secondary<span class="error">&#91;k - 1&#93;</span>;</p>

<p>The faulty line is : final double inv = 1.0 / (secondary<span class="error">&#91;k - 1&#93;</span> * hK<span class="error">&#91;k&#93;</span>);<br/>
It should be put after the test for the zero, eg:</p>

<p>    public RealMatrix getQT() {<br/>
        if (cachedQt == null) {<br/>
            final int m = householderVectors.length;<br/>
            cachedQt = MatrixUtils.createRealMatrix(m, m);</p>

<p>            // build up first part of the matrix by applying Householder transforms<br/>
            for (int k = m - 1; k &gt;= 1; --k) {<br/>
                final double[] hK = householderVectors<span class="error">&#91;k - 1&#93;</span>;<br/>
                cachedQt.setEntry(k, k, 1);<br/>
                if (hK<span class="error">&#91;k&#93;</span> != 0.0) {<br/>
                    final double inv = 1.0 / (secondary<span class="error">&#91;k - 1&#93;</span> * hK<span class="error">&#91;k&#93;</span>);<br/>
                    double beta = 1.0 / secondary<span class="error">&#91;k - 1&#93;</span>;</p>

</description><environment><p>JAVA</p></environment><key id="12520042">MATH-652</key><summary>Tridiagonal QR decomposition has a faulty test for zero... </summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="gsteri1">greg sterijevski</reporter><labels><label>TriDiagonalTransformer</label></labels><created>Thu, 25 Aug 2011 03:17:29 +0100</created><updated>Sat, 24 Mar 2012 16:17:03 +0000</updated><resolved>Sun, 22 Jan 2012 11:20:56 +0000</resolved><version>3.1</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><timeoriginalestimate seconds="3600">1h</timeoriginalestimate><timeestimate seconds="3600">1h</timeestimate><comments><comment id="13190649" author="tn" created="Sun, 22 Jan 2012 11:19:51 +0000"><p>Patched in r1234486.</p></comment></comments><attachments><attachment id="12491580" name="tridiagonal" size="957" author="gsteri1" created="Thu, 25 Aug 2011 03:17:58 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 22 Jan 2012 11:19:51 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2192</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60327</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-651] eigendecompimpl allocates space for array imagEigenvalues when it is not needed</title><link>https://issues.apache.org/jira/browse/MATH-651</link><project id="12310485" key="MATH">Commons Math</project><description><p>The class variable imagEigenvalues is allocated even there is no use for it. I propose leaving the reference null. Patch will follow. </p></description><environment><p>JAVA</p></environment><key id="12520041">MATH-651</key><summary>eigendecompimpl allocates space for array imagEigenvalues when it is not needed</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="2">Won't Fix</resolution><assignee username="tn">Thomas Neidhart</assignee><reporter username="gsteri1">greg sterijevski</reporter><labels><label>EIGENDECOMPOSITIONIMPL</label></labels><created>Thu, 25 Aug 2011 02:59:37 +0100</created><updated>Mon, 4 Mar 2013 18:57:29 +0000</updated><resolved>Mon, 23 Jul 2012 21:21:41 +0100</resolved><version>3.1</version><due/><votes>0</votes><watches>1</watches><comments><comment id="13090704" author="gsteri1" created="Thu, 25 Aug 2011 03:08:37 +0100"><p>The patch with proposed changes... </p></comment><comment id="13190651" author="tn" created="Sun, 22 Jan 2012 11:34:05 +0000"><p>The current version of EigenDecomposition only works for symmetric matrices which always results in real eigenvalues.</p>

<p>For non-symmetric matrices, there can also be complex eigenvalues, which is currently developed for issue <a href="https://issues.apache.org/jira/browse/MATH-235" title="Eigenvalues/eigenvectors of real asymmetric matrices" class="issue-link" data-issue-key="MATH-235"><del>MATH-235</del></a>.</p>

<p>It is to be discussed how one can identify the result as real or complex:</p>

<ul class="alternate" type="square">
	<li>test for null vector</li>
	<li>test for zero vector</li>
</ul>
</comment><comment id="13417676" author="tn" created="Wed, 18 Jul 2012 22:01:53 +0100"><p>pushing to 4.0 as it would change the current behavior. As of version 3.1, also general asymmetric matrices are supported, thus there may be complex eigen values.</p>

<p>So the variable imagEigenvalues has some use now: it is used to distinguish between real and complex eigenvalues. In case of real eigenvalues, all entries are 0.</p></comment><comment id="13417787" author="erans" created="Wed, 18 Jul 2012 23:42:28 +0100"><blockquote><p>pushing to 4.0 <span class="error">&#91;...&#93;</span></p></blockquote>

<p>Can't we resolve the issue instead?<br/>
The "lost" memory will be quite small compared to the other data stored.</p></comment><comment id="13418106" author="tn" created="Thu, 19 Jul 2012 07:26:55 +0100"><p>That's right indeed. The reason I'd like to keep it open is to discuss how we want to distinguish the case of real / complex eigenvalues. Right now, a user has to make a zero check on the imagEigenvalues array to see if the result is maybe complex.</p>

<p>We could also solve it by adding a new method like "hasComplexEigenvalues" that does the trick.</p></comment><comment id="13419716" author="erans" created="Sat, 21 Jul 2012 02:27:09 +0100"><p>That might a useful addition. Maybe ask for confirmation on the ML.</p>

<p>We can nevertheless resolve this issue, since it was about allocation of an unused array that is now used (IIUC).</p></comment><comment id="13420937" author="tn" created="Mon, 23 Jul 2012 21:21:42 +0100"><p>With the addition of support for general asymmetric matrices in EigenDecomposition, the field imagEigenvalues is actually used, thus the issue is obsolete.</p></comment></comments><issuelinks><issuelinktype id="12310010"><name>Incorporates</name><inwardlinks description="is part of"><issuelink><issuekey id="12410560">MATH-235</issuekey></issuelink></inwardlinks></issuelinktype></issuelinks><attachments><attachment id="12491579" name="eigendecompimpl" size="1996" author="gsteri1" created="Thu, 25 Aug 2011 03:08:37 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 22 Jan 2012 11:34:05 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2193</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160421</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-650] FastMath has static code which slows the first access to FastMath</title><link>https://issues.apache.org/jira/browse/MATH-650</link><project id="12310485" key="MATH">Commons Math</project><description><p>Working on an Android application using Orekit, I've discovered that a simple FastMath.floor() takes about 4 to 5 secs on a 1GHz Nexus One phone (only the first time it's called). I've launched the Android profiling tool (traceview) and the problem seems to be linked with the static portion of FastMath code named "// Initialize tables"</p>

<p>The timing resulted in :</p>
<ul class="alternate" type="square">
	<li>FastMath.slowexp (40.8%)</li>
	<li>FastMath.expint (39.2%)<br/>
 &#45; FastMath.quadmult() (95.6% of expint)</li>
	<li>FastMath.slowlog (18.2%)</li>
</ul>


<p>Hoping that would help</p>

<p>Thanks!</p>

<p>Alexis Robert</p></description><environment><p>Android 2.3 (Dalvik VM with JIT)</p></environment><key id="12519963">MATH-650</key><summary>FastMath has static code which slows the first access to FastMath</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="ale6">Alexis Robert</reporter><labels>
                    </labels><created>Wed, 24 Aug 2011 14:17:37 +0100</created><updated>Tue, 24 Jul 2012 00:24:45 +0100</updated><resolved>Wed, 15 Feb 2012 21:07:46 +0000</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13090224" author="sebb@apache.org" created="Wed, 24 Aug 2011 14:49:51 +0100"><p>Any change needs to bear in mind that the fields need to remain thread-safe, i.e. whatever generates them must publish the values safely to all threads. This is currently achieved by using the static{} block with final fields.</p>

<p>Seems to me there are two possible approaches to fix this:</p>
<ul class="alternate" type="square">
	<li>improve the performance of the existing code</li>
	<li>change the code to use initialisation on demand, so only the required parts are intialised.<br/>
Static holder classes can probably be used here to ensure safe publication.</li>
</ul>


<p>In the case of floor(), that does not need the calculated fields, so it would speed it up.</p>

<p>Note that the FastMath version of floor() is likely to have similar performance to Math.floor(), as it's not an algorithm that benefits from (or indeed needs) the FastMath approach.</p>

<p>It would be useful to have performance figures for more complicated calculations, where FastMath should start to show benefits.</p></comment><comment id="13090294" author="luc" created="Wed, 24 Aug 2011 16:37:35 +0100"><p>The problem is not specific to the floor method. In fact, the first call to any method in FastMath loads the class and at class loading the static constant tables are populated. This problem has already been identified some time ago (I can't find the thread, but I think the example at that time was about the first calls to FastMath.exp).</p>

<p>There are several places where we compute some initial constants or tables and use them later. The computed constants are always the same, and in fact they could be compile-time constants. I wonder if we should have some way to compute these tables at compile time and have them simply loaded without recomputation. The precomputed tables could be either literal doubles in automatically generated java source code or they could be stored in some text files embedded withing the jar.</p>

<p>The same problem occurs for the constants in the Legendre-Gauss integrator (we could use higher degrees if we could store constants), for some ODE integrators, for the Dfp class (in this case they are string literals with a very large number of significant digits) ...</p></comment><comment id="13090308" author="sebb@apache.org" created="Wed, 24 Aug 2011 16:51:47 +0100"><blockquote><p>I wonder if we should have some way to compute these tables at compile time and have them simply loaded without recomputation.</p></blockquote>

<p>Not sure the compiler can create the values.<br/>
But we could add code to print out the generated data, and then incorporate back into the source.</p>

<p>Should be no need to update it once created, however to check the ongoing accuracy of the tables, the generating code could be moved into a test class, and used to compare against the fixed data. This would probably require some package protected helper methods to give access to the private data. Or the generator code could remain in the FastMath class, to be called by the unit test code only.</p></comment><comment id="13096971" author="sebb@apache.org" created="Mon, 5 Sep 2011 01:30:44 +0100"><p>I think the simplest would be to just print out the values of the arrays at the end of the static block, and feed them back into the code.</p>

<p>Rather than deleting the setup code, it could be left as documentation - either commented out or disabled via an if (false) block.</p>

<p>I've done most of the work to implement this.</p>

<p>Thoughts?</p></comment><comment id="13097041" author="luc" created="Mon, 5 Sep 2011 08:38:19 +0100"><p>Rather than commenting it out, wouldn't it be better to have it available at least so tests can check the litteral constants are good? I think this is what you suggested on the list recently.</p></comment><comment id="13097063" author="sebb@apache.org" created="Mon, 5 Sep 2011 10:00:22 +0100"><p>Yes, I did suggest that in an earlier comment.<br/>
However turns out it's quite a bit of extra work to do so, which I was hoping to avoid.<br/>
Also there is already a unit test which compares the accuracy with Dfp.</p></comment><comment id="13098883" author="sebb@apache.org" created="Wed, 7 Sep 2011 13:34:44 +0100"><p>FastMath has been updated to use preset tables, eliminating the static setup code.</p>

<p>@Alexis: Would you be able to check if the changes have helped on Android?<br/>
There is a SNAPSHOT available at:</p>

<p><a href="https://repository.apache.org/content/repositories/snapshots/org/apache/commons/commons-math/3.0-SNAPSHOT/" class="external-link" rel="nofollow">https://repository.apache.org/content/repositories/snapshots/org/apache/commons/commons-math/3.0-SNAPSHOT/</a><br/>
commons-math-3.0-20110907.123252-61.jar</p></comment><comment id="13099185" author="sebb@apache.org" created="Wed, 7 Sep 2011 19:32:24 +0100"><p>It appears that the new code is almost twice as fast as the old.<br/>
However, it can still take 20-30ms to initialise the class.</p>

<p>This seems to be because of the large array initialisations.<br/>
I hacked the code to comment out most of the array entries, leaving just one or two in each of the large arrays, and that improved the startup time to about 6 times as fast - about 6-7ms. <span class="error">&#91;Of course that code won&#39;t work properly&#93;</span></p>

<p>So it might be worth attempting initialisation on demand, using a static holder class that contains the pre-calculated data.</p>

<p>There was also a slight speed up from removing all the unused initialisation code and its data items.</p></comment><comment id="13099203" author="luc" created="Wed, 7 Sep 2011 19:52:55 +0100"><p>Do you think about <a href="http://en.wikipedia.org/wiki/Initialization_on_demand_holder_idiom" class="external-link" rel="nofollow">Initialization on Demand Holder Idiom</a> ?</p>

<p>It would be nice.</p></comment><comment id="13099597" author="sebb@apache.org" created="Wed, 7 Sep 2011 22:51:43 +0100"><p>Yes, I looked at IODH. Turns out that the holder is not required.</p>

<p>Instead, one can use a static class which contains the initial data:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> class FastMath{
  <span class="code-keyword">private</span> <span class="code-keyword">static</span> class lnMant {
    <span class="code-keyword">private</span> <span class="code-keyword">static</span> <span class="code-keyword">final</span> <span class="code-object">double</span> LN_MANT[][] = {
...
    };
...
       <span class="code-object">double</span> d = lnMant.LN_MANT[j][j];
<span class="code-comment">// was <span class="code-object">double</span> d = LN_MANT[i][j];
</span>  }
}
</pre>
</div></div>

<p>Very simple to implement; doing that plus commenting out all init code and data results in speed-up of about 6 times for FastMath.max().</p>

<p>Does not seem to affect performance of method calls once its table(s) has/ve been loaded.</p>

<p>What remains to be decided is what to do with the init code. Some of it might be useful in its own right - Taylor expansions for sine/cosine etc. <br/>
Perhaps create another class (SlowMath anyone?) in the same package. <br/>
And/or move it to the test tree?</p></comment><comment id="13099617" author="sebb@apache.org" created="Wed, 7 Sep 2011 23:28:59 +0100"><p>Another snapshot uploaded as commons-math-3.0-20110907.222813-62.jar</p></comment><comment id="13099632" author="erans" created="Wed, 7 Sep 2011 23:48:05 +0100"><p>IIUC, only the initializations needed by a method call are performed.<br/>
Thus "max" has become fast because it doesn't need any of those data arrays.</p>

<p>For those methods that need the data, one has to compare the startup times between computing the data and loading precomputed data. For methods that only need some of the data, the time gain might not be worth trailing the huge precomputed arrays.</p>

<p>If several calls are made to methods that need most of the data arrays, the initialization time will be increasingly negligible (with respect to the "useful" application running time). Which again renders the precomputed arrays unnecessary.</p>

<p>So, in summary, lazy initialization is very nice, especially for short-lived applications that happen to call methods that don't need the data at all.<br/>
It's still nice for applications that happen to need only part of the data.<br/>
It's useless for applications that will need all the data arrays. (But it probably does not hurt.)<br/>
However, I still don't see an advantage in storing precomputed values. I don't think that it should be adopted just for a toy application that would call a math function once and exit.</p></comment><comment id="13099657" author="sebb@apache.org" created="Thu, 8 Sep 2011 00:27:41 +0100"><p>In my tests, I found that pre-calculating the data is about twice as fast as calculating it in the static block.</p>

<p>That seems a worthwhile improvement to me.</p>

<p>Converting the larger preset data tables to IOD gives a massive improvement for routines that don't need any of the IOD tables, and gives corresponding improvements for methods that only use some of the IOD tables.</p>

<p>It's also trivial to do, so I did it.</p>

<p>Tidying up the code to move the now-unused init code makes only a minor improvement to load times, but is worth it for readability and maintenance.</p>

<p>You can do the tests if you want.<br/>
Math 2.2 is the original FastMath implementation</p>

<p><a href="https://repository.apache.org/content/repositories/snapshots/org/apache/commons/commons-math/3.0-SNAPSHOT/" class="external-link" rel="nofollow">https://repository.apache.org/content/repositories/snapshots/org/apache/commons/commons-math/3.0-SNAPSHOT/</a><br/>
has the jars:<br/>
commons-math-3.0-20110907.123252-61.jar - preset arrays<br/>
commons-math-3.0-20110907.222813-62.jar - the IOD code</p>

<p>So yes, if an application makes lots of calls the overhead will gradually fade away, but the overhead is very large.<br/>
In my test I used exp(1000) which uses an IOD table. <br/>
The repeat time for that is about 5000ns.<br/>
The first times are approx 40,000,000ns (original) and 8,000,000ns (current).</p>

<p>I agree that the lazy init does not help applications that use all the tables.<br/>
However all applications perform better if the table calculation is done beforehand.</p></comment><comment id="13100221" author="erans" created="Thu, 8 Sep 2011 11:59:55 +0100"><blockquote>
<p>In my tests, I found that pre-calculating the data is about twice as fast as calculating it in the static block.</p>

<p>That seems a worthwhile improvement to me.</p></blockquote>

<p>Could you provide the absolute numbers?<br/>
What I contend is that we should not base this change on an extremely unlikely use-case: Launching a JVM for an application that will run for a few seconds of is very costly, and the additional cost of initializing "FastMath" must be compared to the overall initialization time.</p>

<p>What I said in the previous comment is that IOD is <em>fine</em> to use, if only because it will avoid unnecessary memory usage, which might benefit light-weight applications (<em>light-weight</em> is  a much more interesting use-case than <em>short-lived</em>).</p>

<p>I don't like having tables that huge in the source code just for the sake of saving a few seconds.<br/>
(If the data were coming from an external source or were really taking a lot of time to compute, that would be a necessity. But not in this case.)</p>

<p>So, could you please post the timings (also, the total initialization time of the JVM) of </p>
<ul>
	<li>using neither IOD nor preset arrays</li>
	<li>using IOD, but no preset arrays</li>
	<li>using IOD with preset arrays</li>
</ul>


<p>Thanks in advance.</p></comment><comment id="13100617" author="luc" created="Thu, 8 Sep 2011 20:25:57 +0100"><p>It's not that unlikely. At least it is a problem for me in several applications and in this application too (disclaimer: Alexis works on this Android application for me). The overhead is so large it really is becomes prohibitive for me.</p>

<p>Concerning light-weight applications, I think the last changes Sebb introduced are quite efficient. As far as I understand, only the tables that are used are loaded. So if an application uses only the trigonometric functions, and not the logarithm for example, it will load only these ones did I understood correctly ?</p>

<blockquote><p>I don't like having tables that huge in the source code just for the sake of saving a few seconds.</p></blockquote>

<p>Well, on my side, I don't like losing a few seconds just for the sake of reducing source code size <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> As usual our mileage does vary.</p></comment><comment id="13100733" author="sebb@apache.org" created="Thu, 8 Sep 2011 23:01:19 +0100"><blockquote><p>As far as I understand, only the tables that are used are loaded.</p></blockquote>

<p>Yes. I used lazy init for the larger tables only. <br/>
There are two paired tables, each pair in its own class, and another table in a third class.<br/>
The tables are only referenced where they are used.</p></comment><comment id="13100743" author="erans" created="Thu, 8 Sep 2011 23:11:00 +0100"><p>I just want to understand where time is lost. As I said already, I understand that IOD is really useful.<br/>
Sebb reports that loading precomputed tables is twice faster, but that is without IOD, if I understood correctly. I was interested in how much more is gained with preset arrays in the real use-case.<br/>
If we refer to the description of this issue, the problem is that "FastMath.floor" takes about 5 seconds for the first call. Now, with IOD, what does this number become? If the answer is (close to) 0 second, I'd rephrase: I don't like having tables that huge in the source code for no reason.</p></comment><comment id="13102186" author="erans" created="Sun, 11 Sep 2011 01:52:20 +0100"><p>Answering my own question using code committed in revision 1167657.</p>

<p><b>Single call</b><br/>
<em>--- Previous revision ---</em></p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>floor (runs per timed block: 1, timed blocks: 1)
     StrictMath: 5.232920e-01 (0.000000e+00) ms
           Math: 1.188100e-02 (0.000000e+00) ms
       FastMath: 4.942540e+00 (0.000000e+00) ms
</pre>
</div></div>
<p><em>--- Current revision (preset arrays) ---</em></p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>floor (runs per timed block: 1, timed blocks: 1)
     StrictMath: 5.290030e-01 (0.000000e+00) ms
           Math: 1.201200e-02 (0.000000e+00) ms
       FastMath: 4.871144e+00 (0.000000e+00) ms
</pre>
</div></div>
<p><em>--- Current revision (computed arrays) ---</em></p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>floor (runs per timed block: 1, timed blocks: 1)
     StrictMath: 5.150580e-01 (0.000000e+00) ms
           Math: 1.236000e-02 (0.000000e+00) ms
       FastMath: 4.938346e+00 (0.000000e+00) ms
</pre>
</div></div>

<p><b>100 calls</b><br/>
<em>--- Previous revision ---</em></p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>floor (runs per timed block: 10, timed blocks: 10)
     StrictMath: 6.119510e-03 (1.700389e-02) ms
           Math: 8.260500e-04 (3.575574e-04) ms
       FastMath: 5.001669e-02 (1.563012e-01) ms
</pre>
</div></div>
<p><em>--- Current revision (preset arrays) ---</em></p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>floor (runs per timed block: 10, timed blocks: 10)
     StrictMath: 6.157360e-03 (1.718482e-02) ms
           Math: 8.144700e-04 (3.643913e-04) ms
       FastMath: 4.921887e-02 (1.537010e-01) ms
</pre>
</div></div>
<p><em>--- Current revision (computed arrays) ---</em></p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>floor (runs per timed block: 10, timed blocks: 10)
     StrictMath: 7.027420e-03 (1.983324e-02) ms
           Math: 9.193500e-04 (3.579075e-04) ms
       FastMath: 4.789965e-02 (1.498412e-01) ms
</pre>
</div></div>

<p>So, at startup,</p>
<ul>
	<li>it takes about the same time to call <tt>floor</tt> once and 100 times,</li>
	<li>there is no difference between using preset arrays or computing them (<tt>floor</tt> does not need the arrays, so they are not initialized).</li>
</ul>
</comment><comment id="13102190" author="erans" created="Sun, 11 Sep 2011 02:26:16 +0100"><p>Now, for <tt>pow</tt> (which makes use of the tables).</p>

<p><b>Single call</b></p>

<p><em>--- Current revision (preset arrays) ---</em></p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>pow (runs per timed block: 1, timed blocks: 1)
     StrictMath: 3.505750e-01 (0.000000e+00) ms
           Math: 1.212800e-02 (0.000000e+00) ms
       FastMath: 1.615966e+01 (0.000000e+00) ms
</pre>
</div></div>

<p><em>--- Current revision (computed arrays) ---</em></p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>pow (runs per timed block: 1, timed blocks: 1)
     StrictMath: 3.744040e-01 (0.000000e+00) ms
           Math: 1.167500e-02 (0.000000e+00) ms
       FastMath: 6.009579e+01 (0.000000e+00) ms
</pre>
</div></div>

<p><b>100 calls</b></p>

<p><em>--- Current revision (preset arrays) ---</em></p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>pow (runs per timed block: 10, timed blocks: 10)
     StrictMath: 4.989190e-03 (1.327046e-02) ms
           Math: 9.002900e-04 (3.572090e-04) ms
       FastMath: 1.766465e-01 (5.395676e-01) ms
</pre>
</div></div>

<p><em>--- Current revision (computed arrays) ---</em></p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>pow (runs per timed block: 10, timed blocks: 10)
     StrictMath: 4.825060e-03 (1.264487e-02) ms
           Math: 8.913100e-04 (3.244602e-04) ms
       FastMath: 6.132025e-01 (1.920372e+00) ms
</pre>
</div></div>


<p><b>1_000_000 calls</b></p>

<p><em>--- Current revision (preset arrays) ---</em></p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>pow (runs per timed block: 10000, timed blocks: 100)
     StrictMath: 3.579742e-04 (5.042732e-05) ms
           Math: 3.488973e-04 (2.601644e-05) ms
       FastMath: 2.985653e-04 (5.704499e-04) ms
</pre>
</div></div>

<p><em>--- Current revision (computed arrays) ---</em></p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>pow (runs per timed block: 10000, timed blocks: 100)
     StrictMath: 3.574941e-04 (4.608201e-05) ms
           Math: 3.520267e-04 (2.770605e-05) ms
       FastMath: 3.399842e-04 (1.001058e-03) ms
</pre>
</div></div>

<p>One can see that using preset arrays is indeed faster. The ratio of times (calling <tt>pow</tt> either using preset or using computed arrays):</p>
<ul>
	<li>1 call: 0.27</li>
	<li>100 calls: 0.29</li>
	<li>1000000 calls: 0.88</li>
</ul>


<p>Do the above results warrant to triple the size of the source file? IMO, no.<br/>
We are not dealing with a "few seconds" of absolute running time: For each of the 3 runs (single call, one hundred and one million calls), we gain no more than about 45 milliseconds!</p></comment><comment id="13102262" author="luc" created="Sun, 11 Sep 2011 12:14:11 +0100"><blockquote>
<p>We are not dealing with a "few seconds" of absolute running time: For each of the 3 runs (single call, one hundred and one million calls), we gain no more than about 45 milliseconds!</p></blockquote>

<p>On which type of computer do you get these figures ? The initial problem was raised for low end devices. In fact, in the application we are speaking of, I get a loading time that is very very long (tens of seconds, almost one minute, not milliseconds). However, it is impossible for me to separate the time which is due to FastMath from the time which is due to other initialization parts. The initial benchmarks showed that FastMath was the major bottleneck.</p></comment><comment id="13102270" author="erans" created="Sun, 11 Sep 2011 13:53:00 +0100"><p>My micro-benchmark was performed on a PC:</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre> Linux 2.6.32-5-vserver-amd64
 SMP
 x86_64
 Debian GNU/Linux
</pre>
</div></div>

<p>As I pointed out already, it seems indispensable to have a uniform agreed-on way to assess performance.<br/>
Honestly, I cannot guarantee that my "PerfTestUtils" class (which I used to get the above figures) is not somehow flawed; that's why I've asked that people have a look at it and raise their objections. The goal would be to reach a consensus on what procedure <em>must</em> be followed in order to propose (or make) a change to CM that would be justified as performance improvement.</p>

<p>Hopefully, this would also make it easier to compare between different platforms, and to obtain figures that can be compared.</p>

<p>I also think that there should be some follow-up on the part of the reporter, such as publishing here what were the impact of the various changes performed by Sebb (there was no reaction to his offering links to several snapshots and my insistence on getting the new figures).</p>

<p>We already arrived several times to the conclusion that efficiency gains were not always (often?) where it would seem.</p>

<p>Finally, let's recall that I compared the <em>additional</em> gain of preset tables, the baseline case being IOD (which I had nothing against). So, flaws in the benchmark methodology put aside, my current conclusion is that using preset tables is not worth the obvious drawbacks.</p></comment><comment id="13102286" author="psteitz" created="Sun, 11 Sep 2011 16:01:53 +0100"><p>Code now in trunk looks reasonable to me.  Sebb - how did you do the initialization timing tests?  Gilles - do your "single call" tests unload and reload the class each time?</p></comment><comment id="13102297" author="erans" created="Sun, 11 Sep 2011 17:35:54 +0100"><p>Single call is single call: It is run as a unit test that calls the timing method in "PerfTestUtils" with the two parameters ("runs per timed block" and "timed blocks") set to 1.</p></comment><comment id="13102300" author="sebb@apache.org" created="Sun, 11 Sep 2011 17:47:15 +0100"><p>Very simple test to demonstrate effect of IOD and calculate.</p>

<p>Requires that FastMath.USE_PRECOMPUTED_TABLES be set to package-protected and non-final.<br/>
Should be set back to final before release.</p></comment><comment id="13102314" author="erans" created="Sun, 11 Sep 2011 18:38:34 +0100"><p>Looking at the results included in the file:</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>Using exp(100); compute=false
new   12155456       9219       5308       5029       5587       5308       5029       5029       5029       5308
Using exp(100); compute=true
new   34929579       9499       5308       5308       5029       5029       5029       5308       5028       5029
Using max(0,0); compute=false
new       5029       3632       3073       3073       3073       3073       3073       3073       3073       3073
Using max(0,0); compute=true
new       5028       3911       3073       3073       3073       3073       3073       3073       3073       3073
</pre>
</div></div>

<p>IIUC, they seem to agree with mine: By using preset tables, we gain (for <tt>exp</tt>) ~23 milliseconds at the first use.</p></comment><comment id="13102339" author="ale6" created="Sun, 11 Sep 2011 21:22:34 +0100"><p>If you want some stats on Android :</p>

<p>commons-math svn r1153648 : FastMath.&lt;clinit&gt; &#8211; 9213.562ms</p>

<p>commons-math-3.0-20110907.123252-61.jar : FastMath.&lt;clinit&gt; &#8211; 3.937ms</p>

<p>commons-math-3.0-20110907.222813-62.jar : FastMath.&lt;clinit&gt; &#8211; 0.214ms</p>

<p>These times are given by traceview, a profiling tool used on Android. I used a Google Nexus One (1GHz ARMv7 cpu), running Android 2.3.4, with the tracebased JIT enabled.</p>

<p>(by the way, you must also take the profiling tool overhead into account. When it tells 9s, it's more like ~4-5s without the profiling tool enabled.)</p></comment><comment id="13102345" author="erans" created="Sun, 11 Sep 2011 21:58:31 +0100"><p>Thanks!</p>

<p>What the above shows is that preset tables are a significant improvement over the code as it was before you raised this issue. However, Sebb came with the (undisputed) idea of IOD <em>after</em> implementing the (disputed) idea of preset tables. Thus, using the second JAR, you again get a significant improvement, thanks to IOD.</p>

<p>What would definitely settle this discussion is to test the current code, once with <tt>FastMath.USE_PRECOMPUTED_TABLES</tt> set to true and once set to false.<br/>
Both will use IOD, and the difference will be solely due to using preset tables versus computing them at runtime.</p></comment><comment id="13102368" author="ale6" created="Sun, 11 Sep 2011 23:24:24 +0100"><p>commons-math svn r1169543 / FastMath.USE_PRECOMPUTED_TABLES = false : 0.122ms<br/>
commons-math svn r1169543 / FastMath.USE_PRECOMPUTED_TABLES = true : 0.152ms</p>

<p>I've done the tests twice, and I still get higher execution time for USE_PRECOMPUTED_TABLES = true.</p></comment><comment id="13102378" author="erans" created="Mon, 12 Sep 2011 00:41:13 +0100"><p>Hmm, did you measure at least one call to a method that use some tables (e.g. <tt>exp</tt> or <tt>pow</tt>)?</p>

<p>If so, from the figures you posted, it looks like you gain 30 microseconds initialization time. This is utterly insignificant!</p>

<p>Of course, I expect that with <tt>USE_PRECOMPUTED_TABLES</tt> set to <tt>true</tt>, the time for the first call will be higher (as happens in Sebb's test and mine), of the order of 30 milliseconds more.</p></comment><comment id="13102560" author="erans" created="Mon, 12 Sep 2011 12:32:11 +0100"><p>Here is the time it takes to compute the tables (output from <tt>System.nanoTime</tt>):</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>lnmant:  15039332  
expint:  19850373  
expfrac: 12871325  
</pre>
</div></div>
<p>It matches the figures already obtained with the micro-benchmarks (cf. my test with <tt>pow</tt> above): ~47 milliseconds.</p></comment><comment id="13104507" author="erans" created="Wed, 14 Sep 2011 15:03:26 +0100"><p>Side note: The name <tt>USE_PRECOMPUTED_TABLES</tt> is misleading; it should be something like <tt>COMPUTE_TABLES</tt> in order to correspond to its usage.</p></comment><comment id="13104524" author="ale6" created="Wed, 14 Sep 2011 15:31:38 +0100"><p>Yes the Orekit project uses FastMath.pow() but this wasn't accounted because I benchmarked &lt;clinit&gt; which is static code initialization. If I benchmark the overall time took by FastMath.pow, I get this :</p>

<ul class="alternate" type="square">
	<li>USE_PRECOMPUTED_TABLES = false =&gt; 5.768ms</li>
	<li>USE_PRECOMPUTED_TABLES = true =&gt; 182.373ms</li>
</ul>
</comment><comment id="13104591" author="erans" created="Wed, 14 Sep 2011 16:54:01 +0100"><p>With "false" you get ~5 ms, a lower time than me (running on a supposedly "high-end" device aka a desktop PC): ~20 ms.<br/>
With "true" you get a higher time than me: ~70 ms.</p>

<p>I simply don't understand.</p>

<p>Please note that I've also posted a message on the "dev" ML, summarizing the issues related to this report. In particular, I'm interested in what constitutes a realistic use-case.<br/>
Timing a single call to "pow" or "floor" helped detect the source of the problem, but is hardly representative of a useful application...  I would need to have an idea of the actual running time of your application in order to be convinced that the preset table are a necessary workaround.<br/>
In other words, would you have filed this report if you initially got the above 182 ms instead of the reported 4 to 5 seconds?</p></comment><comment id="13105295" author="erans" created="Thu, 15 Sep 2011 13:32:51 +0100"><p>Hi Luc.</p>

<p>Here is a "unit test" that reports timings for the set of function calls which you referred to on the ML.<br/>
Before those calls, I've added a single call to "abs" (as a trivial function that does not trigger the tables initialization) in order to estimate the time taken by the "bare" initialization of "FastMath".</p></comment><comment id="13105918" author="luc" created="Fri, 16 Sep 2011 08:22:17 +0100"><p>Thanks Gilles,</p>

<p>I'll try to use that on the tablet, probably in the next few days.</p></comment><comment id="13107256" author="ale6" created="Sat, 17 Sep 2011 21:57:49 +0100"><p>Hmm, you're right, if I understood correctly we were timing with different method (I was timing with the Android profiler). I've done a little timing test which is this simple Java code :</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre> 
import org.apache.commons.math.util.FastMath;

public class Timing {
	public static void main(String[] args) {
		long start = 0, stop = 0;
		
		start = System.nanoTime();
		FastMath.pow(2, 64);
		stop = System.nanoTime();
		
		System.out.printf("time = %f ms\n", (float)((stop-start)/1000000.0));
	}
}
</pre>
</div></div>

<p>I've launched this program both on my phone and on my laptop (Intel(R) Core(TM)2 Duo CPU T8100 2.10GHz, Linux 3.0, J2SE 1.7.0-b147), and I get the following results.</p>

<p>USE_PRECOMPUTED_TABLES = true (r1169543) :</p>
<ul class="alternate" type="square">
	<li>Computer : time = 33.472633 ms</li>
	<li>Phone : time = 12.847901 ms</li>
</ul>


<p>USE_PRECOMPUTED_TABLES = false (r1169543) :</p>
<ul class="alternate" type="square">
	<li>Computer : time = 79.367081 ms</li>
	<li>Phone : time = 317.840576 ms</li>
</ul>


<p>Old version before the bug report (r1160914 &#8211; 2011-08-24 00:35:06) :</p>
<ul class="alternate" type="square">
	<li>Computer : time = 114.170425 ms</li>
	<li>Phone : time = 3518.310547 ms</li>
</ul>


<p>The thing is that we must consider the fact that Android use an other virtual machine which have really different bytecodes (even in structure, dalvik bytecode is register based), have a different JIT (DalvikVM use a trace based JIT, and iirc Hotspot has a method based JIT), and iirc they also have a different implementation of the standard library (Android use Apache Harmony). So the fact that we may have slightly lower results on a phone on one use case with such low timings doesn't seem me so strange.</p>

<p>By the way, you asked for the use case. I'm developing an Android application using Orekit so the user can have access to often used spatial dynamics computations right from its pocket, like a specialized handheld calculator. These 4s is the time which the user has to wait with a "Please wait ..." dialog, instead of having a instantaneous result (which the user expects &#8211; users are often more exigent for the loading time on a phone than on a computer, that's completely psychological). That's even worse when there is additional data loading or computations, where those 4s have to be added to the data loading/computation time. A response time with the magnitude of 100ms is really perfect !</p></comment><comment id="13107265" author="sebb@apache.org" created="Sat, 17 Sep 2011 22:26:52 +0100"><p>Thanks, useful to know.<br/>
It would be interesting to know the times for the second invocation as well.</p></comment><comment id="13107303" author="erans" created="Sun, 18 Sep 2011 01:39:51 +0100"><p>Alexis,</p>

<p>Are you sure that you wrote the timing cases in the correct order?  Your figures now imply that computing the tables at runtime (case <tt>USE_PRECOMPUTED_TABLES</tt> = true) would be <em>faster</em> than reading them from litteral arrays (case <tt>USE_PRECOMPUTED_TABLES</tt> = false)!</p></comment><comment id="13107397" author="luc" created="Sun, 18 Sep 2011 09:55:34 +0100"><p>I guess it was in the other order. I have just changed the name of the constant so it matches the intent.<br/>
The new name is RECOMPUTE_TABLES_AT_RUNTIME (r1172224).</p>

<p>Sorry for the wrong name.</p></comment><comment id="13109557" author="erans" created="Wed, 21 Sep 2011 16:05:43 +0100"><p>Revision 1173690 shows the resource approach to storing data.</p>

<p>It is still a little slower than literal arrays, but the gap is only about 12 ms now:</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre> compute   ~48 ms
 resources ~18 ms
 array      ~6 ms
</pre>
</div></div>
<p>In exchange for this (relative) slowness, the byte-code size is reduced by half and we can have a "clean" source file. Moreover, we have a clear separation between code and data; the latter is generated once and it would be easy to spot unwanted modification.</p>

<p>I think that even the smaller tables (sine, cosine, tangent) should also be stored in the same way.</p></comment><comment id="13123349" author="erans" created="Sat, 8 Oct 2011 03:03:14 +0100"><p><tt>FastMathLoadCheck</tt> (revision 1180294):</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>Using exp(100); how=compute
    times       result
 42677576 2.688117e+43
     5338 2.688117e+43
     1831 2.688117e+43
     1759 2.688117e+43

Using exp(100); how=resources
    times       result
 12930977 2.688117e+43
     4650 2.688117e+43
     2322 2.688117e+43
     2496 2.688117e+43

Using exp(100); how=array
    times       result
 12281292 2.688117e+43
     4824 2.688117e+43
     1807 2.688117e+43
     1877 2.688117e+43

Using max(0,0); how=compute
    times       result
     3293 0.000000e+00
     1110 0.000000e+00
      375 0.000000e+00
      376 0.000000e+00

Using max(0,0); how=resources
    times       result
     2680 0.000000e+00
      713 0.000000e+00
      382 0.000000e+00
      367 0.000000e+00

Using max(0,0); how=array
    times       result
     3065 0.000000e+00
      520 0.000000e+00
      370 0.000000e+00
      376 0.000000e+00
</pre>
</div></div></comment><comment id="13158729" author="luc" created="Mon, 28 Nov 2011 20:28:01 +0000"><p>I guess this issue is solved now.<br/>
Is everybody happy with the current status ?</p></comment><comment id="13158856" author="erans" created="Mon, 28 Nov 2011 22:19:56 +0000"><p>The reported issue itself is solved, but we still don't agree that it was a premature optimization to stuff a source file with huge literal arrays.</p>

<p>It doesn't seem very tidy to have alternate ways (source file vs resource file) to load the precomputed values. However we can postpone the choice to a later date, when we can all be convinced that one approach is definitely better than the other...</p></comment><comment id="13159310" author="sebb@apache.org" created="Tue, 29 Nov 2011 15:21:09 +0000"><p>I think the code should not be released with multiple implementations.<br/>
These have been very useful for testing purposes, but are unnecessary and potentially confusing for end-users.</p>

<p>If it is desired to keep the alternate implementations, these could perhaps be moved elsewhere in the directory structure.</p>

<p>==</p>

<p>However, I don't think the resources solution is ideal. It requires additional supporting code, the data files are not readable, and is not always as fast as the arrays. It also requires large amounts of temporary stack use when loading the arrays.</p>

<p>Its only advantage as far as I can tell is that it means the arrays can be private to FastMath.<br/>
This could be fixed for the static array case by using element getters rather than providing access to the entire arrays.<br/>
If this proves workable performance-wise, that would be just as good for me as the original local arrays.<br/>
My second choice is external arrays with direct access rather than getters (as is done at present).</p></comment><comment id="13159482" author="luc" created="Tue, 29 Nov 2011 19:41:07 +0000"><p>The core feature is to avoid the computation at start up.<br/>
I agree with both of you about the need to provide only one implementation for this. I personally don't care how this is implemented.</p></comment><comment id="13159702" author="erans" created="Wed, 30 Nov 2011 00:31:09 +0000"><p>I regret that we could not agree about what delay can be deemed <em>short enough</em>. Literal arrays (or loading from resources) reduce the delay but the big gain was through IOD. <em>That part</em> should have closed this specific issue, not the additional pre-computation "feature".<br/>
IMHO, the literal arrays (or resources) trick is a temporary workaround, until it is clear for all that the time gain has become insignificant (and the "RECOMPUTE_TABLES_AT_RUNTIME" can be used again).</p>

<p>The "resources" solution may not be ideal, but neither is the literal arrays one; we have divergent listings of what is more important.<br/>
As for the technical limitations which you point out, maybe that they can be lifted, and if so it could even also improve the efficiency of that alternative.</p>

<p>I can never agree that using literal arrays is the right way to deal with pre-computed data. If it were so, what would be resources for?</p>

<p>Getting 3.0 out is more important than fighting over this, so I'll drop the case.</p>

<p>For "more security" with the literal arrays, you can just add a call to "clone" instead of returning a reference to the internal arrays in "FastMasthLiteralArrays". This will create an additional copy but is likely to be faster than a sequence of getter calls (although this is again a trade-off likely to be below the significance level of most applications...).</p></comment><comment id="13193076" author="sebb@apache.org" created="Wed, 25 Jan 2012 14:57:33 +0000"><p>Added clone to FastMasthLiteralArrays.</p></comment><comment id="13204559" author="luc" created="Thu, 9 Feb 2012 14:50:10 +0000"><p>I finally succeeded in running on my tablet a slightly modified version of Gilles test (thanks for putting this together Gilles). The test involves computing 1abs, 10 floor, 30 sin, 30 cos, 50 sqrt, 5 exp, 2 log which is representative of the small application we developed. The results shown represent the time for all computation, using only FastMath methods. The tests were run 10 times, with a fresh start each time.</p>

<p>Android tablet, Nvidia Tegra2 chipset at 1GHz, 1Gb memory, running Android 3.0.1:</p>
<ul>
	<li>literal arrays:    mean  35.1 ms, standard deviation 0.658 ms</li>
	<li>resources loading: mean  55.2 ms, standard deviation 0.651 ms</li>
	<li>table computation: mean 155.4 ms, standard deviation 0.850 ms</li>
</ul>


<p>Desktop computer, quadcore AMD phenom 9550 quadcore 64 bits at 2.2 GHz, 6 Gb memore, running Debian Linux wheezy with OpenJDK 6 20.0b12:</p>
<ul>
	<li>literal arrays:    mean  71.4 ms, standard deviation 0.449 ms</li>
	<li>resources loading: mean  70.3 ms, standard deviation 1.731 ms</li>
	<li>table computation: mean 132.9 ms, standard deviation 1.661 ms</li>
</ul>


<p>These results show that on the Android platform, the gain from precomputed tables is much larger than on the desktop. In fact, the test runs at least twice faster on Android than on the desktop for precomputed table, and 17% slower when tables are computed at startup.</p>

<p>The difference between literal arrays and resources slightly favors literal arrays on the Android platforms, but on desktop the difference is below standard deviation. In any case, it is quite small (20 ms) and therefore not significant as it is a one time startup cost only.</p>

<p>So I would conclude that precomputing the tables is a worthwhile improvement.</p>

<p>Now considering how pre-computed tables should be set up, I have no clear cut opinion. I would like to not have the tables in the source distribution and have them generated automatically at build time. It seems to me maven does have both generate-source and generate-resource goals in its lifecycle, but these goals are triggered only by specific plugins (antlr, build-helper, ...). These plugins are not suitable for our case which merely consist in compiling a first standalone class, then run it to build either the java file or the resource file.</p>

<p>Any ideas about that ? </p></comment><comment id="13204593" author="sebb@apache.org" created="Thu, 9 Feb 2012 15:44:43 +0000"><p>I agree that (re)computing the tables at build time is unnecessary.</p>

<p>Seems to me there is going to be little or no maintenance needed, now the tables have been built.</p>

<p>So why don't we just move the calculations to a test case which compares the results with the fixed data?</p>

<p>If we do ever need to extend the tables, we update the test case, and then fix the data so the test passes.</p>

<p>i.e. we treat the data the same way we treat the code.</p></comment><comment id="13204599" author="erans" created="Thu, 9 Feb 2012 15:55:44 +0000"><p>Did you time the whole application (including the JVM startup time) or only the test?</p></comment><comment id="13204602" author="luc" created="Thu, 9 Feb 2012 16:01:06 +0000"><p>@Sebb, OK, but we need to document this in case users want to extend the tables by themselves.</p>

<p>@Gilles, I used System.nanotime at test start and at test end. So this does not include JVM start up which adds up to the results.</p></comment><comment id="13204621" author="erans" created="Thu, 9 Feb 2012 16:21:47 +0000"><p>I'd be interested to also see the total time... <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p></comment><comment id="13204625" author="luc" created="Thu, 9 Feb 2012 16:33:20 +0000"><p>On the Android platform I get this for the total time (i.e using the "time" unix command to launch the dalvik virtual machine):</p>

<ul>
	<li>literal arrays: between 0.09 and 0.12 s</li>
	<li>resources: between 0.13 and 0.15 s</li>
	<li>recompute: almost constant 0.25 s</li>
</ul>
</comment><comment id="13206095" author="luc" created="Sat, 11 Feb 2012 12:43:31 +0000"><p>I would like to resolve this issue.<br/>
I think everybody agreed pre-computation was an improvement, and the remaining discussions are about the way the pre-computed tables are loaded. We have two competing implementations for that: resources loaded from a binary file and literal arrays compiled in the library. In both cases, the data is generated beforehand by our own code, so in both case users who wants to re-generate them with different settings can do so.</p>

<p>The advantages of resources are that they are more compact (binary) and don't clutter the sources with large tables.<br/>
The advantages of literal arrays are that the can be checked by mere human beings and don't require any support code.<br/>
The speed difference between the two implementation exists but is tiny.</p>

<p>Two people have already expressed their preferences (one favoring resources the other one favoring literal arrays). I don't have a clear cut preference myself (only a slight bias toward one solution which I prefer to keep for myself).</p>

<p>I would like to have the opinions of newer developers and users on this before selecting one approach. Could someone please provide another opinion ?</p></comment><comment id="13206119" author="celestin" created="Sat, 11 Feb 2012 13:44:58 +0000"><p>Hi Luc,<br/>
thanks for taking care of this difficult issue. I would lean on the binary side, for "safety" reasons: unwanted modifications are less likely to occur. But I do realize that this can be endlessly debated over, and to be really honnest, I would be very happy with either solution (or even the runtime computation: as far as I am concerned, the typical timing of my computations is about 1 hour to one week... plenty of seconds...).<br/>
If we opt for the binary option, maybe we could provide a binary-to-ascii method, for anyone to check the data (maybe that's already available).<br/>
I'm surprised though that binary files take longer to load than litteral. I should have thought that reading a presumably longer table, and parsing a presumably larger number of octets for each double would result in a longer loading time. I must have missed something.</p></comment><comment id="13206181" author="erans" created="Sat, 11 Feb 2012 17:12:08 +0000"><blockquote>
<p>I'm surprised though that binary files take longer to load than litteral. I should have thought that reading a presumably longer table, and parsing a presumably larger number of octets for each double would result in a longer loading time. I must have missed something.</p></blockquote>

<p>Thank you for asking! <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p>

<p>I also raised this puzzling point on the ML, after having implemented the resource loading approach following a suggestion by Ted Dunning, who also had hinted that it would be faster.<br/>
Nobody came up with an explanation about why the implementation is indeed slower. I'd have said that</p>
<ul>
	<li>either there is a bug in my implementation (in the sense that is not done correctly to get the best performance from this approach) and it would nice and useful to find what is wrong there,</li>
	<li>or the loading of big literal arrays is faster and it would be interesting to know why, in order to rectify the conventional wisdom that had us believe otherwise.</li>
</ul>
</comment><comment id="13206188" author="luc" created="Sat, 11 Feb 2012 17:27:25 +0000"><p>I think the reason literal array are faster is that there is no real reading (no file to open, no loop, no read ...). Everything has already been prepared beforehand by the compiler and the loaded class is most probably already in a memory-mapped file. Remember that the array are literal and need to be parsed only by the compiler, not by the JVM at loading time. In fact in both cases what is loaded is binary.</p></comment><comment id="13206195" author="sebb@apache.org" created="Sat, 11 Feb 2012 17:35:29 +0000"><blockquote><p>I would lean on the binary side, for "safety" reasons: unwanted modifications are less likely to occur.</p></blockquote>

<p>Now that the arrays are cloned, I don't see how modifications can occur at run time.<br/>
Source modifications are of course easier. But if that's a concern, let's store all the code as resources!</p>

<blockquote><p>reading a presumably longer table, and parsing a presumably larger number of octets for each double would result in a longer loading time</p></blockquote>

<p>Why should the literal case need parsing? The compiler already parsed the source when the class was compiled.<br/>
I don't see why the literal case should use more octets either.</p>

<p>I agree it would be nice to know the source of the "conventional wisdom" - maybe the assumptions it was based on no longer hold.</p></comment><comment id="13206208" author="erans" created="Sat, 11 Feb 2012 17:54:34 +0000"><p>All right, it's not a issue of loading more bytes.<br/>
If I'm not mistaken, Ted indicated that the bytecode for constructing an array from a list of elements was inefficient; I don't recall exactly why and I know nothing about bytecode... <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/sad.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p></comment><comment id="13208796" author="luc" created="Wed, 15 Feb 2012 21:07:46 +0000"><p>Soved in subversion repository as of r1244725.</p>

<p>Selected Sebb's patch using literal arrays with a cloning protection.</p></comment><comment id="13208820" author="erans" created="Wed, 15 Feb 2012 21:49:18 +0000"><p>I may be mistaken but I think that cloning the arrays is useless: "clone()" protects the arrays in <tt>FastMathLiteralArrays</tt> but not the arrays that are actually used.<br/>
Since the arrays are "private", only a bug local to <tt>FastMath</tt> can mess with them. And, if there is a bug, it will have the same effect whether "clone()" is called or not.</p></comment><comment id="13209476" author="luc" created="Thu, 16 Feb 2012 16:19:12 +0000"><p>OK, I removed the clone in r1245062.</p></comment><comment id="13214543" author="sebb@apache.org" created="Thu, 23 Feb 2012 10:55:45 +0000"><blockquote><p>"clone()" protects the arrays in FastMathLiteralArrays</p></blockquote>

<p>That was the whole point of the clone.</p></comment></comments><attachments><attachment id="12493957" name="FastMathLoadCheck.java" size="2314" author="sebb@apache.org" created="Sun, 11 Sep 2011 17:47:15 +0100"/><attachment id="12494606" name="LucTestPerformance.java" size="6887" author="erans" created="Thu, 15 Sep 2011 13:32:51 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 24 Aug 2011 13:49:51 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2194</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60328</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-649] SimpleRegression needs the ability to suppress the intercept</title><link>https://issues.apache.org/jira/browse/MATH-649</link><project id="12310485" key="MATH">Commons Math</project><description><p>The SimpleRegression class is a useful class for running regressions involving one independent variable. It lacks the ability to constrain the constant to be zero. I am attaching a patch which gives a constructor for setting NOINT. I am also checking in two NIST data sets for noint estimation. </p></description><environment><p>JAVA</p></environment><key id="12519517">MATH-649</key><summary>SimpleRegression needs the ability to suppress the intercept</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="gsteri1">greg sterijevski</assignee><reporter username="gsteri1">greg sterijevski</reporter><labels><label>NOINTERCEPT</label><label>SIMPLEREGRESSION</label></labels><created>Sun, 21 Aug 2011 06:02:08 +0100</created><updated>Sat, 24 Mar 2012 16:16:40 +0000</updated><resolved>Sun, 27 Nov 2011 20:35:42 +0000</resolved><version>1.2</version><version>2.1</version><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><timeoriginalestimate seconds="7200">2h</timeoriginalestimate><timeestimate seconds="7200">2h</timeestimate><comments><comment id="13088316" author="gsteri1" created="Sun, 21 Aug 2011 06:02:57 +0100"><p>Simple regression updates... </p></comment><comment id="13088532" author="psteitz" created="Mon, 22 Aug 2011 06:00:05 +0100"><p>Thanks for the patch.  Looks like a bunch of formatting changes mixed in with the actual code mods.  Would you mind creating a patch with just the code changes?  Thanks!</p></comment><comment id="13088638" author="sebb@apache.org" created="Mon, 22 Aug 2011 13:09:08 +0100"><p>Typo</p></comment><comment id="13088737" author="gsteri1" created="Mon, 22 Aug 2011 15:38:28 +0100"><p>Mea Culpa!</p>

</comment><comment id="13100894" author="gsteri1" created="Fri, 9 Sep 2011 03:51:09 +0100"><p>Phil,</p>

<p>I must have missed this email. I am sorry. I will get this done, and the<br/>
other changes to support the UpdatingMultipleLinearRegression class.</p>

<p>I updated my source and noticed the changes were missing. I did my detective<br/>
work and noticed this.</p>

<p>Mea Culpa!!</p>

<p>-Greg</p>

</comment><comment id="13100933" author="gsteri1" created="Fri, 9 Sep 2011 04:42:57 +0100"><p>Now without all the formatting changes!</p></comment><comment id="13100936" author="gsteri1" created="Fri, 9 Sep 2011 04:44:28 +0100"><p>I will check both the source changes and test changes once I have clean build (maven site) and there are no style or formatting errors. </p>
</comment><comment id="13101968" author="gsteri1" created="Sat, 10 Sep 2011 05:21:40 +0100"><p>commit - r1167451<br/>
I have pushed the cleaned up code. The changes consist of the introduction of a boolean, hasIntercept and changes in the calculation of slope/intercept.  </p></comment><comment id="13102064" author="psteitz" created="Sat, 10 Sep 2011 16:51:11 +0100"><p>Need to update the user guide.</p></comment></comments><attachments><attachment id="12491080" name="simplereg" size="10005" author="gsteri1" created="Sun, 21 Aug 2011 06:02:57 +0100"/><attachment id="12493723" name="simplereg2" size="5468" author="gsteri1" created="Fri, 9 Sep 2011 04:42:57 +0100"/><attachment id="12491081" name="simpleregtest" size="3153" author="gsteri1" created="Sun, 21 Aug 2011 06:02:57 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>3.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Mon, 22 Aug 2011 05:00:05 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2195</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60329</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-648] SimpleRegression has extraneous constructor</title><link>https://issues.apache.org/jira/browse/MATH-648</link><project id="12310485" key="MATH">Commons Math</project><description><p>The SimpleRegression(int) constructor added in version 2.2 has no effect on any statistics computed by the class.  The private TDistributionImpl data member that this constructor initializes is no longer meaningful, as a new distribution instance is created each time it is needed.  The T distribution implementation used in computations is no longer meaningfully pluggable, so the instance field should be removed, along with this constructor.</p></description><environment/><key id="12519509">MATH-648</key><summary>SimpleRegression has extraneous constructor</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="psteitz">Phil Steitz</assignee><reporter username="psteitz">Phil Steitz</reporter><labels>
                    </labels><created>Sat, 20 Aug 2011 22:27:31 +0100</created><updated>Sat, 24 Mar 2012 16:16:50 +0000</updated><resolved>Sat, 20 Aug 2011 22:46:40 +0100</resolved><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13088278" author="psteitz" created="Sat, 20 Aug 2011 22:46:40 +0100"><p>Fixed in r1159918.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>64317</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60330</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-647] MATH-449</title><link>https://issues.apache.org/jira/browse/MATH-647</link><project id="12310485" key="MATH">Commons Math</project><description/><environment/><key id="12519125">MATH-647</key><summary>MATH-449</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="8">Not a Problem</resolution><assignee username="-1">Unassigned</assignee><reporter username="meyerjp">Patrick Meyer</reporter><labels>
                    </labels><created>Wed, 17 Aug 2011 15:55:45 +0100</created><updated>Wed, 17 Aug 2011 15:59:47 +0100</updated><resolved>Wed, 17 Aug 2011 15:59:47 +0100</resolved><due/><votes>0</votes><watches>0</watches><comments><comment id="13086366" author="meyerjp" created="Wed, 17 Aug 2011 15:59:47 +0100"><p>Error. This issue should not have been created</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>64799</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160422</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-646] Unmodifiable views of RealVector</title><link>https://issues.apache.org/jira/browse/MATH-646</link><project id="12310485" key="MATH">Commons Math</project><description><p>The issue has been discussed on the <a href="http://mail-archives.apache.org/mod_mbox/commons-dev/201108.mbox/&lt;CAGRH7HqxUb2y1HmFt9VJ-kxsXwipk_MdO0D=rNuazmGPNOTVrA@mail.gmail.com&gt;" class="external-link" rel="nofollow">mailing list</a>. Please find attached a proposal for a new class <tt>UnmodifiableRealVector</tt>. I chose not to nest it in <tt>AbstractRealVector</tt> because it would make the corresponding file huge. Therefore, <tt>UnmodifiableRealVector</tt> is <tt>final</tt>. Maybe you'd like it to be <tt>private</tt> as well? A static method is provided in <tt>AbstractRealVector</tt> to build an <tt>UnmodifiableRealVector</tt> from any <tt>RealVector</tt>.<br/>
Tests are also provided. Since iterating through different implementations of <tt>RealVector</tt> is actually different, a test is provided for <tt>UnmodifiableRealVector</tt> built on <tt>ArrayRealVector</tt> and <tt>OpenMapRealVector</tt>. These tests both derive from the same abstract test class. Hope everything works fine.</p></description><environment/><key id="12518812">MATH-646</key><summary>Unmodifiable views of RealVector</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="celestin">Sébastien Brisard</reporter><labels><label>linear</label><label>vector</label></labels><created>Sun, 14 Aug 2011 08:59:35 +0100</created><updated>Sun, 18 Mar 2012 09:30:07 +0000</updated><resolved>Thu, 1 Sep 2011 13:26:03 +0100</resolved><version>3.0</version><due/><votes>0</votes><watches>0</watches><comments><comment id="13084913" author="erans" created="Sun, 14 Aug 2011 23:08:08 +0100"><blockquote>
<p>I chose not to nest it in AbstractRealVector because it would make the corresponding file huge.</p></blockquote>

<p>Rather than an issue of large source file, the issue is whether this class should part of the public API.<br/>
Personally I think that it shouldn't because, as discussed on the ML, it is useful from the perspective of the caller (it cannot be modified by the callee) but is not immutable. A method signature containing an "UnmodifiableRealVector" parameter could be confusing (leading to a false sense of security). I'd prefer it to be a private class defined inside "AbstractRealVector.java"; the only way to create instances would be by calling the "unmodifiableRealVector" static method. </p>

<p>In "UnmodifiableEntry", is it necessary to have a constructor?<br/>
I'm suspicious that it is possible to call "setIndex" on the supposedly unmodifiable entry. Maybe that it is harmless <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/help_16.gif" height="16" width="16" align="absmiddle" alt="" border="0"/>.<br/>
In fact, I must admit that the whole "Entry" hierarchy looks odd to me. Maybe that we should have closer look at <a href="https://issues.apache.org/jira/browse/MATH-626" title="Move RealVector.sparseIterator() to   SparseRealVector" class="issue-link" data-issue-key="MATH-626"><del>MATH-626</del></a>. I have now the impression that moving the sparse vectors into their own hierarchy would simplify a lot of methods...</p>

<p>Thanks for the tests; they look quite thorough!</p>

<p>A few things in "UnmodifiableRealVectorAbstractTest":</p>
<ul>
	<li>The utility method "testMethod" should probably be named something like "doTest" or "callMethod" to avoid confusion (as by convention "test..." are used for methods called by JUnit). Also, it should be private.</li>
	<li>Didn't you forget to write the "@Test" annotation for "testGetSubVector"?</li>
	<li>I think that it's better to leave the stack trace printing to JUnit (cf. the exceptions generated by the "reflection" calls): You could just declare those exceptions in the methods signature.</li>
	<li>You've excluded "ebeDivide" from the generic test but it is not handled separately.</li>
</ul>
</comment><comment id="13085303" author="celestin" created="Mon, 15 Aug 2011 21:18:58 +0100"><blockquote>
<p>Rather than an issue of large source file, the issue is whether this class should part of the public API.<br/>
Personally I think that it shouldn't</p></blockquote>
<p>I agree, that's the reason why I suggested we make this class private. No problem, I'll make it a nested, anonymous class within the <tt>unmodifiableRealVector()</tt> method.</p>
<blockquote>
<p>I'm suspicious that it is possible to call "setIndex" on the supposedly unmodifiable entry. Maybe that it is harmless?</p></blockquote>
<p>I have checked that calling <tt>setIndex</tt> is indeed harmless while iterating over the vector in question. However, in my view, this method sould not be visible.</p>

<p>Thanks for your detailed review of the code. I'll have these errors corrected by the end of this week, if that's OK with you.</p></comment><comment id="13085329" author="erans" created="Mon, 15 Aug 2011 22:05:12 +0100"><p>There must be one public (or with package access) class in each Java source file.<br/>
But you can have additional ones (without access qualifier), not necessarily nested. Thus, in "AbstractRealVector.java":</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> class AbstractRealVector <span class="code-keyword">implements</span> RealVector {
  <span class="code-comment">// ...
</span>
  <span class="code-keyword">public</span> <span class="code-keyword">static</span> RealVector unmodifiableRealVector(RealVector v) {
    <span class="code-keyword">return</span> <span class="code-keyword">new</span> UnmodifiableRealVector(v);
  }
}

class UnmodifiableRealVector <span class="code-keyword">implements</span> RealVector {
  <span class="code-comment">// ...
</span>}
</pre>
</div></div>

<p>This makes for slightly less cluttered code.</p></comment><comment id="13088928" author="celestin" created="Mon, 22 Aug 2011 19:55:04 +0100"><p>Here is a new patch taking into account your comments. I didn't know about putting several classes into the same <tt>*.java</tt> file. The problem is you cannot make <tt>UnmodifiableRealVector</tt> private. I therefore resorted to a nested class. Hope the file does not get to cluttered.</p></comment><comment id="13090164" author="erans" created="Wed, 24 Aug 2011 13:21:45 +0100"><p>Committed, with some small changes, in revision 1161064.<br/>
Before posting a patch, please don't forget to look at the output of "mvn clean site" for Javadoc warnings and at "checkstyle.html" (in "target/site").</p>

<p>Couldn't we call the "unmodifiableRealVector" method simply "unmodifiableVector"?</p></comment><comment id="13090179" author="celestin" created="Wed, 24 Aug 2011 13:37:14 +0100"><blockquote>
<p>Before posting a patch, please don't forget to look at the output of "mvn clean site" for Javadoc warnings and at "checkstyle.html" (in "target/site").</p></blockquote>
<p>I'm sorry, I'll do that next time. I must have mis-configured checkstyle in my Eclipse. Sorry again to waste your time.</p>

<blockquote>
<p>Couldn't we call the "unmodifiableRealVector" method simply "unmodifiableVector"?</p></blockquote>
<p>I'm all for it. Are you going to do it, or should I submit a new patch?</p>

<p>While we are at it, shouldn't we provide an unmodifiable view of matrices, following the same lines? Shall I open a JIRA ticket?</p></comment><comment id="13090190" author="erans" created="Wed, 24 Aug 2011 14:10:25 +0100"><p>For "unmodifiableRealVector" -&gt; "unmodifiableVector", I can do it; I was just wondering whether there could be any side-effects (like the risk of having another method like this in the future) or whether it would be better to have a suffix that is exactly the name of the returned type...</p>

<p>For the matrix view, do you have a need for it now? If not, it could be delayed to 3.1 and, if you want, you could tackle issues that must be resolved before 3.0.</p></comment><comment id="13090254" author="celestin" created="Wed, 24 Aug 2011 15:26:42 +0100"><p>I could use unmodifiable views of matrices, but I'm happy implementing it outside the o.a.c.m library for the time being, and submitting it later on.<br/>
I can then concentrate on other issues.<br/>
I guess <a href="https://issues.apache.org/jira/browse/MATH-581" title="Support for iterative linear solvers" class="issue-link" data-issue-key="MATH-581"><del>MATH-581</del></a> is still scheduled for 3.0 (support for iterative linear solvers)?</p></comment><comment id="13232235" author="celestin" created="Sun, 18 Mar 2012 09:30:07 +0000"><p>Fixed in 3.0.</p></comment></comments><attachments><attachment id="12491246" name="MATH-646.patch" size="34163" author="celestin" created="Mon, 22 Aug 2011 19:55:04 +0100"/><attachment id="12490376" name="MATH-646.patch" size="33860" author="celestin" created="Sun, 14 Aug 2011 09:08:36 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 14 Aug 2011 22:08:08 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>62934</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160423</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-645] MathRuntimeException with simple ebeMultiply on OpenMapRealVector</title><link>https://issues.apache.org/jira/browse/MATH-645</link><project id="12310485" key="MATH">Commons Math</project><description><p>The following piece of code</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">import</span> org.apache.commons.math.linear.OpenMapRealVector;
<span class="code-keyword">import</span> org.apache.commons.math.linear.RealVector;

<span class="code-keyword">public</span> class DemoBugOpenMapRealVector {
    <span class="code-keyword">public</span> <span class="code-keyword">static</span> void main(<span class="code-object">String</span>[] args) {
        <span class="code-keyword">final</span> RealVector u = <span class="code-keyword">new</span> OpenMapRealVector(3, 1E-6);
        u.setEntry(0, 1.);
        u.setEntry(1, 0.);
        u.setEntry(2, 2.);
        <span class="code-keyword">final</span> RealVector v = <span class="code-keyword">new</span> OpenMapRealVector(3, 1E-6);
        v.setEntry(0, 0.);
        v.setEntry(1, 3.);
        v.setEntry(2, 0.);
        <span class="code-object">System</span>.out.println(u);
        <span class="code-object">System</span>.out.println(v);
        <span class="code-object">System</span>.out.println(u.ebeMultiply(v));
    }
}
</pre>
</div></div>
<p>raises an exception</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>org.apache.commons.math.linear.OpenMapRealVector@7170a9b6
Exception in thread "main" org.apache.commons.math.MathRuntimeException$6: map has been modified while iterating
	at org.apache.commons.math.MathRuntimeException.createConcurrentModificationException(MathRuntimeException.java:373)
	at org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.advance(OpenIntToDoubleHashMap.java:564)
	at org.apache.commons.math.linear.OpenMapRealVector.ebeMultiply(OpenMapRealVector.java:372)
	at org.apache.commons.math.linear.OpenMapRealVector.ebeMultiply(OpenMapRealVector.java:1)
	at DemoBugOpenMapRealVector.main(DemoBugOpenMapRealVector.java:17)
</pre>
</div></div></description><environment/><key id="12518787">MATH-645</key><summary>MathRuntimeException with simple ebeMultiply on OpenMapRealVector</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="celestin">Sébastien Brisard</reporter><labels><label>linear</label><label>sparse</label><label>vector</label></labels><created>Sat, 13 Aug 2011 17:18:48 +0100</created><updated>Sat, 24 Mar 2012 16:16:37 +0000</updated><resolved>Fri, 2 Sep 2011 21:54:19 +0100</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13084678" author="erans" created="Sat, 13 Aug 2011 19:12:31 +0100"><p>Probably fixed in revision 1157403.<br/>
Added a unit test for "ebeMultiply" and "ebeDivide".</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sat, 13 Aug 2011 18:12:31 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>62820</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60331</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-644] for the class of hyper-geometric distribution, for some number the method "upperCumulativeProbability" return a probability greater than 1 which is impossible.  </title><link>https://issues.apache.org/jira/browse/MATH-644</link><project id="12310485" key="MATH">Commons Math</project><description><p>In windows 7, I used common.Math library. I used class "HypergeometricDistributionImpl" and method "upperCumulativeProbability" of zero for distribution and the return value is larget than 1. the following code is working error. </p>

<p>HypergeometricDistributionImpl u = new HypergeometricDistributionImpl(14761461, 1035 ,1841 );<br/>
System.out.println(u.upperCumulativeProbability(0))</p>

<p>Thanks</p></description><environment/><key id="12518772">MATH-644</key><summary>for the class of hyper-geometric distribution, for some number the method "upperCumulativeProbability" return a probability greater than 1 which is impossible.  </summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="msayati">marzieh</reporter><labels><label>hypergeometric</label><label>probability</label></labels><created>Sat, 13 Aug 2011 07:26:59 +0100</created><updated>Mon, 4 Mar 2013 18:53:21 +0000</updated><resolved>Fri, 1 Jun 2012 00:45:24 +0100</resolved><version>2.2</version><fixVersion>3.1</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13215086" author="tn" created="Thu, 23 Feb 2012 21:43:04 +0000"><p>Updated fix version as there will be no 2.2.1</p></comment><comment id="13287039" author="tn" created="Fri, 1 Jun 2012 00:45:25 +0100"><p>Finally, I found the problem for the described behavior:</p>

<p>In the upperCumulativeProbability function there was a sanity check like this:</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>        if (x &lt; domain[0]) {
            ret = 1.0;
        } else if (x &gt; domain[1]) {
            ret = 0.0;
</pre>
</div></div>

<p>In fact to be correct, it has to be like this</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>        if (x &lt;= domain[0]) {
            ret = 1.0;
        } else if (x &gt; domain[1]) {
            ret = 0.0;
</pre>
</div></div>

<p>which is also symmetric to the case of the cumulativeProbability function.<br/>
It means that for values of x that are at the lower bound, the probability must be 1.0 as the upperCumulativeProbability is defined as P(X &gt;= x).</p>

<p>Additionally, the duplicate probability mass functions have been cleaned up. After looking through the version history it became clear that initially there existed two methods, whereas the public one called only the private one (which contained the actual computation). Later on the public one got improved, whereas the private one was still called by the cumulativeProbability methods.</p>

<p>This has been fixed in the sense that only the public method (which also behaves better for large values of N, m, k) is used in the class.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Thu, 23 Feb 2012 21:43:04 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2196</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160424</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-643] Rename RealVector.map* to RealVector.ebe* (mapAdd(...) to ebeAdd(...) and mapAddToSelf(...) to ebeAddToSelf(...) for instance</title><link>https://issues.apache.org/jira/browse/MATH-643</link><project id="12310485" key="MATH">Commons Math</project><description><p>I think the map* methods have historical names. Today I would prefer ebe as prefix like ebeMultiply(...).<br/>
This would describe the methods better from a users view.</p>

<p>If this is a valid issue, I could provide a patch.</p></description><environment/><key id="12518137">MATH-643</key><summary>Rename RealVector.map* to RealVector.ebe* (mapAdd(...) to ebeAdd(...) and mapAddToSelf(...) to ebeAddToSelf(...) for instance</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status><statusCategory id="2" key="new" colorName="blue-gray"/><resolution id="-1">Unresolved</resolution><assignee username="-1">Unassigned</assignee><reporter username="aploese">Arne Plöse</reporter><labels>
                    </labels><created>Sun, 7 Aug 2011 16:32:55 +0100</created><updated>Mon, 16 Jul 2012 23:17:21 +0100</updated><fixVersion>4.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13080602" author="erans" created="Sun, 7 Aug 2011 18:01:37 +0100"><p>If "ebe" is for "element-by-element", what would be the second element in</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
RealVector mapAdd(<span class="code-object">double</span> d);
</pre>
</div></div>
<p>?</p></comment><comment id="13080612" author="aploese" created="Sun, 7 Aug 2011 18:53:25 +0100"><p>OK, I misunderstood element-by-element.<br/>
I thougth ad d to all elemnets of this (aka. add d element-by-element).<br/>
Nontheless I think map is misleading - use ebe or drop the prefix entirely.</p></comment><comment id="13080660" author="erans" created="Sun, 7 Aug 2011 21:40:07 +0100"><p>&gt; ad d to all elemnets of this</p>

<p>This is correct.</p>

<p>&gt; aka. add d element-by-element</p>

<p>Sorry, I think that this does not mean anything.</p>

<p>&gt; map is misleading</p>

<p>This name is used in many languages. It means "apply &lt;the operation&gt; to each element".</p>

<p>&gt; use ebe</p>

<p>As noted already, this is not the same: It means "apply &lt;the operation&gt; to each pair of elements".</p>

<p>&gt; drop the prefix entirely.</p>

<p>This is incorrect in some cases. What would mean adding a number to an array?</p></comment><comment id="13080793" author="aploese" created="Mon, 8 Aug 2011 08:25:06 +0100"><p>If you have a look at the octave doc:</p>
{url}<a href="http://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html#Arithmetic-Ops" class="external-link" rel="nofollow">http://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html#Arithmetic-Ops</a>{url}
<p>you can do </p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">a = [1 2 3]</pre>
</div></div>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">a + 6</pre>
</div></div>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">a .+ 6</pre>
</div></div>
<p>or</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">a + a</pre>
</div></div>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">a .+ a</pre>
</div></div>

<p>they name this element by element...</p>
</comment><comment id="13080797" author="erans" created="Mon, 8 Aug 2011 08:52:36 +0100"><p>In Perl, the output of</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
@a = (1, 2, 3);
print @a + 6;
</pre>
</div></div>
<p>is</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>9
</pre>
</div></div>
<p>while</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
@a = (1, 2, 3);
@a = map {$_ + 6} @a;
print join(<span class="code-quote">","</span>, @a);
</pre>
</div></div>
<p>will print</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>7,8,9
</pre>
</div></div>

<p>So? <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p></comment><comment id="13081167" author="aploese" created="Mon, 8 Aug 2011 21:21:39 +0100"><p>@perl<br/>
<a href="http://perldoc.perl.org/functions/map.html" class="external-link" rel="nofollow">http://perldoc.perl.org/functions/map.html</a><br/>
says that map evaluates a BLOCK or EXPR given to map. This is what RealVector.map(...) does - nothing wrong with this.<br/>
But mapAdd(double d) is a simple addition of d to each element of the vector - I would say name this mapping is wrong in this case.</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">AbstractRealvector.mappAddToSelf(<span class="code-object">double</span> d)</pre>
</div></div>
<p> uses internally mapping so this may be OK - but I cant see any benefit from this.</p>

<p>I think the reason for ebe and map is only dotProduct|outherProduct|ebeMultiply to make clear what the methods are doing.<br/>
By the way add(double[] v] should be renamend to ebeAdd(double[] v) to be consistent with the naming scheme.</p></comment><comment id="13081273" author="erans" created="Mon, 8 Aug 2011 23:54:30 +0100"><blockquote>
<p><span class="error">&#91;...&#93;</span> mapAdd(double d) is a simple addition of d to each element of the vector - I would say name this mapping is wrong in this case.</p></blockquote>

<p>It is exactly the Perl definition which you quoted earlier:</p>
<blockquote>
<p><span class="error">&#91;...&#93;</span> says that map evaluates a BLOCK or EXPR given to map</p></blockquote>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>     Perl                Java
 map {$_ + d } @v     v.mapAdd(d)
</pre>
</div></div>

<p>Sorry, but I don't understand what is your problem with this.</p></comment><comment id="13081493" author="aploese" created="Tue, 9 Aug 2011 08:34:38 +0100"><p>OK I am comming from matlab|octave I want the operator ".+" implemented in commons.math.<br/>
After the naming convention in octave this is a element by element addition.</p>

<p>Speaking: "Add d to each entry of v", this should be visible in the name of the method like ebeAdd(double d)|ebeAdd(double[] d).</p>

<p>You, viewing it from perl, say: "Map the operator + with operand d to each entry of v".<br/>
So, why do I map this, if I want a simple addition? - map is confusing here for newcomers or people comming from matlab.</p>

<p>Seeing no other comments, this looks like a problem only to me.<br/>
So lets do not waste more time on this ether let it open or close it with "Wont Fix".</p>

<p>Nevertheless I think usability suffers from this non consistent naming.</p></comment><comment id="13081521" author="erans" created="Tue, 9 Aug 2011 09:41:08 +0100"><blockquote>
<p>Nevertheless I think usability suffers from this non consistent naming.</p></blockquote>

<p>Then, please open a discussion on the "dev" ML. You should probably include the various inconsistent namings and make a summary list of all the methods in each set. This will hopefully make the point clear to everyone, in order to decide what to change and how. Thanks.</p></comment><comment id="13082188" author="psteitz" created="Wed, 10 Aug 2011 07:49:53 +0100"><p>Whatever we decide to do in terms of renaming things needs to go in 3.0, so this needs to be resolved one way or another for 3.0.  </p></comment><comment id="13202281" author="erans" created="Tue, 7 Feb 2012 12:23:30 +0000"><p>I don't think that a complete list of inconsistencies ever made it to the ML; please correct me if I'm mistaken.</p>

<p>Should this really be resolved before 3.0? If it is non-blocking, I'd propose to postpone it to 4.0.</p></comment><comment id="13202289" author="celestin" created="Tue, 7 Feb 2012 12:30:54 +0000"><p>I agree.</p></comment><comment id="13202517" author="luc" created="Tue, 7 Feb 2012 16:39:06 +0000"><p>Fine with me.</p></comment></comments><issuelinks><issuelinktype id="12310010"><name>Incorporates</name><inwardlinks description="is part of"><issuelink><issuekey id="12545537">MATH-765</issuekey></issuelink></inwardlinks></issuelinktype></issuelinks><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 7 Aug 2011 17:01:37 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2197</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>11067</customfieldvalue></customfieldvalues></customfield></customfields></item><item><title>[MATH-642] Performance of nextInt(int) in BitsStreamGenerator can be improved</title><link>https://issues.apache.org/jira/browse/MATH-642</link><project id="12310485" key="MATH">Commons Math</project><description><p>The code used to implement this method in Apache Harmony's Random class performs better with the Mersenne and Well generators as bit sources as well as the JDK generator.  Here are some benchmark testing results ("orginal" is the current code):</p>

<p>nextInt(10) comparison - JDK generator (runs per timed block: 100000, timed blocks: 1000)<br/>
original value = 10: 5.417883e-05 (1.010215e-05) ms<br/>
harmony value = 10: 3.808923e-05 (1.090630e-05) ms<br/>
nextInt(100) comparison - JDK generator (runs per timed block: 100000, timed blocks: 1000)<br/>
original value = 100: 4.602311e-05 (5.075280e-06) ms<br/>
harmony value = 100: 3.771343e-05 (5.836102e-06) ms<br/>
nextInt(10000) comparison - JDK generator (runs per timed block: 100000, timed blocks: 1000)<br/>
original value = 10000: 5.317242e-05 (5.527069e-06) ms<br/>
harmony value = 10000: 3.676283e-05 (5.062836e-06) ms<br/>
nextInt(32) comparison - JDK generator (runs per timed block: 100000, timed blocks: 1000)<br/>
original value = 32: 6.225222e-05 (1.143497e-05) ms<br/>
harmony value = 32: 3.875278e-05 (6.099984e-06) ms</p>

<p>nextInt(10) comparison - Well1024a (runs per timed block: 100000, timed blocks: 1000)<br/>
original value = 10: 4.365601e-05 (1.013942e-05) ms<br/>
harmony value = 10: 4.141704e-05 (1.778676e-05) ms<br/>
nextInt(100) comparison - Well1024a (runs per timed block: 100000, timed blocks: 1000)<br/>
original value = 100: 3.579893e-05 (4.670346e-06) ms<br/>
harmony value = 100: 3.474323e-05 (5.273507e-06) ms<br/>
nextInt(10000) comparison - Well1024a (runs per timed block: 100000, timed blocks: 1000)<br/>
original value = 10000: 4.431216e-05 (5.654163e-06) ms<br/>
harmony value = 10000: 3.440765e-05 (4.282874e-06) ms<br/>
nextInt(32) comparison - Well1024a (runs per timed block: 100000, timed blocks: 1000)<br/>
original value = 32: 5.080220e-05 (7.276901e-06) ms<br/>
harmony value = 32: 2.958944e-05 (1.091995e-05) ms</p>

<p>nextInt(10) comparison - MersenneTwister (runs per timed block: 100000, timed blocks: 1000)<br/>
original value = 10: 4.365044e-05 (1.284578e-05) ms<br/>
harmony value = 10: 3.199023e-05 (7.170367e-06) ms<br/>
nextInt(100) comparison - MersenneTwister (runs per timed block: 100000, timed blocks: 1000)<br/>
original value = 100: 3.488505e-05 (4.822188e-06) ms<br/>
harmony value = 100: 3.145389e-05 (5.290716e-06) ms<br/>
nextInt(10000) comparison - MersenneTwister (runs per timed block: 100000, timed blocks: 1000)<br/>
original value = 10000: 4.468017e-05 (1.086927e-05) ms<br/>
harmony value = 10000: 3.274545e-05 (2.059499e-05) ms<br/>
nextInt(32) comparison - MersenneTwister (runs per timed block: 100000, timed blocks: 1000)<br/>
original value = 32: 5.129467e-05 (6.652250e-06) ms<br/>
harmony value = 32: 2.569880e-05 (8.063487e-06) ms</p></description><environment/><key id="12518102">MATH-642</key><summary>Performance of nextInt(int) in BitsStreamGenerator can be improved</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="psteitz">Phil Steitz</reporter><labels>
                    </labels><created>Sat, 6 Aug 2011 05:52:30 +0100</created><updated>Sat, 24 Mar 2012 16:16:53 +0000</updated><resolved>Mon, 8 Aug 2011 05:23:31 +0100</resolved><version>2.0</version><version>2.1</version><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13080594" author="psteitz" created="Sun, 7 Aug 2011 17:29:25 +0100"><p>Source code for the microbenchmarks.</p></comment><comment id="13080733" author="psteitz" created="Mon, 8 Aug 2011 05:23:31 +0100"><p>Trivially adapted version of Harmony implementation committed in r1154815.</p></comment></comments><attachments><attachment id="12489629" name="microbenchmarks.txt" size="4226" author="psteitz" created="Sun, 7 Aug 2011 17:29:25 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>65805</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60332</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-641] Implement distance methods on 2D and 3D Lines as well as Line Segments.</title><link>https://issues.apache.org/jira/browse/MATH-641</link><project id="12310485" key="MATH">Commons Math</project><description><p>Implement a method that calculates the distance from a point to 3D and 2D lines and line segements (similar to what already exists in the 3D Line class).</p></description><environment/><key id="12517685">MATH-641</key><summary>Implement distance methods on 2D and 3D Lines as well as Line Segments.</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="jensenc">Curtis Jensen</reporter><labels>
                    </labels><created>Tue, 2 Aug 2011 20:21:22 +0100</created><updated>Mon, 4 Mar 2013 18:53:23 +0000</updated><resolved>Sun, 30 Sep 2012 14:25:11 +0100</resolved><fixVersion>3.1</fixVersion><due/><votes>0</votes><watches>3</watches><timeoriginalestimate seconds="14400">4h</timeoriginalestimate><timeestimate seconds="14400">4h</timeestimate><comments><comment id="13083467" author="psteitz" created="Thu, 11 Aug 2011 21:15:13 +0100"><p>Enhancement can wait until 3.1</p></comment><comment id="13087204" author="luc" created="Thu, 18 Aug 2011 20:11:03 +0100"><p>2D lines are hyperplanes, hence they do implement the getOffset method, which is basically a signed distance.<br/>
So if you have point p and line l, the distance between p and l is FastMath.abs(l.getOffset(p)). The sign is in fact chosen to have negative offsets on the left half place and positive offsets on the right half-plane.<br/>
Considering segments, I'm not sure what you want. If we don't consider the endpoints but only the support line, we can retrieve this support line by subLine.getHyperplane() (because sub-lines implement SubHyperplane). If we consider the endpoints, the computation is much more complex, as it is basically the distance to the support line if the closest line point is in the segment, or it is min(d(P, Ei)) where Ei are all the endpoints of the segment.<br/>
Are the current methods sufficient for your needs and if not what are exactly your needs ?</p></comment><comment id="13087791" author="jensenc" created="Fri, 19 Aug 2011 17:41:12 +0100"><p>I am looking for the shortest distance to a segment including the end points.  I think it can be done by finding the the point on the line perpendicular the the specified distance point.  If the perpendicular point is on the line segment, then return the distance between the perpendicular point and the specified point, otherwise return the min distance to the end points:<br/>
See:<br/>
<a href="http://www.codeguru.com/forum/printthread.php?s=37e72c81efe767865815ecdb4a943d87&amp;t=194400&amp;pp=15" class="external-link" rel="nofollow">http://www.codeguru.com/forum/printthread.php?s=37e72c81efe767865815ecdb4a943d87&amp;t=194400&amp;pp=15</a></p>

<p>Also, some smarty pants figured out a simpler way to to it here:<br/>
<a href="http://www.codeguru.com/forum/printthread.php?s=cc8cf0596231f9a7dba4da6e77c29db3&amp;t=194400&amp;pp=15&amp;page=2" class="external-link" rel="nofollow">http://www.codeguru.com/forum/printthread.php?s=cc8cf0596231f9a7dba4da6e77c29db3&amp;t=194400&amp;pp=15&amp;page=2</a></p>

<p>If the line segment distance function is not added to the API (or even if it is), it would be very useful to have a line method that calculates the point one a line that is perpendicular to another point.</p>

<p>The getOffset method is still useful to me for other calculations.  Though it is inconsistent with the interface of the 3D line.  The 3D line class has a distance method while the 2D line has the getOffset method.  It may be more intuitive if the 3D and 2D line classes used the same nomenclature.  getOffset provides more information as it is signed, but distance is a more intuitive name.</p>

<p>Thanks for all the help and consideration.</p></comment><comment id="13461225" author="erans" created="Sat, 22 Sep 2012 18:58:06 +0100"><p>Would you provide a patch?</p></comment><comment id="13463175" author="curtis" created="Tue, 25 Sep 2012 21:19:30 +0100"><p>Here is a patch with distance functions added to the Line and Segment classes in the twod package (with unit tests).</p></comment><comment id="13463693" author="erans" created="Wed, 26 Sep 2012 11:30:19 +0100"><p>Thanks!<br/>
I'll let Luc revise the contents, but I already noticed that the patch file contains tab characters. Could you please resubmit it without them?</p></comment><comment id="13463857" author="curtis" created="Wed, 26 Sep 2012 15:37:02 +0100"><p>Updated patch with spaces (sorry about that).</p>

<p>Do feel free to modify/correct as you see fit, or continue to ask for updates.  I'll help where I can.</p></comment><comment id="13466476" author="luc" created="Sun, 30 Sep 2012 14:25:11 +0100"><p>Fixed in subversion repository as of r1392022.</p>

<p>Patch applied with minor modifications.</p>

<p>Thanks for the report and for the patch</p></comment></comments><attachments><attachment id="12546703" name="distance-wspaces.patch" size="6409" author="curtis" created="Wed, 26 Sep 2012 15:37:02 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Thu, 11 Aug 2011 20:15:13 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2198</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160425</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-640] AbstractRandomGenerator nextInt() and nextLong() default implementations generate only positive values</title><link>https://issues.apache.org/jira/browse/MATH-640</link><project id="12310485" key="MATH">Commons Math</project><description><p>The javadoc for these methods (and what is specified in the RandomGenerator interface) says that all int / long values should be in the range of these methods.  The default implementations provided in this class do not generate negative values.</p></description><environment/><key id="12517683">MATH-640</key><summary>AbstractRandomGenerator nextInt() and nextLong() default implementations generate only positive values</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="psteitz">Phil Steitz</assignee><reporter username="psteitz">Phil Steitz</reporter><labels>
                    </labels><created>Tue, 2 Aug 2011 20:06:35 +0100</created><updated>Sat, 24 Mar 2012 16:16:52 +0000</updated><resolved>Wed, 3 Aug 2011 05:17:43 +0100</resolved><version>1.1</version><version>1.2</version><version>2.0</version><version>2.1</version><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13078573" author="psteitz" created="Wed, 3 Aug 2011 05:17:43 +0100"><p>Fixed in r1153338</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>66450</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60333</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-639] numerical problems in rotation creation</title><link>https://issues.apache.org/jira/browse/MATH-639</link><project id="12310485" key="MATH">Commons Math</project><description><p>building a rotation from the following vector pairs leads to NaN:<br/>
u1 = -4921140.837095533, -2.1512094250440013E7, -890093.279426377<br/>
u2 = -2.7238580938724895E9, -2.169664921341876E9, 6.749688708885301E10<br/>
v1 = 1, 0, 0<br/>
v2 = 0, 0, 1</p>

<p>The constructor first changes the (v1, v2) pair into (v1', v2') ensuring the following scalar products hold:<br/>
 &lt;v1'|v1'&gt; == &lt;u1|u1&gt;<br/>
 &lt;v2'|v2'&gt; == &lt;u2|u2&gt;<br/>
 &lt;u1 |u2&gt;  == &lt;v1'|v2'&gt;</p>

<p>Once the (v1', v2') pair has been computed, we compute the cross product:<br/>
  k = (v1' - u1)^(v2' - u2)</p>

<p>and the scalar product:<br/>
  c = &lt;k | (u1^u2)&gt;</p>

<p>By construction, c is positive or null and the quaternion axis we want to build is q = k/<span class="error">&#91;2*sqrt(c)&#93;</span>.<br/>
c should be null only if some of the vectors are aligned, and this is dealt with later in the algorithm.</p>

<p>However, there are numerical problems with the vector above with the way these computations are done, as shown<br/>
by the following comparisons, showing the result we get from our Java code and the result we get from manual<br/>
computation with the same formulas but with enhanced precision:</p>

<p>commons math:   k = 38514476.5,            -84.,                           -1168590144<br/>
high precision: k = 38514410.36093388...,  -0.374075245201180409222711..., -1168590152.10599715208...</p>

<p>and it becomes worse when computing c because the vectors are almost orthogonal to each other, hence inducing additional cancellations. We get:<br/>
commons math    c = -1.2397173627587605E20<br/>
high precision: c =  558382746168463196.7079627...</p>

<p>We have lost ALL significant digits in cancellations, and even the sign is wrong!</p></description><environment><p>Linux</p></environment><key id="12515920">MATH-639</key><summary>numerical problems in rotation creation</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="luc">Luc Maisonobe</reporter><labels>
                    </labels><created>Mon, 1 Aug 2011 15:12:13 +0100</created><updated>Sat, 24 Mar 2012 16:16:36 +0000</updated><resolved>Fri, 5 Aug 2011 16:06:09 +0100</resolved><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13073554" author="luc" created="Mon, 1 Aug 2011 15:27:07 +0100"><p>The expected result quaternion computed to high precision manually and checked afterwards is:<br/>
q0 =  0.62283703596082005783621150<br/>
q1 =  0.02577076214564987845778149<br/>
q2 = -0.00000000025030122695149900<br/>
q3 = -0.78192703908611094998656730</p></comment><comment id="13079989" author="luc" created="Fri, 5 Aug 2011 15:17:46 +0100"><p>The fact that c = &lt;k | (u1^u2)&gt; is really wrong is due to the fact the rotation axis is almost exactly in the (u1, u2) plane. In fact it is only 1.833e-8 degrees (i.e. 3.199e-10 radians) out of the plane!</p></comment><comment id="13080003" author="luc" created="Fri, 5 Aug 2011 16:06:09 +0100"><p>Fixed in subversion repository as of r1154257.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>65996</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60334</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-638]  instead of  in "SingularValueDecompositionImpl"</title><link>https://issues.apache.org/jira/browse/MATH-638</link><project id="12310485" key="MATH">Commons Math</project><description><p>Findbugs signalled the use of the not short-circuit logical operator .</p></description><environment/><key id="12515833">MATH-638</key><summary> instead of  in "SingularValueDecompositionImpl"</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="erans">Gilles</assignee><reporter username="erans">Gilles</reporter><labels>
                    </labels><created>Sat, 30 Jul 2011 08:39:57 +0100</created><updated>Sat, 24 Mar 2012 16:16:58 +0000</updated><resolved>Sat, 30 Jul 2011 14:51:30 +0100</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13073175" author="erans" created="Sat, 30 Jul 2011 14:51:30 +0100"><p>Revision 1152462.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>66629</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60335</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-637] Simple utility for micro-benchmarking</title><link>https://issues.apache.org/jira/browse/MATH-637</link><project id="12310485" key="MATH">Commons Math</project><description><p>As per the discussion on the "dev" ML (with subject: "Simple benchmarking utility"), it would be useful to have an easy way to benchmark alternative implementations of some functionality.<br/>
The proposed utility methods will be collected in a class located in the "src/test/java" part of the code repository.</p></description><environment/><key id="12515812">MATH-637</key><summary>Simple utility for micro-benchmarking</summary><type id="5" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Wish</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="erans">Gilles</assignee><reporter username="erans">Gilles</reporter><labels><label>test</label></labels><created>Fri, 29 Jul 2011 22:15:18 +0100</created><updated>Sat, 24 Mar 2012 16:16:54 +0000</updated><resolved>Thu, 24 Nov 2011 23:37:41 +0000</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13073034" author="erans" created="Fri, 29 Jul 2011 22:47:27 +0100"><p>Initial code committed in revision 1152380.</p></comment><comment id="13073257" author="erans" created="Sat, 30 Jul 2011 23:05:52 +0100"><p>Revision 1152524 contains significant changes that aim to thwart some of the criticisms discussed <a href="http://blog.juma.me.uk/2011/02/23/performance-of-fastmath-from-commons-math/" class="external-link" rel="nofollow">here</a>.<br/>
Please review.</p></comment><comment id="13073330" author="psteitz" created="Sun, 31 Jul 2011 07:40:31 +0100"><p>One thing to think about is whether we really want / need to store all of the timing results in an array.  The times array could get quite large if the number of iterations is very large.</p>

<p>The attached patch prepares for eventual move to just streaming the execution times by changing the statistical aggregator from DescriptiveStatistics to SummaryStatistics.  The latter does not store velues in memory.  The patch also replaces the array of DescriptiveStatistics describing method results with an array of StatisticalSummary instances.  The latter are immutable value objects that just maintain values of statistics.  These changes should probably be made even if we decide to hold the full time array in storage, since the current impl is needlessly storing the raw data again inside the DescriptiveStatistics instances and all you really need to store is the result of the statistical analysis.</p></comment><comment id="13073353" author="erans" created="Sun, 31 Jul 2011 15:08:21 +0100"><p>Thanks. Applied in revision 1152584.</p></comment></comments><attachments><attachment id="12488346" name="PerfUtils.patch" size="3872" author="psteitz" created="Sun, 31 Jul 2011 07:40:31 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 31 Jul 2011 06:40:31 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2199</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60336</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-636] create solvers for Dfp based function</title><link>https://issues.apache.org/jira/browse/MATH-636</link><project id="12310485" key="MATH">Commons Math</project><description><p>When validating some regular computations, we often end up doing some comparison with higher accuracy reference data.<br/>
The Dfp package is a wonderful tool for that. This package can already be used in some of our regular algorithms as it already implements the Field interface. However, Dfp instances cannot be used in solvers yet.</p>

<p>Setting up solvers that would take Field based function is not possible, as solvers do need an absolute value method to check convergence, and an ordering relation for bracketing. However, no such restriction exist for Dfp.</p>

<p>It is very easy to convert some existing solvers to have a Dfp version. As the main purpose is high accuracy, and as implementing function for Dfp is cumbersome, a high order method using function values only and no need for implementing derivatives such as depicted in <a href="https://issues.apache.org/jira/browse/MATH-635" title="High order Brent-like bracketing solver" class="issue-link" data-issue-key="MATH-635"><del>MATH-635</del></a> is a good choice.</p></description><environment/><key id="12515754">MATH-636</key><summary>create solvers for Dfp based function</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="luc">Luc Maisonobe</reporter><labels>
                    </labels><created>Fri, 29 Jul 2011 10:29:05 +0100</created><updated>Sat, 24 Mar 2012 16:17:01 +0000</updated><resolved>Fri, 29 Jul 2011 16:48:14 +0100</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13072872" author="luc" created="Fri, 29 Jul 2011 16:48:14 +0100"><p>Fixed in subversion repository as of r1152280</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>66658</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60337</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-635] High order Brent-like bracketing solver</title><link>https://issues.apache.org/jira/browse/MATH-635</link><project id="12310485" key="MATH">Commons Math</project><description><p>The new bracketing solvers greatly improve usage. Unfortunately, for now there are only secant-based bracketing solvers available, and a wrapper which basically ends by adding a few secant steps to regular non-bracketing solvers.</p>

<p>Changing the Brent solver to provide bracket selection on the final result would depart from the standard algorithm, which is a wrong move (see <a href="https://issues.apache.org/jira/browse/MATH-599" title="Re-implementation of Secant-based root finding algorithms" class="issue-link" data-issue-key="MATH-599"><del>MATH-599</del></a> for a similar case recently resolved).<br/>
It would be nice to set up another solver in the same spirit as Brent (i.e. using inverse polynomial interpolation when possible and falling back to dichotomy) while retaining bracketing. A nice and simple improvement is also to use higher order inverse polynomial interpolation by retaining several previous points. This allows to build a solver that have an higher order than Newton for example but still only needs function values and no derivatives at all.</p></description><environment/><key id="12515752">MATH-635</key><summary>High order Brent-like bracketing solver</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="luc">Luc Maisonobe</reporter><labels>
                    </labels><created>Fri, 29 Jul 2011 10:14:51 +0100</created><updated>Sat, 24 Mar 2012 16:16:50 +0000</updated><resolved>Fri, 29 Jul 2011 16:45:07 +0100</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13072870" author="luc" created="Fri, 29 Jul 2011 16:45:07 +0100"><p>Fixed in subversion repository as of r1152276.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>66659</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60338</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-634] EmpiricalDistributionImpl should use a pluggable RandomGenerator</title><link>https://issues.apache.org/jira/browse/MATH-634</link><project id="12310485" key="MATH">Commons Math</project><description><p>Currently, EmpiricalDistributionImpl does not support use of a pluggable PRNG.  A constructor and setter should be provided for the underlying RandomGenerator.  This class should also expose either the generator itself or a reseed method to seed it.</p></description><environment/><key id="12515698">MATH-634</key><summary>EmpiricalDistributionImpl should use a pluggable RandomGenerator</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="psteitz">Phil Steitz</assignee><reporter username="psteitz">Phil Steitz</reporter><labels>
                    </labels><created>Thu, 28 Jul 2011 20:51:08 +0100</created><updated>Sat, 24 Mar 2012 16:16:53 +0000</updated><resolved>Mon, 1 Aug 2011 00:32:50 +0100</resolved><version>1.0</version><version>1.1</version><version>1.2</version><version>2.0</version><version>2.1</version><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13073404" author="psteitz" created="Mon, 1 Aug 2011 00:32:50 +0100"><p>Fixed in r1152662.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>66599</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60339</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-633] AbstractRealMatrix extends RealLinearOperator</title><link>https://issues.apache.org/jira/browse/MATH-633</link><project id="12310485" key="MATH">Commons Math</project><description><p>This proposal has already been discussed on the <a href="http://mail-archives.apache.org/mod_mbox/commons-dev/201107.mbox/&lt;4E1BC61E.8090108@m4x.org&gt;" class="external-link" rel="nofollow">forum</a>. Since the issues raised by the implementation of <tt>RealLinearOperator</tt> are now solved, I propose to add <tt>extends RealLinearOperator</tt> to the declaration of <tt>AbstractRealMatrix</tt>. As far as I know, this no longer raises any error.</p></description><environment/><key id="12515604">MATH-633</key><summary>AbstractRealMatrix extends RealLinearOperator</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="celestin">Sébastien Brisard</reporter><labels>
                    </labels><created>Thu, 28 Jul 2011 06:15:28 +0100</created><updated>Sun, 18 Mar 2012 09:30:42 +0000</updated><resolved>Thu, 28 Jul 2011 13:00:40 +0100</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13072307" author="erans" created="Thu, 28 Jul 2011 13:00:40 +0100"><p>Revision 1151806.</p></comment><comment id="13232236" author="celestin" created="Sun, 18 Mar 2012 09:30:42 +0000"><p>Fixed in 3.0.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Thu, 28 Jul 2011 12:00:40 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>66735</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60340</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-632] NaN: Method "equals" in Complex not consistent with "==" for "double" primitive type</title><link>https://issues.apache.org/jira/browse/MATH-632</link><project id="12310485" key="MATH">Commons Math</project><description><p>The following tests show several contradictions:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">final</span> <span class="code-object">double</span> a = <span class="code-object">Double</span>.NaN;
<span class="code-keyword">final</span> <span class="code-object">double</span> b = <span class="code-object">Double</span>.NaN;
Assert.assertFalse(<span class="code-quote">"a == b"</span>, a == b); <span class="code-comment">// (1)
</span>Assert.assertEquals(<span class="code-quote">"a != b"</span>, a, b, <span class="code-object">Double</span>.MIN_VALUE); <span class="code-comment">// (2)
</span>Assert.assertFalse(<span class="code-quote">"a == b"</span>, MathUtils.equals(a, b, <span class="code-object">Double</span>.MIN_VALUE)); <span class="code-comment">// (3)
</span>Assert.assertFalse(<span class="code-quote">"a == b"</span>, MathUtils.equals(a, b, <span class="code-object">Double</span>.MIN_VALUE)); <span class="code-comment">// (4)
</span><span class="code-keyword">final</span> <span class="code-object">Double</span> dA = <span class="code-object">Double</span>.valueOf(a);
<span class="code-keyword">final</span> <span class="code-object">Double</span> dB = <span class="code-object">Double</span>.valueOf(b);
Assert.assertFalse(<span class="code-quote">"dA == dB"</span>, dA.doubleValue() == dB.doubleValue()); <span class="code-comment">// (5)
</span>Assert.assertTrue(<span class="code-quote">"!dA.equals(dB)"</span>, dA.equals(dB)); <span class="code-comment">// (6)
</span><span class="code-keyword">final</span> Complex cA = <span class="code-keyword">new</span> Complex(a, 0);
<span class="code-keyword">final</span> Complex cB = <span class="code-keyword">new</span> Complex(b, 0);
Assert.assertTrue(<span class="code-quote">"!cA.equals(cB)"</span>, cA.equals(cB));  <span class="code-comment">// (7)</span>
</pre>
</div></div>

<p>They all pass; thus:</p>
<ol>
	<li>"Double" does not behave as "double": (1) and (5) vs (6)</li>
	<li>Two NaNs are almost equal for Junit: (2)</li>
	<li>Two NaNs are never equal for MathUtils: (3) and (4)</li>
	<li>Complex.NaN is consistent with Object "Double.valueOf(NaN)" (hence not with primitive "Double.NaN"): (7)</li>
</ol>


<p>This is quite confusing.</p>

<p>In MathUtils, we chose to follow IEEE754 (and Java for primitive "double"), i.e. it is "correct" that assertion (1) is false. Do we want "Complex" to conform with this or with the inconsistent behaviour of "Double"?</p></description><environment/><key id="12515203">MATH-632</key><summary>NaN: Method "equals" in Complex not consistent with "==" for "double" primitive type</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="8">Not a Problem</resolution><assignee username="-1">Unassigned</assignee><reporter username="erans">Gilles</reporter><labels>
                    </labels><created>Sun, 24 Jul 2011 22:36:39 +0100</created><updated>Sat, 24 Mar 2012 16:22:53 +0000</updated><resolved>Fri, 5 Aug 2011 23:08:40 +0100</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13070262" author="erans" created="Sun, 24 Jul 2011 22:44:02 +0100"><p>Tests committed in revision 1150496.</p></comment><comment id="13070265" author="psteitz" created="Sun, 24 Jul 2011 23:11:25 +0100"><p>Can anyone present a practical argument for changing the current documented behavior of Complex.equals?  There is no perfect solution here, given the way equals is defined for doubles in Java.  The current behavior is simple, well-documented and has been defined this way since version 1.0.  Changing it may break some code that depends on it, so we need to have good practical reasons to change. </p>

<p>From my perspective, the current implementation of Complex equals, which is consistent with what we also do for ArrayRealVectors, is natural and convenient.  I don't see the examples as particularly relevant, since a Complex instance is not a pair of doubles, but an object that has two double-valued attributes. Once a Complex number has a NaN part, it is for all practical purposes NaN, so it makes sense to lump all instances with NaN parts into one equivalence class modulo equals.  IIRC, this was the rationale used to define the current implementation of Complex equals.   </p></comment><comment id="13070358" author="luc" created="Mon, 25 Jul 2011 09:04:18 +0100"><p>I have tried to find again some external references from C++ standard and C99 standard. They seem to only specify behavior of == as a logical (a.real == b.real) &amp;&amp; (a.imaginary == b.imaginary), which would lead to numbers with NaN never been equal to anything, including themselves.</p>

<p>We don't use complex internally in <span class="error">&#91;math&#93;</span> yet (at least I am not aware of it). However, some existing users do (at least Arne seems to, as he asked for several changes). Perhaps we should ask on the users list (not dev) for users comments on this, as most users will not be aware of this Jira issue here.</p>

<p>We may need to use complex in <span class="error">&#91;math&#93;</span> by ourselves for some algorithms we want to implement. I see at least to difference use cases: eigen value decomposition for non-symmetric matrices and root solvers. Do they use some standard definition ?</p></comment><comment id="13070737" author="erans" created="Mon, 25 Jul 2011 21:28:00 +0100"><p>The problem starts here:</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre> (x == x) is true, except when (x == NaN)
</pre>
</div></div>

<p>Some people advocate that this should not be so, i.e.</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre> (x == x) is true, always
</pre>
</div></div>
<p>but IEEE574 has chosen the former. And Java primitive "double" conforms to this.<br/>
I don't understand the rationale of having decided that "Double" should behave differently than "double", but this is beyond our reach anyway <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/>. But, <em>if</em> you'd have to define "equals" for "Double" wouldn't you check the equality of the "double" returned by "doubleValue()"? In the example reported by Luc, this is done similarly and two complex NaNs won't be equal.</p>

<p>What bothers me, slightly <span class="error">&#91;1&#93;</span>, is that CM is not consistent with itself: A "Complex" instance is an abstraction/approximation of a complex number, in the same way that a "double" is an abstraction/approximation of a real number. So why would you consider that</p>
<blockquote>
<p><span class="error">&#91;...&#93;</span> it makes sense to lump all instances with NaN parts into one equivalence class modulo equals.</p></blockquote>
<p>and at the same time that CM should also follow IEEE754 for "double" (cf. "MathUtils.equals"), which is the opposite of the previous statement?</p>

<p><span class="error">&#91;1&#93;</span> Personally, I never had to use NaN beyond being a signal that there was a bug in my code.</p></comment><comment id="13070746" author="psteitz" created="Mon, 25 Jul 2011 21:44:21 +0100"><p>The difference between Double and double, and Complex vs double is that the things with capital letters are <b>objects</b>.  Jave <b>had</b> to define Double equals to make NaN equal to NaN because equals has to be an equivalence relation, which means it has to be reflexive.  Personally, I don't see any problem with Complex equals behaving differently from what we now have in MathUtils.equals, which is a specialized method not intended to represent an equivalence relation on objects.  If we did for some reason define our own "real" object, I would expect it to behave as Double does - making NaN equal to itself.  The only reasonable alternative to the current implementation of Complex equals (and ArrayRealVector equals, for that matter) is to isolate every NaN-infected instance into its own equivalence class.  That is less convenient when dealing with collections of results.  Note that, like Double, we will still in any case have to make equals reflexive, which will make it appear "inconsistent" with the (in my mind irrelevant) examples above.</p></comment><comment id="13070770" author="erans" created="Mon, 25 Jul 2011 22:24:50 +0100"><blockquote>
<p><span class="error">&#91;...&#93;</span> equals has to be an equivalence relation <span class="error">&#91;...&#93;</span></p></blockquote>

<p>"==" <em>is</em> an equivalence relation for real numbers. Nevertheless the IEEE574 deemed it important that it is broken when the floating point representation of a real number is NaN (which is not the representation of any real number).<br/>
IIUC correctly (and probably very partially), NaNs are supposedly useful in the implementations of algorithms (which is what CM does).</p>

<p>The difference between "Object" and primitive is not relevant for deciding which is more important:</p>
<ul>
	<li>The purpose of NaNs and conformance with a standard for the representation of real numbers, or</li>
	<li>the equivalence relation of the representations of real numbers ("Double", "double", "Complex").</li>
</ul>


<p>To view it differently: "double" would/should not have existed in Java (as an OO language) if it had been possible to deal exclusively with objects without a significant loss of performance. CM uses (almost?) exclusively "double" and not "Double"; so I think that it makes sense to ask whether or not "Complex" should be consistent with "double" (making the examples quite relevant).</p>

<p>I don't understand how collections interfere with this issue...</p></comment><comment id="13071329" author="psteitz" created="Tue, 26 Jul 2011 21:13:45 +0100"><p>Complex is an object, so has to have an equals implementation that is reflexive, symmetric and transitive.  Do you have an alternative implementation in mind?  And an explanation of why the alternative is better?</p>

<p>My reference to collections comes from my own use in simulating complex dynamical systems.  Like floating point equals comparisons among doubles, I don't use Complex.equals much, and when I do it is either in test code or comparing results of divergent processes.  When processes diverge, it is convenient to be able to compare results wrt infinities and NaNs.  In that case, it is convenient to have equals return true for NaNs.</p></comment><comment id="13071390" author="erans" created="Tue, 26 Jul 2011 23:17:14 +0100"><p>The alternative implementation was reported by Luc from the C++ standard:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
  (a.real == b.real) &amp;&amp; (a.imaginary == b.imaginary)
</pre>
</div></div>
<p>It is better simply because it is consistent with whatever is defined by the constituents of the complex number.</p>

<p>As I said, I don't really care whether NaN == NaN or NaN != NaN. But, I repeat, I'm not knowledgeable enough in floating point intricacies to say that the standard is wrong or useless. Are you?</p>

<p>Maybe we shouldn't care about IEEE574, and decide to ban any algorithm that would rely on NaN != NaN. And in that case, to be consistent, I would also propose to change "MathUtils.equals" so that it treats two NaNs as equal (and do away with the "equalsIncludingNaN" methods).</p>

<p>Some time ago, we decided to conform with IEEE754; but if it is more convenient to not conform and if it doesn't hurt anyone...</p></comment><comment id="13071396" author="psteitz" created="Tue, 26 Jul 2011 23:30:27 +0100"><p>The definition above is not reflexive, so can't be implemented as equals in Java.  We would have to add a reference equality check to make it a legitimate equals implementation, making every NaN-infected instance an equals singleton.  Unless someone can provide a practical reason why this is better in applications, we should not change it, since it will break any applications that depend on the current implementation.</p></comment><comment id="13071455" author="psteitz" created="Wed, 27 Jul 2011 01:28:22 +0100"><p>I forgot about a couple of things that we considered in relation to this in the past.  The first is the status of the relevant "spec," which is Annex G of the C99x spec for the C language.  We decided not to try to strictly adhere to this spec for reasons documented in <a href="https://issues.apache.org/jira/browse/MATH-5" title="[math] Complex arithmetic operations do not conform to C99x Annex G" class="issue-link" data-issue-key="MATH-5"><del>MATH-5</del></a>: a) it is a C language spec b) it is not open or freely available (we could not even get blanket approval to quote from the spec in our javadoc) c) when we last checked it was still not normative and d) trying to adhere strictly to the spec for arithmetic operations would kill performance.  Search the commons-dev archives for discussion.</p>

<p>The second thing I forgot is that in this and some other decisions, we were influenced by Colt (the old com.imsl.math package), which took a practical approach.  The javadoc for equals in Colt's Complex (implemented the same way we do) points out that implementing equals this way makes Complex instances work correctly in hashtables.  This is another reason that we used the definition that we did.</p></comment><comment id="13071620" author="sebb@apache.org" created="Wed, 27 Jul 2011 10:27:13 +0100"><p>For future reference, we should mention these design decisions in the code comments.</p></comment><comment id="13071626" author="erans" created="Wed, 27 Jul 2011 10:43:39 +0100"><blockquote>
<p>The javadoc for equals in Colt's Complex (implemented the same way we do) points out that implementing equals this way makes Complex instances work correctly in hashtables.</p></blockquote>

<p>Actually they probably copied the similar comment from <a href="http://download.oracle.com/javase/6/docs/api/java/lang/Double.html#equals(java.lang.Object)" class="external-link" rel="nofollow">here</a>. <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p>

<p>I'm convinced that the ambiguity (Object/primitive) cannot be lifted, and I probably should not worry anymore that CM is not more consistent than Java itself...</p>

<p>As Sebb mentions, one should not search the archive to get an explanation for such seemingly contradictory behaviour. It suffices to say that we follow IEEE754 for "MathUtils.equals" and that we don't for <em>any</em> "Object" even though it would represent a (tuplet of) real numbers, on a par with what Java does.</p></comment><comment id="13080258" author="erans" created="Fri, 5 Aug 2011 23:08:40 +0100"><p>Clarifying note added in revision 1154392.</p></comment><comment id="13237592" author="luc" created="Sat, 24 Mar 2012 16:22:53 +0000"><p>changing status to closed as 3.0 has been released</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 24 Jul 2011 22:11:25 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>65967</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160426</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-631] "RegulaFalsiSolver" failure</title><link>https://issues.apache.org/jira/browse/MATH-631</link><project id="12310485" key="MATH">Commons Math</project><description><p>The following unit test:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
@Test
<span class="code-keyword">public</span> void testBug() {
    <span class="code-keyword">final</span> UnivariateRealFunction f = <span class="code-keyword">new</span> UnivariateRealFunction() {
            @Override
            <span class="code-keyword">public</span> <span class="code-object">double</span> value(<span class="code-object">double</span> x) {
                <span class="code-keyword">return</span> <span class="code-object">Math</span>.exp(x) - <span class="code-object">Math</span>.pow(<span class="code-object">Math</span>.PI, 3.0);
            }
        };

    UnivariateRealSolver solver = <span class="code-keyword">new</span> RegulaFalsiSolver();
    <span class="code-object">double</span> root = solver.solve(100, f, 1, 10);
}
</pre>
</div></div>
<p>fails with</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>illegal state: maximal count (100) exceeded: evaluations
</pre>
</div></div>

<p>Using "PegasusSolver", the answer is found after 17 evaluations.</p></description><environment/><key id="12515172">MATH-631</key><summary>"RegulaFalsiSolver" failure</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="erans">Gilles</reporter><labels>
                    </labels><created>Sun, 24 Jul 2011 00:48:27 +0100</created><updated>Sat, 24 Mar 2012 16:16:52 +0000</updated><resolved>Thu, 8 Sep 2011 13:13:59 +0100</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13070074" author="erans" created="Sun, 24 Jul 2011 00:50:45 +0100"><p>Reported by Axel Kramer in <a href="https://issues.apache.org/jira/browse/MATH-599" title="Re-implementation of Secant-based root finding algorithms" class="issue-link" data-issue-key="MATH-599"><del>MATH-599</del></a>.</p></comment><comment id="13080478" author="erans" created="Sat, 6 Aug 2011 23:44:58 +0100"><p>The problem was due to the fact that at some point, the update formula always gave the same value: Nothing was being updated and the loop went on until the number of evaluations was exhausted.</p>

<p>I've committed a tentative solution in revision 1154614.<br/>
However:</p>
<ol>
	<li>I'm not sure that it doesn't have any adverse side-effects on the bracketing property.</li>
	<li>It is quite probably not a pristine "regula falsi" algorithm anymore.</li>
</ol>


<p>Please review.</p>

<p>Anyways, for the function that triggered the problem (see "testIssue631" in "RegulaFalsiSolverTest.java"), the (modified) <tt>RegulaFalsiSolver</tt> takes 3624 evaluations (versus 17 for <tt>PegasusSolver</tt>). We should probably add a word of warning in the class Javadoc.</p></comment><comment id="13080575" author="dhendriks" created="Sun, 7 Aug 2011 14:03:23 +0100"><p>I just got back from a 3 week vacation, so I couldn't reply earlier.</p>

<p>The documentation for the RegulaFalsiSolver states: "Unlike the Secant method, convergence is guaranteed by maintaining a bracketed solution." While this is theoretically true, in this case it is not so, because (if I understand correctly) only a single bound is updated repeatedly, and the update is too small to matter (has no effect), due to the double representation.</p>

<p>The change you propose (which is difficult to see as you also change other things in the same commit) is to modify x0 and f0 if the new value of x and x1 are equal. As I see it, this changes the algorithm, and it is no longer the Regula Falsi method as known from literature. I'm therefore against this change.</p>

<p>The problem that is identified in this issue is very similar to the well-known problem of the Regula Falsi method: it converges very slowly for certain problems, due to one side being updated all the time, while the other one stays the same. The Illinois and Pegasus algorithms solve exactly this problem, and are well-documented in literature.</p>

<p>I therefore think it would be better if the RegulaFalsiSolver kept it's original implementation, and for this problem the Illinois or Pegasus method should then be used instead.</p>

<p>The other changes (if statements to switch with default, extracting bound switch statements, etc) can be kept, if you wish.</p>

<p>The suggestion to add a warning to the Secant and Regula Falsi solvers that this is a possible problem, and the solution (use Illinois or Pegasus), would indeed be a good idea. In general, adding a note that the Illinois and Pegasus algorithms perform better, would be a good idea regardless of this issue.</p>

<p>Once more, to be clear, I don't think this issue is a bug. It is a result of the limited convergence of the Regula Falsi method combined with the implications of limited double precision. The limited convergence of the algorithm is a property of the algorithm, and should in my opinion not be changed. I also don't think that trying to work around the limited double precision would be a good idea.</p></comment><comment id="13080608" author="erans" created="Sun, 7 Aug 2011 18:38:03 +0100"><p>&gt; (which is difficult to see as you also change other things in the same commit)</p>

<p>Sorry, but I didn't hit the solution right away, i.e. before changing those two additional little things to make the code clearer (for me)...</p>

<p>The only actual change is that the <tt>REGULA_FALSI</tt> enum was not used (i.e. with the <tt>switch</tt> little change, the corresponding <tt>case</tt> would have been empty) whereas now it contains the update of x0 to avoid an infinite loop.</p>

<p>The other (cosmetic) change was to take these two statements</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
x1 = x;
f1 = fx;
</pre>
</div></div>
<p>out of the previous <tt>if</tt> and <tt>else</tt> blocks, as they were duplicated there (which made me wonder whether it was a bug that they were <em>not</em> different).</p>

<p>You say<br/>
&gt; <span class="error">&#91;...&#93;</span> convergence is guaranteed <span class="error">&#91;...&#93;</span><br/>
&gt; <span class="error">&#91;...&#93;</span> it converges very slowly for certain problems, <span class="error">&#91;...&#93;</span><br/>
&gt; <span class="error">&#91;...&#93;</span> The limited convergence of the algorithm is a property of the algorithm, <span class="error">&#91;...&#93;</span></p>

<p>All the above imply that one expects that the algorithm <em>can</em> find the solution.<br/>
However, in this implementation, it <em>can't</em>.<br/>
Therefore there is a bug, somewhere.</p>

<p>I agree that it is a limitation of double precision. But, IMHO, leaving the code as-is is not a good idea because because it leads to the impression that the "Regula Falsi" mathematical algorithm can fail to converge, which is not correct (IIUC).<br/>
Therefore, we could add a comment stating that the <em>implementation</em> with limited precision can fail to converge but that would be akin to saying to users: "Here is a code, but don't use it."<br/>
Personally, I would prefer to say: "Because of limited precision, the implementation can fail to converge. In those cases, we slightly modified the original algorithm in order to avoid failure."</p></comment><comment id="13080629" author="luc" created="Sun, 7 Aug 2011 20:06:52 +0100"><blockquote>
<p>All the above imply that one expects that the algorithm can find the solution.<br/>
However, in this implementation, it can't.<br/>
Therefore there is a bug, somewhere.</p></blockquote>

<p>Here, the bug is in the algorithm itself, not in the implementation.</p>

<blockquote>
<p>it leads to the impression that the "Regula Falsi" mathematical algorithm can fail to converge, which is not correct (IIUC).</p></blockquote>

<p>It is correct. Regula Falsi fails to converge, or rather it can take a too large number of iteration to converge. This is exactly this behavior that has lead to the construction of other algorithms like Illinois or Pegasus. These two algorithms try to detect the case when the same end of the interval is always updated, and the other end remains unchanged. Once they have detected this, they slightly change the value at one end to trick the linear evaluation into choosing a value that is very likely to have the required sign to update this other end. In fact, in many cases depending of the sign of the curvature near the root, as soon as one end is very close to the root the linear interpolation will always remain on the same side of the root and hence will update this end.</p>

<p>I agree with Dennis here, the change needed to ensure convergence is not tool long is to choose a better algorithm, such as Illinois, Pegasus ... or the nth order bracketing solver I recently added. Regula Falsi should remain the reference Regula Falsi, just as secant and Brent should remain the reference ones.</p></comment><comment id="13080641" author="erans" created="Sun, 7 Aug 2011 21:28:56 +0100"><p>"fails to converge" and "large number of iteration to converge" are completely different things.</p>

<p>The documentation says: "convergence is guaranteed". Is <em>that</em> false?</p>

<p>Moreover, for the function reported in this issue, the problem is not that it takes a large number iterations, it is that the loop is <em>literally</em> infinite because at some point, nothing changes anymore.</p>

<p>Stated otherwise: If implemented with larger/infinite precision, would it converge?<br/>
In the affirmative, then in my opinion it means that the plain "Regula Falsi" method cannot be implemented with double precision (or that its convergence properties are not as stated in the docs) or that there is a bug in the implementation.</p>

<p>In the former case, why keep something that will never be used (as we'll warn users that they should use "Pegasus" or "Illinois" but certainly not "RegulaFalsi")? IMHO, we could just state in the docs that "RegulaFalsi" was not implemented because it is demonstrably less efficient and sometimes fails to work.</p>

<p>A less radical alternative would be to keep the test I've inserted in the code (at line 186) and throw a <tt>MathIllegalStateException</tt> if it passes. The previous behaviour (infinite loop) is a bug in CM.</p></comment><comment id="13080665" author="luc" created="Sun, 7 Aug 2011 22:00:25 +0100"><blockquote>
<p>The documentation says: "convergence is guaranteed". Is that false?</p></blockquote>

<p>It depends on what is called convergence.<br/>
If convergence is evaluated only as the best of the two endpoints (measured along y axis), yes convergence is guaranteed and in this case it is very slow. This is what appears in many analysis books.<br/>
If convergence is evaluated by ensuring the bracketing interval (measured along x axis) reduces to zero (i.e. both endpoints converge to the root), convergence is not guaranteed.</p>

<p>The first case is achieved with our implementation by using the function accuracy setting. The second case is achieved with our implementation by using relative accuracy and absolute accuracy settings, which both are computed along x axis.</p>

<p>I fear that there are several different references about convergence for this method (just as for Brent). So we already are able to implement both views.</p>

<p>Without any change to our implementation, we reach convergence for this example by setting the function accuracy to 7.4e-13 or above, and it is slow (about 3500 evaluations). The default setting for function accuracy is very low (1.0e-15) and in this case, given the variation rate of the function near the root, it is equivalent to completely ignore convergence on y on only check the convergence on the interval length along x. </p></comment><comment id="13080673" author="psteitz" created="Sun, 7 Aug 2011 22:41:03 +0100"><p>I think we should either stick with the standard implementation of Regula Falsi or drop the class altogether.  Different rootfinders are going to perform better / worse for different functions and parameter values and I don't think it is a good idea to try to modify our implementations of the algorithms to try to work around their shortcomings for problem instances for which they are not well-suited.  It is much better to stick with standard algorithms, document them, and leave it to users to choose among implementations.  </p>

<p>Regula Falsi is not a good general-purpose rootfinder, but it does perform well for some problems (or parts of problems) and the original submission was a working implementation, so I would say revert the changes and keep it.</p></comment><comment id="13080675" author="erans" created="Sun, 7 Aug 2011 22:42:13 +0100"><p>I understand what you say. But however you put it, there is a bug; if not in the implementation, then in the API. It is not expected behaviour that something which must be changed (function accuracy threshold) to ensure correct behaviour (avoid an undetected infinite loop) is not a mandatory parameter.<br/>
To debug this, I started by raising the absolute accuracy threshold (the first default parameter, thus the first obvious thing to do) to 1e-2 and was stunned that I couldn't get anything after 1000000 iterations!</p>

<p>Therefore I maintain that, at a minimum, we put a line that will detect the infinite loop and raise an exception identifying <em>that</em> problem and not let the user wait for "TooManyEvaluationsException" to be raised, as that will induce the unaware (me) to just allow more evaluations and try again.</p>

<p>This solution does not corrupt the algorithm; it just adds protection.</p></comment><comment id="13080682" author="psteitz" created="Sun, 7 Aug 2011 23:11:18 +0100"><p>I disagree with your statement about setting accuracy.  All of this is configurable and if not set, you get the (documented) defaults.  This is all documented.  If the documentation is not clear, then we can improve it.  A user who applies Regula Falsi to the problem instance being examined here will end up maxing iterations.  I see no problem with that and in fact I see it as <b>correct</b> behavior (given the documented execution context of the algorithm).  </p></comment><comment id="13080689" author="erans" created="Sun, 7 Aug 2011 23:57:05 +0100"><p>How can it be correct to have an infinite loop?<br/>
The problem is not slow convergence, which you can overcome by allowing more iterations.<br/>
It is too low function value accuracy which you cannot overcome by allowing more iterations. Thus my point: We must raise the appropriate exception (the doc for which will state that it can happen if the function value accuracy is too low for the implementation to provide a result).</p></comment><comment id="13080690" author="erans" created="Mon, 8 Aug 2011 00:06:51 +0100"><p><span class="error">&#91;My comment starting with &quot;I understand what you say.&quot; was an answer to Luc. I hadn&#39;t read Phil&#39;s previous one which was posted while I was writing mine.&#93;</span></p>

<p>I agree that it is better not to change the standard algorithm, as I indicated in my first comment.<br/>
The fix which I'm proposing is not an algorithm change, it is an implementation detail similar to the many hundreds checks performed in CM. Just it is not a precondition test. It adequately indicates that something went wrong and can help the user figure out what it was. It makes the implementation more robust.</p></comment><comment id="13080695" author="erans" created="Mon, 8 Aug 2011 00:46:58 +0100"><p>The original implementation, for the "problem instance being examined here", would find the root with absolute accuracy lower than <b>10e-12</b> after 3560 evaluations (note: using the default value of <b>1e-6</b>).<br/>
In fact, the root was found, at the required accuracy, after around 2200 evaluations.</p>

<p>That does not sound like correct behavior.<br/>
The problem is that, "x0" never being updated, the convergence test always fails... until we reach the limitation of double precision, which entails an infinite loop.</p>

<p>In fact my fix should not be necessary, as things have gone awry before it would apply, but there is a bug to fix nonetheless.</p></comment><comment id="13080697" author="psteitz" created="Mon, 8 Aug 2011 00:54:54 +0100"><p>Is there actually a possibility of an infinite loop in the code?  Looks to me like the max evaluations bound will stop the while loop, so there is no potential for an infinite loop.  Apologies if I am misreading the code and the loop can fail to terminate, in which case I agree this is a problem.  (As a side note, from a style perspective, I prefer to explicitly bound loops to avoid this kind of uncertainty.  The natural hard bound here is the evaluation count.)</p>

<p>Trying to detect when a sequence of iterates has gotten "stuck" and is destined to hit max iterations without converging is walking down a path that I think is unwise for us and users.  I see no reason not to stick with the standard impl here, which is nicely documented in the original submission.  Trying to workaround numerical problems in simple algorithms and change contracts to include these workarounds is asking for trouble - both for us and users.  In a simple case like this, it is much better to just stick with the documented algorithm, which should in this case (again unless I am missing something) end with max evaluations exceeded, which is the right exception to report. </p></comment><comment id="13080792" author="erans" created="Mon, 8 Aug 2011 08:24:48 +0100"><p>I surely hope that your last post is not an answer to mine from 23:46.</p>

<p>I'll try to answer here in case it was in reply to my previous one (23:06).<br/>
Of course, the code will not run forever because of the "maxeval" bound.<br/>
But it will run for a time that depends on the value of "maxeval" <b>with no added benefit</b>! From a certain point, the loop is like</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">while</span> (<span class="code-keyword">true</span>) {
  <span class="code-comment">// Do nothing useful, just count!
</span>  ++count;
  <span class="code-keyword">if</span> (count &gt; maxeval) {
    <span class="code-keyword">throw</span> <span class="code-keyword">new</span> TooManyEvalutationsException(maxeval);
  }
}
</pre>
</div></div>

<blockquote>
<p>from a style perspective, I prefer to explicitly bound loops</p></blockquote>

<p>From an <b>OO</b> style perspective, the reuse of the "Incrementor" is better, and you don't have to rewrite the same "test and throw exception if failed" boiler plate code each time there is such a loop.</p>

<blockquote>
<p>Trying to detect when a sequence of iterates has gotten "stuck" and is destined to hit max iterations without converging is walking down a path that I think is unwise for us and users.</p></blockquote>

<p>Why?</p>

<blockquote>
<p>I see no reason not to stick with the standard impl here</p></blockquote>

<p>A busy idle loop is a compelling reason IMO.</p>

<blockquote>
<p>Trying to workaround numerical problems in simple algorithms and change contracts to include these workarounds is asking for trouble</p></blockquote>

<p>The trouble is there with the current implementation. I'm not criticizing the contribution but this issue shows that it should be made more robust.<br/>
Also, the documentation about "convergence is guaranteed" can lead to a false sense of security.<br/>
Moreover, is the "regula falsi" a mathematical algorithm (with a guaranteed converge property if computed with infinite precision) or a numerical one, which this issue proves that it cannot guarantee convergence? In the former case, CM's (numerical) implementation is not strictly "regula falsi" and there would be no such thing as respect for an original/standard implementation if we can make it more robust.</p>

<p>I've already indicated that the fix does <b>not</b> change the contract; it stops the busy idle loop as soon as it is detected and reports that it won't do any good to increase the number of iterations. That's <em>obviously</em> more robust.</p>

<p>Now, if you were answering to my 23:46 post, I'd be glad to read an explanation of why the first paragraph describes expected behaviour.</p>
</comment><comment id="13080817" author="luc" created="Mon, 8 Aug 2011 09:37:31 +0100"><p>I don't understand.</p>

<p>When it was created, the maxIteration threshold was exactly designed for this purpose: get out of infinite loops. It was later renamed maxEvaluation but the purpose is still the same: don't get stuck. The reason why we get stuck is irrelevant. This limit is simply a safety limit, not a tuning parameter that user are expected to raise once they hit it hoping they will converge later on. If they could raise it later, then they should set it to an appropriate value at once. Hitting it implies computation failed. Regula falsi just like any algorithm can fail if applied with the wrong parameters or to the wrong function (in fact, even with a good setting of function accuracy, it fails to converge if we require a bracket selection on the side that does not move).</p>

<p>Also detecting one bound is not updated is what Illinois and Pegasus are designed to do.</p>

<p>So I think we should completely get rid of regula falsi and only keep the better algorithms.</p></comment><comment id="13080873" author="erans" created="Mon, 8 Aug 2011 10:57:17 +0100"><blockquote>
<p>I think we should completely get rid of regula falsi and only keep the better algorithms.</p></blockquote>

<p>That was my first idea. And that would be the simplest one, the safest one, and the only viable one as I can't seem to state clearly enough that</p>
<ul>
	<li>Problem 1: When the doc says "guaranteed convergence", the algorithm should provide the answer.</li>
	<li>Problem 2: When the (absolute) accuracy threshold is set to 1e-6, and the correct root <b>is</b> found (after 2200 iterations) within the requirements, it should be returned, instead running idle and finish with an exception</li>
</ul>


<blockquote>
<p>The reason why we get stuck is irrelevant.</p></blockquote>

<p>But why? If we <b>can</b> be more precise on the cause of failure, why not do it?</p>

<blockquote>
<p>This limit is simply a safety limit, not a tuning parameter that user are expected to raise once they hit it hoping they will converge later on.</p></blockquote>

<p>In principle, some possible use would be to compare the efficiency of different methods where the main criterion would be a time limitation (assuming that the function evaluation time overwhelms the of the root solver algorithm time). Thus with the function that triggered this issue:</p>
<ul>
	<li>If you set maxeval to "3000", then both "Pegasus" (17 evals) and (a fixed) "RegulaFalsi" (2200 evals) would fill the bill.</li>
	<li>If you set maxeval to "1000", then "Pegasus" will be the only winner.</li>
</ul>



<p>Anyways:<br/>
+1 for removing it altogether, and include somewhere the reason for it not being implemented in CM.</p></comment><comment id="13081104" author="psteitz" created="Mon, 8 Aug 2011 19:23:21 +0100"><p>I am OK removing Reg Falsi, but stand by comments above that it is a very bad idea to hack standard algorithms and agree with Luc that maxing iterations is the correct behavior in the case we have been discussing. It is kind of pathetic that the compromise is to drop the impl; but in this case I don't see it as a real loss, since I can't think of any examples where Reg Falsi would be preferable to one of the other solvers - other than for educational purposes.</p></comment><comment id="13081150" author="erans" created="Mon, 8 Aug 2011 20:36:19 +0100"><p>May I please know <b>why it is OK that a bit of code does loop counting and repeatedly computes the same thing</b>!</p>

<p>You insist that I'd be "hacking" whereas I've indicated 3 or 4 times that there is no hack: just a test that will exit the loop as soon as it detects that the algorithm has failed. Why is it not understandable that the busy loop could last for a long time? The function is potentially evaluated millions of times at the same point. What if the evaluation is costly? Imagine the computation running for days, only to discover that it could have been be stopped after a few seconds. Is that robust code and good advertising for a library? It is one thing to expect that there are unknown bugs in CM, but refusing to fix a known one is so obviously wrong...</p>

<p>And may I please know <b>why it is OK that an algorithm that finds the right result does not return it</b>.</p>

<p>I had been trying to provide alternatives to the removal, but I can't do much more if nobody answers the above two questions.<br/>
You just have to run the code and print "x" and "x1" to see what is going on!</p></comment><comment id="13081162" author="luc" created="Mon, 8 Aug 2011 21:13:43 +0100"><div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
May I please know *why it is OK that a bit of code does loop counting and repeatedly computes the same thing!*
</pre>
</div></div>

<p>We didn't say that. We said that regula falsi is a standard <b>bad</b> algorithm. We said that very smart people have enhanced it 40 years ago and the enhanced versions are known and already implemented in Commons Math. These algorithms are <b>not</b> blind loop counters and they insert smart target shifts that <b>prevent</b> the behavior we observe here. These algorithms not only detect the problem, they fix it! They allow convergence along x. They allow selection of the side of the root.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
The function is potentially evaluated millions of times at the same point.
</pre>
</div></div>

<p>The maxEvaluations is already here to prevent this, and in fact now this max number is even mandatory in the solve method (you placed it if I remember correctly). So the function is called millions of time only if the users wishes so by setting the maxEvaluations to a number in the range of millions.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
And may I please know *why it is OK that an algorithm that finds the right result does not <span class="code-keyword">return</span> it.*
</pre>
</div></div>

<p>If the user asked for a convergence in x or for a convergence on y on the side that is stuck, then no, the algorithm did not find the right result. One of its bounds converged but the users asked for something else.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
You just have to run the code and print <span class="code-quote">"x"</span> and <span class="code-quote">"x1"</span> to see what is going on!
</pre>
</div></div>

<p>We know exactly what is going on! We know the algorithm is stuck. We know why it is stuck. We know why it did not detect it is stuck. We know it will finally hit the safety maxEvaluation threshold that is just waiting for that. And we know that removing all these problems is done by using other algorithms which are already there.</p>

<p>Regula falsi is doomed. It is an algorithm used for educational purposes, or for comparison purposes, not something suited for production use. It is just like Euler for ODE (and by the way we did implement Euler for ODE and we don't recommend users to use it as we also did implement better algorithms that were also designed by smart mathematicians decades ago).</p></comment><comment id="13081180" author="erans" created="Mon, 8 Aug 2011 21:44:19 +0100"><blockquote>
<p>So the function is called millions of time only if the users wishes so by setting the maxEvaluations to <br/>
a number in the range of millions.</p></blockquote>

<p>No, the user should not expect that any algorithm will go on a single iteration more than necessary.<br/>
This is a plain bug.</p>

<p>Why do you see that a test such as I proposed (exit the loop early) is wrong while CM (and any good program) is full of tests to ensure that you don't do useless computations?<br/>
This has nothing to do with "regula falsi", it is robustness in the face of limited precision.</p>

<p>However, if you insist that the bug (failing to detect that it is stuck) is really an integral part of the algorithm, then removing it is not a "pathetic compromise", it is the only right thing to do!</p>
</comment><comment id="13081193" author="psteitz" created="Mon, 8 Aug 2011 22:00:20 +0100"><p>This is a pointless discussion.  Gilles, you obviously don't share the views that Luc and I have on implementing standard algorithms or even what the meaning of a numerical algorithm is. Some algorithms perform well for some classes of problems and not others.  There is an art to choosing the right algorithm for the problem instance at hand.  If we modify our implementations to try to work around shortcomings of the algorithms we implement, then we are not implementing the standard algorithms, and we need to document exactly what it is that we are implementing, because in this case we are actually making it harder for users to choose (because we are not longer advertising standard numerics).  This is what I meant when I said it is both harder for us (because we have to document the hacks and non-standard contracts) and users (because the standard numerical analysis theory that they may be using to choose among implementations will no longer apply).  It is, IMO, a "pathetic compromise" to drop the implementation because we can't agree on what it means to implement the algorithm. So be it. Lets drop it and resolve this issue as "fixed."</p></comment><comment id="13081242" author="erans" created="Mon, 8 Aug 2011 23:08:19 +0100"><blockquote>
<p>Gilles, you obviously don't share the views that Luc and I have on implementing standard algorithms </p></blockquote>

<p>That's simply <em>not true</em>.<br/>
I was the one pointing out that standard algorithms should have precedence: Please recall that it was considered fine that "Levenberg-Marquardt" and "Brent" would be, unknowingly to the user, "twisted" to perform <em>non-standard</em> convergences check.<br/>
In those cases, there was the risk that the result of the algorithm would not be the same as the reference implementation.</p>

<p>In this case, there is no such thing as deviating from standard numerics! It was just a matter of throwing the right exception. So: "The algorithm fails? Let's tell it sooner rather than later."</p>

<p>Very interesting question that you ask: "what it means to implement the algorithm". But please note that I asked it several posts ago<span class="error">&#91;1&#93;</span>, and an answer would have helped sort out this discussion. What is your definition?</p>


<p><span class="error">&#91;1&#93;</span> 08/Aug/11 07:24</p></comment><comment id="13081633" author="erans" created="Tue, 9 Aug 2011 14:51:58 +0100"><p>Also:</p>

<p>Phil,</p>

<p>Could you please leave out dismissive qualifiers such as "pointless" and "pathetic" (and, elsewhere, "silly") and stick to more or less objective arguments?<br/>
That will certainly help keep the conversation tone to a courteous level.</p>

<p>Luc,</p>

<p>Thanks for stating in full details what you meant by "convergence" in this case. However, it is still a "post-mortem" description.<br/>
Do you really expect that the average user of the CM library (a.o. me and the original reporter of the issue) to be able to figure out that "obvious" explanation just by getting a "TooManyEvalutationsException", setting the along-x accuracy threshold to a ridiculously high value and still getting the same exception?<br/>
If just for educational purposes, don't you think that it is more instructive to get a specific hint that the algorithm is stuck, rather than hit the ultimate fail-safe barrier much much later, and then download the source code and sprinkle the code with "println" statements to do forensic analysis?</p>

<p>Phil,</p>

<p>I tried to handle this issue out of respect for a real user who reported an issue that would have looked suspicious to many CM users. <span class="error">&#91;How many of them would be experts in numerical analysis?&#93;</span><br/>
You do not do me a favour by removing this algorithm; I don't want it to be a <em>compromise</em> (pathetic or not). If you prefer to keep it, I don't care anymore. But, in that case, <em>you</em> should have answered to Axel Kramer to go and read some books on numerical analysis.</p></comment><comment id="13082210" author="psteitz" created="Wed, 10 Aug 2011 08:27:47 +0100"><p>Gilles, I apologize for tone of comments.</p></comment><comment id="13084113" author="dhendriks" created="Fri, 12 Aug 2011 14:29:12 +0100"><p>The discussions for this issue have left me with a lack of overview, so I'll (try to) objectively summerize the discussions above:</p>

<p>The problems are:</p>
<ol>
	<li>Regula Falsi states it always converges, but the implementation doesn't.</li>
	<li>The main loop may continue, even when it no longer makes any progress, and subsequently ends with a TooManyEvaluationsException exception.</li>
</ol>


<p>The cause of both problems is:</p>
<ul class="alternate" type="square">
	<li>The limited/finite precision of the Java double type.</li>
</ul>


<p>Proposed solutions:</p>
<ol>
	<li>The patch from revision 1154614, which modifies the Regula Falsi algorithm.
	<ul class="alternate" type="square">
		<li>Consensus seems to be that this change, which modifies the algorithm, is undesireable. We should keep the original algorithm.</li>
	</ul>
	</li>
	<li>Detect that the algorithm no longer makes progress and throw an exception, instead of continuing the loop which no longer makes progress.
	<ul class="alternate" type="square">
		<li>This is just earlier detection of the algorithm getting stuck.</li>
		<li>We could throw the TooManyEvaluationsException exception, that continuing the loop would also get us.
		<ul class="alternate" type="square">
			<li>The class only states "Exception to be thrown when the maximal number of evaluations is exceeded.".</li>
			<li>The exception message only states: "illegal state: maximal count (100) exceeded: evaluations"</li>
			<li>Both may benefit from more extended documentation/messages.</li>
		</ul>
		</li>
		<li>We could also throw an other exception that more clearly states this issue (NoMoreProgressException, AlgorithmStuckException, ...?).
		<ul class="alternate" type="square">
			<li>It could for instance mention that changing the function value accuracy may be a solution, or asking for a different kind of solution?</li>
		</ul>
		</li>
	</ul>
	</li>
	<li>Add documentation to the Regula Falsi algorithm that it is not intended to be used for actual problems, but only to compare algorithms, for testing, educational purposes, etc.</li>
	<li>Add documentation to the Regula Falsi algorithm that users should use Illinois or Pegasus instead, which should outperform the algorithm for most if not all problems.</li>
	<li>Add documentation to the Regula Falsi algorithm that it theoretically converges, but the implementation may not, due to the limited/finite precision of Java's double type. This will result in an exception (or 2 if we also do solution number 2).</li>
	<li>Remove the Regula Falsi algorithm, and document why it is not included/implemented.
	<ul class="alternate" type="square">
		<li>This seems to have been accepted as a last resort solution only.</li>
	</ul>
	</li>
</ol>


<p>Other notes:</p>
<ul class="alternate" type="square">
	<li>The following problem was also indicated: a solution is found after a certain number of iterations, but the algorithm does not return the solution (it does not terminate)
	<ul class="alternate" type="square">
		<li>This should only happen if the user asked for a different solution. That is, there are several accuracy parameters, as well as an allowedSolution parameter.</li>
		<li>If the solution requested by the user is found, it should return the solution immediately, otherwise it is a bug.</li>
	</ul>
	</li>
</ul>


<p>New notes:</p>
<ul class="alternate" type="square">
	<li>I think the Regula Falsi algorithm does not state a fixed convergence criteria: it is left to the user to decide on one.
	<ul class="alternate" type="square">
		<li>When I implemented the algorithm, I think I copied the convergence checks for Brent.</li>
		<li>I subsequently modified the convergence criteria when I added the allowedSolution parameter.</li>
	</ul>
	</li>
</ul>


<p>My personal opinions on the proposed solutions:</p>
<ul class="alternate" type="square">
	<li>(1) Revert part of 1154614, so get the original algorithm back. The other changes of that commit, that don't change the actual algorith, can stay.</li>
	<li>(2) If we keep the algorithm, earlier detection would be nice. Not sure which exception to throw in these cases.
	<ul class="alternate" type="square">
		<li>This would result in a single 'if' that detects that the new approximation is the same as the previous one, and we thus no longer make progress, in which case we throw the exception earlier, instead of later.</li>
	</ul>
	</li>
	<li>(3-5) If we keep the algorith, all 3 documentation extensions would be a good idea.</li>
	<li>(6) If possible, keep the algorithm, and don't remove it.</li>
</ul>


<p>New issue:</p>
<ul class="alternate" type="square">
	<li>TooManyEvaluationsException currently seems to use LocalizedFormats.MAX_COUNT_EXCEEDED("maximal count (
{0}) exceeded"), but maybe should use LocalizedFormats.MAX_EVALUATIONS_EXCEEDED("maximal number of evaluations ({0}
<p>) exceeded") instead?</p></li>
</ul>
</comment><comment id="13084242" author="erans" created="Fri, 12 Aug 2011 17:51:30 +0100"><p>Thanks for the neat summary!</p>

<blockquote>
<ul>
	<li>(1) Revert part of 1154614, so get the original algorithm back. The other changes of that commit, that don't change the actual algorith, can stay.</li>
</ul>
</blockquote>

<p>Done in revision 1157185.</p>

<blockquote>
<ul>
	<li>(2) If we keep the algorithm, earlier detection would be nice. Not sure which exception to throw in these cases.
	<ul>
		<li>This would result in a single 'if' that detects that the new approximation is the same as the previous one, and we thus no longer make progress, in which case we throw the exception earlier, instead of later.</li>
	</ul>
	</li>
</ul>
</blockquote>

<p>+1 (my position in the "07/Aug/11 20:28" post)<br/>
As suggested there, the exception could be "MathIllegalStateException" but with a clear message stating that the algorithm is stuck. Or maybe a new subclass of it which we could call "NumericalPrecisionException" or even a general-purpose "ImplementationException".</p>

<blockquote>
<p><span class="error">&#91;...&#93;</span> all 3 documentation extensions would be a good idea.</p></blockquote>

<p>+1</p>

<p>About the "new issue", the message string:</p>
<blockquote>
<p>"illegal state: maximal count (100) exceeded: evaluations"</p></blockquote>
<p>contains everything:</p>
<ol>
	<li>error type: illegal state</li>
	<li>failure description: maximal count (100) exceeded</li>
	<li>context: evaluations</li>
</ol>


<p>I proposed to use this approach (combining message items with the "addMessage" method of "ExceptionContext") in order to reduce the number of messages in the "LocalizedFormats" enum. Too many of them are just slight variations on a same theme.</p></comment><comment id="13084454" author="dhendriks" created="Sat, 13 Aug 2011 00:12:15 +0100"><blockquote><p>contains everything</p></blockquote>

<p>I agree. I was just wondering why a message that seems to be exactly the same as the exception was not used, as it kind of looked like it was created just for this purpose...</p>

<blockquote><p>I proposed to use this approach (combining message items with the "addMessage" method of "ExceptionContext") in order to reduce the number of messages in the "LocalizedFormats" enum. Too many of them are just slight variations on a same theme.</p></blockquote>

<p>Ah, so then the MAX_EVALUATIONS_EXCEEDED is just a remnant of the past that should be eliminated, by replacing it everywhere by the more general MAX_COUNT_EXCEEDED?</p></comment><comment id="13084473" author="erans" created="Sat, 13 Aug 2011 00:38:37 +0100"><p>Yes. In the file "LocalizedFormats.java", I've started to write</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>/* keep */
</pre>
</div></div>
<p>after each enum that is supposedly to be kept. All the others are still to be examined for redundancy with another one, or the possibility to create something close using the "multi-item" approach.</p></comment><comment id="13095871" author="dhendriks" created="Fri, 2 Sep 2011 09:58:17 +0100"><p>The 'ticket631.patch' file is my attempt to resolve this issue with a solution (or maybe I should call it a compromise?) that is satisfactory for all people that participated in the discussions for this issue, without having to remove the Regula Falsi algorithm from Commons Math.</p>

<p>I changed the following:</p>
<ul class="alternate" type="square">
	<li>Added early detection of no longer making progress ('getting stuck'), and documented it.
	<ul class="alternate" type="square">
		<li>I used ConvergenceException for this, as it seems to fit... Do we want a custom error message with it?</li>
	</ul>
	</li>
	<li>Extended RegulaFalsiSolver documentation to indicate:
	<ul class="alternate" type="square">
		<li>that the algorithm should not be used for actual problems.</li>
		<li>that Illinois and Pegasus are improved versions and should be prefered.</li>
		<li>that the implementation does not guarantee convergence, while the algorithm theoretically does.</li>
	</ul>
	</li>
	<li>Extended IllinoisSolver and PegasusSolver documentation to indicate that they don't suffer from the RegulaFalsiSolver's implementation/convergence issues.</li>
</ul>


<p>Please comment on whether this patch is an acceptable solution/compromise, and if not, why it is not.</p></comment><comment id="13095914" author="erans" created="Fri, 2 Sep 2011 12:15:21 +0100"><p>Committed (with minor additional Javadoc fixes) in revision 1164474.</p>

<p>Leaving open until confirmation that <tt>ConvergenceException</tt> is the right one to use. I thought that we could make a difference between <em>theoretical</em> and <em>implementation</em> convergence failures. But it might not be worth introducing the distinction just for this one case, especially since it is quite clear clear now that the class should not be used.</p></comment><comment id="13100253" author="erans" created="Thu, 8 Sep 2011 13:13:59 +0100"><p>No objection raised; setting to "Resolved".</p></comment></comments><issuelinks><issuelinktype id="10030"><name>Reference</name><inwardlinks description="is related to"><issuelink><issuekey id="12511216">MATH-599</issuekey></issuelink></inwardlinks></issuelinktype></issuelinks><attachments><attachment id="12492726" name="ticket631.patch" size="6669" author="dhendriks" created="Fri, 2 Sep 2011 09:58:17 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 7 Aug 2011 13:03:23 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>61924</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60341</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-630] Rank Revealing QR Decomposition missing</title><link>https://issues.apache.org/jira/browse/MATH-630</link><project id="12310485" key="MATH">Commons Math</project><description><p>The current QR decomposition implementation performs no column pivoting and is thus not rank revealing.</p>

<p>A rank revealing QR decomposition could determine rank more efficiently, though not always as reliably, as from the Singular Value Decomposition.  Additionally the rank revealing decomposition can be used in least-squares algorithms on rank-deficient matrices.</p></description><environment/><key id="12515168">MATH-630</key><summary>Rank Revealing QR Decomposition missing</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="joubert">Christopher Nix</reporter><labels>
                    </labels><created>Sat, 23 Jul 2011 21:08:13 +0100</created><updated>Sun, 7 Apr 2013 10:15:15 +0100</updated><resolved>Tue, 12 Mar 2013 17:10:10 +0000</resolved><version>2.0</version><version>2.1</version><version>2.2</version><fixVersion>3.2</fixVersion><due/><votes>0</votes><watches>2</watches><comments><comment id="13070046" author="joubert" created="Sat, 23 Jul 2011 21:24:00 +0100"><p>As a starter for ten, I've attached a patch that:</p>

<p>1. Adds an RRQRDecomposition interface extending the current QRDecomposition.  This interface adds a getRank() method and a getP() method to obtain the permutation matrix used in column-pivoting (Are there RRQR implementations that don't column pivot?)</p>

<p>2. Adds a RRQRDecompositionImpl class, implementing the interface above, and extending the QRDecompositionImpl class to make use of existing code.</p>

<p>3. Adapts QRDecompositionImpl to allow access to currently private variables and methods.  I've also split the existing code into a performHouseholderReflection method that is useful to the RRQRDecompositionImpl sub-class.</p>

<p>The getRank() method here is notably quicker than the SingularValueDecompositionImpl method on large random matrices if tried, but I'll admit that I've coded this ad-hoc.</p>

<p>It still needs unit tests.</p>

<p>Hopefully, a small step in the right direction.</p>

<p>Chris</p></comment><comment id="13080599" author="joubert" created="Sun, 7 Aug 2011 17:43:59 +0100"><p>In light of the ongoing discussion in the mailing list, I have submitted a further patch that includes the pivoting within the current class structure.</p>

<p>There are unit tests attached, duplicating existing tests for QR decomposition with no pivoting.  A few of these tests fail, and I'm still trying to figure it out.  This patch file is not intended for inclusion, only discussion.</p>

<p>Chris</p>
</comment><comment id="13082187" author="psteitz" created="Wed, 10 Aug 2011 07:48:14 +0100"><p>If we get a working patch in time, we can try to squeeze this into 3.0; but it should be doable without compat breaks, so technically can wait until 3.1</p></comment><comment id="13420357" author="erans" created="Sun, 22 Jul 2012 23:52:13 +0100"><p>No further patch have been submitted.<br/>
Is this issue still current?</p></comment><comment id="13600198" author="luc" created="Tue, 12 Mar 2013 17:10:10 +0000"><p>Fixed in subversion repository as of r1455627.</p>

<p>Patch applied after conversion to current status and slight adaptations.</p>

<p>Thanks for the report and for the patch!</p></comment><comment id="13624806" author="luc" created="Sun, 7 Apr 2013 10:15:15 +0100"><p>Closing issue as version 3.2 has been released on 2013-04-06.</p></comment></comments><attachments><attachment id="12489632" name="QRDecomposition.patch" size="31741" author="joubert" created="Sun, 7 Aug 2011 17:43:59 +0100"/><attachment id="12487613" name="RRQRDecomposition.patch" size="31410" author="joubert" created="Sat, 23 Jul 2011 21:24:00 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 10 Aug 2011 06:48:14 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2200</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>11068</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-629] Multiple dispatch of overloaded methods in "ArrayRealVector"</title><link>https://issues.apache.org/jira/browse/MATH-629</link><project id="12310485" key="MATH">Commons Math</project><description><p>E.g. the "add(RealVector)" method is</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> RealVector add(RealVector v) {
    <span class="code-keyword">if</span> (v <span class="code-keyword">instanceof</span> ArrayRealVector) {
        <span class="code-keyword">return</span> add((ArrayRealVector) v);
    } <span class="code-keyword">else</span> { <span class="code-comment">// ...</span>
</pre>
</div></div>

<p>To avoid one unnecessary method call, it should become</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> RealVector add(RealVector v) {
    <span class="code-keyword">if</span> (v <span class="code-keyword">instanceof</span> ArrayRealVector) {
        <span class="code-keyword">return</span> add(((ArrayRealVector) v).data);
    } <span class="code-keyword">else</span> { <span class="code-comment">// ...</span>
</pre>
</div></div>

<p>And similarly for other methods.</p></description><environment/><key id="12515134">MATH-629</key><summary>Multiple dispatch of overloaded methods in "ArrayRealVector"</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="erans">Gilles</assignee><reporter username="erans">Gilles</reporter><labels>
                    </labels><created>Fri, 22 Jul 2011 23:41:21 +0100</created><updated>Sat, 24 Mar 2012 16:16:41 +0000</updated><resolved>Fri, 22 Jul 2011 23:52:14 +0100</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13069830" author="erans" created="Fri, 22 Jul 2011 23:52:14 +0100"><p>Revision 1149756.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>67162</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60342</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-628] use only SparseIterator, on RealVectors, that implement SpareRealVectors </title><link>https://issues.apache.org/jira/browse/MATH-628</link><project id="12310485" key="MATH">Commons Math</project><description><p>the performance suffers badly if one tries to use SparseIterator when there is no sparse backing.<br/>
Currently there is only a check for ArrayRealvector, all other is supposed to be a SparseRealvector.<br/>
If one creates a new implementation of RealVector ... bang.</p>

<p>here is a performance test case:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">package</span> org.apache.commons.math.linear;

<span class="code-keyword">import</span> java.util.Iterator;
<span class="code-keyword">import</span> org.junit.Test;

/**
 *
 * @author aploese
 */
<span class="code-keyword">public</span> class PerformanceTest {

    <span class="code-keyword">final</span> <span class="code-keyword">static</span> <span class="code-object">int</span> ITER = 100;
    <span class="code-keyword">final</span> <span class="code-keyword">static</span> <span class="code-object">int</span> VECTOR_SIZE = 2048;
    <span class="code-keyword">final</span> <span class="code-keyword">static</span> <span class="code-object">double</span> SPARSE_FILL_STATE = 0.8;

    @Test
    <span class="code-keyword">public</span> void performanceSparseVectorOpenMap() {
        <span class="code-object">System</span>.out.println(<span class="code-quote">"performanceSparseVectorOpenMap"</span>);
        RealVector v = <span class="code-keyword">new</span> OpenMapRealVector(VECTOR_SIZE);
        <span class="code-keyword">for</span> (<span class="code-object">int</span> i = 0; i &lt; v.getDimension() * SPARSE_FILL_STATE; i++) {
            v.setEntry(i, i);
        }
        <span class="code-keyword">for</span> (<span class="code-object">int</span> j = 0; j &lt; ITER; j++) {
            <span class="code-object">long</span> t1 = <span class="code-object">System</span>.nanoTime();
            <span class="code-object">double</span> a = 0;
            Iterator&lt;RealVector.Entry&gt; it = v.sparseIterator();
            RealVector.Entry e;
            <span class="code-keyword">while</span> (it.hasNext() &amp;&amp; (e = it.next()) != <span class="code-keyword">null</span>) {
                a += e.getValue();
            }
            <span class="code-object">long</span> t2 = <span class="code-object">System</span>.nanoTime();
            <span class="code-keyword">for</span> (<span class="code-object">int</span> i = 0; i &lt; v.getDimension(); i++) {
                a += v.getEntry(i);
            }
            <span class="code-object">long</span> t3 = <span class="code-object">System</span>.nanoTime();
            <span class="code-object">System</span>.out.println(<span class="code-object">String</span>.format(<span class="code-quote">"OpenMap: %d\t%s\t| %s"</span>, j, <span class="code-object">Long</span>.toString(t2 - t1), <span class="code-object">Long</span>.toString(t3 - t2)));
        }
    }

    @Test
    <span class="code-keyword">public</span> void performanceSparseVectorArray() {
        <span class="code-object">System</span>.out.println(<span class="code-quote">"performanceSparseVectorArray"</span>);
        RealVector v = <span class="code-keyword">new</span> ArrayRealVector(VECTOR_SIZE);
        <span class="code-keyword">for</span> (<span class="code-object">int</span> i = 0; i &lt; v.getDimension() * SPARSE_FILL_STATE; i++) {
            v.setEntry(i, i);
        }
        <span class="code-keyword">for</span> (<span class="code-object">int</span> j = 0; j &lt; ITER; j++) {
            <span class="code-object">long</span> t1 = <span class="code-object">System</span>.nanoTime();
            <span class="code-object">double</span> a = 0;
            Iterator&lt;RealVector.Entry&gt; it = v.sparseIterator();
            RealVector.Entry e;
            <span class="code-keyword">while</span> (it.hasNext() &amp;&amp; (e = it.next()) != <span class="code-keyword">null</span>) {
                a += e.getValue();
            }
            <span class="code-object">long</span> t2 = <span class="code-object">System</span>.nanoTime();
            <span class="code-keyword">for</span> (<span class="code-object">int</span> i = 0; i &lt; v.getDimension(); i++) {
                a += v.getEntry(i);
            }
            <span class="code-object">long</span> t3 = <span class="code-object">System</span>.nanoTime();
            <span class="code-object">System</span>.out.println(<span class="code-object">String</span>.format(<span class="code-quote">"Array: %d\t%s\t| %s"</span>, j, <span class="code-object">Long</span>.toString(t2 - t1), <span class="code-object">Long</span>.toString(t3 - t2)));
        }
    }
</pre>
</div></div>

<p>Patch will follow.</p></description><environment/><key id="12514998">MATH-628</key><summary>use only SparseIterator, on RealVectors, that implement SpareRealVectors </summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="2">Won't Fix</resolution><assignee username="-1">Unassigned</assignee><reporter username="aploese">Arne Plöse</reporter><labels>
                    </labels><created>Fri, 22 Jul 2011 08:07:16 +0100</created><updated>Sun, 7 Apr 2013 10:15:01 +0100</updated><resolved>Wed, 13 Mar 2013 12:21:29 +0000</resolved><fixVersion>3.2</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13069419" author="aploese" created="Fri, 22 Jul 2011 08:08:21 +0100"><p>Here is the patch, but only for add so far</p></comment><comment id="13069531" author="erans" created="Fri, 22 Jul 2011 13:56:41 +0100"><p>Sorry but I don't follow: The performance test in the description seems to compare timings of the methods "getValue" and "getEntry" for two implementations of "RealVector", but then you provide a patch that modifies an "add" method...</p>

<p>Please, let's first sort out what should be observed, and when this shows something wrong, we'll go further to discuss a solution.</p>

<p>Since micro-benchmarks are often misleading, to be (somewhat) sure that we observe the same thing, I've written the above code slightly differently. Here are the results:</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>getValue
OpenMapRealVector: 0.3615042 ms
ArrayRealVector: 0.41832509999999995 ms
getEntry
OpenMapRealVector: 33.91892349999999 ms
ArrayRealVector: 5.0002195 ms
</pre>
</div></div>

<p>Does this conform with your results?<br/>
If so, please restate what conclusion you draw from them.</p></comment><comment id="13069561" author="aploese" created="Fri, 22 Jul 2011 15:16:38 +0100"><p>One test tests with OpenMapRelVector the other with ArrayRelVector.</p>

<p>If you have a moderately filled OpenMapVector, the fastest way is to iterate over. The fillstate is controlled by SPARSE_FILL_STATE. If the OpenMapRealVector becomes filled up it may be faster to simply call getEntry(int ) on each.</p>

<p>If you have a lets say ArrayRealvector the worst thing you can do is use the iterator shown in performanceSparseVectorArray().</p>

<p>Im planning to create a RangeRealVector (like octave ranges). in the current add|subtract|... methods this would use the iterator(because its no ArrayRealVector) - not what I want for performance reasons.</p>

<p>So the add() is simply a pattern prototype like the add(double[]) which we have done. </p></comment><comment id="13069822" author="erans" created="Fri, 22 Jul 2011 23:33:43 +0100"><p>I misunderstood what was tested; IIUC now it is thus the efficiency of "iteration" vs "random access"; so:</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>Iterator
OpenMapRealVector: 0.3584611999999999 ms
ArrayRealVector: 0.4413703 ms
Random access
OpenMapRealVector: 33.912393599999994 ms
ArrayRealVector: 4.896568800000001 ms
</pre>
</div></div>

<p><span class="error">&#91;I must say I didn&#39;t expect iteration to be faster than random access for &quot;ArrayRealVector&quot;.&#93;</span><br/>
But if this result is correct, wouldn't it mean that it is no problem to use iteration even on non-sparse vectors...</p>

<p>Apart from the change that tests for "SparseIterator", your patch also makes additional modifications (e.g. removing one overloaded "add" method), not directly related to this issue... I'll open a new issue for one the (implicitly) suggested changes.</p>
</comment><comment id="13069936" author="aploese" created="Sat, 23 Jul 2011 11:08:51 +0100"><p>No, I read the test results as followns</p>

<p>performanceSparseVectorOpenMap <span class="error">&#91;ms&#93;</span><br/>
OpenMap   0: 2,193495| 0,546502<br/>
OpenMap   1: 0,473553| 0,561220<br/>
OpenMap   2: 0,472653| 0,502726<br/>
OpenMap   3: 0,496373| 0,545859<br/>
OpenMap   4: 0,472649| 0,502994<br/>
OpenMap   5: 1,839328| 0,642802<br/>
OpenMap   6: 1,885942| 0,221290<br/>
OpenMap   7: 1,794967| 0,200146<br/>
OpenMap   8: 0,523872| 0,211437<br/>
OpenMap   9: 0,547421| 0,210671<br/>
OpenMap  10: 0,464470| 0,213004<br/>
OpenMap  11: 0,453697| 0,227102<br/>
OpenMap  12: 0,467708| 0,212261<br/>
OpenMap  13: 0,456612| 0,209729<br/>
OpenMap  14: 0,341679| 0,209290<br/>
OpenMap  15: 0,337983| 0,201675<br/>
OpenMap  16: 0,347159| 0,216204<br/>
OpenMap  17: 0,351441| 0,220569<br/>
OpenMap  18: 0,350658| 0,230405<br/>
OpenMap  19: 0,197148| 0,223062<br/>
OpenMap  20: 0,204231| 0,235119<br/>
OpenMap  21: 0,196417| 0,227486<br/>
OpenMap  22: 0,194752| 0,220574<br/>
OpenMap  23: 0,190178| 0,219967<br/>
OpenMap  24: 0,194665| 0,221576<br/>
OpenMap  25: 0,192412| 0,211655<br/>
OpenMap  26: 0,196861| 0,229008<br/>
OpenMap  27: 0,194389| 0,220088<br/>
OpenMap  28: 0,190136| 0,223112<br/>
OpenMap  29: 0,202440| 0,213385<br/>
OpenMap  30: 0,181508| 0,207300<br/>
OpenMap  31: 0,149114| 0,028321<br/>
OpenMap  32: 0,023019| 0,017210<br/>
OpenMap  33: 0,008716| 0,018064<br/>
OpenMap  34: 0,011649| 0,018109<br/>
OpenMap  35: 0,008456| 0,018238<br/>
OpenMap  36: 0,008413| 0,018072<br/>
OpenMap  37: 0,008591| 0,018053<br/>
OpenMap  38: 0,008789| 0,018068<br/>
OpenMap  39: 0,008560| 0,018012<br/>
OpenMap  40: 0,008580| 0,018091<br/>
OpenMap  41: 0,008687| 0,018018<br/>
OpenMap  42: 0,008683| 0,018019<br/>
OpenMap  43: 0,008512| 0,018158<br/>
OpenMap  44: 0,008542| 0,017957<br/>
OpenMap  45: 0,008455| 0,018108<br/>
OpenMap  46: 0,008524| 0,017895<br/>
OpenMap  47: 0,008639| 0,017938<br/>
OpenMap  48: 0,008518| 0,018147<br/>
OpenMap  49: 0,008516| 0,018192<br/>
OpenMap  50: 0,008521| 0,018250<br/>
OpenMap  51: 0,008598| 0,018003<br/>
OpenMap  52: 0,008901| 0,018056<br/>
OpenMap  53: 0,008656| 0,018094<br/>
OpenMap  54: 0,007719| 0,016857<br/>
OpenMap  55: 0,008490| 0,017892<br/>
OpenMap  56: 0,008716| 0,017868<br/>
OpenMap  57: 0,008927| 0,017806<br/>
OpenMap  58: 0,008368| 0,018084<br/>
OpenMap  59: 0,008585| 0,018113<br/>
OpenMap  60: 0,008676| 0,017787<br/>
OpenMap  61: 0,008688| 0,017845<br/>
OpenMap  62: 0,008853| 0,018119<br/>
OpenMap  63: 0,008308| 0,017961<br/>
OpenMap  64: 0,008451| 0,018148<br/>
OpenMap  65: 0,008537| 0,017905<br/>
OpenMap  66: 0,008787| 0,018121<br/>
OpenMap  67: 0,008412| 0,017983<br/>
OpenMap  68: 0,008615| 0,018132<br/>
OpenMap  69: 0,008770| 0,017918<br/>
OpenMap  70: 0,008551| 0,017938<br/>
OpenMap  71: 0,008653| 0,017993<br/>
OpenMap  72: 0,008806| 0,017984<br/>
OpenMap  73: 0,008737| 0,017939<br/>
OpenMap  74: 0,008460| 0,018116<br/>
OpenMap  75: 0,008575| 0,018017<br/>
OpenMap  76: 0,008489| 0,018077<br/>
OpenMap  77: 0,008540| 0,017966<br/>
OpenMap  78: 0,008562| 0,017979<br/>
OpenMap  79: 0,008710| 0,018037<br/>
OpenMap  80: 0,008374| 0,018112<br/>
OpenMap  81: 0,008734| 0,017927<br/>
OpenMap  82: 0,008277| 0,018002<br/>
OpenMap  83: 0,008814| 0,017976<br/>
OpenMap  84: 0,008848| 0,017868<br/>
OpenMap  85: 0,008465| 0,018097<br/>
OpenMap  86: 0,008359| 0,018092<br/>
OpenMap  87: 0,008425| 0,018087<br/>
OpenMap  88: 0,008855| 0,017925<br/>
OpenMap  89: 0,008591| 0,017956<br/>
OpenMap  90: 0,008410| 0,018052<br/>
OpenMap  91: 0,008617| 0,018220<br/>
OpenMap  92: 0,008591| 0,018299<br/>
OpenMap  93: 0,008401| 0,018163<br/>
OpenMap  94: 0,008709| 0,018123<br/>
OpenMap  95: 0,008659| 0,018015<br/>
OpenMap  96: 0,008620| 0,017959<br/>
OpenMap  97: 0,008716| 0,018079<br/>
OpenMap  98: 0,008704| 0,017987<br/>
OpenMap  99: 0,008560| 0,018004<br/>
performanceSparseVectorArray <span class="error">&#91;ms&#93;</span><br/>
Array   0: 2,023287 | 0,186070<br/>
Array   1: 0,917888 | 0,204991<br/>
Array   2: 0,892925 | 0,143712<br/>
Array   3: 0,858185 | 0,146076<br/>
Array   4: 0,684331 | 0,155737<br/>
Array   5: 1,633593 | 0,138014<br/>
Array   6: 0,927778 | 0,148148<br/>
Array   7: 0,339777 | 0,144761<br/>
Array   8: 0,339778 | 0,144736<br/>
Array   9: 0,351218 | 0,143813<br/>
Array  10: 0,298786 | 0,144916<br/>
Array  11: 0,283394 | 0,145615<br/>
Array  12: 0,287752 | 0,144766<br/>
Array  13: 0,284476 | 0,144178<br/>
Array  14: 0,291953 | 0,143550<br/>
Array  15: 0,285529 | 0,144774<br/>
Array  16: 0,186793 | 0,144802<br/>
Array  17: 0,147914 | 0,145032<br/>
Array  18: 0,147936 | 0,144418<br/>
Array  19: 0,147397 | 0,144305<br/>
Array  20: 0,152120 | 0,145130<br/>
Array  21: 0,149030 | 0,144778<br/>
Array  22: 0,149788 | 0,144240<br/>
Array  23: 0,148297 | 0,145124<br/>
Array  24: 0,148502 | 0,144080<br/>
Array  25: 0,149361 | 0,144171<br/>
Array  26: 0,149198 | 0,144395<br/>
Array  27: 0,149126 | 0,144326<br/>
Array  28: 0,148975 | 0,144261<br/>
Array  29: 0,148939 | 0,144159<br/>
Array  30: 0,149005 | 0,144271<br/>
Array  31: 0,148844 | 0,144786<br/>
Array  32: 0,149205 | 0,144876<br/>
Array  33: 0,148771 | 0,144281<br/>
Array  34: 0,149221 | 0,144267<br/>
Array  35: 0,148602 | 0,144336<br/>
Array  36: 0,148915 | 0,144937<br/>
Array  37: 0,169016 | 0,145081<br/>
Array  38: 0,148983 | 0,144216<br/>
Array  39: 0,147412 | 0,144056<br/>
Array  40: 0,149133 | 0,144219<br/>
Array  41: 0,149274 | 0,144240<br/>
Array  42: 0,152563 | 0,022058<br/>
Array  43: 0,026914 | 0,002256<br/>
Array  44: 0,012159 | 0,002192<br/>
Array  45: 0,012191 | 0,002256<br/>
Array  46: 0,012321 | 0,002258<br/>
Array  47: 0,012073 | 0,002192<br/>
Array  48: 0,012214 | 0,002187<br/>
Array  49: 0,012196 | 0,002189<br/>
Array  50: 0,012625 | 0,002208<br/>
Array  51: 0,012086 | 0,002273<br/>
Array  52: 0,012184 | 0,002211<br/>
Array  53: 0,012132 | 0,002192<br/>
Array  54: 0,012281 | 0,002313<br/>
Array  55: 0,012174 | 0,002281<br/>
Array  56: 0,012225 | 0,002188<br/>
Array  57: 0,012233 | 0,002189<br/>
Array  58: 0,012423 | 0,002187<br/>
Array  59: 0,011971 | 0,002205<br/>
Array  60: 0,012101 | 0,002307<br/>
Array  61: 0,012121 | 0,002321<br/>
Array  62: 0,012189 | 0,002181<br/>
Array  63: 0,012182 | 0,002258<br/>
Array  64: 0,012125 | 0,002204<br/>
Array  65: 0,012049 | 0,002209<br/>
Array  66: 0,012372 | 0,002186<br/>
Array  67: 0,011879 | 0,002214<br/>
Array  68: 0,012371 | 0,002230<br/>
Array  69: 0,012265 | 0,002226<br/>
Array  70: 0,012274 | 0,002269<br/>
Array  71: 0,012264 | 0,002311<br/>
Array  72: 0,012286 | 0,002185<br/>
Array  73: 0,012225 | 0,002206<br/>
Array  74: 0,012274 | 0,002288<br/>
Array  75: 0,012264 | 0,002256<br/>
Array  76: 0,012278 | 0,002301<br/>
Array  77: 0,012346 | 0,002284<br/>
Array  78: 0,012269 | 0,002227<br/>
Array  79: 0,012175 | 0,002295<br/>
Array  80: 0,015729 | 0,002221<br/>
Array  81: 0,012204 | 0,002211<br/>
Array  82: 0,012382 | 0,002192<br/>
Array  83: 0,012179 | 0,002297<br/>
Array  84: 0,012232 | 0,002211<br/>
Array  85: 0,012251 | 0,002220<br/>
Array  86: 0,012448 | 0,002204<br/>
Array  87: 0,012327 | 0,002283<br/>
Array  88: 0,012456 | 0,002253<br/>
Array  89: 0,012513 | 0,002230<br/>
Array  90: 0,012386 | 0,002269<br/>
Array  91: 0,012287 | 0,002308<br/>
Array  92: 0,012261 | 0,002289<br/>
Array  93: 0,012358 | 0,002247<br/>
Array  94: 0,012452 | 0,002302<br/>
Array  95: 0,012316 | 0,002305<br/>
Array  96: 0,012321 | 0,002226<br/>
Array  97: 0,012276 | 0,002209<br/>
Array  98: 0,012220 | 0,002220<br/>
Array  99: 0,012398 | 0,002215</p>

<p>The SparseRealvector is filled to 50%.<br/>
Conclusion:</p>

<p>If you have an OpenMapRealvector Iteration is the fastest you can get.<br/>
If you have an ArrayRealvector random access is the fastes.<br/>
Note at around 35 (20 - 40) - I think the JIT Compiler is kicking in ...</p>

<p>My fix takes honours this.</p></comment><comment id="13069941" author="erans" created="Sat, 23 Jul 2011 12:06:00 +0100"><p>Obviously, our two different kinds of benchmark do not agree. Nevertheless, I'm suspicious that anything can be deduced from running so few iterations as you do (ITER = 100): Could you perhaps modify your code to make it much larger (but report only the average, not the timing of each iteration <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/>)?</p>

<p>Of course, it could well be that there is a bug in my code. I'll post it later today or tomorrow.</p></comment><comment id="13070224" author="aploese" created="Sun, 24 Jul 2011 19:03:08 +0100"><p>Im off for two weeks, but here some quick results:</p>

<p>I modified my testcase to use the profiler from NetBeans...</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">package</span> org.apache.commons.math.linear;

<span class="code-keyword">import</span> java.util.Iterator;
<span class="code-keyword">import</span> org.junit.BeforeClass;
<span class="code-keyword">import</span> org.junit.Test;

/**
 *
 * @author aploese
 */
<span class="code-keyword">public</span> class PerformanceTest {

    <span class="code-keyword">final</span> <span class="code-keyword">static</span> <span class="code-object">int</span> ITER = 1000;
    <span class="code-keyword">final</span> <span class="code-keyword">static</span> <span class="code-object">int</span> VECTOR_SIZE = 2048;
    <span class="code-keyword">final</span> <span class="code-keyword">static</span> <span class="code-object">double</span> SPARSE_FILL_STATE = 0.8;
    <span class="code-keyword">final</span> <span class="code-keyword">static</span> <span class="code-object">double</span> NANO_TO_MILLI = 1000000;
    <span class="code-keyword">static</span> <span class="code-object">double</span>[] data;
    
    @BeforeClass
    <span class="code-keyword">public</span> <span class="code-keyword">static</span> void beforeClass() {
        data = <span class="code-keyword">new</span> <span class="code-object">double</span>[VECTOR_SIZE];
        <span class="code-keyword">for</span> (<span class="code-object">int</span> i = 0; i &lt; VECTOR_SIZE; i++) {
            data[i] = i;
        }
    }
    
    @Test
    <span class="code-keyword">public</span> void performanceOpenMapRealVector() {
        <span class="code-object">System</span>.out.println(<span class="code-quote">"performanceOpenMapRealVector [ms]"</span>);
        RealVector v = <span class="code-keyword">new</span> OpenMapRealVector(VECTOR_SIZE);
        <span class="code-keyword">for</span> (<span class="code-object">int</span> i = 0; i &lt; v.getDimension() * SPARSE_FILL_STATE; i++) {
            v.setEntry(i, i);
        }
        <span class="code-keyword">for</span> (<span class="code-object">int</span> j = 0; j &lt; ITER; j++) {
            iterateOver(v);
            randomAccess(v);
        }
    }

    <span class="code-keyword">private</span> <span class="code-object">double</span>[] randomAccess(RealVector v) {
        <span class="code-keyword">final</span> <span class="code-object">int</span> dim = v.getDimension(); 
        <span class="code-object">double</span>[] result = <span class="code-keyword">new</span> <span class="code-object">double</span>[dim];
        <span class="code-keyword">for</span> (<span class="code-object">int</span> i = 0; i &lt; dim; i++) {
            result[i] = data[i] + v.getEntry(i);
        }
        <span class="code-keyword">return</span> result;
    }

    <span class="code-keyword">private</span> <span class="code-object">double</span>[] iterateOver(RealVector v) {
        <span class="code-object">double</span>[] result = data.clone();
        Iterator&lt;RealVector.Entry&gt; it = v.sparseIterator();
        RealVector.Entry e;
        <span class="code-keyword">while</span> (it.hasNext() &amp;&amp; (e = it.next()) != <span class="code-keyword">null</span>) {
            result[e.getIndex()] += e.getValue();
        }
        <span class="code-keyword">return</span> result;
    }

    @Test
    <span class="code-keyword">public</span> void performanceArrayRealvecor() {
        <span class="code-object">System</span>.out.println(<span class="code-quote">"performanceArrayRealvecor [ms]"</span>);
        RealVector v = <span class="code-keyword">new</span> ArrayRealVector(VECTOR_SIZE);
        <span class="code-keyword">for</span> (<span class="code-object">int</span> i = 0; i &lt; v.getDimension() * SPARSE_FILL_STATE; i++) {
            v.setEntry(i, i);
        }
        <span class="code-keyword">for</span> (<span class="code-object">int</span> j = 0; j &lt; ITER; j++) {
            <span class="code-object">double</span> a = 0;
            iterateOver(v);
            randomAccess(v);
        }
    }
}
</pre>
</div></div>

<p>here the results (all times im ms):</p>

<p>performanceOpenMapRealVector = 287<br/>
 iterateOver =  61.3<br/>
 random Access = 49.2</p>

<p>performanceOpenMapRealVector = 45.1<br/>
 iterateOver = 27.0<br/>
 random Access = 8.51</p>

<p>the initialization of OpenMapRealVector took 147 ms.</p>

<p>so these are values I had expected. ArrayRealvector is best, Iteration is with much overhead.</p>
</comment><comment id="13082186" author="psteitz" created="Wed, 10 Aug 2011 07:46:09 +0100"><p>Optimization can wait until 3.1</p></comment><comment id="13601066" author="luc" created="Wed, 13 Mar 2013 12:21:29 +0000"><p>Sparse linear algebra implementation in Apache Commons Math needs a complete rewrite. As per issue <a href="https://issues.apache.org/jira/browse/MATH-870" title="Deprecate interfaces and implementations of sparse vectors and matrices" class="issue-link" data-issue-key="MATH-870"><del>MATH-870</del></a>, it was decided to remove the corresponding classes for 4.0. The classes and interfaces have already been deprecated as of 3.1.1.</p></comment><comment id="13624805" author="luc" created="Sun, 7 Apr 2013 10:15:01 +0100"><p>Closing issue as version 3.2 has been released on 2013-04-06.</p></comment></comments><issuelinks><issuelinktype id="12310010"><name>Incorporates</name><inwardlinks description="is part of"><issuelink><issuekey id="12545537">MATH-765</issuekey></issuelink></inwardlinks></issuelinktype></issuelinks><attachments><attachment id="12487401" name="ArrayRealVector.diff" size="3158" author="aploese" created="Fri, 22 Jul 2011 08:08:21 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Fri, 22 Jul 2011 12:56:41 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2201</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>11069</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-627] superfluously null check of SparseIterator.next()</title><link>https://issues.apache.org/jira/browse/MATH-627</link><project id="12310485" key="MATH">Commons Math</project><description><p>Looking at the implementation of SparseIterator in OpenMapRealVector.OpenMapSparseIterator there is no chance that the entry return by next() is ever null - so there is no need to chek this in nearly every loop?</p></description><environment/><key id="12514994">MATH-627</key><summary>superfluously null check of SparseIterator.next()</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="aploese">Arne Plöse</reporter><labels>
                    </labels><created>Fri, 22 Jul 2011 07:45:33 +0100</created><updated>Mon, 4 Mar 2013 18:53:26 +0000</updated><resolved>Fri, 4 May 2012 22:42:52 +0100</resolved><fixVersion>3.1</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13082185" author="psteitz" created="Wed, 10 Aug 2011 07:44:53 +0100"><p>Optimization can wait until 3.1</p></comment><comment id="13253398" author="tn" created="Fri, 13 Apr 2012 15:13:36 +0100"><p>I failed to find any null check in the mentioned iterator, neither in the current trunk version nor in the version at the time the issue was created. Can you please specify more precisely where the problem lies?</p></comment><comment id="13253536" author="aploese" created="Fri, 13 Apr 2012 17:51:18 +0100"><p>Sorry for beeing sloppy...</p>

<p>If you look at ArrayRealVector you will find this construct:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
            <span class="code-keyword">while</span> (it.hasNext() &amp;&amp; (e = it.next()) != <span class="code-keyword">null</span>) {...}
</pre>
</div></div>            
<p>the same can also be found in RealVector </p></comment><comment id="13254432" author="tn" created="Sun, 15 Apr 2012 22:02:47 +0100"><p>I did some performance tests, and the gain is quite significant: ~50%</p>

<p>Removing the additional null check for the data retrieved from it.next() looks safe to me, the code would change to something like that (which btw was already there at some places):</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>   while (it.hasNext()) {
      final Entry e = it.next();
      ...
   }
</pre>
</div></div></comment><comment id="13268730" author="tn" created="Fri, 4 May 2012 22:42:52 +0100"><p>Fixed in r1334198.</p>

<p>Thanks for the report!</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 10 Aug 2011 06:44:53 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2202</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160427</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-626] Move RealVector.sparseIterator() to   SparseRealVector</title><link>https://issues.apache.org/jira/browse/MATH-626</link><project id="12310485" key="MATH">Commons Math</project><description><p>Having this method available for all is not very efficient, because if I want use this feature I must check for interface SparseRealVector.<br/>
otherwise different implementations could be faster. <br/>
I.e. no array clone and the assigning all values again.<br/>
Maybe one could add a menthod fillstate() to SparseRealVector to guide which is faster - use array clone and then sparseIterator or just create the array and then fill it up.</p>

<p>To reduce confusion a second Interface ArrayRealVector with the method getDataRef() and removing getData() from RealVector would be nice - there is a toArray() this should be sufficient. </p></description><environment/><key id="12514881">MATH-626</key><summary>Move RealVector.sparseIterator() to   SparseRealVector</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status><statusCategory id="3" key="done" colorName="green"/><resolution id="2">Won't Fix</resolution><assignee username="-1">Unassigned</assignee><reporter username="aploese">Arne Plöse</reporter><labels>
                    </labels><created>Thu, 21 Jul 2011 10:32:45 +0100</created><updated>Fri, 18 Oct 2013 23:49:30 +0100</updated><resolved>Fri, 18 Oct 2013 23:49:30 +0100</resolved><due/><votes>0</votes><watches>1</watches><comments><comment id="13082184" author="psteitz" created="Wed, 10 Aug 2011 07:43:52 +0100"><p>If we do implement this, it can wait until 3.1</p></comment><comment id="13082299" author="erans" created="Wed, 10 Aug 2011 13:05:10 +0100"><p>Wouldn't it be an incompatible change? I'm referring to the title of this issue, not the various other suggestions that should have been in their own JIRA requests.</p></comment><comment id="13425545" author="celestin" created="Tue, 31 Jul 2012 06:49:33 +0100"><p>See also this recent <a href="http://markmail.org/thread/l5d3f2ap4apjukbk" class="external-link" rel="nofollow">discussion</a>.</p></comment><comment id="13799621" author="tn" created="Fri, 18 Oct 2013 23:49:30 +0100"><p>Obsolete after resolution of <a href="https://issues.apache.org/jira/browse/MATH-870" title="Deprecate interfaces and implementations of sparse vectors and matrices" class="issue-link" data-issue-key="MATH-870"><del>MATH-870</del></a>.</p></comment></comments><issuelinks><issuelinktype id="12310010"><name>Incorporates</name><inwardlinks description="is part of"><issuelink><issuekey id="12545537">MATH-765</issuekey></issuelink></inwardlinks></issuelinktype><issuelinktype id="12310051"><name>Supercedes</name><inwardlinks description="is superceded by"><issuelink><issuekey id="12609288">MATH-870</issuekey></issuelink></inwardlinks></issuelinktype></issuelinks><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 10 Aug 2011 06:43:52 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2203</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>11070</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-625] rename SparseRealVectorTest to OpenMapRealMatrixTest</title><link>https://issues.apache.org/jira/browse/MATH-625</link><project id="12310485" key="MATH">Commons Math</project><description><p>rename all Sparse(Real|Field)(Matrix|Vector)Test classes to OPenMap(Real|Field)(Matrix|Vector)Test<br/>
because OpenMap* is what they really test.</p></description><environment/><key id="12514879">MATH-625</key><summary>rename SparseRealVectorTest to OpenMapRealMatrixTest</summary><type id="5" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Wish</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="2">Won't Fix</resolution><assignee username="-1">Unassigned</assignee><reporter username="aploese">Arne Plöse</reporter><labels>
                    </labels><created>Thu, 21 Jul 2011 10:23:37 +0100</created><updated>Sun, 7 Apr 2013 10:14:48 +0100</updated><resolved>Fri, 15 Mar 2013 12:41:15 +0000</resolved><fixVersion>3.2</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13082189" author="psteitz" created="Wed, 10 Aug 2011 07:54:15 +0100"><p>Anyone agree with this?  I disagree, because I think the structure is good as is, as it leaves open the possibility of splitting out tests for different impls, making the SparseXxx tests abstract.</p></comment><comment id="13082302" author="erans" created="Wed, 10 Aug 2011 13:20:44 +0100"><p>IIUC, the possible evolution which you suggest would indeed lead to having</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>  SparseXxxAbstractTest
  OpenMapXxxTest extends SparseXxxAbstractTest
  SomeOtherSparseImplXxxTest extends SparseXxxAbstractTest
</pre>
</div></div>
<p>where "OpenMapXxxTest" in effect contains most of what is in the current "SparseXxxTest".</p>

<p>I think that there is some logic in making the change. I mean the full one, i.e. move the generic test code into abstract classes and create concrete ones for the "OpenMapXxx" implementations.</p>

<p>Anyways, the decision can be postponed to 3.1.</p></comment><comment id="13082508" author="luc" created="Wed, 10 Aug 2011 18:54:53 +0100"><p>As this is a test class, there are no compatibility rules to enforce, so this can be decided upon for 3.1.</p></comment><comment id="13603332" author="luc" created="Fri, 15 Mar 2013 12:41:15 +0000"><p>Sparse linear algebra implementation in Apache Commons Math needs a complete rewrite. As per issue <a href="https://issues.apache.org/jira/browse/MATH-870" title="Deprecate interfaces and implementations of sparse vectors and matrices" class="issue-link" data-issue-key="MATH-870"><del>MATH-870</del></a>, it was decided to remove the corresponding classes for 4.0. The classes and interfaces have already been deprecated as of 3.1.1.</p></comment><comment id="13624804" author="luc" created="Sun, 7 Apr 2013 10:14:48 +0100"><p>Closing issue as version 3.2 has been released on 2013-04-06.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 10 Aug 2011 06:54:15 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2204</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>11071</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-624] Need a method to solve upper and lower triangular systems</title><link>https://issues.apache.org/jira/browse/MATH-624</link><project id="12310485" key="MATH">Commons Math</project><description><p>I have run into a need to solve triangular systems. While (as Phil and Ted point out) I could use the LU and QR decompositions, it seems cleaner to have a couple of static functions which do this. I am including a patch to provide an implementation and the tests.</p>
</description><environment><p>Java</p></environment><key id="12514807">MATH-624</key><summary>Need a method to solve upper and lower triangular systems</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="psteitz">Phil Steitz</assignee><reporter username="gsteri1">greg sterijevski</reporter><labels><label>Backsolve</label><label>Forwardsolve</label><label>LowerTriangular</label><label>UpperTriangular</label></labels><created>Wed, 20 Jul 2011 18:20:56 +0100</created><updated>Sat, 24 Mar 2012 16:17:02 +0000</updated><resolved>Fri, 12 Aug 2011 06:42:32 +0100</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><timeoriginalestimate seconds="0">0h</timeoriginalestimate><timeestimate seconds="0">0h</timeestimate><comments><comment id="13068500" author="gsteri1" created="Wed, 20 Jul 2011 18:22:01 +0100"><p>Both patches pass the checkstyle check and the findbugs... </p>
</comment><comment id="13083950" author="psteitz" created="Fri, 12 Aug 2011 06:42:32 +0100"><p>Patch applied in r1156968 with one change:<br/>
s/MathRuntimeException.CreateXxx/new Xxx throughout. The former usage is deprecated.<br/>
Thanks for the patch!</p></comment></comments><attachments><attachment id="12487186" name="upperlowermethods" size="5387" author="gsteri1" created="Wed, 20 Jul 2011 18:22:01 +0100"/><attachment id="12487187" name="upperlowertests" size="1937" author="gsteri1" created="Wed, 20 Jul 2011 18:22:01 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Fri, 12 Aug 2011 05:42:32 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>65226</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60343</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-623] Use implementation of JAMA for ArrayRealVector operators</title><link>https://issues.apache.org/jira/browse/MATH-623</link><project id="12310485" key="MATH">Commons Math</project><description><p>For instance the add(double[] v) fist clones the array, and then adds all entries of this.data to the result.<br/>
JAMA uses the following approach create a empty result[] the assign the sum of each entry to the result. this is approximately 10 -20 % faster.<br/>
I will provide a patch with some more enhancements/cleanups for this.</p>

<p>in the test look for XXX: <br/>
the first number is the jama time the second the current algorithm.</p></description><environment/><key id="12514769">MATH-623</key><summary>Use implementation of JAMA for ArrayRealVector operators</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="aploese">Arne Plöse</reporter><labels>
                    </labels><created>Wed, 20 Jul 2011 10:46:13 +0100</created><updated>Sat, 24 Mar 2012 16:16:55 +0000</updated><resolved>Tue, 26 Jul 2011 12:02:44 +0100</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13068246" author="aploese" created="Wed, 20 Jul 2011 10:47:32 +0100"><p>Here ist the diff with added testcase </p></comment><comment id="13068271" author="erans" created="Wed, 20 Jul 2011 11:44:54 +0100"><p>Hello Arne.</p>

<p>The <em>strongly</em> recommended work method for modifying the code is to separate issues as much as possible. So, in this case, you propose an enhancement to the <tt>add</tt> method implementation in class <tt>ArrayRealVector</tt> but the diff contains many other modifications that might possibly be introduced later. If the changes are not interdependent, it is much easier to examine the merits of several changes one at a time.<br/>
Especially, the interface change of <tt>RealVector</tt> and <tt>SparseRealVector</tt> may be justified for their own sake, and do not seem to be directly dependent on the performance issue.</p>

<p>Thanks in advance for your patience...</p></comment><comment id="13068275" author="aploese" created="Wed, 20 Jul 2011 12:02:58 +0100"><p>Sorry, I just point out where I think things should go ...<br/>
So at first let look at ArrayRealVector.add and then to (OpenMap|Array)(Real|Field)(Vector|Matrix).(add|subtract|...).<br/>
After that wee will see...</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
    @Override
    <span class="code-keyword">public</span> RealVector add(RealVector v) {
        <span class="code-keyword">if</span> (v <span class="code-keyword">instanceof</span> ArrayRealVector) {
            <span class="code-keyword">return</span> add(((ArrayRealVector)v).data);
        } <span class="code-keyword">else</span> <span class="code-keyword">if</span> (v <span class="code-keyword">instanceof</span> SparseRealVector){
            checkVectorDimensions(v);
            <span class="code-object">double</span>[] out = data.clone();
            Iterator&lt;Entry&gt; it = ((SparseRealVector)v).sparseIterator();
            Entry e;
            <span class="code-keyword">while</span> (it.hasNext() &amp;&amp; (e = it.next()) != <span class="code-keyword">null</span>) {
                out[e.getIndex()] += e.getValue();
            }
            <span class="code-keyword">return</span> <span class="code-keyword">new</span> ArrayRealVector(out, <span class="code-keyword">false</span>);
        } <span class="code-keyword">else</span> {
            <span class="code-keyword">final</span> <span class="code-object">int</span> dim = v.getDimension();
            checkVectorDimensions(dim);
            ArrayRealVector result = <span class="code-keyword">new</span> ArrayRealVector(dim);
            <span class="code-object">double</span>[] resultData = result.data;
            <span class="code-keyword">for</span> (<span class="code-object">int</span> i = 0; i &lt; dim; i++) {
                resultData[i] = data[i] + v.getEntry(i);
            }
            <span class="code-keyword">return</span> result;
        }
    }

    RealVector addOld(<span class="code-object">double</span>[] v) {
        <span class="code-keyword">final</span> <span class="code-object">int</span> dim = v.length;
        checkVectorDimensions(dim);
        <span class="code-object">double</span>[] out = data.clone();
        <span class="code-keyword">for</span> (<span class="code-object">int</span> i = 0; i &lt; dim; i++) {
            out[i] += v[i];
        }
        <span class="code-keyword">return</span> <span class="code-keyword">new</span> ArrayRealVector(out, <span class="code-keyword">false</span>);
    }

    @Override
    <span class="code-keyword">public</span> RealVector add(<span class="code-object">double</span>[] v) {
        <span class="code-keyword">final</span> <span class="code-object">int</span> dim = v.length;
        checkVectorDimensions(dim);
        ArrayRealVector result = <span class="code-keyword">new</span> ArrayRealVector(dim);
        <span class="code-object">double</span>[] resultData = result.data;
        <span class="code-keyword">for</span> (<span class="code-object">int</span> i = 0; i &lt; dim; i++) {
            resultData[i] = data[i] + v[i];
        }
        <span class="code-keyword">return</span> result;
    }
</pre>
</div></div></comment><comment id="13068344" author="erans" created="Wed, 20 Jul 2011 14:02:26 +0100"><p>I confirm that the efficiency improvement for <tt>add</tt> tends to increase with the size of the arrays.</p></comment><comment id="13068453" author="erans" created="Wed, 20 Jul 2011 16:59:08 +0100"><p>If nobody objects, and since one less <tt>clone</tt> is good, I'll change the <tt>add(double[] v)</tt> method as per Arne's suggestion.</p></comment><comment id="13068499" author="aploese" created="Wed, 20 Jul 2011 18:21:49 +0100"><p>If you do that, look out for other occurences like subtract(double[])..., an then for ArrayRealMatrix and so on.</p>

<p>Happy coding <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p></comment><comment id="13068651" author="erans" created="Wed, 20 Jul 2011 22:20:09 +0100"><p>You are welcome to provide patches, but one issue at a time. <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p>

<p>I'll update the code for <tt>add</tt>. Any further improvement to <tt>ArrayRealVector</tt>, you can post here.<br/>
For touching other classes, please open one or several new issues.</p></comment><comment id="13068671" author="erans" created="Wed, 20 Jul 2011 23:10:10 +0100"><p>New <tt>add</tt> implementation committed in revision 1148952.</p></comment><comment id="13068837" author="aploese" created="Thu, 21 Jul 2011 07:56:04 +0100"><p>here the changes for any *(double[] v) methods.</p>

<p>Why not change</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> RealVector add(RealVector v) {...}
</pre>
</div></div>
<p>to this:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
   @Override
    <span class="code-keyword">public</span> RealVector add(RealVector v) {
        <span class="code-keyword">if</span> (v <span class="code-keyword">instanceof</span> ArrayRealVector) {
            <span class="code-keyword">return</span> add(((ArrayRealVector) v).data);
        } <span class="code-keyword">else</span> {
            checkVectorDimensions(v);
            <span class="code-object">double</span>[] out = data.clone();
            Iterator&lt;Entry&gt; it = v.sparseIterator();
            Entry e;
            <span class="code-keyword">while</span> (it.hasNext() &amp;&amp; (e = it.next()) != <span class="code-keyword">null</span>) {
                out[e.getIndex()] += e.getValue();
            }
            <span class="code-keyword">return</span> <span class="code-keyword">new</span> ArrayRealVector(out, <span class="code-keyword">false</span>);
        }
    }
</pre>
</div></div>
<p>and drop</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> ArrayRealVector add(ArrayRealVector v) {...}
</pre>
</div></div>
<p>it only exposes the implementation of RealVector and I think the compiler knows seldom of ArrayRealvector as argument...</p>

<p>By the way there is no need for /** </p>
{@inheritDoc}
<p> */ on methods with @Override annotation, maybe remove this commnet in this case?</p>

<p>Stupid question dou you want a new issue for all of these?</p></comment><comment id="13069281" author="erans" created="Fri, 22 Jul 2011 00:18:58 +0100"><p>Patch applied in revision 1149405.</p></comment><comment id="13069287" author="erans" created="Fri, 22 Jul 2011 00:31:15 +0100"><blockquote>
<p>Stupid question dou you want a new issue for all of these?</p></blockquote>

<p>Independent issues should be handled separately. The more so if they are totally unrelated like your suggestions about "</p>
{@inheritDoc}
<p>" and changing/removing some methods.</p></comment><comment id="13071036" author="erans" created="Tue, 26 Jul 2011 12:02:44 +0100"><p>Main issue fixed.<br/>
New tickets have been opened for the others.</p></comment></comments><attachments><attachment id="12487261" name="ArrayRealVector.diff" size="2216" author="aploese" created="Thu, 21 Jul 2011 07:56:04 +0100"/><attachment id="12487129" name="ArrayRealVector.diff" size="10521" author="aploese" created="Wed, 20 Jul 2011 10:47:32 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 20 Jul 2011 10:44:54 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>66942</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60344</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-622] Default number format does not show enough digits</title><link>https://issues.apache.org/jira/browse/MATH-622</link><project id="12310485" key="MATH">Commons Math</project><description><p>In <tt>CompositeFormat</tt>, the <tt>getDefaultNumberFormat(final Locale locale)</tt> method contains</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
  nf.setMaximumFractionDigits(2);
</pre>
</div></div>

<p>This default is too small.<br/>
Also, it would be better to output the number in scientific notation.</p></description><environment/><key id="12514590">MATH-622</key><summary>Default number format does not show enough digits</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="erans">Gilles</reporter><labels>
                    </labels><created>Tue, 19 Jul 2011 14:31:06 +0100</created><updated>Mon, 4 Mar 2013 18:53:34 +0000</updated><resolved>Sun, 29 Jul 2012 13:13:58 +0100</resolved><fixVersion>3.1</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13067720" author="erans" created="Tue, 19 Jul 2011 14:35:28 +0100"><p>Increased maximum to "8" in revision 1148312.</p></comment><comment id="13067725" author="erans" created="Tue, 19 Jul 2011 14:44:16 +0100"><p>The "scientific notation" feature is not obvious to achieve because <tt>CompositeFormat</tt> uses the <tt>java.text.NumberFormat</tt> class. Scientific notation is accessible through the<br/>
<tt>java.text.DecimalFormat</tt> class but it would not be with the same construct (there is no <tt>getInstance</tt> method in <tt>DecimalFormat</tt>). One has to use a pattern, thus explicitly create a <tt>DecimalFormat</tt> instance.</p></comment><comment id="13067776" author="erans" created="Tue, 19 Jul 2011 16:08:26 +0100"><p>Too many tests depend on the default being 2 fractional digits... Reverted in revision 1148385.</p>

<p>Where to go from here?</p></comment><comment id="13198685" author="erans" created="Thu, 2 Feb 2012 10:59:27 +0000"><p>This is annoying but not a blocking issue; postponing.</p></comment><comment id="13424529" author="erans" created="Sun, 29 Jul 2012 13:13:58 +0100"><p>Default number of fractional digits is now 10.</p></comment><comment id="13424530" author="erans" created="Sun, 29 Jul 2012 13:15:01 +0100"><p>Change implemented in r1366821.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2205</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160428</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-621] BOBYQA is missing in optimization</title><link>https://issues.apache.org/jira/browse/MATH-621</link><project id="12310485" key="MATH">Commons Math</project><description><p>During experiments with space flight trajectory optimizations I recently<br/>
observed, that the direct optimization algorithm BOBYQA<br/>
<a href="http://plato.asu.edu/ftp/other_software/bobyqa.zip" class="external-link" rel="nofollow">http://plato.asu.edu/ftp/other_software/bobyqa.zip</a><br/>
from Mike Powell is significantly better than the simple Powell algorithm<br/>
already in commons.math. It uses significantly lower function calls and is<br/>
more reliable for high dimensional problems. You can replace CMA-ES in many<br/>
more application cases by BOBYQA than by the simple Powell optimizer.<br/>
I would like to contribute a Java port of the algorithm.<br/>
I maintained the structure of the original FORTRAN code, so the<br/>
code is fast but not very nice.</p>

<p>License status: Michael Powell has sent the agreement via snail mail</p>
<ul class="alternate" type="square">
	<li>it hasn't arrived yet.</li>
</ul>


<p>Progress: The attached patch relative to the trunk contains both the<br/>
optimizer and the related unit tests - which are all green now.  </p>

<p>Performance:<br/>
Performance difference (number of function evaluations)<br/>
PowellOptimizer / BOBYQA for different test functions (taken from<br/>
the unit test of BOBYQA, dimension=13 for most of the<br/>
tests. </p>

<p>Rosen = 9350 / 1283<br/>
MinusElli = 118 / 59<br/>
Elli = 223 / 58<br/>
ElliRotated = 8626 / 1379<br/>
Cigar = 353 / 60<br/>
TwoAxes = 223 / 66<br/>
CigTab = 362 / 60<br/>
Sphere = 223 / 58<br/>
Tablet = 223 / 58<br/>
DiffPow = 421 / 928<br/>
SsDiffPow = 614 / 219<br/>
Ackley = 757 / 97<br/>
Rastrigin = 340 / 64</p>

<p>The number for DiffPow should be discussed with Michael Powell,<br/>
I will send him the details. </p>


<h3><a name="OpenProblems"></a>Open Problems</h3>

<ul>
	<li>Checkstyle violations<span class="error">&#91;1&#93;</span> because of the original Fortran source:
	<ul>
		<li>Original method comments were copied: Javadoc standard documentation should be added, but the original documentation should stay (as a reference to what the original intended behaviour was) untouched until we are sure that the code behaves as expected.</li>
		<li>Multiple variable declarations per line.</li>
		<li>"goto" conversions:
		<ul>
			<li>"goto"s not convertible in loops were translated into a finite automaton (switch statement)</li>
			<li>"no default in switch"</li>
			<li>"fall through from previous case in switch"</li>
		</ul>
		</li>
	</ul>
	</li>
	<li>Unexplored code paths: "throw" statements have been introduced in the code. Each should be triggered by at least one unit test. They are currently commented out in provision of the 3.0 release (cf. <a href="https://issues.apache.org/jira/browse/MATH-712" title="Remove the marker &quot;throw&quot; clauses from &quot;BOBYQAOptimizer&quot;" class="issue-link" data-issue-key="MATH-712"><del>MATH-712</del></a>) but should be re-enabled afterwards.</li>
</ul>


<p><span class="error">&#91;1&#93;</span> Once the violations are solved, the following lines should be removed from the source file:</p>
<ul>
	<li><tt>// CHECKSTYLE: stop all</tt></li>
	<li><tt>//CHECKSTYLE: resume all</tt></li>
</ul>
</description><environment/><key id="12514195">MATH-621</key><summary>BOBYQA is missing in optimization</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status><statusCategory id="2" key="new" colorName="blue-gray"/><resolution id="-1">Unresolved</resolution><assignee username="-1">Unassigned</assignee><reporter username="docdwo">Dr. Dietmar Wolz</reporter><labels>
                    </labels><created>Fri, 15 Jul 2011 11:36:38 +0100</created><updated>Sun, 3 Nov 2013 22:32:20 +0000</updated><version>3.0</version><fixVersion>4.0</fixVersion><due/><votes>0</votes><watches>2</watches><comments><comment id="13065844" author="docdwo" created="Fri, 15 Jul 2011 11:38:32 +0100"><p>Initial code contribution (BOBYQAOptimizer.java + Unit tests)</p></comment><comment id="13065905" author="erans" created="Fri, 15 Jul 2011 14:04:25 +0100"><p>Oops, this is indeed FORTRAN code in Java clothes. There is quite <em>a lot</em> of work to make it look like Java... <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/sad.gif" height="16" width="16" align="absmiddle" alt="" border="0"/><br/>
Personally, I'd rather not commit it as is, because it is unmaintainable (it does not match anything in CM in terms of design and programming style).</p></comment><comment id="13065949" author="docdwo" created="Fri, 15 Jul 2011 15:04:57 +0100"><p>Tests with the original code confirmed a problem of BOBYQA with <br/>
DiffPow and SsDiffPow. But the tests revealed a problem with the<br/>
Java code: Initialization of the bounds with Double.MIN_VALUE and <br/>
Double.MAX_VALUE (representing no bounds) <br/>
caused trouble, I changed the values to -1e300, 1e300. <br/>
The old performance numbers a not valid, BOBYQA<br/>
changed the initial guess because of the bounds problem. </p>

<p>Adjusted accuracy level for PowellOptimizer and the new<br/>
BOBYQA code - now initialized correctly, lead to the<br/>
following performance difference (number of function evaluations)<br/>
PowellOptimizer / BOBYQA for different test functions (taken from<br/>
the unit test of BOBYQA, dimension=13 for most of the<br/>
tests. </p>

<p>Rosen = 9831 / 1404<br/>
MinusElli = 183 / 115<br/>
Elli = 399 / 147<br/>
ElliRotated = 8964 / 7165<br/>
Cigar = 348 / 56<br/>
TwoAxes = 223 / 70<br/>
CigTab = 513 / 61<br/>
Sphere = 223 / 56<br/>
Tablet = 223 / 57<br/>
DiffPow = 308 / 10139<br/>
SsDiffPow = 667 / 4520<br/>
Ackley = 814 / 458<br/>
Rastrigin = 327 / 167</p>

<p>Essentially the same picture as before.</p></comment><comment id="13065965" author="docdwo" created="Fri, 15 Jul 2011 15:20:45 +0100"><p>"FORTRAN code in Java clothes" was the best I could do so far.<br/>
Perhaps someone else voluteers to transfer the code into a more<br/>
readable version using the commons.math matrix operations?<br/>
The problem is that the original code heavily relies on pointers and gotos.<br/>
It is indeed probably only maintainable by the author. <br/>
The current code could simplify the development of a "clean" version<br/>
by enabling parallel debugging using only a Java development environment.<br/>
I started with embedding a C++ port via JNI treating the optimizer<br/>
as a "black box". Since JNI is not possible in commons.math, I tried<br/>
to convert the code to Java. <br/>
Unfortunately there is nothing publicly available which<br/>
has comparable qualities in terms of usability. <br/>
From the developer perspective we have a maintanance problem, but from<br/>
the user perspective, it is not very satisfactory to abandon BOBYQA.  </p></comment><comment id="13065995" author="erans" created="Fri, 15 Jul 2011 16:10:31 +0100"><p>No problem, as I said on the ML. Thanks for the contribution.</p>

<blockquote>
<p><span class="error">&#91;...&#93;</span> the tests revealed a problem with the Java code <span class="error">&#91;...&#93;</span></p></blockquote>

<p>This is another reason why I don't like a diff/patch for the initial version. I've already made small changes so that it doesn't apply. Could you please attach the Java file itself (so that I don't have to work out the diff between diffs...)? Thanks.</p></comment><comment id="13066092" author="docdwo" created="Fri, 15 Jul 2011 18:33:29 +0100"><p>As requested the source files of the second patch.</p></comment><comment id="13066318" author="erans" created="Sat, 16 Jul 2011 00:59:56 +0100"><p>It seems that none of the tests exercise the "rescue" method.</p></comment><comment id="13066380" author="docdwo" created="Sat, 16 Jul 2011 08:39:00 +0100"><p>Confirmed - this also happens with the original code, I will ask Mike Powell to provide us with a function exercising rescue. You are probably suspicious whether the Java rescue works, as am I. </p></comment><comment id="13066399" author="erans" created="Sat, 16 Jul 2011 11:53:11 +0100"><p>In fact I'm more worried about introducing bugs that will go unnoticed. <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p></comment><comment id="13066425" author="docdwo" created="Sat, 16 Jul 2011 14:08:53 +0100"><p>Now I remember that I debugged rescue (and removed a nasty infinite loop) testing MinusElli with GoalType.MAXIMIZE before I fixed the <br/>
GoalType.MAXIMIZE handling. Testing MinusElli with GoalType.MINIMIZE still calls rescue:</p>

<p>  @Test<br/>
    public void testRescue() </p>
{
        double[] startPoint = point(DIM,1.0);
        double[][] boundaries = null;
        RealPointValuePair expected =
            new RealPointValuePair(point(DIM,0.0),-7.5072566333E53);
        doTest(new MinusElli(), startPoint, boundaries,
                GoalType.MINIMIZE, 
                1e45, 1e24, 1000, expected);
    }
<p>But parallel testing with the original revealed a problem, so please wait a few hours before working on rescue, I will fix it soon.</p></comment><comment id="13066464" author="erans" created="Sat, 16 Jul 2011 17:52:01 +0100"><p>There's no hurry. I'm not going to stop sleeping until the conversion is done; there is so much to do...<br/>
I've also started reading the reference <a href="http://www.optimization-online.org/DB_FILE/2010/05/2616.pdf" class="external-link" rel="nofollow">paper</a> in the hope to figure the algorithm bits out of the Fortran gigantic functions.</p></comment><comment id="13066553" author="docdwo" created="Sun, 17 Jul 2011 00:13:17 +0100"><p>rescue was as I feared not correct, the fixed version v0.3 behaves exactly as the original. </p>

<p>A breakup of the working area in separate double arrays should be straightforward, but still some work because of the nasty loop counting starting with 1.</p>

<p>Something like<br/>
     double[] xbase = new double<span class="error">&#91;n&#93;</span>;<br/>
        double[] xpt = new double<span class="error">&#91;n * npt&#93;</span>;<br/>
        double[] fval = new double<span class="error">&#91;npt&#93;</span>;<br/>
        double[] xopt = new double<span class="error">&#91;n&#93;</span>;<br/>
        double[] gopt = new double<span class="error">&#91;n&#93;</span>;<br/>
        double[] hq = new double<span class="error">&#91;n * np / 2&#93;</span>;<br/>
        double[] pq = new double<span class="error">&#91;npt&#93;</span>;<br/>
        double[] bmat = new double<span class="error">&#91;ndim * n&#93;</span>;<br/>
        double[] zmat = new double<span class="error">&#91;npt * (npt - np)&#93;</span>;<br/>
        double[] sl = new double<span class="error">&#91;n&#93;</span>;<br/>
        double[] su = new double<span class="error">&#91;n&#93;</span>; <br/>
        double[] xnew = new double<span class="error">&#91;n&#93;</span>;<br/>
        double[] xalt = new double<span class="error">&#91;n&#93;</span>;<br/>
        double[] d__ = new double<span class="error">&#91;n&#93;</span>;<br/>
        double[] vlag = new double<span class="error">&#91;ndim&#93;</span>;<br/>
        double[] w = new double<span class="error">&#91;?&#93;</span>;</p>

<p>Class ScopePtr could then be removed and the code should get even faster. </p>

<p>The "gotos"/ switches are much harder to eliminate.</p></comment><comment id="13067874" author="luc" created="Tue, 19 Jul 2011 19:13:58 +0100"><p>The Software Grant from prof. M.J.D. Powell has been filed in Apache Software Foundation records.<br/>
So this administrative step is over, we can include the code as soon as we want to.</p></comment><comment id="13073347" author="docdwo" created="Sun, 31 Jul 2011 13:00:39 +0100"><p>The attached new version contains three variants of BOBYQA implementing the<br/>
MultivariateRealOptimizer together with their associated unit tests:</p>

<p>BOBYQAOptimizerOld - essentially the previous version 0.3 with minor adaptions<br/>
in the unit tests added for comparison.</p>

<p>BOBYQAOptimizer - the actual version I use myself - all "pointers" are replaced<br/>
by Java arrays. This version is much easier to read and faster than the old<br/>
one. Nevertheless the "finite state machine logic" realized by the original<br/>
code using gotos is still there - in Java realized using switch/case statements.</p>

<p>BOBYQAOptimizerC - a version showing how MultivariateRealOptimizer can be implemented using the C-port of BOBYQA from the dlib library. The C+<ins>-code doing the mapping from Java to C</ins>+ to Java via JNI is also included.</p>

<p>Some remarks:</p>

<ul class="alternate" type="square">
	<li>all three versions are semantically equivalent - at least from the point of<br/>
the actual unit test coverage. </li>
</ul>


<ul class="alternate" type="square">
	<li>the new Java version is about 30% faster than the old one - array access is<br/>
cheaper than method calls simulating pointer arithmetic. </li>
</ul>


<ul class="alternate" type="square">
	<li>I observed a significant change of behaviour when statements like<br/>
a = a+(b...) are replaced by a += (b...). Subtle accuracy differences add up<br/>
during the optimization process. </li>
</ul>


<ul class="alternate" type="square">
	<li>The C version was tested both on Mac (Snow Leopard) and Windows7,<br/>
both for 32 and 64-bit Java. For 64bit the Microsoft C++-compiler produced correct<br/>
results only if optimization is switched off completely, on the Mac the<br/>
gnu compiler works correctly using -O3.</li>
</ul>


<ul class="alternate" type="square">
	<li>On the Mac (a Macbook pro with a new sandy bridge processor) the C-version<br/>
performs the unit tests three times faster than the (new) Java version. <br/>
The difference on Win7 is much smaller, since I couldn't use compiler optimization <br/>
there yet. The performance difference is not significant for my own application of the algo (space flight trajectory optimization) because of the high cost for the eval function. But this is perhaps not true for all other applications. </li>
</ul>


<p>So if we want to include BOBYQA in commons.math in my opinion we shouldn't <br/>
neglect performance issues generally. Even a direct port of the code has a significant<br/>
performance disadvantage, any refactoring should try to avoid adding too much<br/>
additional performance bottlenecks. </p></comment><comment id="13073351" author="erans" created="Sun, 31 Jul 2011 14:57:20 +0100"><blockquote>
<p>BOBYQAOptimizer - the actual version I use myself - all "pointers" are replaced<br/>
by Java arrays. This version is much easier to read and faster than the old<br/>
one.</p></blockquote>

<p><img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/sad.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> It's a pity that you didn't mention this version earlier; I already spent quite a few hours replacing the "ScopedPtr" variables. Only a few of them remains in my working version: namely, those that are created as offsets in "w" before calling "trsbox", "rescue", "altmov" and "update".<br/>
Since I also made a few other changes along the way, I don't feel like starting all (almost) over again...<br/>
Hence, I'll continue with my incremental changes; but, at some point, I could use some help to convert the state machine code into proper function calls.</p>

<p>IMO, we should first arrive at a clearer code before worrying about performance (the more so that, as you pointed out, this algorithm will probably be put to use when function evaluation is expensive, overwhelming the optimizer's code running time).</p>

<p>The refactoring from efficient Fortran to (very probably less efficient) Java is a big effort but it's indispensable: If it were not to become understandable and maintainable, I don't see the point in including it in CM; you could just provide the straight translation in a JAR file and people would use it as a black box.</p>
</comment><comment id="13073381" author="psteitz" created="Sun, 31 Jul 2011 20:27:18 +0100"><p>I agree strongly with Gilles comment on maintainability.  At apache, our goal is to develop software that can be maintained by a group of volunteers that changes over time.  In <span class="error">&#91;math&#93;</span>, that means algorithms need to be documented and it has to be possible for a Java developer with sufficient mathematical knowledge to read the references and javadoc and make sense of the code. </p></comment><comment id="13076194" author="erans" created="Tue, 2 Aug 2011 14:29:18 +0100"><p>Dietmar,</p>

<p>I think I've come across a bug in function "rescue". At line 2443 (of the Java translation I use for comparison, i.e. the one with "ScopedPtr"):</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
i__2 = ndim;
<span class="code-keyword">for</span> (ip = npt; ip &lt;= i__2; ip++) {
  sum += bmat.get(ip + j * bmat_dim1) * w.get(ip);
}
</pre>
</div></div>
<p>Whereas, in the original Fortran code (at line 1544):</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>      DO 220 IP=NPT+1,NDIM
  220 SUM=SUM+BMAT(IP,J)*W(IP)
</pre>
</div></div>

<p>Can you confirm?</p>

<p>If indeed, the loop should start at "npt + 1", I've made the change; but tests still all pass! Does this mean that the one exercising rescue is too lenient?<br/>
Trying to remove the "w" ("split" work space) from "rescue" provides many possibilities for my own mistakes; thus I am a little scared that they would also go unnoticed...</p></comment><comment id="13076222" author="docdwo" created="Tue, 2 Aug 2011 15:23:27 +0100"><p>Hi Gilles,<br/>
bug is confirmed - and it is also in the new array based version. <br/>
Debugging the unit test reveals sum is 0 here, so for rescue the<br/>
unit tests are not sufficient at the moment. </p>

<p>Creating the array based version caused a lot of these bugs initially, but I <br/>
would favour this version<br/>
over the old one because it is much cleaner and easier to read and maintain.</p>

<p>My experience is that if you introduce this kind of bug in any part beside <br/>
rescue, you<br/>
are guaranteed to see a difference in the output I put into the junit tests form <br/>
my newest attachment.</p>

<p>The number of function calls will differ from the C/Fortran version. But you <br/>
definitinely have<br/>
to compare these function call numbers with the C/Fortran version, to be sure <br/>
everything is </p>

<p>as intended. Even slight changes like a = a+b replaced by a += b can cause <br/>
trouble<br/>
because of subtle accuracy problems accumulating over time. </p>

<p>Rescue is a completely different story, therfore I asked Mike Powell whether he <br/>
could<br/>
provide us with meaningful samples/testsm his answer was: </p>


<p>---------------<br/>
Excerpt from a mail from Mike Powell:<br/>
Concerning RESCUE, it is present in BOBYQA because, in some tests<br/>
with unattainable accuracy requirements, a little more progress could<br/>
be made by invoking RESCUE. Checking the correctness of RESCUE was<br/>
possible only by modifying the package in a way that forced it to be<br/>
called in situations that were not contaminated severely by loss of<br/>
accuracy. I may decide to delete RESCUE from the Fortran package that<br/>
I send to people who ask for BOBYQA.<br/>
-------------</p>

<p>To make progress we have a lot of options to decide:</p>

<p>1) Keep rescue? May be removing it from the initial release in commons.math <br/>
doesn't do too much harm.<br/>
When keeping it we should find useful applications before and add them to the <br/>
unit tests.</p>

<p>2) Using arrays instead of pointers and don't use the large shared working <br/>
space? I would prefer so, since the<br/>
arrays-version is faster in Java (pointers need to be emulated) and the code <br/>
becomes much clearer. </p>


<p>3) Complete redesign/refactor the code? <br/>
A difficult issue. I would say that this is very hard to achieve. <br/>
Instead I would try to build something equivalent from scratch. <br/>
Problem is that Mike Powell put 50 years of experience developing optimization <br/>
algos<br/>
into BOBYQA and you can see that comparing the number of cost function calls <br/>
needed with other<br/>
optimization algos. So from the user perspective BOBYQA has a huge value even if <br/>
not completely </p>

<p>refactored/redesigned and it is not an easy decision to keep BOBYQA out of <br/>
commons.math for<br/>
code-aesthetic reasons.</p>

<p>I would like to see other opinions on these options.</p>

<p>Gilles commented on <a href="https://issues.apache.org/jira/browse/MATH-621" title="BOBYQA is missing in optimization" class="issue-link" data-issue-key="MATH-621">MATH-621</a>:<br/>
-----------------------------</p>

<p>Dietmar,</p>

<p>I think I've come across a bug in function "rescue". At line 2443 (of the Java <br/>
translation I use for comparison, i.e. the one with "ScopedPtr"):</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
i__2 = ndim;
<span class="code-keyword">for</span> (ip = npt; ip &lt;= i__2; ip++) {
  sum += bmat.get(ip + j * bmat_dim1) * w.get(ip);
}
</pre>
</div></div>
<p>Whereas, in the original Fortran code (at line 1544):</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>      DO 220 IP=NPT+1,NDIM
  220 SUM=SUM+BMAT(IP,J)*W(IP)
</pre>
</div></div>

<p>Can you confirm?</p>

<p>If indeed, the loop should start at "npt + 1", I've made the change; but tests <br/>
still all pass! Does this mean that the one exercising rescue is too lenient?<br/>
Trying to remove the "w" ("split" work space) from "rescue" provides many <br/>
possibilities for my own mistakes; thus I am a little scared that they would <br/>
also go unnoticed...</p>



<p>&#8211;<br/>
This message is automatically generated by JIRA.<br/>
For more information on JIRA, see: <a href="http://www.atlassian.com/software/jira" class="external-link" rel="nofollow">http://www.atlassian.com/software/jira</a></p></comment><comment id="13076251" author="docdwo" created="Tue, 2 Aug 2011 16:03:27 +0100"><p>The new version was not mentioned earlier because it didn't exist. I did<br/>
that on my vacation and uploaded it at the day I got the tests through.</p>

<p>I suspected you tried something similar but I thought that it would it<br/>
make easier for you to locate bugs in your version if you had something<br/>
working using arrays for comparison.</p>

<p>Conversion of the state machine is far from trivial, if you want to do<br/>
it properly. Problem is that you either define a lot of global variables<br/>
or have to transfer a huge number of parameters.</p>

<p>What would the jar-solution mean for the users?<br/>
How will a user find the jar,  who will host these kind of black box extensions <br/>
to CM?</p>

<p>Instead of providing a jar you could also provide a dll/shared libraries<br/>
together with a JNI interface. It is also a black box - <br/>
but up to six times faster according to my tests. But I agree - performance<br/>
is not essentially here because you usually have expensive evaluation functions.</p>

<p>Having the code published could inspire others to work and improve on it.</p>


<p>Gilles commented on <a href="https://issues.apache.org/jira/browse/MATH-621" title="BOBYQA is missing in optimization" class="issue-link" data-issue-key="MATH-621">MATH-621</a>:<br/>
-----------------------------</p>

<p><img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/sad.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> It's a pity that you didn't mention this version earlier; I already spent <br/>
quite a few hours replacing the "ScopedPtr" variables. Only a few of them <br/>
remains in my working version: namely, those that are created as offsets in "w" <br/>
before calling "trsbox", "rescue", "altmov" and "update".<br/>
Since I also made a few other changes along the way, I don't feel like starting <br/>
all (almost) over again...<br/>
Hence, I'll continue with my incremental changes; but, at some point, I could <br/>
use some help to convert the state machine code into proper function calls.</p>

<p>IMO, we should first arrive at a clearer code before worrying about performance <br/>
(the more so that, as you pointed out, this algorithm will probably be put to <br/>
use when function evaluation is expensive, overwhelming the optimizer's code <br/>
running time).</p>

<p>The refactoring from efficient Fortran to (very probably less efficient) Java is <br/>
a big effort but it's indispensable: If it were not to become understandable and <br/>
maintainable, I don't see the point in including it in CM; you could just <br/>
provide the straight translation in a JAR file and people would use it as a <br/>
black box.</p>




<p>&#8211;<br/>
This message is automatically generated by JIRA.<br/>
For more information on JIRA, see: <a href="http://www.atlassian.com/software/jira" class="external-link" rel="nofollow">http://www.atlassian.com/software/jira</a></p></comment><comment id="13076292" author="psteitz" created="Tue, 2 Aug 2011 17:15:16 +0100"><p>Dietmar,</p>

<p>Thanks for working on this.  Here are answers to your questions about "black box" solutions.</p>

<blockquote>
<p>What would the jar-solution mean for the users?<br/>
How will a user find the jar, who will host these kind of black box extensions <br/>
to CM?</p></blockquote>

<p>One solution is Apache Extras<span class="error">&#91;1&#93;</span>. GitHub or SourceForge are others.  We do not host code not maintained by the ASF on ASF infrastructure, so it would have to be external.</p>

<blockquote>
<p>Instead of providing a jar you could also provide a dll/shared libraries<br/>
together with a JNI interface. It is also a black box - <br/>
but up to six times faster according to my tests. But I agree - performance<br/>
is not essentially here because you usually have expensive evaluation functions.</p></blockquote>

<p>Again, this is possible, but would have to be hosted externally to Apache.</p>

<blockquote>
<p>Having the code published could inspire others to work and improve on it.</p></blockquote>

<p>+1 for this and that we could do here.  The key is to get the code to the point where others can follow it so they get "inspired" rather than confused and frustrated.</p>

<p><span class="error">&#91;1&#93;</span> <a href="http://code.google.com/a/apache-extras.org/hosting/" class="external-link" rel="nofollow">http://code.google.com/a/apache-extras.org/hosting/</a></p></comment><comment id="13078395" author="docdwo" created="Tue, 2 Aug 2011 20:58:26 +0100"><p>The code is now fully documented - even the internals of the private functions.<br/>
Gilles and me have already removed the main obstacle - the use of pointers und the<br/>
nasty huge working area. <br/>
A further refactoring - splitting the private functions into smaller ones - now is much more work.<br/>
Maybe Gilles can give an estimation of the effort?<br/>
I started and was a bit frustrated soon since I had to introduce so many global variables, I felt the<br/>
code even lost readability. Now the variables are at least local to the (admittedly large) functions. <br/>
I got the feeling that it would be easier to invent something equivalent from scratch describing the<br/>
algorithm mathematically as a set of matrix operations first - similar as it was done for CMA-ES.<br/>
Then a clean implementation (maybe starting with a matlab prototype) could be done.<br/>
I can perform the second step - but for the first one an active researcher in the field would<br/>
be required - a researcher willing to license his work for Apache. As discussed in the mailing<br/>
list there are candidates and Luc offered to approach one of them. </p>

<p>To summarize the opinions so far:<br/>
Besides Luc and me everyone seems to favor to keep out BOBYQA from CM. It could be<br/>
hosted at Apache Extras, GitHub or SourceForge.<br/>
Gilles continues to try to further enhance the code with the aim to make it "suitable" for<br/>
inclusion into CM.</p>

<p>Phil Steitz commented on <a href="https://issues.apache.org/jira/browse/MATH-621" title="BOBYQA is missing in optimization" class="issue-link" data-issue-key="MATH-621">MATH-621</a>:<br/>
----------------------------------<br/>
+1 for this and that we could do here.  The key is to get the code to the point where others can follow it so they get "inspired" rather than confused and frustrated.</p>

</comment><comment id="13078485" author="erans" created="Tue, 2 Aug 2011 23:58:55 +0100"><p>I certainly also would like the code to be <b>in</b> CM. If just for the selfish reason that I've been working on the conversion for many days now <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/tongue.gif" height="16" width="16" align="absmiddle" alt="" border="0"/>. I don't think that <em>anyone</em> wants it out. However, my view of the CM software library is that it should be a repository of best practices for scientific computing in Java, and not "just" a toolbox.<br/>
This implies IMHO that we try our best that the implementations are coded in a proper OO way...</p>

<p>That said, I'm a bit dismayed that we don't seem to combine our forces to achieve that goal.<br/>
I cannot use your new version, and you prefer it to the old one; that is the situation that I wanted to avoid when I proposed to do a first pass on the code before committing it to the repository!<br/>
Please allow me a few more days to get to a "consistent" state (e.g. removing the big work space). A that point I propose to</p>
<ol>
	<li>commit your original "straight" translation as provided in your first patch</li>
	<li>commit my current version of that code</li>
</ol>


<p>Then we can use that as a common base to refactor:</p>
<ol>
	<li>Replace the "goto"/state machine constructs</li>
	<li>Use matrix operations (from package "linear") whenever possible, in place of the explicit loops</li>
</ol>


<p>I don't quite see what seems to bother you with "global" variables versus long argument list. One of the "problems" of the original (Fortran-like) implementation is that many of the function arguments are either</p>
<ul>
	<li>input-output (i.e. they are changed in-place), or</li>
	<li>work space</li>
</ul>


<p>The former will be more suitably turned into instance variables, and the latter should become a local variable. I've already started this transformation; it reduces the the length of the argument lists and make the code clearer namely because one will be able to tell which variables are input (function arguments) and which are output (instance variable).</p>

<p>The clean, from scratch, implementation is also an option. However, a couple of weeks ago, I had the impression that no one stepped forward to work on it. That's also why I took the pedestrian way, having the feeling that we could slowly but surely (thanks to your reference implementation and unit tests) walk towards the goal of having BOBYQA included in CM before the 3.0 release (while waiting for the best person for the task would seem to make it unlikely).</p>

<p>Once the 2 commits I talked about above are done, the code will still be far from my ideal OO but I hope that it will be in a state that will make it more likely that it will evolve towards that ideal.</p>

<p>How does that sound?</p></comment><comment id="13078499" author="erans" created="Wed, 3 Aug 2011 00:24:40 +0100"><p>Another problem: The conditionals, at line 567 and at line 570, are never entered:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">if</span> (xnew.get(j) == sl.get(j)) {
  bdtest = w.get(j);
}
<span class="code-keyword">if</span> (xnew.get(j) == su.get(j)) {
  bdtest = -w.get(j);
}
</pre>
</div></div>

<p>In some sense, it would be fine if they could be removed; because otherwise, in my converted code, there would the extreme inconvenience that the content of "w" is accessed before it is initialized...</p></comment><comment id="13080424" author="erans" created="Sat, 6 Aug 2011 17:55:30 +0100"><p>Original version (with "ScopedPtr" variables) committed in revision 1154543.</p></comment><comment id="13080431" author="erans" created="Sat, 6 Aug 2011 18:16:13 +0100"><p>My first steps in the (hopefully) good direction were committed in revision 1154550.</p>

<p>I think that the next step would be to replace all 1-based loops by 0-based loops, together with changing all occurrences of "FortranArray" and "FortranMatrix" by "ArrayRealVector" and "Array2DRealMatrix", respectively. This is a little delicate because all changes must be done at once, and also because some indices are hard-coded and there are some tests on various index bounds (e.g. in "prelim" and "rescue")... However, I hope that Dietmar's new version with arrays (which I haven't looked at yet) will help sort this out.</p></comment><comment id="13082249" author="docdwo" created="Wed, 10 Aug 2011 10:27:27 +0100"><p>Hi Gilles,<br/>
it was not my intention to "separate forces", but the only thing I could do <br/>
during my <br/>
vacation partly without internet access was to focus on one single topic, I <br/>
chose<br/>
the "replace all 1-based loops by 0-based loops" task. Of course I didn't expect<br/>
that you restart from scratch, but that we somehow integrate what we have done <br/>
so far. <br/>
Question is now: should we really go to CM matrices in one step, or use 0-based <br/>
Arrays<br/>
as an intermediate step? I could for instance use your code as a basis and try <br/>
to come<br/>
up with an 0-based equivalent as an intermediate step. What do you think?<br/>
By the way, thanks for your significant efforts.</p>

<p>Gilles commented on <a href="https://issues.apache.org/jira/browse/MATH-621" title="BOBYQA is missing in optimization" class="issue-link" data-issue-key="MATH-621">MATH-621</a>:<br/>
That said, I'm a bit dismayed that we don't seem to combine our forces to <br/>
achieve that goal.</p>


<p>----- Ursprüngliche Mail ----<br/>
Von: Gilles (JIRA) &lt;jira@apache.org&gt;<br/>
An: drdietmarwolz@yahoo.de<br/>
Gesendet: Samstag, den 6. August 2011, 19:16:27 Uhr<br/>
Betreff: <span class="error">&#91;jira&#93;</span> <span class="error">&#91;Commented&#93;</span> (<a href="https://issues.apache.org/jira/browse/MATH-621" title="BOBYQA is missing in optimization" class="issue-link" data-issue-key="MATH-621">MATH-621</a>) BOBYQA is missing in optimization</p>


<p>    [ <br/>
<a href="https://issues.apache.org/jira/browse/MATH-621?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;focusedCommentId=13080431#comment-13080431" class="external-link" rel="nofollow">https://issues.apache.org/jira/browse/MATH-621?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;focusedCommentId=13080431#comment-13080431</a><br/>
 ] </p>


<p>Gilles commented on <a href="https://issues.apache.org/jira/browse/MATH-621" title="BOBYQA is missing in optimization" class="issue-link" data-issue-key="MATH-621">MATH-621</a>:<br/>
-----------------------------</p>

<p>My first steps in the (hopefully) good direction were committed in revision <br/>
1154550.</p>

<p>I think that the next step would be to replace all 1-based loops by 0-based <br/>
loops, together with changing all occurrences of "FortranArray" and <br/>
"FortranMatrix" by "ArrayRealVector" and "Array2DRealMatrix", respectively. This <br/>
is a little delicate because all changes must be done at once, and also because <br/>
some indices are hard-coded and there are some tests on various index bounds <br/>
(e.g. in "prelim" and "rescue")... However, I hope that Dietmar's new version <br/>
with arrays (which I haven't looked at yet) will help sort this out.</p></comment><comment id="13082361" author="erans" created="Wed, 10 Aug 2011 15:18:00 +0100"><p>Hello Dietmar.</p>

<blockquote>
<p>Of course I didn't expect<br/>
that you restart from scratch, but that we somehow integrate what we have done<br/>
so far.</p></blockquote>

<p>But I did not restart from scratch; I used your Java translation and went from there!<br/>
In fact, it looks like I used the original Fortran because I indeed did transform the "ScopedPtr" that were inherently bi-dimensional (i.e. matrices like "bmat" and "zmat") into (new auxiliary) "FortranMatrix" objects.<br/>
It was only when I checked for the bug in "rescue" that I looked into the original Fortran, and discovered that it was using matrices! I still don't understand why they were translated into 1-d arrays in your code...</p>

<blockquote>
<p>Question is now: should we really go to CM matrices in one step, or use 0-based<br/>
Arrays as an intermediate step? I could for instance use your code as a basis and try<br/>
to come up with an 0-based equivalent as an intermediate step. What do you think?</p></blockquote>

<p>Going to 0-based loops and replace "FortranArray" and "FortranMatrix" with their CM-equivalent ("ArrayRealVector" and "Array2DRowRealMatrix"), which are 0-based, can only be done in one step, if I'm not mistaken.</p>

<p>I've started to write a script that would do the translation of everything that can be spotted automatically i.e. construct like</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">for</span> (<span class="code-object">int</span> i = 1; i &lt; n; i++)
</pre>
</div></div>
<p>and</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
zmat.getEntry(2, j)
</pre>
</div></div>
<p>and</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
FortranArray glag = <span class="code-keyword">new</span> FortranArray(n);
</pre>
</div></div>
<p>etc.</p>

<p>But there are some contructs that must be changed concomitantly (like some test on array bounds in "prelim") and cannot be done automatically. I also suspect that some simplification could be done there because of the use of a variable containing the "number of evaluations" + 1. Unfortunately, my first attempt was not successful <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/sad.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p>

<p>So, what I suggest is that</p>
<ul>
	<li>I finish my (Perl) script; I'll test that it makes all the intended replacements (but obviously the resulting code will not pass the tests anymore until all the non-trivial replacements have been correctly performed).</li>
	<li>I'll post it here so that you can run it on your working copy</li>
	<li>you could then attempt to perform the rest of the 1-based to 0-based conversion.</li>
</ul>


<p>Once we are left with "ArrayRealVector" and "Array2DRowRealMatrix", we can see whether some of the explicit loops can replaced by matrix operation methods from CM's "RealMatrix" interface.<br/>
After this "low-level clean-up" we can discuss how to introduce the "bounded optimization" concept into the CM API (I've already marked the code with "XXX" to that purpose).<br/>
Concurrently to the preceding point, it would be nice to gradually tackle the "goto" problem.</p>

<p>What do you think?</p></comment><comment id="13082374" author="docdwo" created="Wed, 10 Aug 2011 15:48:28 +0100"><p>If you already started writing scripts we should see what they generate. </p>

<p>I needed several days fixing the indices / removing all newly introduced bugs <br/>
when I moved to 0-based Java arrays. </p>

<p>My hope is that the indexing problems can be solved by looking into my 0-based <br/>
Java array version.</p>


<p>maybe because I used the C++-port in dlib? <br/>
<a href="http://dlib.net/dlib/optimization/optimization_bobyqa.h.html" class="external-link" rel="nofollow">http://dlib.net/dlib/optimization/optimization_bobyqa.h.html</a><br/>
there are no matrices. </p>

<p>But I agree, starting with matrices and automatically transform them into <br/>
a Array2DRowRealMatrix seems<br/>
a good idea. </p>


<p>----- Ursprüngliche Mail ----<br/>
Von: Gilles (JIRA) &lt;jira@apache.org&gt;<br/>
An: drdietmarwolz@yahoo.de<br/>
Gesendet: Mittwoch, den 10. August 2011, 16:19:27 Uhr<br/>
Betreff: <span class="error">&#91;jira&#93;</span> <span class="error">&#91;Commented&#93;</span> (<a href="https://issues.apache.org/jira/browse/MATH-621" title="BOBYQA is missing in optimization" class="issue-link" data-issue-key="MATH-621">MATH-621</a>) BOBYQA is missing in optimization</p>


<p>    [ <br/>
<a href="https://issues.apache.org/jira/browse/MATH-621?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;focusedCommentId=13082361#comment-13082361" class="external-link" rel="nofollow">https://issues.apache.org/jira/browse/MATH-621?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;focusedCommentId=13082361#comment-13082361</a><br/>
 ] </p>


<p>Gilles commented on <a href="https://issues.apache.org/jira/browse/MATH-621" title="BOBYQA is missing in optimization" class="issue-link" data-issue-key="MATH-621">MATH-621</a>:<br/>
-----------------------------</p>

<p>Hello Dietmar.</p>

<blockquote>
<p>Of course I didn't expect<br/>
that you restart from scratch, but that we somehow integrate what we have done<br/>
so far.</p></blockquote>

<p>But I did not restart from scratch; I used your Java translation and went from <br/>
there!<br/>
In fact, it looks like I used the original Fortran because I indeed did <br/>
transform the "ScopedPtr" that were inherently bi-dimensional (i.e. matrices <br/>
like "bmat" and "zmat") into (new auxiliary) "FortranMatrix" objects.<br/>
It was only when I checked for the bug in "rescue" that I looked into the <br/>
original Fortran, and discovered that it was using matrices! I still don't <br/>
understand why they were translated into 1-d arrays in your code...</p>

<blockquote>
<p>Question is now: should we really go to CM matrices in one step, or use 0-based<br/>
Arrays as an intermediate step? I could for instance use your code as a basis <br/>
and try<br/>
to come up with an 0-based equivalent as an intermediate step. What do you <br/>
think?</p></blockquote>

<p>Going to 0-based loops and replace "FortranArray" and "FortranMatrix" with their <br/>
CM-equivalent ("ArrayRealVector" and "Array2DRowRealMatrix"), which are 0-based, <br/>
can only be done in one step, if I'm not mistaken.</p>

<p>I've started to write a script that would do the translation of everything that <br/>
can be spotted automatically i.e. construct like</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">for</span> (<span class="code-object">int</span> i = 1; i &lt; n; i++)
</pre>
</div></div>
<p>and</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
zmat.getEntry(2, j)
</pre>
</div></div>
<p>and</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
FortranArray glag = <span class="code-keyword">new</span> FortranArray(n);
</pre>
</div></div>
<p>etc.</p>

<p>But there are some contructs that must be changed concomitantly (like some test <br/>
on array bounds in "prelim") and cannot be done automatically. I also suspect <br/>
that some simplification could be done there because of the use of a variable <br/>
containing the "number of evaluations" + 1. Unfortunately, my first attempt was <br/>
not successful <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/sad.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p>

<p>So, what I suggest is that</p>
<ul>
	<li>I finish my (Perl) script; I'll test that it makes all the intended<br/>
replacements (but obviously the resulting code will not pass the tests anymore <br/>
until all the non-trivial replacements have been correctly performed).</li>
	<li>I'll post it here so that you can run it on your working copy</li>
	<li>you could then attempt to perform the rest of the 1-based to 0-based<br/>
conversion.</li>
</ul>


<p>Once we are left with "ArrayRealVector" and "Array2DRowRealMatrix", we can see <br/>
whether some of the explicit loops can replaced by matrix operation methods from <br/>
CM's "RealMatrix" interface.<br/>
After this "low-level clean-up" we can discuss how to introduce the "bounded <br/>
optimization" concept into the CM API (I've already marked the code with "XXX" <br/>
to that purpose).<br/>
Concurrently to the preceding point, it would be nice to gradually tackle the <br/>
"goto" problem.</p>

<p>What do you think?</p>



<p>&#8211;<br/>
This message is automatically generated by JIRA.<br/>
For more information on JIRA, see: <a href="http://www.atlassian.com/software/jira" class="external-link" rel="nofollow">http://www.atlassian.com/software/jira</a></p></comment><comment id="13084593" author="erans" created="Sat, 13 Aug 2011 12:34:04 +0100"><p>Here is a script that converts "for" loops from 1-based to 0-based.</p></comment><comment id="13084596" author="erans" created="Sat, 13 Aug 2011 12:45:56 +0100"><p>Introducing the "INDEX_OFFSET" constant in my last commit made the script simpler; it only converts "for" loops (hopefully all of them). It also changes the value of "INDEX_OFFSET" from 1 to 0, allowing to leave the auxiliary "FortranArray" and "FortranMatrix" in place (they just become no-op wrappers).</p>

<p>So, do you want to try correcting the remaining indices?<br/>
The first error occurs in "prelim" (at line 1779)...</p>

<p>A good strategy might be to insert "INDEX_OFFSET" at the appropriate places so that when reverting "INDEX_OFFSET" to 1, we can still test that the behaviour was as before. I thought that it could then help refactoring the "do while" loop into something more understandable.</p></comment><comment id="13084673" author="docdwo" created="Sat, 13 Aug 2011 19:08:27 +0100"><p>Will try to fix the offsets, but this will probably take some time.</p>



</comment><comment id="13085034" author="docdwo" created="Mon, 15 Aug 2011 12:26:38 +0100"><p>No changes from the perl generated code <br/>
beside the ones necessary to get INDEX_OFFSET=0 working. Introduced INDEX_OFFSET where possible but there were<br/>
many other adaptions necessary (just compare the perl generated code with the attachment). Version 0.3 had some useful <br/>
additional minor changes/refactorings missing here (see remarks below),<br/>
but the main work for 0.3 was the index change, and this we have here again. Remarks:</p>

<p>1) The perl script has damaged the "for loop" intendation</p>

<p>2) n, npt and nptm should be global variables and not set separately<br/>
in each method</p>

<p>3) "System generated locals": Declare variables in the scope they are needed and<br/>
not method-globally if not necessary</p>

<p>4) testDiagonalRosen() is a copy/paste leftover from CMAES, should be removed</p>

<p>5) We should shink about removing rescue as proposed by Mike Powell. </p>
</comment><comment id="13085061" author="erans" created="Mon, 15 Aug 2011 13:45:25 +0100"><p>Thanks for the work.<br/>
However, if I change the "INDEX_OFFSET" constant (setting it back to "1"), the tests fail.<br/>
I see that you hard-coded the offset in most places instead of using "INDEX_OFFSET". I still think that this place-holder would be useful to keep track of places where the index variables might have been set to fit with the Fortran 1-based counting... Don't you?</p>

<blockquote>
<p>The perl script has damaged the "for loop" intendation</p></blockquote>
<p>Sorry, I didn't see that. But that's easy to fix. I'll do it after the issue with INDEX_OFFSET is settled.</p>

<blockquote>
<p>n, npt and nptm should be global variables and not set separately<br/>
in each method</p></blockquote>
<p>Yes, I agree. But there are probably many other variables for which this is true ("zmat", "bmat", etc).</p>

<blockquote>
<p>"System generated locals": Declare variables in the scope they are needed <span class="error">&#91;...&#93;</span></p></blockquote>
<p>Agreed, of course. I had started to do that mainly with "d__1"; then there are many cases where the same variable was reused whereas we would prefer to create yet another one with a more explicit name.</p>

<blockquote>
<p>testDiagonalRosen() is a copy/paste leftover from CMAES, should be removed</p></blockquote>
<p>OK, I'll do it in the next commit.</p>

<blockquote>
<p>We should shink about removing rescue as proposed by Mike Powell.</p></blockquote>
<p>I'm all for anything that leads to removing unnecessary lines of code <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/><br/>
If you are indeed confident that, in most cases, the added complexity is not worth it, I'll just delete it.</p>
</comment><comment id="13085074" author="docdwo" created="Mon, 15 Aug 2011 14:21:27 +0100"><blockquote></blockquote>
<p>I see that you hard-coded the offset in most places instead of using "INDEX_OFFSET". I still think that this place-holder would be useful to keep track of places where the index variables might have been set to fit with the Fortran 1-based counting... Don't you?</p>

<p>I am not convinced yet. I thought INDEX_OFFSET as a tool to support the conversion. If you don't use <br/>
INDEX_OFFSET in the for loops (for int i = INDEX_OFFSET ...) I don't see why to introduce it artificially <br/>
in other places. The final aim should be to get rid of the Fortran-Arrays/Matrices and have 0-based access. I don't see<br/>
it essential to maintain INDEX_OFFSET as a kind of back reference to the old Fortran code in the future. <br/>
We have the unit tests as regression test. </p>

<p>Just try to convert one method - lets say prelim - the way you want to have it. <br/>
The working 0-based version 0.4 should make this easy. Then lets have a look at it. <br/>
I suspect it to become rather ugly using INDEX_OFFSET in all places. But then we<br/>
also should convert the for loops as  (for int i = INDEX_OFFSET ...) so that the code runs<br/>
again with INDEX_OFFSET=1. If you then really think it is better this way, I will help to<br/>
convert the other methods. </p>
</comment><comment id="13085243" author="erans" created="Mon, 15 Aug 2011 19:25:26 +0100"><p>OK. Keeping INDEX_OFFSET might be more work than really useful. I'll remove it also.</p></comment><comment id="13085332" author="erans" created="Mon, 15 Aug 2011 22:18:35 +0100"><p>1-based indexing issue solved in revision 1158015.</p></comment><comment id="13085334" author="erans" created="Mon, 15 Aug 2011 22:22:12 +0100"><p>Removed "testDiagonalRosen" unit test in revision 1158017.</p></comment><comment id="13085340" author="erans" created="Mon, 15 Aug 2011 22:27:25 +0100"><p>Commenting out "rescue" (line 671) makes the "testRescue" test fail, as expected. So, if I also remove the test, we are fine. However, do you know whether I can also remove the whole "case 190" (lines 667-697) as well as any code that references that "state" (e.g. lines 791-796, 846-851, 2597-2599, etc.)?</p></comment><comment id="13085643" author="docdwo" created="Tue, 16 Aug 2011 12:28:27 +0100"><p>"also remove the whole "case 190" (lines 667-697) "</p>

<p>My gut feeling is "yes". We could just do it and rely on our unit tests. <br/>
Alternatively I could ask Mike Powell. It doesn't seem that case 190<br/>
does anything beside adaptions after rescue.  </p>


<p>----- Ursprüngliche Mail ----<br/>
Von: Gilles (JIRA) &lt;jira@apache.org&gt;<br/>
An: drdietmarwolz@yahoo.de<br/>
Gesendet: Montag, den 15. August 2011, 23:27:27 Uhr<br/>
Betreff: <span class="error">&#91;jira&#93;</span> <span class="error">&#91;Commented&#93;</span> (<a href="https://issues.apache.org/jira/browse/MATH-621" title="BOBYQA is missing in optimization" class="issue-link" data-issue-key="MATH-621">MATH-621</a>) BOBYQA is missing in optimization</p>


<p>    [ <br/>
<a href="https://issues.apache.org/jira/browse/MATH-621?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;focusedCommentId=13085340#comment-13085340" class="external-link" rel="nofollow">https://issues.apache.org/jira/browse/MATH-621?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;focusedCommentId=13085340#comment-13085340</a><br/>
 ] </p>


<p>Gilles commented on <a href="https://issues.apache.org/jira/browse/MATH-621" title="BOBYQA is missing in optimization" class="issue-link" data-issue-key="MATH-621">MATH-621</a>:<br/>
-----------------------------</p>

<p>Commenting out "rescue" (line 671) makes the "testRescue" test fail, as <br/>
expected. So, if I also remove the test, we are fine. However, do you know <br/>
whether I can also remove the whole "case 190" (lines 667-697) as well as any <br/>
code that references that "state" (e.g. lines 791-796, 846-851, 2597-2599, <br/>
etc.)?</p>



<p>&#8211;<br/>
This message is automatically generated by JIRA.<br/>
For more information on JIRA, see: <a href="http://www.atlassian.com/software/jira" class="external-link" rel="nofollow">http://www.atlassian.com/software/jira</a></p></comment><comment id="13085980" author="erans" created="Tue, 16 Aug 2011 22:17:03 +0100"><p>"rescue" removed in revision 1158448.</p></comment><comment id="13086341" author="docdwo" created="Wed, 17 Aug 2011 15:27:41 +0100"><p>So finally we use the cm vectors / matrices, fine. <br/>
Whats next? My feeling is that before we look at the case statements we should do some easy stuff:<br/>
1) remove unused variables (eclipse shows some ugly yellow warnings)<br/>
2) reorganize variable use (limit their scope). Should be done with the case statement removal in mind. <br/>
3) would be great if we could use/identify some of the ArrayRealVector / Array2DRowRealMatrix operations (beside getEntry/setEntry)<br/>
We should coordinate 1) + 2), 3) may perhaps be done independently - <br/>
and later merged.</p></comment><comment id="13086368" author="erans" created="Wed, 17 Aug 2011 16:03:34 +0100"><blockquote>
<p>remove unused variables</p></blockquote>
<p>Would you take that one?</p>

<blockquote>
<p>reorganize variable use (limit their scope)</p></blockquote>
<p>I've done this for "altmov" and "update".<br/>
Let me know which function(s) you'd like to deal with.</p>

<blockquote>
<p>would be great if we could use/identify some of the ArrayRealVector <span class="error">&#91;...&#93;</span></p></blockquote>
<p>This can be left for after the other two points I think.</p>

<p>When you make changes, please provide a patch for each step separately: i.e. one patch for point 1, one patch for each function, for point 2.</p></comment><comment id="13086879" author="docdwo" created="Thu, 18 Aug 2011 09:23:13 +0100"><p>&gt;&gt;remove unused variables<br/>
&gt;Would you take that one?</p>

<p>patch related to "remove unused variables"<br/>
and "remove unused imports"</p></comment><comment id="13086967" author="erans" created="Thu, 18 Aug 2011 12:42:09 +0100"><p>The patch does not apply cleanly on the last revision. Are you submitted to the "commits" ML?<br/>
If not, we should really <em>coordinate</em>. In my mind, that meant that while waiting for your answer to my questions here, I can continue updating the code...</p>

<blockquote>
<p>"remove unused imports"</p></blockquote>

<p>Please don't do that. Or in a separate patch. Or not with Eclipse: Because it reordered the "import" lines, out of 12 changed lines, only 2 were really suppressing unused import statements.</p></comment><comment id="13086976" author="docdwo" created="Thu, 18 Aug 2011 13:10:27 +0100"><p>I checked out immediately before producing the patch immediately before <br/>
attaching it here, strange that <br/>
there was a conflict. Is it a good idea to maintain a import order inconsistent <br/>
with "organize imports" in<br/>
eclipse? This makes "organize imports" useless. But ok, so should I again <br/>
produce a patch without<br/>
the imports? But I cannot avoid a conflict if you check in just as I produce the <br/>
patch. By the way: such situations<br/>
are much easier to handle using git, but this is no option here. </p>


<p>----- Ursprüngliche Mail ----<br/>
Von: Gilles (JIRA) &lt;jira@apache.org&gt;<br/>
An: drdietmarwolz@yahoo.de<br/>
Gesendet: Donnerstag, den 18. August 2011, 13:42:27 Uhr<br/>
Betreff: <span class="error">&#91;jira&#93;</span> <span class="error">&#91;Commented&#93;</span> (<a href="https://issues.apache.org/jira/browse/MATH-621" title="BOBYQA is missing in optimization" class="issue-link" data-issue-key="MATH-621">MATH-621</a>) BOBYQA is missing in optimization</p>


<p>    [ <br/>
<a href="https://issues.apache.org/jira/browse/MATH-621?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;focusedCommentId=13086967#comment-13086967" class="external-link" rel="nofollow">https://issues.apache.org/jira/browse/MATH-621?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;focusedCommentId=13086967#comment-13086967</a><br/>
 ] </p>


<p>Gilles commented on <a href="https://issues.apache.org/jira/browse/MATH-621" title="BOBYQA is missing in optimization" class="issue-link" data-issue-key="MATH-621">MATH-621</a>:<br/>
-----------------------------</p>

<p>The patch does not apply cleanly on the last revision. Are you submitted to the <br/>
"commits" ML?<br/>
If not, we should really <em>coordinate</em>. In my mind, that meant that while waiting <br/>
for your answer to my questions here, I can continue updating the code...</p>

<blockquote>
<p>"remove unused imports"</p></blockquote>

<p>Please don't do that. Or in a separate patch. Or not with Eclipse: Because it <br/>
reordered the "import" lines, out of 12 changed lines, only 2 were really <br/>
suppressing unused import statements.</p>



<p>&#8211;<br/>
This message is automatically generated by JIRA.<br/>
For more information on JIRA, see: <a href="http://www.atlassian.com/software/jira" class="external-link" rel="nofollow">http://www.atlassian.com/software/jira</a></p></comment><comment id="13086994" author="erans" created="Thu, 18 Aug 2011 14:06:09 +0100"><p>Oops, sorry; <em>I</em> had not updated the to latest revision! Working on two computers, I forgot to coordinate with myself. <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/tongue.gif" height="16" width="16" align="absmiddle" alt="" border="0"/><br/>
Patch committed in revision 1159203.</p>

<blockquote>
<p>Is it a good idea to maintain a import order inconsistent with "organize imports" in eclipse?</p></blockquote>

<p>Not everybody use Eclipse...</p></comment><comment id="13087006" author="docdwo" created="Thu, 18 Aug 2011 14:31:28 +0100">



<p>So you want to force Eclipse users not to use the "organize import" <br/>
functionality?<br/>
What is the advantage for the non-Eclipse-users? Are there other tools with <br/>
 "organize import" functionality which produce a different order of imports?</p>



<p>&#8211;<br/>
This message is automatically generated by JIRA.<br/>
For more information on JIRA, see: <a href="http://www.atlassian.com/software/jira" class="external-link" rel="nofollow">http://www.atlassian.com/software/jira</a></p></comment><comment id="13087033" author="erans" created="Thu, 18 Aug 2011 15:34:11 +0100"><blockquote>
<p>So you want to force Eclipse users not to use the "organize import" functionality?</p></blockquote>

<p>No; just that, if you want to perform such cleanup, you should provide it in a separate patch. Otherwise I can get complaints: The rule is that a commit should aim at fixing one distinct issue at a time.</p></comment><comment id="13087370" author="erans" created="Thu, 18 Aug 2011 23:57:13 +0100"><p>An unexplored code path: See revision 1159438.</p></comment><comment id="13087408" author="erans" created="Fri, 19 Aug 2011 00:39:55 +0100"><p>I tried to replace a loop with a matrix operation: The computation of the first "sum" in "case 90" (line 564). Although the new and old computations differ by less than 1e-15, they induce failures:</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>Failed tests: 
  testAckley(org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest): expected:&lt;0.0&gt; but was:&lt;1.0731970423449866E-8&gt;

Tests in error: 
  testDiffPow(org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest): illegal state: maximal count (12,000) exceeded: evaluations
</pre>
</div></div>
<p>The first is possibly <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/help_16.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> acceptable due to numerical errors but the second seems more problematic.</p>

<p>Anyways, it looks like these kinds of code transformation should not be attempted at this point.</p></comment><comment id="13088001" author="erans" created="Fri, 19 Aug 2011 22:40:39 +0100"><p>"prelim" cleaned up in revision 1159792.</p>

<p>Another occurrence of a supposedly innocuous change (dividing by a number vs multiplying by the inverse of that number) induces the same two unit tests to fail.</p></comment><comment id="13088002" author="erans" created="Fri, 19 Aug 2011 22:44:56 +0100"><p>Many code branches in "prelim" unexplored by the current set of unit tests.<br/>
The unused code paths are marked by throwing an exception as their last statement.</p></comment><comment id="13088330" author="docdwo" created="Sun, 21 Aug 2011 09:57:27 +0100"><p>Problems with acurracy after refactoring are common with bobyqa. I always monitored also the number of function evaluations for each unit test. It is nontrivial to estimate which change is tolerable and which not. But if we plan further refactorings like a more extensive use of the CM matrix methods, we have to accept that we modify also the behaviour of the algorithm and have to adapt the tests. People who prefer the original can use the attachments here.</p>


</comment><comment id="13088339" author="erans" created="Sun, 21 Aug 2011 11:31:34 +0100"><p>Looking at the unit tests I see that, in the "assertEquals", tolerance for the function values are not very stringent (e.g. 1e-8 instead of, say, 1e-15); so this means that your initial translation was already not expected to reproduce exactly the "reference" results (Fortran or C++ <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/help_16.gif" height="16" width="16" align="absmiddle" alt="" border="0"/>). Am I correct?</p>

<p>So, in the "Ackley" case, the tolerance is set to 1e-8, and the alternative computation produces "1.07319e-8" instead of "0.0". Thus the absolute change in tolerance is smaller than 1e-10, which might be put on the account of error propagation <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/help_16.gif" height="16" width="16" align="absmiddle" alt="" border="0"/>.</p>

<p>However, in "DiffPow", the number of evaluations with the your original code is 6016, while the alternative computation makes it fail even as 12000 are allowed. This looks like a much more drastic change in behaviour!<br/>
Pardon my possible ignorance, but it makes we wonder whether the test is not too fragile or whether there is a bug in the implementation... In other words it would have been a "lucky accident" that the original computation succeeds.</p></comment><comment id="13088385" author="docdwo" created="Sun, 21 Aug 2011 16:26:27 +0100"><p>For me the unit tests initially had a different porpose: to ensure we reproduce the original exactly in java. I compared the eval numbers and ensured they didn't change from the original. Now we are in a different phase. Failing tests should be  more seen as a warning and we could adapt the limits. But it is not easy to decide what can betolerated.</p></comment><comment id="13093686" author="essence" created="Tue, 30 Aug 2011 13:41:21 +0100"><p>I'm new to this group (but not to optimization) and I have been trying out BOBYQA. Some of the issues which have arisen are:</p>

<ul class="alternate" type="square">
	<li>yes, I want the Java source code as part of commons - maths, source code is why I use Apache.</li>
	<li>there is no trapping of max evaluations exception TooManyEvaluationsException line 833</li>
	<li>I am struggling with starting points, and this may be an issue with the original algorithm. If a starting poin is given with a value between lower bound and lower bound + trust region, the value is evaluated at lower bound + trust region. But if the starting point is at lower bound, it is evaluated at lower bound. This is important for me because I am using a good starting point from a GA method, so I want that exact starting point to be used in the initial derivative calculations.</li>
</ul>


<p>I am using a GA based method, followed by CMAES and/or BOBYQA. I generally find BOBYQA better than CMAES, but not so much if the function does not have smooth derivatives.</p>

<p>BTW, I find CMAES not good at all with bounds, and it looks like CMAES java code is not using the latest thinking.</p></comment><comment id="13093703" author="essence" created="Tue, 30 Aug 2011 14:04:11 +0100"><p>I'm finding my way around this....</p>

<p>The fortran has:</p>

<p>     W(JSL)=XL(J)-X(J)<br/>
      W(JSU)=XU(J)-X(J)<br/>
      IF (W(JSL) .GE. -RHOBEG) THEN<br/>
          IF (W(JSL) .GE. ZERO) THEN<br/>
              X(J)=XL(J)<br/>
              W(JSL)=ZERO<br/>
              W(JSU)=TEMP<br/>
          ELSE<br/>
              X(J)=XL(J)+RHOBEG<br/>
              W(JSL)=-RHOBEG<br/>
              W(JSU)=DMAX1(XU(J)-X(J),RHOBEG)<br/>
          END IF<br/>
      ELSE IF (W(JSU) .LE. RHOBEG) THEN<br/>
          IF (W(JSU) .LE. ZERO) THEN<br/>
              X(J)=XU(J)<br/>
              W(JSL)=-TEMP<br/>
              W(JSU)=ZERO<br/>
          ELSE<br/>
              X(J)=XU(J)-RHOBEG<br/>
              W(JSL)=DMIN1(XL(J)-X(J),-RHOBEG)<br/>
              W(JSU)=RHOBEG<br/>
          END IF<br/>
      END IF</p>


<p>so the original also has this problem, and resets X(J) in the line</p>

<p>              X(J)=XL(J)+RHOBEG</p>

<p>It is non-trivial to change this behaviour, i fear.</p>

<p>Any thoughts? It is quite common to try a local minimization starting from a good points from a stochastic minimization. Or else do some local minimization as a stochastic operator. See for example genoud.</p>

<p>I will investigate some more.</p></comment><comment id="13094598" author="erans" created="Wed, 31 Aug 2011 16:04:33 +0100"><blockquote>
<p>there is no trapping of max evaluations exception TooManyEvaluationsException line 833</p></blockquote>

<p>Indeed, that's intended behaviour: The user sets the limit, and must catch the exception if he wants to perform something instead of letting the application abort.</p>

<p>As for changing the "qualitative" behaviour of the algorithm itself, we are not there yet.<br/>
This (Java) code is brand-new and in a state of flux. You are very much welcome to help make it more Java-like: The main task is to figure out how to replace the big "switch" statements (i.e. a set of disguised "goto"s) into a sequence of method calls.</p></comment><comment id="13097913" author="essence" created="Tue, 6 Sep 2011 12:39:51 +0100"><p>I've found what i think is a bug, no doubt arising from the change to zero based indexing.</p>

<p>Line 541 should read:</p>

<p>                      curv = hq.getEntry((j + 1 + (j <ins>1) * (j</ins> 1)) / 2 - 1);</p>

<p>It is clear that, when this loop is encountered with j=0, the original code:</p>

<p>                        curv = hq.getEntry((j + j * j) / 2 - 1);</p>

<p>will cause an array out of bounds exception.</p>

<p>As far as i can make out, it is indexing the diagonal elements of the second derivative matrix.</p>

<p>There may be a similar bug in line 1777, but I think I wexercise this code and have not had an exception. Worth checking.</p>

</comment><comment id="13097966" author="erans" created="Tue, 6 Sep 2011 14:01:27 +0100"><p>You are right that there is a bug, but comparing with the original Fortran, I think that the line should rather read:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
curv = hq.getEntry((j + j * j) / 2);
</pre>
</div></div>
<p>Unfortunately, this statement is in a code path that is not explored by the current unit tests.</p>

<p>By the way, when writing code excerpts here, don't forget to enclose them within the appropriate tag:</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>{code}
  // Code goes here
{code}
</pre>
</div></div>
<p>Otherwise it can get scrambled...</p>

<p>For the other line, I have no idea.</p></comment><comment id="13097973" author="erans" created="Tue, 6 Sep 2011 14:07:48 +0100"><p>Fixed first reported bug in revision 1165656. Thanks.</p></comment><comment id="13098060" author="essence" created="Tue, 6 Sep 2011 15:59:43 +0100"><p>let me think.</p>

<p>Assume hq is a lower triangular matrix, stored in order of columns.</p>

<p>So, using a 1-index, we have</p>

<p>hq(1) is mat(1,1)<br/>
hq(3) is mat(2,2)<br/>
hq(6) is mat(3,3) etc.</p>

<p>So in 1-index, the diagonal element of the j'th row is</p>

 <div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
h((j + j*j)/2)
</pre>
</div></div>

<p>as in the Fortran</p>

<p>So in 0-index, we have</p>

<p>hq(0) is mat(0,0)<br/>
hq(2) is mat(1,1)<br/>
hq(5) is mat(2,2)</p>



<p>So the diagonal element is given by </p>

<p>((j+1) + (j + 1) * ( j+ 1))/2 - 1</p>

<p>and I think</p>

<p>(j + j*j)/2</p>

<p>is incorrect.</p>

<p>I'm pretty sure about this - I do a lot of work with triangular matrices.</p>

<p>Try another test - look at the last diagonal element - when j is n - 1, then the index is (n + n*n)/2 -1 which is n*(n+1)/2 - 1, which is compatible with the dimension when declared, n*np/2.</p>

</comment><comment id="13098064" author="essence" created="Tue, 6 Sep 2011 16:03:18 +0100"><p>forgot to close the cod tag, can't see where to edit my comment...</p>

<p>What I meant was </p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">

h((j + j*j)/2)

</pre>
</div></div></comment><comment id="13098079" author="sebb@apache.org" created="Tue, 6 Sep 2011 16:21:25 +0100"><p>Hover over the comment you want to edit; there will be an edit icon in the top rhs of the grey box.</p></comment><comment id="13098196" author="essence" created="Tue, 6 Sep 2011 18:40:48 +0100"><p>I've checked line 1777 carefully and compared the logic with the Fortran, and it looks OK. I haven't checked line 1812.</p>

<p>Note - it is well known that correcting a bug is likely to create a new bug, and if there is a bug in one area of code, there is likely to be a bug in similar areas. Also, incorrect indexing of the second derivative matrix may not cause an exception, but may simply make the algorithm perform less well. So it's worth a few more eyes to look at indexing of hq and check it.</p></comment><comment id="13098220" author="essence" created="Tue, 6 Sep 2011 18:52:48 +0100"><p>Let me be clear - revision 1165656 is incorrect, IMHO.</p></comment><comment id="13098247" author="erans" created="Tue, 6 Sep 2011 19:26:38 +0100"><p>OK, I trust you <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p>

<p>There were many other cases of matrices disguised as vectors. This is the last one, I think, which I left for the end because of the tricky indexing.<br/>
So, instead of the current line 236:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">final</span> ArrayRealVector hq = <span class="code-keyword">new</span> ArrayRealVector(n * np / 2);
</pre>
</div></div>
<p>I'd like to have:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">final</span> Array2DRowRealMatrix hq = <span class="code-keyword">new</span> Array2DRowRealMatrix(n, n);
</pre>
</div></div>
<p>Would you like to provide the patch with the necessary changes (1d to 2d indexing)?</p></comment><comment id="13098448" author="essence" created="Wed, 7 Sep 2011 00:05:09 +0100"><p>No I would not!</p>

<p>I do a lot of work with positive definite symmetric matrices, and I ALWAYS store and manipulate them as upper (or lower) triangular matrices stored as a vector or 1D array. This is the best way to do it, and nothing would motivate me to make a retrograde step and store symmetric matrices as a matrix or 2D array (unless maybe underlying storages was a 1 D array, and even then I would have grave misgivings).</p>

<p>I have written a lot of symmetric matrix code, and it ALWAYS outperforms any Java library I can find, simply because I use the proper 1D array form of storage. Plus i do a bit of loop unrolling etc etc but that is another story.</p>

<p>I first looked at code provided by Prof Powell back in the early 1980's, his rank one (or was it rank two) cholesky factor update, and no doubt this has influenced my tendency to always store upper (or lower) triangular matrices as 1D arrays.</p>

<p>I even hate it when there is a special class for symmetric matrices, and it has a last step which puts the lower triangular elements equal to the upper triangular elements. No, don't do it, do it properly!</p>

<p>In most of my application code, cholesky factorisation and back substitution are the bottlenecks. I do tens of thousands of back substitutions.</p>

<p>Now, if there was a symmetric matrix class with an underlying storage of a 1D array, and some suitable get and set functions, you might persuade me, so long as the get and set were just utilities to be used in non critical parts of the code.</p>

<p>Store a symmetric matrix as a 2d array? No, never, no!</p>

<p>ps soory about the capitals. But you may note I feel strongly. It is why all Java libraries I have looked at (including apache commons maths) suck for symmetric matrices, and i had to write my own.</p>

<p>It is late, and I may be wrong, but I think LAPACK symmetric code (or is it BLAS?) stores symmetric matrics as 1D triangular arrays.</p></comment><comment id="13098799" author="essence" created="Wed, 7 Sep 2011 10:22:17 +0100"><p>Sorrt for saying the same thing 3 times! I'm still finding my way around here, although I intend to post very rarely - I am a user of Apache rather than a contributor, unless there is something critical to which I can provide some help.</p></comment><comment id="13098967" author="erans" created="Wed, 7 Sep 2011 15:05:05 +0100"><blockquote>
<p>I have written a lot of symmetric matrix code, and it ALWAYS outperforms any Java library I can find, simply because I use the proper 1D array form of storage.</p></blockquote>

<p>The point is that this issue deals with an optimization algorithm; not how to properly store a symmetric matrix. Algorithms that <em>use</em> matrices should not have to re-implement matrix operations.</p>

<p>A matrix represented by a "...Matrix" object certainly will help in understanding what the BOBYQA code does and how to further adapt it to the Java programming style.</p>

<p>Your knowledge might be a useful contribution (on the "dev" ML) to the discussion on how to improve the design and efficiency of the various matrix classes. Bringing some of your concrete arguments could lead to the creation of an efficient "SymmetricMatrix" to be used in this algorithm.</p></comment><comment id="13099061" author="essence" created="Wed, 7 Sep 2011 17:08:27 +0100"><p>Various responses, then i'm out!</p>

<p>a) you have no idea how grateful I am to you and others for the whole set of apache commons maths code</p>

<p>b) I use the code for end user applications</p>

<p>c) if it ain't broke, don;t fix it - so my main concern at present is finding any bugs</p>

<p>d) if you want to redesign Powell's code, using other existing apache code, good luck! It will not be easy, and will introduce bugs, and will take some time to settle down. There may be better ways to use your skills and effort.</p>

<p>e) surely the main priority is to create a java BOBYQA which is robust and is used. Adapting it to conform to some pre-existing or debatable style is surely secondary?</p>

<p>f) yes, a nice symmetric matrix class with some suitable algorithms would be nice.</p>

<p>g) I am new to apache, I look around for a lot of mathematical library java code, there is a lot out there, I use for example JMetal for multi objective optimisation. I have looked at jama. I have tried out JCuda. Etc etc. What makes me choose a particular package? Flexibility, simplicity, best of breed algorithms, easy to understand, easy to extend. Now, coming back to BOBYQA, it is complex enough that I will probably never attempt to understand or modify it. So I will just take it as a black box and hope it works. No doubt some other algorithm will appear in a year or two, and some good person like your self will also modify it. BOBYQA is complex, and I leave it to the experts, and will leave well alone unless I have studied it full time for 6 months or more and know every detail. Not going to happen!</p>

<p>h) I have already moved on and thinking about hybrid quasi newton or radial basis function/genetic algorithm approaches, but will leave further study to next year.</p>

<p>i) Oh yes, the one thing I could not find any Java code for was a BesselK function of second (or third?) order, used to define a Matern function. That could be a useful extension to apache special functions, more useful work than 'prettifying' a complex algorithm like BOBYQA.</p>

<p>j) Hope you like robust debates! But I fear I am finished here, got to move on to some more application oriented development.</p>

<p>k) look me up on LinkedIn</p>
</comment><comment id="13099276" author="docdwo" created="Wed, 7 Sep 2011 21:19:09 +0100"><blockquote>
<p>I have written a lot of symmetric matrix code, and it ALWAYS outperforms any Java library I can find, simply because I use the proper 1D array form of storage.</p></blockquote>

<p>A previous version of the code (attached as version 0.4) directly uses 1D arrays instead of Matrices and is definitely faster. But here in CM the focus is to produce<br/>
code which is easily understandable. This way we have a chance to understand and improve the algorithm itself. If performance of the optimization algo  is important <br/>
(which in many applications is not the case because "interesting" cost functions are normally expensive to evaluate) then you could call the C-version of <br/>
BOBYQA via JNI which gives you a performance boost of factor 6-10. This is possible still using the CM interfaces and when the cost function<br/>
is implemented in Java.  </p>
</comment><comment id="13132127" author="erans" created="Thu, 20 Oct 2011 23:27:26 +0100"><p>Hi Dietmar.</p>

<p>Could you please have a look at revision 1185917?<br/>
I'm worried that this seems like a sensitivity to the limited precision of the floating point representation of numbers.<br/>
I recall that you mentioned you had detected this kind of behaviour.<br/>
I think that, if this is intended behaviour, its rationale should be documented; otherwise, one can only wonder why a logically equivalent statement might break the algorithm.<br/>
However, I'd prefer to think that the unit tests are too stringent, i.e. that the mathematical algorithm is actually robust and that the the tolerance in the failing unit tests should be adapted to take into account the limited precision. Or probably even better: that it would be possible to detect that the numerical procedure is in trouble (due to a too low tolerance) and throw an appropriate exception instead of fail after exhausting the evaluations counter (there was a similar problem in issue <a href="https://issues.apache.org/jira/browse/MATH-631" title="&quot;RegulaFalsiSolver&quot; failure" class="issue-link" data-issue-key="MATH-631"><del>MATH-631</del></a>).</p>

<p>Equally worrisome is the fact that not all the branches are covered by the "baseline" unit tests, so that my inserting bugs in statements there will go unnoticed! <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/sad.gif" height="16" width="16" align="absmiddle" alt="" border="0"/><br/>
Do you have ideas on how to increase the coverage (in a controlled way)?</p></comment><comment id="13132661" author="docdwo" created="Fri, 21 Oct 2011 14:26:14 +0100"><p>Hi Gilles,<br/>
what do you mean with "logically equivalent"? Computers cannot perform exact arithmetic,<br/>
there is always a rounding error, which can accumulate differently when you choose different<br/>
(but mathematically equivalent) algorithms. See for instance <a href="http://en.wikipedia.org/wiki/Numerical_stability" class="external-link" rel="nofollow">http://en.wikipedia.org/wiki/Numerical_stability</a>.<br/>
The existing unit tests were initially designed by me to detect fortran/java conversion errors.<br/>
After the initial conversion phase - when we try to "beautify" the algorithm by using CM Matrix<br/>
functionality we can loosen the accuracy requirements - which seems ok, as long as we maintain<br/>
the applicability to real problems. If we run into real problems, perhaps the underlying CM matrix<br/>
function implementation needs a redesign to increase accuracy, other algos would then also profit from<br/>
an improvement here.  </p>

<p>The unit test problems are quite artificial, which could explain<br/>
their limited coverage. I see two options to improve coverage:<br/>
1) Understand why some parts of the code is not covered and design unit tests using this knowledge.<br/>
This should be done by researchers in the area of optimization algorithms - or by the original<br/>
author M. Powell. <br/>
2) Collect practical applications of the algo by users of CM. Check their coverage and add a unit test<br/>
if a newly covered code section is detected. </p></comment><comment id="13132762" author="erans" created="Fri, 21 Oct 2011 16:47:19 +0100"><p>"logically equivalent" == "mathematically equivalent"</p>

<p>What I'm asking is whether the test failures are <em>meaningful</em>.<br/>
I understand that one cannot expect the numbers to be the same all through the last decimal places when reordering some operations. When such a case arises, we should probably increase the tolerances so that the test passes.<br/>
But I'm wondering whether it is normal that reordering should lead to an increase of the number of evaluations.</p>

<p>I think that the accuracy thresholds should take rounding into account, in the sense that the results of two logically/mathematically equivalent computations should be considered equal (unless there is an intrinsic feature of the algorithm causing "really" different results, in which case a comment should make it clear).<br/>
In this instance,</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
 a + 2 * dx
</pre>
</div></div>
<p>and</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
 a + dx + dx
</pre>
</div></div>
<p>give different results.<br/>
One explanation could be that "a + dx" is still "a". But IMO, that means that the algorithm is fragile: An addition was meant but nothing has actually happened. Hence, I'd tend to say that further computations are doubtful...<br/>
That's what I mean by "detect that the numerical procedure is in trouble"; the input data (e.g. tolerance value) leads it to ineffectiveness, which should be detected and reported as such.</p>

<p>In fact, I thought that the unit tests came from an original test suite used by BOBYQA's author! Does such a suite exist?<br/>
Alternatively, (related to your point 2), we can try and set up our own suite using "standard" problems; there has been some attempt in this sense with the "BatteryNISTTest" class introduced recently. This class already led to exercising a code path not covered by the existing tests; however, I was hoping that someone would be more systematic in the selection of a test suite of "well-known" (by the optimization community) problems.<br/>
Of course, this is going back to the discussion we had a few weeks ago: Do we wait for a hypothetical expert, or do we do something now?</p></comment><comment id="13132891" author="docdwo" created="Fri, 21 Oct 2011 19:19:46 +0100"><p>&gt; from an original test suite used by BOBYQA's author! <br/>
No, they are derived from the CMA-ES testsuite which itself was derived from samples from Nikolaus Hansen (the author of CMA-ES). Nikolaus Hansen did quite extensive testing because of the stochastic nature of CMA-ES. I have no objections to loosen the accuracy thresholds and to add "systematic" tests. Regarding the<br/>
"hypothetical expert" we perhaps have to actively search for one - as far as I remember there were some guys in south america extending BOBYQA at the FORTRAN level. The problem is to find someone familiar with unit tests and the concepts behind BOBYQA. Perhaps we can raise interest at some university to work with us?</p></comment><comment id="13134507" author="erans" created="Mon, 24 Oct 2011 22:22:53 +0100"><p>Anybody willing to help is welcome!<br/>
Maybe Mike Powell could provide some unit tests <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/help_16.gif" height="16" width="16" align="absmiddle" alt="" border="0"/>.<br/>
Can you contact the people in South America?</p>

<p>Do you have an idea on how to actively search for an expert? <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/><br/>
I assume that telling that we try to rewrite an algorithm in Java will not look very exciting...</p></comment><comment id="13135998" author="docdwo" created="Wed, 26 Oct 2011 15:05:19 +0100"><p>Wrote a letter to Prof. Pilotta, one of the authors of <a href="http://www.scielo.br/pdf/cam/v30n1/09.pdf" class="external-link" rel="nofollow">http://www.scielo.br/pdf/cam/v30n1/09.pdf</a>.<br/>
Commented on <a href="http://forum.openopt.org/viewtopic.php?pid=1422#p1422" class="external-link" rel="nofollow">http://forum.openopt.org/viewtopic.php?pid=1422#p1422</a> referring to <a href="https://issues.apache.org/jira/browse/MATH-621" title="BOBYQA is missing in optimization" class="issue-link" data-issue-key="MATH-621">MATH-621</a>.</p></comment><comment id="13209369" author="erans" created="Thu, 16 Feb 2012 14:04:50 +0000"><p>No further work will be achieved before release 3.0: Postponing.</p></comment><comment id="13420242" author="tn" created="Sun, 22 Jul 2012 18:14:00 +0100"><p>Findbugs reports a missing break statement in the BOBYQAOptimizer at line 1880. In case it is intended, it should be documents in the code.</p></comment><comment id="13420339" author="erans" created="Sun, 22 Jul 2012 22:35:31 +0100"><p>As you can figure out from reading this issue, there is a lot of work to make this code readable and maintainable.<br/>
The "missing break" is most probably intended, but the code should not be written that way nevertheless; so I would refrain adding comments on constructs that should anyways be refactored. I much prefer that FindBugs keeps reminding us that this class is <em>not</em> representative of Commons Math coding standards.</p></comment><comment id="13420456" author="tn" created="Mon, 23 Jul 2012 07:14:56 +0100"><p>I am perfectly aware of this, I just wanted to put a pointer here so it's not missed.</p></comment></comments><issuelinks><issuelinktype id="12310010"><name>Incorporates</name><outwardlinks description="incorporates"><issuelink><issuekey id="12390589">MATH-196</issuekey></issuelink></outwardlinks></issuelinktype><issuelinktype id="10030"><name>Reference</name><outwardlinks description="relates to"><issuelink><issuekey id="12677282">MATH-1057</issuekey></issuelink></outwardlinks></issuelinktype></issuelinks><attachments><attachment id="12486585" name="BOBYQA.math.patch" size="161392" author="docdwo" created="Fri, 15 Jul 2011 11:38:32 +0100"/><attachment id="12486611" name="BOBYQA.v02.math.patch" size="161781" author="docdwo" created="Fri, 15 Jul 2011 15:04:57 +0100"/><attachment id="12490769" name="BOBYQAOptimizer.java.patch" size="3302" author="docdwo" created="Thu, 18 Aug 2011 09:23:13 +0100"/><attachment id="12490422" name="BOBYQAOptimizer0.4.zip" size="27017" author="docdwo" created="Mon, 15 Aug 2011 12:26:38 +0100"/><attachment id="12486645" name="bobyqa.zip" size="39932" author="docdwo" created="Fri, 15 Jul 2011 18:33:29 +0100"/><attachment id="12490335" name="bobyqa_convert.pl" size="785" author="erans" created="Sat, 13 Aug 2011 12:34:04 +0100"/><attachment id="12488351" name="bobyqaoptimizer0.4.zip" size="132065" author="docdwo" created="Sun, 31 Jul 2011 13:00:39 +0100"/><attachment id="12486742" name="bobyqav0.3.zip" size="39956" author="docdwo" created="Sun, 17 Jul 2011 00:13:17 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>8.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Fri, 15 Jul 2011 13:04:25 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2206</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>11072</customfieldvalue></customfieldvalues></customfield></customfields></item><item><title>[MATH-620] multiplication of infinity</title><link>https://issues.apache.org/jira/browse/MATH-620</link><project id="12310485" key="MATH">Commons Math</project><description><p>Take the following testcase </p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
Assert.assertEquals(neginf, inf* neginf, <span class="code-object">Double</span>.MIN_VALUE);  <span class="code-comment">// &lt;--Passes ordinary <span class="code-object">double</span>
</span>Assert.assertEquals(<span class="code-keyword">new</span> Complex(neginf, 0), <span class="code-keyword">new</span> Complex(inf, 0).multiply(<span class="code-keyword">new</span> Complex(neginf, 0)));<span class="code-comment">// &lt;-- Fail only real parts no imaginary parts </span>
</pre>
</div></div>

<p>The outcome of multiply is Complex.INF if one part is infinity.<br/>
why not simply compute the multiplication and thats is?</p></description><environment/><key id="12514033">MATH-620</key><summary>multiplication of infinity</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="2">Won't Fix</resolution><assignee username="-1">Unassigned</assignee><reporter username="aploese">Arne Plöse</reporter><labels>
                    </labels><created>Thu, 14 Jul 2011 09:58:36 +0100</created><updated>Mon, 4 Mar 2013 18:57:30 +0000</updated><resolved>Sun, 2 Oct 2011 22:16:38 +0100</resolved><version>3.0</version><due/><votes>0</votes><watches>0</watches><comments><comment id="13065132" author="aploese" created="Thu, 14 Jul 2011 10:08:59 +0100"><p>This goes also wrong:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
        Assert.assertEquals(<span class="code-keyword">new</span> Complex(neginf, nan), <span class="code-keyword">new</span> Complex(0,
inf).multiply(<span class="code-keyword">new</span> Complex(0, inf)));<span class="code-comment">// &lt;-- Fail</span>
</pre>
</div></div>
<p>the result is the output of octave - so I would expect the same.</p>


<p>Am Donnerstag, den 14.07.2011, 08:58 +0000 schrieb Arne Plöse (JIRA): </p>

</comment><comment id="13082183" author="psteitz" created="Wed, 10 Aug 2011 07:42:14 +0100"><p>I recommend WONT_FIX.  Looks to me like the behavior matches the javadoc and the current contracts are reasonable, IMO.  </p></comment><comment id="13082219" author="aploese" created="Wed, 10 Aug 2011 09:07:43 +0100"><p>evaluate this testcase:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
    @Test
    <span class="code-keyword">public</span> void testMultiplyInf() {
        Complex z = <span class="code-keyword">new</span> Complex(1, neginf);
        Complex w = z.multiply(z);
        Assert.assertEquals(w.getReal(), neginf, 0);
        Assert.assertEquals(w.getImaginary(), neginf, 0);
        Assert.assertEquals(w, z.divide(Complex.ONE.divide(z)));
    }
</pre>
</div></div>
<p>the result should be -inf -infi but actually is inf + infi ...<br/>
The division looks also broken...</p></comment><comment id="13096432" author="erans" created="Fri, 2 Sep 2011 23:24:02 +0100"><p>These</p>
<blockquote>
<p>Assert.assertEquals(w.getReal(), neginf, 0);<br/>
Assert.assertEquals(w.getImaginary(), neginf, 0);</p></blockquote>
<p>behave as intended: all infinities are mapped to a single "point at infinity" (chosen to be "INF" a.k.a. (+inf, +inf)), which IIRC is a way to deal with the infinite number of infinities along all the directions in the complex plane.</p>

<p>This one</p>
<blockquote>
<p>Assert.assertEquals(w, z.divide(Complex.ONE.divide(z)));</p></blockquote>
<p>looks wrong indeed.</p></comment><comment id="13096444" author="erans" created="Fri, 2 Sep 2011 23:39:33 +0100"><p>I've created a new ticket for the above: <a href="https://issues.apache.org/jira/browse/MATH-657" title="Division by zero" class="issue-link" data-issue-key="MATH-657"><del>MATH-657</del></a></p></comment><comment id="13097118" author="erans" created="Mon, 5 Sep 2011 11:36:55 +0100"><p>It would be helpful that you construct a complete unit test that compares Commons Math with Octave.</p>

<p>Also, there is a discussion, on the "dev" ML (cf. thread with subject "Complex division"), about how operations in "Complex" should behave. Mentioning your problems and requirements might contribute to deciding which way to go.</p></comment><comment id="13097155" author="erans" created="Mon, 5 Sep 2011 15:21:11 +0100"><p>Another bug (IMO) in CM:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
Complex infInf = <span class="code-keyword">new</span> Complex(<span class="code-object">Double</span>.POSITIVE_INFINITY, <span class="code-object">Double</span>.POSITIVE_INFINITY);
Assert.assertTrue(infInf.multiply(infInf).isInfinite());
</pre>
</div></div>
<p>succeeds, but the formula would have produced "NaN" in the real part.<br/>
Octave computes:</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>NaN + Infi
</pre>
</div></div>
<p>Added unit test (with alternative expectation) in revision 1165296.</p></comment><comment id="13098016" author="aploese" created="Tue, 6 Sep 2011 15:06:00 +0100"><p>Here is the comparision between commons math and octave.<br/>
I hope this what you want Gilles <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.gif" height="16" width="16" align="absmiddle" alt="" border="0"/>.</p></comment><comment id="13101645" author="erans" created="Sat, 10 Sep 2011 00:27:58 +0100"><p>It's on the right track, but the test method stops as soon as it encounters a difference; thus, we cannot have a complete overview of all the differences with Octave.</p></comment><comment id="13101684" author="erans" created="Sat, 10 Sep 2011 01:30:09 +0100"><p>See what I mean in the attached file. You could readily apply the same layout to new test classes for "subtract", "multiply" and "divide" (which were in "test4" in your file).</p></comment><comment id="13109786" author="aploese" created="Wed, 21 Sep 2011 20:08:00 +0100"><p>added test cases for sud/mul/div<br/>
fixed sign detection (readable output)<br/>
replaced Complex.valueOf with new Double(r, i)</p></comment><comment id="13113944" author="erans" created="Sat, 24 Sep 2011 11:04:12 +0100"><p>Hi.</p>

<ol>
	<li>I don't really understand the necessity of "getSign". Couldn't you use "Math.signum" for the same<br/>
purpose?</li>
	<li>It would better to merge the assertions on the signs within the main test because, having them separate forces the operation (add, multiply, ...) to be performed 3 times. Really it is the same test (two results must be equal, sign included).</li>
	<li>I don't understand the statement with "Complex.valueOf".</li>
</ol>


<p>Did you notice the <a href="https://issues.apache.org/jira/browse/MATH-667" title="Representations of the complex numbers" class="issue-link" data-issue-key="MATH-667">MATH-667</a> issue?</p></comment><comment id="13114528" author="aploese" created="Mon, 26 Sep 2011 09:35:22 +0100"><p>1. Math.signum: octave makes a distinction between +0 and -0, from the javadocs Math.signum does not.<br/>
2. No real need (just more verbose if a case failed) you can collapse them in one test case.<br/>
3. valueOf return Complex.NAN id a part is NAN (same for INF) </p></comment><comment id="13114607" author="erans" created="Mon, 26 Sep 2011 12:40:43 +0100"><blockquote><p>Math.signum: octave makes a distinction between +0 and -0, from the javadocs Math.signum does not.</p></blockquote>

<p>This is actually from the <tt>Math.signum</tt> Javadoc:</p>
<div class="panel" style="border-width: 1px;"><div class="panelContent">
<p><span class="error">&#91;...&#93;</span></p>
<ul>
	<li>If the argument is positive zero or negative zero, then the result is the same as the argument.</li>
</ul>
</div></div></comment><comment id="13119072" author="erans" created="Sun, 2 Oct 2011 22:16:38 +0100"><p>See <a href="https://issues.apache.org/jira/browse/MATH-667" title="Representations of the complex numbers" class="issue-link" data-issue-key="MATH-667">MATH-667</a> for an alternative solution.</p></comment></comments><attachments><attachment id="12493151" name="ComplexOctaveTest.java" size="10387" author="aploese" created="Tue, 6 Sep 2011 15:06:00 +0100"/><attachment id="12495425" name="arne_tests.zip" size="6245" author="aploese" created="Wed, 21 Sep 2011 20:08:00 +0100"/><attachment id="12493876" name="arne_tests.zip" size="2493" author="erans" created="Sat, 10 Sep 2011 01:30:09 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>3.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 10 Aug 2011 06:42:14 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2207</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160429</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-619] ADJUSTED R SQUARED INCORRECT IN REGRESSION RESULTS</title><link>https://issues.apache.org/jira/browse/MATH-619</link><project id="12310485" key="MATH">Commons Math</project><description><p>I forgot to cast to double when dividing two integers:</p>

<p>            this.globalFitInfo<span class="error">&#91;ADJRSQ_IDX&#93;</span> = 1.0 - <br/>
                    (1.0 - this.globalFitInfo<span class="error">&#91;RSQ_IDX&#93;</span>) *<br/>
                    (  nobs / ( (nobs - rank)));<br/>
Should be<br/>
            this.globalFitInfo<span class="error">&#91;ADJRSQ_IDX&#93;</span> = 1.0 - <br/>
                    (1.0 - this.globalFitInfo<span class="error">&#91;RSQ_IDX&#93;</span>) *<br/>
                    ( (double) nobs / ( (double) (nobs - rank)));</p>

<p>Patch attached.</p></description><environment><p>Java</p></environment><key id="12514014">MATH-619</key><summary>ADJUSTED R SQUARED INCORRECT IN REGRESSION RESULTS</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="gsteri1">greg sterijevski</reporter><labels>
                    </labels><created>Thu, 14 Jul 2011 06:33:27 +0100</created><updated>Sat, 24 Mar 2012 16:16:43 +0000</updated><resolved>Thu, 14 Jul 2011 07:15:50 +0100</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13065077" author="psteitz" created="Thu, 14 Jul 2011 07:15:50 +0100"><p>Fixed in r1146575.  Lets keep the updates (including test cases <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> for RegressionResults on (still open) <a href="https://issues.apache.org/jira/browse/MATH-607" title="Current Multiple Regression Object does calculations with all data incore. There are non incore techniques which would be useful with large datasets." class="issue-link" data-issue-key="MATH-607"><del>MATH-607</del></a>.  We can use separate issues for implementations; but we should keep the updates to RegressionResults attached to that issue.</p></comment></comments><attachments><attachment id="12486407" name="regres" size="1239" author="gsteri1" created="Thu, 14 Jul 2011 06:33:57 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Thu, 14 Jul 2011 06:15:50 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>68104</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60345</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-618] Complex Add and Subtract handle NaN arguments differently, but javadoc contracts are the same</title><link>https://issues.apache.org/jira/browse/MATH-618</link><project id="12310485" key="MATH">Commons Math</project><description><p>For both Complex add and subtract, the javadoc states that</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
     * If either <span class="code-keyword">this</span> or &lt;code&gt;rhs&lt;/code&gt; has a NaN value in either part,
     * {@link #NaN} is returned; otherwise Inifinite and NaN values are
     * returned in the parts of the result according to the rules <span class="code-keyword">for</span>
     * {@link java.lang.<span class="code-object">Double</span>} arithmetic
</pre>
</div></div>

<p>Subtract includes an isNaN test and returns Complex.NaN if either complex argument isNaN; but add omits this test.  The test should be added to the add implementation (actually restored, since this looks like a code merge problem going back to 1.1).</p></description><environment/><key id="12513980">MATH-618</key><summary>Complex Add and Subtract handle NaN arguments differently, but javadoc contracts are the same</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="psteitz">Phil Steitz</reporter><labels>
                    </labels><created>Wed, 13 Jul 2011 21:23:43 +0100</created><updated>Sat, 24 Mar 2012 16:16:27 +0000</updated><resolved>Thu, 14 Jul 2011 07:08:54 +0100</resolved><version>1.2</version><version>2.0</version><version>2.1</version><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13065070" author="psteitz" created="Thu, 14 Jul 2011 07:08:54 +0100"><p>Fixed in r1146573</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>68108</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60346</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-617] "ComplexFormat" when the imaginary part is equal to "1" (as a formatted string)</title><link>https://issues.apache.org/jira/browse/MATH-617</link><project id="12310485" key="MATH">Commons Math</project><description><p>Currently, for the instance </p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
Complex(1, 1)
</pre>
</div></div>
<p>the "format" method in "ComplexFormat" outputs</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>1 + 1i
</pre>
</div></div> 
<p>Shall I modify the code so that it will output a nicer</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>1 + i
</pre>
</div></div>
<p>instead?</p></description><environment/><key id="12513849">MATH-617</key><summary>"ComplexFormat" when the imaginary part is equal to "1" (as a formatted string)</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="erans">Gilles</assignee><reporter username="erans">Gilles</reporter><labels>
                    </labels><created>Tue, 12 Jul 2011 22:31:31 +0100</created><updated>Sat, 24 Mar 2012 16:16:34 +0000</updated><resolved>Thu, 14 Jul 2011 16:54:58 +0100</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13064682" author="psteitz" created="Wed, 13 Jul 2011 17:37:00 +0100"><p>Testing for equality modulo configured number format precision, I assume?  There may be a miniscule performance impact to do the test, but I don't think that should be a showstopper for toString and I agree the modified output looks nicer, so +1 for this change.</p></comment><comment id="13065324" author="erans" created="Thu, 14 Jul 2011 16:29:23 +0100"><p>I've committed the code in revision 1146755.</p>

<p>Please have a look; I have no idea of the use of "FieldPosition" in these methods, so this change might screw up some possible usage (although all the tests pass).<br/>
It might well be that your suggestion is less intrusive and faster too...</p></comment><comment id="13065342" author="psteitz" created="Thu, 14 Jul 2011 16:54:58 +0100"><p>Looks great.  The test I was suggesting is what the code is effectively doing and with no performance impact, since the formatting is happening anyway.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 13 Jul 2011 16:37:00 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>68029</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60347</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-616] Wampler Test Data for OLSMultipleRegression</title><link>https://issues.apache.org/jira/browse/MATH-616</link><project id="12310485" key="MATH">Commons Math</project><description><p>The current tests for the OLSMultipleRegression class do not include the Wampler1-4 datasets. This patch (which I will attach) includes the Wampler data.</p>

<p>The test passes on my box after I lower the tolerances from 1.0e-8 to 1.0e-6 for the parameter vector on wampler4 (and 1, I think). </p></description><environment><p>Java</p></environment><key id="12513836">MATH-616</key><summary>Wampler Test Data for OLSMultipleRegression</summary><type id="6" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/requirement.png">Test</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="gsteri1">greg sterijevski</reporter><labels><label>Data</label><label>NIST</label><label>QR</label><label>Wampler</label></labels><created>Tue, 12 Jul 2011 20:03:59 +0100</created><updated>Sat, 24 Mar 2012 16:17:03 +0000</updated><resolved>Wed, 13 Jul 2011 18:29:47 +0100</resolved><version>2.0</version><version>2.1</version><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13064072" author="gsteri1" created="Tue, 12 Jul 2011 20:04:38 +0100"><p>The wampler data...</p></comment><comment id="13064140" author="psteitz" created="Tue, 12 Jul 2011 22:17:23 +0100"><p>There are a lot of formatting changes mixed in with this patch.  Can you please either a) create a separate patch for the formatting changes or b) create a patch with just the new tests.  Thanks.</p></comment><comment id="13064238" author="gsteri1" created="Wed, 13 Jul 2011 00:46:10 +0100"><p>Blame it on Netbeans!!! <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> I must have hit format source... </p>

<p>Hopefully this copy is better! </p></comment><comment id="13064715" author="psteitz" created="Wed, 13 Jul 2011 18:29:47 +0100"><p>Patch applied in r1146147.  Thanks!</p></comment></comments><attachments><attachment id="12486214" name="wamplerdiff" size="37680" author="gsteri1" created="Tue, 12 Jul 2011 20:04:38 +0100"/><attachment id="12486243" name="wamplerdiff2" size="9881" author="gsteri1" created="Wed, 13 Jul 2011 00:46:10 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 12 Jul 2011 21:17:23 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>68152</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60348</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-615] OLSMultipleRegression seems to fail on the Filippelli Data</title><link>https://issues.apache.org/jira/browse/MATH-615</link><project id="12310485" key="MATH">Commons Math</project><description><p>Running the Filipelli data results in an exception being thrown by OLSMutlipleRegression. The exception states that the matrix is singular. <br/>
<a href="http://www.itl.nist.gov/div898/strd/lls/data/Filip.shtml" class="external-link" rel="nofollow">http://www.itl.nist.gov/div898/strd/lls/data/Filip.shtml</a></p>

<p>I have added the data to the OLSMutlipleRegressionTest file. </p>

<p>Unless I screwed something up in the passing of the data, it looks like the QR decomposition is failing.</p></description><environment><p>Java</p></environment><key id="12513813">MATH-615</key><summary>OLSMultipleRegression seems to fail on the Filippelli Data</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="8">Not a Problem</resolution><assignee username="-1">Unassigned</assignee><reporter username="gsteri1">greg sterijevski</reporter><labels><label>Filippelli</label><label>NIST</label><label>OLSMutlipleRegression</label><label>QR</label><label>data</label></labels><created>Tue, 12 Jul 2011 17:08:53 +0100</created><updated>Mon, 4 Mar 2013 18:58:52 +0000</updated><resolved>Sat, 26 Nov 2011 22:13:15 +0000</resolved><version>3.0</version><due/><votes>0</votes><watches>0</watches><comments><comment id="13063969" author="gsteri1" created="Tue, 12 Jul 2011 17:11:27 +0100"><p>The OLSMutlipleRegressionTest changes with Filipelli included... </p></comment><comment id="13068136" author="gsteri1" created="Wed, 20 Jul 2011 03:46:45 +0100"><p>The situation is not as dire as I first thought. The original test I uploaded had a bug which resulted in a singular matrix, correctly. This current test still fails, but the failure occurs with a tolerance of 1.0e-5 for the parameters. </p></comment><comment id="13082161" author="psteitz" created="Wed, 10 Aug 2011 07:12:12 +0100"><p>I am tempted to close this as not a problem.  What do you think, Greg?</p></comment><comment id="13082163" author="gsteri1" created="Wed, 10 Aug 2011 07:17:27 +0100"><p>Yes,  the major issue of singularity was one where I had a bug in the test.</p>


</comment><comment id="13082167" author="gsteri1" created="Wed, 10 Aug 2011 07:21:27 +0100"><p>Do check in the Filipelli test though.</p>

</comment></comments><attachments><attachment id="12487100" name="filippelli2" size="6069" author="gsteri1" created="Wed, 20 Jul 2011 03:46:45 +0100"/><attachment id="12486197" name="tstdiff" size="34018" author="gsteri1" created="Tue, 12 Jul 2011 17:11:27 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 10 Aug 2011 06:12:12 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2208</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160430</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-614] "toString" method for "Complex"</title><link>https://issues.apache.org/jira/browse/MATH-614</link><project id="12310485" key="MATH">Commons Math</project><description><p>Class "Complex" (in package "complex") lacks a "toString()" method.<br/>
<span class="error">&#91;Request from Arne Ploese on the &quot;dev&quot; ML.&#93;</span></p>

<p>I also propose to slightly modify the "format" method in "ComplexFormat" so that the stringified version of "Complex(1, 1)" is "1 + i" instead of "1 + 1i".</p></description><environment/><key id="12513786">MATH-614</key><summary>"toString" method for "Complex"</summary><type id="5" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Wish</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="erans">Gilles</assignee><reporter username="erans">Gilles</reporter><labels>
                    </labels><created>Tue, 12 Jul 2011 14:49:48 +0100</created><updated>Sat, 24 Mar 2012 16:16:41 +0000</updated><resolved>Thu, 18 Aug 2011 14:20:33 +0100</resolved><fixVersion>3.0</fixVersion><due/><votes>1</votes><watches>2</watches><comments><comment id="13063981" author="hdiwan" created="Tue, 12 Jul 2011 17:30:06 +0100"><p>Adds a toString() method to class Complex and an associated test</p></comment><comment id="13064143" author="erans" created="Tue, 12 Jul 2011 22:19:31 +0100"><p>Maybe the "toString" method should only be expected to expose the actual components of the complex number instance, without consideration for "nice" formatting (e.g. printing an "i"): the simplest would thus be:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> <span class="code-object">String</span> toString() {
  <span class="code-keyword">return</span> <span class="code-quote">"("</span> + real + <span class="code-quote">", "</span> + imaginary + <span class="code-quote">")"</span>;
}
</pre>
</div></div>
<p>Hence we don't need special rules for NaN and infinities.</p></comment><comment id="13064460" author="erans" created="Wed, 13 Jul 2011 10:56:47 +0100"><p>Above code added in revision 1145932.<br/>
Is there a case against that implementation?</p></comment><comment id="13064698" author="hdiwan" created="Wed, 13 Jul 2011 18:00:18 +0100"><p>I still feel there's a case to be made for having toString() return the generally-accepted, unambiguous display of a complex number (in this case).</p></comment><comment id="13064875" author="erans" created="Wed, 13 Jul 2011 22:31:03 +0100"><blockquote>
<p>I still feel there's a case to be made <span class="error">&#91;...&#93;</span></p></blockquote>

<p>Which one?</p></comment><comment id="13064881" author="hdiwan" created="Wed, 13 Jul 2011 22:39:46 +0100"><p>The generally-accepted, unambiguous display of a complex number is <span class="error">&#91;real&#93;</span> + <span class="error">&#91;imaginary&#93;</span>i &#8211; see wikipedia or any mathematics textbook for true examples. And that is what I believe toString() should return, as my patch makes it do.</p></comment><comment id="13065195" author="erans" created="Thu, 14 Jul 2011 12:46:55 +0100"><p>My output of "toString" is no more ambiguous than yours, as far as it reflect the internal state of the Complex class instance. And IMO, it is more legible in cases like</p>
<ul>
	<li><tt>a + 1i</tt> vs <tt>(a, 1)</tt></li>
	<li><tt>a + 0i</tt> vs <tt>(a, 0)</tt></li>
	<li><tt>0 + bi</tt> vs <tt>(0, b)</tt></li>
	<li><tt>0 + 0i</tt> vs <tt>(0, 0)</tt></li>
	<li><tt>a + -bi</tt> vs <tt>(a, -b)</tt></li>
</ul>


<p>However, if a majority of people favour your alternative, I'll change it.</p>

<p>Also, please note that you can have full control over the format by using the "ComplexFormat" class which can, for example, output a nice (and generally-accepted)</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre> a - bi
</pre>
</div></div>
<p>instead of</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre> a + -bi
</pre>
</div></div></comment><comment id="13068257" author="aploese" created="Wed, 20 Jul 2011 11:10:45 +0100"><p>What about this:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
    @Override
    <span class="code-keyword">public</span> <span class="code-object">String</span> toString() {
        <span class="code-keyword">if</span> (isNaN) {
            <span class="code-keyword">return</span> <span class="code-object">String</span>.format(<span class="code-quote">"%s + %si"</span>, <span class="code-object">Double</span>.toString(<span class="code-object">Double</span>.NaN), <span class="code-object">Double</span>.toString(<span class="code-object">Double</span>.NaN));
        } 
        
        <span class="code-keyword">if</span> (imaginary == 0.0) {
            <span class="code-keyword">return</span> <span class="code-object">Double</span>.toString(real);
        } 
        
        <span class="code-keyword">if</span> (imaginary &gt; 0) {
            <span class="code-keyword">return</span> <span class="code-object">String</span>.format(<span class="code-quote">"%s + %si"</span>, <span class="code-object">Double</span>.toString(real), <span class="code-object">Double</span>.toString(imaginary));
        } 
        
        <span class="code-keyword">return</span> <span class="code-object">String</span>.format(<span class="code-quote">"%s - %si"</span>, <span class="code-object">Double</span>.toString(real), <span class="code-object">Double</span>.toString(<span class="code-object">Math</span>.abs(imaginary)));
    }
</pre>
</div></div>

<p>testcase:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
    @Test
    <span class="code-keyword">public</span> void testToString() {
        Assert.assertEquals(<span class="code-quote">"NaN + NaNi"</span>, <span class="code-keyword">new</span> Complex(nan, inf).toString());
        Assert.assertEquals(<span class="code-quote">"1.0"</span>, Complex.ONE.toString());
        Assert.assertEquals(<span class="code-quote">"0.0 + 1.0i"</span>, Complex.I.toString());
        Assert.assertEquals(<span class="code-quote">"0.0 - 1.0i"</span>, <span class="code-keyword">new</span> Complex(0.0, - 1.0).toString());
        Assert.assertEquals(<span class="code-quote">"Infinity + Infinityi"</span>, <span class="code-keyword">new</span> Complex(inf, inf).toString());
        Assert.assertEquals(<span class="code-quote">"Infinity - Infinityi"</span>, <span class="code-keyword">new</span> Complex(inf, - inf).toString());
    }
</pre>
</div></div></comment><comment id="13082151" author="psteitz" created="Wed, 10 Aug 2011 07:03:40 +0100"><p>I think the current impl is fine and this issue can be resolved as FIXED.</p></comment><comment id="13082323" author="erans" created="Wed, 10 Aug 2011 14:27:21 +0100"><p>We could wait a few more days. If the contenders do not bring the issue on the ML, I'll resolve it next week...</p></comment></comments><issuelinks><issuelinktype id="10030"><name>Reference</name><outwardlinks description="relates to"><issuelink><issuekey id="12507333">MATH-577</issuekey></issuelink></outwardlinks></issuelinktype></issuelinks><attachments><attachment id="12486199" name="math.patch" size="804" author="hdiwan" created="Tue, 12 Jul 2011 17:30:06 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 12 Jul 2011 16:30:06 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>64733</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60349</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-613] Equivalent of Blas DAXPY</title><link>https://issues.apache.org/jira/browse/MATH-613</link><project id="12310485" key="MATH">Commons Math</project><description><p>In Blas, the method <tt>DAXPY</tt> computes an in-place linear combination of two vectors. More precisely, a call to <tt>DAXPY(a, x, y)</tt> updates vector <tt>y</tt> with the value of <tt>a * x + y</tt>. This can lead to very compact code, which I feel the need for in Commons-Math. However, DAXPY also has its limitations. For example, it cannot perform the other combination <tt>y &lt;- x + a * y</tt>.<br/>
I think it would be useful that <tt>RealVector</tt> had a method for computing <tt>a * this + b * y</tt>, and storing the result in <tt>this</tt>. In the spirit of the <tt>mapToSelf</tt> method, I propose to create two new methods in <tt>Interface RealVector</tt></p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>RealVector map(BivariateRealFunction f, RealVector y)</pre>
</div></div>
<p>and</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>RealVector mapToSelf(BivariateRealFunction f, RealVector y)</pre>
</div></div>
<p>The former would return a new vector <tt>v</tt> such that</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>v[i] &lt;- f(this[i], y[i])}}</pre>
</div></div>
<p>and the latter would update <tt>this</tt>,</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>this[i] &lt;- f(this[i], y[i])</pre>
</div></div>
<p>Emulating <tt>DAXPY</tt> would then simply be a matter of implementing the appropriate bivariate function.<br/>
While we are at it, how about</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>RealVector map(TrivariateRealFunction f, RealVector y, RealVector z)</pre>
</div></div>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>RealVector mapToSelf(TrivariateRealFunction f, RealVector y, RealVector z)</pre>
</div></div></description><environment/><key id="12513654">MATH-613</key><summary>Equivalent of Blas DAXPY</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="celestin">Sébastien Brisard</reporter><labels><label>linear</label><label>vector</label></labels><created>Mon, 11 Jul 2011 12:25:22 +0100</created><updated>Sat, 24 Mar 2012 16:16:26 +0000</updated><resolved>Thu, 28 Jul 2011 00:29:19 +0100</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13063376" author="psteitz" created="Mon, 11 Jul 2011 15:53:23 +0100"><p>I see the value of this based on the linear combination example, so am +0 to add the first two. It might be better, though to s/map/combine in the names.  It might also be good to explicitly name the linear combination example.  Are there other examples likely to be commonly used that anyone can think of?  If not, we should consider adding only the linear combination, since if that is all anyone will use, it will simplify the API to just name and add it.</p>

<p>Regarding the trivariate versions, what exactly are the use cases?</p></comment><comment id="13063391" author="celestin" created="Mon, 11 Jul 2011 16:24:54 +0100"><p>Granted, trivariate versions are far-fetched, and not really needed (if the worst comes to the worst, two calls to the bivariate version should be enough, at least in the linear case).</p>

<p>As for going less general, restricting to a linear combination. I'm all for it, I just got the feeling that the discussion on the forum was leaning towards a more general, function-based approach (which is quite elegant).</p>

<p>If we restrict ourselves to linear combination, I'm not sure I understant your naming suggestion. I guess you speak sed fluently, and are in fact suggesting</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>RealVector combine(double a, double b, RealVector y)</pre>
</div></div>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>RealVector combineToSelf(double a, double b, RealVector y)</pre>
</div></div>

<p>That was my original suggestion, but someone mentioned that in <tt>FunctionUtils</tt>, "combine" really meant "compose multivariate with several univariate", so the above naming might be confusing. Actually, that's the reason why I went for general mapping: for lack of a better name in the linear case...</p>

<p>What do you think of <tt>linearlyCombine</tt> and <tt>linearlyCombineToSelf</tt>? I would personnaly prefer the first (shorter option).</p></comment><comment id="13063406" author="psteitz" created="Mon, 11 Jul 2011 16:48:27 +0100"><p>Sorry, I missed the earlier comment on the name. Regarding whether or not to implement the general version, I would like to know if others have actual use cases in mind.  Ted mentioned in the earlier thread that Colt had a similar API.  I am curious how it was actually used, beyond the canonical linear combination example that led to this suggestion. Can anyone think of practical use cases for the general versions?</p>

<p>Regarding the name, I did mean "combine."  I don't personally see a problem using "combine" here as well as FunctionUtils in the analysis package, as the objects are different.  But if we need to add something, I would add "with" - i.e. "combineWith" and "combineWithSelf."</p>

<p>Don't allow me to prematurely nix the general case, though. I just want some indication that the slightly more complex (hence less approachable) API has enough usefulness to justify it.</p></comment><comment id="13063456" author="celestin" created="Mon, 11 Jul 2011 19:12:29 +0100"><p>I have no experience whatsoever with Colt, but taking the element by element max of two vectors might be an example of use of the more general case (maybe). As for me, I'm happy with the linear case. And I like combine/combineToSelf.</p></comment><comment id="13071590" author="celestin" created="Wed, 27 Jul 2011 08:50:21 +0100"><p>Here is a patch for <tt>combine</tt> and <tt>combineToSelf</tt> (i.e. the linear, bivariate case). File name is <tt><a href="https://issues.apache.org/jira/browse/MATH-613" title="Equivalent of Blas DAXPY" class="issue-link" data-issue-key="MATH-613"><del>MATH-613</del></a>-20110727.patch</tt>.</p></comment><comment id="13071648" author="erans" created="Wed, 27 Jul 2011 11:58:47 +0100"><p>Sorry to be picky but I'm trying that we have a more uniform Javadoc style...<br/>
It would help if you please change comments like this:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
* @param a
*            the weight of {@code <span class="code-keyword">this</span>}
* @param b
*            the weight of {@code y}
* @param y
*            the vector with which {@code <span class="code-keyword">this</span>} is linearly combined
* @<span class="code-keyword">return</span> a vector containing {@code a * <span class="code-keyword">this</span>[i] + b * y[i]} <span class="code-keyword">for</span> all
*         {@code i}
</pre>
</div></div>
<p>into something like this:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
* @param a Weight of {@code <span class="code-keyword">this</span>}.
* @param b Weight of {@code y}.
* @param y Vector with which {@code <span class="code-keyword">this</span>} is linearly combined.
* @<span class="code-keyword">return</span> a vector containing {@code a * <span class="code-keyword">this</span>[i] + b * y[i]} <span class="code-keyword">for</span> all
* {@code i}.
</pre>
</div></div>

<p>I find the second alternative more legible, and it looks "finished".</p>

<p>I.e.</p>
<ol>
	<li>Explanation on the same line as "@param". More balance and less "air".</li>
	<li>End sentences with a period. It's more consistent because if you need more the one sentence, you'll have to add periods anyways.</li>
	<li>Always exactly one space after the "*" character. A big space at the beginning of a line hinders legibility.</li>
</ol>


<p>No, there is no document that documents how the documentation should be formatted. <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/sad.gif" height="16" width="16" align="absmiddle" alt="" border="0"/><br/>
We couldn't agree that it was worth formalizing rules beyond what was recommended by the Sun guidelines!</p></comment><comment id="13071661" author="celestin" created="Wed, 27 Jul 2011 12:35:48 +0100"><p>You <b>should</b> be picky! Thanks for reviewing the code. I updated it according to your comments, hope I didn't forget anything. Best regards,<br/>
Sebastien</p></comment><comment id="13071696" author="erans" created="Wed, 27 Jul 2011 13:50:45 +0100"><blockquote>
<p>You should be picky!</p></blockquote>
<p>So... I think that you forgot to click on "Grant license to ASF for inclusion <span class="error">&#91;...&#93;</span>" when attaching the diff file.</p></comment><comment id="13071736" author="erans" created="Wed, 27 Jul 2011 14:57:57 +0100"><p>The code would be leaner if the loop were implemented once, e.g. in "combine(double,double,double[])", instead of for each overloaded version of "combine". Of course, there would be the penalty of an additional method call, but do you think that it would be noticeable? <span class="error">&#91;Maybe a good example for micro-benchmarking...&#93;</span>.</p></comment><comment id="13071773" author="celestin" created="Wed, 27 Jul 2011 15:49:30 +0100"><p>You're right. I've eliminated as much duplicate code as possible. This is indeed cleaner. Also checked the "Grant license to ASF" button...<br/>
Sorry for the mess.</p></comment><comment id="13071775" author="celestin" created="Wed, 27 Jul 2011 15:51:08 +0100"><p>Also, just noticed that giving the same name to successively submitted files does <b>not</b> override them, so there are three different patches with the same name... I'm even sorrier for the mess.</p></comment><comment id="13071921" author="psteitz" created="Wed, 27 Jul 2011 20:06:51 +0100"><p>Final patch looks good to me, other than missing @throws for the DimensionMismatchExceptions, which we should add.  Thanks for the patch!</p>

<p>Out of curiosity, Sebastian, is it not possible for you to remove attachments that you added yourself (i.e., the earlier versions of the patch?)  This is really a JIRA access control question.</p></comment><comment id="13071939" author="celestin" created="Wed, 27 Jul 2011 20:32:52 +0100"><p>I'm sorry, I really can't find the way to do it. In a previous issue (which is even messier), someone suggested that I should give all patches the same name, but this obviously does not work.<br/>
I'll probably need some time until my proposals are OK at the first attempt. Meanwhile, is there another way to propose patches, and attach the "final" patch only to the JIRA issue?<br/>
Sebastien</p></comment><comment id="13071984" author="psteitz" created="Wed, 27 Jul 2011 21:35:56 +0100"><p>Don't worry at all about this, Sebastien.  I was just curious about what works and what does not.  Just keep the patches coming <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p></comment><comment id="13072100" author="erans" created="Thu, 28 Jul 2011 00:29:19 +0100"><p>Committed in revision 1151665.</p></comment></comments><attachments><attachment id="12487983" name="MATH-613-20110727.patch" size="24299" author="celestin" created="Wed, 27 Jul 2011 15:49:30 +0100"/><attachment id="12487962" name="MATH-613-20110727.patch" size="25750" author="celestin" created="Wed, 27 Jul 2011 12:35:48 +0100"/><attachment id="12487946" name="MATH-613-20110727.patch" size="26206" author="celestin" created="Wed, 27 Jul 2011 08:50:21 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>3.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Mon, 11 Jul 2011 14:53:23 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>66757</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60350</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-612] Optimisation for QRDecomposition, BiDiagonalTransformer and TriDiagonalTransformer</title><link>https://issues.apache.org/jira/browse/MATH-612</link><project id="12310485" key="MATH">Commons Math</project><description><p>QRDecomposition, BiDiagonalTransformer and TriDiagonalTransformer all contain methods that create an empty matrix for population in calculations employing getEntry and setEntry on the matrix.  Methods getEntry and setEntry perform a check to ensure the matrix indices are in bounds.  This overhead of method calls is detrimental within loops that iterate many times.</p>

<p>Methods within QRDecomposition, BiDiagonalTransformer and TriDiagonalTransformer have significantly improved performance over large matrices if, instead of creating an empty RealMatrix and then using getEntry and setEntry, we create a double array for direct access and create a RealMatrix from it at the end.</p></description><environment/><key id="12512976">MATH-612</key><summary>Optimisation for QRDecomposition, BiDiagonalTransformer and TriDiagonalTransformer</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="psteitz">Phil Steitz</assignee><reporter username="joubert">Christopher Nix</reporter><labels><label>patch</label></labels><created>Wed, 6 Jul 2011 13:31:15 +0100</created><updated>Tue, 24 Jul 2012 00:24:42 +0100</updated><resolved>Fri, 14 Oct 2011 22:32:23 +0100</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13127875" author="psteitz" created="Fri, 14 Oct 2011 22:32:23 +0100"><p>Patches applied in r1183504,1183505,1183507</p>

<p>Thanks for the patches!</p></comment></comments><attachments><attachment id="12485418" name="BiDiagonalTransformer.patch" size="4862" author="joubert" created="Wed, 6 Jul 2011 13:32:18 +0100"/><attachment id="12485417" name="QRDecompositionImpl.patch" size="3465" author="joubert" created="Wed, 6 Jul 2011 13:32:18 +0100"/><attachment id="12485419" name="TriDiagonalTransformer.patch" size="3080" author="joubert" created="Wed, 6 Jul 2011 13:32:18 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>3.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Fri, 14 Oct 2011 21:32:23 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2209</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60351</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-611] A fast and stable SVD implementation from JAMA</title><link>https://issues.apache.org/jira/browse/MATH-611</link><project id="12310485" key="MATH">Commons Math</project><description><p>Common numerical stability issues with the current SVD implementation, ie <a href="https://issues.apache.org/jira/browse/MATH-327" title=" Maximal number of iterations (540) exceeded" class="issue-link" data-issue-key="MATH-327"><del>MATH-327</del></a>, <a href="https://issues.apache.org/jira/browse/MATH-383" title="MaxIterationsExceededException in SVD (EigenDecompositionImpl.findEigenVectors ) caused by NaN" class="issue-link" data-issue-key="MATH-383"><del>MATH-383</del></a>, <a href="https://issues.apache.org/jira/browse/MATH-465" title="Incorrect matrix rank via SVD" class="issue-link" data-issue-key="MATH-465"><del>MATH-465</del></a>, <a href="https://issues.apache.org/jira/browse/MATH-583" title="Eigen value and SVD fail on a matrix with InvalidMatrixException while numpy has no problem on the same matrix" class="issue-link" data-issue-key="MATH-583"><del>MATH-583</del></a> can all be solved by co-opting JAMA code that is within the public domain.</p></description><environment/><key id="12512945">MATH-611</key><summary>A fast and stable SVD implementation from JAMA</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="joubert">Christopher Nix</reporter><labels><label>patch</label></labels><created>Wed, 6 Jul 2011 09:29:11 +0100</created><updated>Sat, 10 Nov 2012 17:55:05 +0000</updated><resolved>Wed, 20 Jul 2011 13:16:00 +0100</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13060405" author="joubert" created="Wed, 6 Jul 2011 09:33:38 +0100"><p>Attached SingularValueDecomposition.java containing JAMA code wrapped into Commons Math API.</p></comment><comment id="13060433" author="mikl" created="Wed, 6 Jul 2011 10:24:21 +0100"><p>Thanks a lot for adding this. I think that we should document in the comments to the code that it is based on JAMA. </p>

<p>We could maybe also contact JAMA and inform about our considerations of adopting/using the code. I can see that the last version is from 2005, but bugs might still be reported, and it would be great to benefit from this. And users of JAMA might also benefit from future improvements made by us. What do you think about this?</p>

<p>Have you made any comparison with the existing in regards to speed?</p>

<p>Cheers, Mikkel.</p></comment><comment id="13060478" author="joubert" created="Wed, 6 Jul 2011 12:09:30 +0100"><p>With regard to speed, I've tried it on random arrays with up to 1,000,000 elements and it's definitely faster than the current SVD implementation.</p>

<p>The current SVD implementation is noticeably slowed by the implementations of AbstractRealMatrix and TriDiagonalTransformer that use setEntry and getEntry on matrices within loops.  As such, matrix indices are checked to be in bounds at every iteration of a loop, when what we really should do is check the max and min indices only, if at all. (I've a further patch yet to submit on this).</p>

<p>If we remove the use of getEntry and setEntry in methods called by the current SVD implementation, and instead use direct array access, then the speed of the current implementation is improved significantly, however the stability remains unchanged.  Even with this change, the JAMA code is about twice as fast to converge (according to my profiler) and it is demonstrably more accurate.</p>

<p>Chris.</p></comment><comment id="13062840" author="psteitz" created="Mon, 11 Jul 2011 02:26:19 +0100"><p>There is no problem incorporating JAMA code.  We have already done this.  I am +1 to replace SVD with this, assuming we can construct (and pass) unit tests demonstrating that it resolves the open SVD issues.</p></comment><comment id="13063569" author="joubert" created="Mon, 11 Jul 2011 22:55:26 +0100"><p>I have attached a patch file for the JAMA implementation, together with unit tests for <a href="https://issues.apache.org/jira/browse/MATH-327" title=" Maximal number of iterations (540) exceeded" class="issue-link" data-issue-key="MATH-327"><del>MATH-327</del></a>, <a href="https://issues.apache.org/jira/browse/MATH-465" title="Incorrect matrix rank via SVD" class="issue-link" data-issue-key="MATH-465"><del>MATH-465</del></a> and <a href="https://issues.apache.org/jira/browse/MATH-583" title="Eigen value and SVD fail on a matrix with InvalidMatrixException while numpy has no problem on the same matrix" class="issue-link" data-issue-key="MATH-583"><del>MATH-583</del></a>. </p>

<p>Additionally, I have removed the unit test testMatricesValues1 that tested an implementation specific return value of getU() and getV().</p></comment><comment id="13064704" author="luc" created="Wed, 13 Jul 2011 18:08:45 +0100"><p>This looks good to me.<br/>
Many, many thanks for this much needed patch!</p>

<p>My only minor comment would be to replace the two occurrences of<br/>
        double eps = FastMath.pow(2.0, -52.0);<br/>
and one occurrence of<br/>
        double tiny = FastMath.pow(2.0, -966.0);</p>

<p>by static constants initialized using the power of two literal notation:</p>

<p>private static final EPS  = 0x1.0p-52;<br/>
private static final TINY = 0x1.0p-966;</p>


<p>We should have looked back at JAMA earlier. We only used the principles of the API (using interfaces and extended it slightly), but not using the code was a mistake I should probably be blamed for.</p>

<p>Mikkel, do you want to commit this ?</p></comment><comment id="13068311" author="luc" created="Wed, 20 Jul 2011 13:16:00 +0100"><p>Fixed in subversion repository as of r1148714.</p>

<p>Thanks for the patch.</p></comment></comments><issuelinks><issuelinktype id="12310000"><name>Duplicate</name><inwardlinks description="is duplicated by"><issuelink><issuekey id="12613909">MATH-886</issuekey></issuelink></inwardlinks></issuelinktype><issuelinktype id="12310010"><name>Incorporates</name><outwardlinks description="incorporates"><issuelink><issuekey id="12444750">MATH-327</issuekey></issuelink><issuelink><issuekey id="12468767">MATH-383</issuekey></issuelink><issuelink><issuekey id="12494744">MATH-465</issuekey></issuelink><issuelink><issuekey id="12508221">MATH-583</issuekey></issuelink></outwardlinks></issuelinktype></issuelinks><attachments><attachment id="12485388" name="SingularValueDecompositionImpl.java" size="24937" author="joubert" created="Wed, 6 Jul 2011 09:33:38 +0100"/><attachment id="12486112" name="SingularValueDecompositionImpl.patch" size="221949" author="joubert" created="Mon, 11 Jul 2011 22:55:26 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 6 Jul 2011 09:24:21 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>67395</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60352</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-610] [patch] objects that use compareTo should have equals as well</title><link>https://issues.apache.org/jira/browse/MATH-610</link><project id="12310485" key="MATH">Commons Math</project><description><p>NaturalRanking implements compareTo. Code that implements compareTo should also implement equals, and those that implement equals should implement hashCode. This patch does this.</p></description><environment/><key id="12512645">MATH-610</key><summary>[patch] objects that use compareTo should have equals as well</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="2">Won't Fix</resolution><assignee username="-1">Unassigned</assignee><reporter username="dbrosius@apache.org">Dave Brosius</reporter><labels>
                    </labels><created>Sat, 2 Jul 2011 22:28:26 +0100</created><updated>Mon, 4 Mar 2013 18:57:31 +0000</updated><resolved>Tue, 7 Aug 2012 00:40:38 +0100</resolved><due/><votes>0</votes><watches>3</watches><comments><comment id="13059128" author="psteitz" created="Sat, 2 Jul 2011 22:47:18 +0100"><p>I am not sure this is really necessary, as IntDoublePair is a private inner class and as the javadoc states, CompareTo is only implemented so Arrays.sort can be used.  I think the patch also contains an error - the hash should use the double, not int value.  In any case, we would have to add tests and I am not sure it really improves NaturalRanking to do this.</p></comment><comment id="13059132" author="dbrosius@apache.org" created="Sat, 2 Jul 2011 23:04:28 +0100"><p>feel free to ignore if you don't want it, altho i don't like relying on an api only using compareTo from now to eternity, as opposed to equals as well, as various JDK methods have switched back and forth over various implementations. The hashCode is fine, as the only requirement for hashCode is if two objects are equal, then their hashCode must be the same, which this implementation provides.</p>

<p>however, as stated, feel free to ignore.</p></comment><comment id="13059137" author="psteitz" created="Sat, 2 Jul 2011 23:17:03 +0100"><p>There is no reliance in the public API on the CompareTo impl in this inner class - it is just used to sort the &lt;int,double&gt; pairs to construct the ranking.  If Arrays.sort stops working in this way, we will have big problems <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/>  That said, I am OK adding this if you are willing to add tests.  I do think there is an error in the hashcode impl, which the tests would show (unless I am mistaken), since compareTo is based on the double components (ignoring the int values) and your equals impl (correctly) makes instances with the same double value equivalent.  Using the int value in the hash can make equal instances have different hashes.</p></comment><comment id="13059138" author="psteitz" created="Sat, 2 Jul 2011 23:20:52 +0100"><p>Sorry, my mistake on the hashcode.  I misread the patch.  You used the right field.</p></comment><comment id="13158731" author="luc" created="Mon, 28 Nov 2011 20:30:29 +0000"><p>Do we apply the patch or solve as won't fix ?</p></comment><comment id="13420358" author="erans" created="Sun, 22 Jul 2012 23:57:24 +0100"><p>The patch won't apply anymore; we would need an updated version. But let's answer to your question first...</p></comment><comment id="13428629" author="tn" created="Sat, 4 Aug 2012 17:47:36 +0100"><p>While Dave is spot-on with his observation, I think in this case it is not as severe as outlined in the discussion. The private inner class IntDoublePair is not used in any public/protected method and the equals method is never used for this class.</p>

<p>Otoh, the patch looks ok, so either we take it or just close this issue as Won't Fix.</p></comment><comment id="13428634" author="erans" created="Sat, 4 Aug 2012 18:06:24 +0100"><blockquote><p><span class="error">&#91;...&#93;</span> the patch looks ok,</p></blockquote>

<p>It's not; but easy to fix manually ("math" vs "math3").</p></comment><comment id="13429583" author="erans" created="Tue, 7 Aug 2012 00:40:38 +0100"><p>Cf. <a href="http://markmail.org/message/jokdqyjlptirega3" class="external-link" rel="nofollow">http://markmail.org/message/jokdqyjlptirega3</a></p></comment><comment id="13430284" author="sebb@apache.org" created="Tue, 7 Aug 2012 12:00:31 +0100"><p>Updated source to point to this discussion:</p>

<p>URL: <a href="http://svn.apache.org/viewvc?rev=1370149&amp;view=rev" class="external-link" rel="nofollow">http://svn.apache.org/viewvc?rev=1370149&amp;view=rev</a><br/>
Log:<br/>
Add comment as to why equals() and hashCode() are not implemented</p>

<p>Modified:<br/>
    commons/proper/math/trunk/src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java</p></comment></comments><attachments><attachment id="12485070" name="equals.diff" size="1336" author="dbrosius@apache.org" created="Sat, 2 Jul 2011 22:28:38 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sat, 2 Jul 2011 21:47:18 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2210</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160431</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-609] [patch] push down code to inner blocks where they are needed</title><link>https://issues.apache.org/jira/browse/MATH-609</link><project id="12310485" key="MATH">Commons Math</project><description><p>code does calculations at a scope level that is not needed, push these calculations down to where those calculations are needed, to avoid executing code that is unnecessary.</p></description><environment/><key id="12512644">MATH-609</key><summary>[patch] push down code to inner blocks where they are needed</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="dbrosius@apache.org">Dave Brosius</reporter><labels>
                    </labels><created>Sat, 2 Jul 2011 22:17:12 +0100</created><updated>Sat, 24 Mar 2012 16:16:48 +0000</updated><resolved>Mon, 11 Jul 2011 02:16:29 +0100</resolved><version>2.0</version><version>2.1</version><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13059131" author="psteitz" created="Sat, 2 Jul 2011 23:03:54 +0100"><p>Other than extra parens in the last clause of the return in the LaguerreSolver patch, these all look good to me.  Anyone have any objections?</p>

<p>Thanks for the patch!</p></comment><comment id="13062762" author="luc" created="Sun, 10 Jul 2011 17:53:21 +0100"><p>Looks fine to me too.</p></comment><comment id="13062838" author="psteitz" created="Mon, 11 Jul 2011 02:16:29 +0100"><p>Patch applied in r1145004 (r1144996 for OutlineExtractor).</p>

<p>Thanks!</p></comment></comments><attachments><attachment id="12485069" name="bas.diff" size="3727" author="dbrosius@apache.org" created="Sat, 2 Jul 2011 22:17:27 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sat, 2 Jul 2011 22:03:54 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>68151</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60353</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-608] Remove methods from RealMatrix Interface</title><link>https://issues.apache.org/jira/browse/MATH-608</link><project id="12310485" key="MATH">Commons Math</project><description><p>The RealMatrix interface describes several methods which take a RealMatrix and yield a RealMatrix return. They are:</p>

<p>    RealMatrix multiply(RealMatrix m);<br/>
    RealMatrix preMultiply(RealMatrix m);<br/>
    RealMatrix power(final int p);<br/>
    RealMatrix add(RealMatrix m)<br/>
    RealMatrix subtract(RealMatrix m)</p>

<p>There is nothing inherently wrong in making all subclasses of RealMatrix implement these methods. However, as the number of subclasses of RealMatrix increases, the complexity of these methods will also increase. I think these methods should be part of a separate class of 'operators' which handle matrix multiplication, addition, subtraction and exponentiation.</p>

<p>Say for example, I implement SymmetricRealMatrix. I would like to store the data of a real symmetric in compressed form, so that I only consume (nrow + 1)*nrow /2 space in memory. When it comes time to implement multiply (for example), I must test to see if the RealMatrix given in the argument is also of Type SymmetricRealMatrix, since that will affect the algorithm I use to do the multiplication. I could access each element of the argument matrix via its getter, but efficiency will suffer. One can think of cases where we might have a DiagonalRealMatrix times a DiagonRealMatrix. One would not want to store the resultant diagonal in a general matrix storage. Keeping track of all of the permutations of Symmetrics, Diagonals,..., and their resultants inside of the body of a function makes for very brittle code. Furthermore, anytime a new type of matrix is defined all matrix multiplication routines would have to be updated.  </p>

<p>There are special types of operations which result in particular matrix patterns. A matrix times its transpose is itself a symmetric. A general matrix sandwiched between another general matrix and its transpose is a symmetric. Cholesky decompositions form upper and lower triangular matrices. These are common enough occurrences in statistical techniques that it makes sense to put them in their own class (perhaps as static methods). It would keep the contract of the RealMatrix classes very simple. The ReaMatrix would be nothing more than:</p>

<p>1. Marker (is the matrix General, Symmetric, Banded, Diagonal, UpperTriangular..)<br/>
2. Opaque data store (except for the operator classes, no one would need to know how the data is actually stored).<br/>
3. Indexing scheme. </p>

<p>The reason I bring this up, is that I am attempting to write a SymmetricRealMatrix class to support variance-covariance matrices. I noticed that there are relatively few subclasses of RealMatrix. While it would be easy to hack it up for the handful of implementations that exist, that would probably create more problems as the number of types of matrices increases.</p>

<p>Thank you,</p>

<p>-Greg </p></description><environment><p>Java</p></environment><key id="12512339">MATH-608</key><summary>Remove methods from RealMatrix Interface</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status><statusCategory id="2" key="new" colorName="blue-gray"/><resolution id="-1">Unresolved</resolution><assignee username="-1">Unassigned</assignee><reporter username="gsteri1">greg sterijevski</reporter><labels><label>Matrices</label></labels><created>Thu, 30 Jun 2011 16:46:10 +0100</created><updated>Tue, 7 Feb 2012 12:25:56 +0000</updated><version>1.0</version><version>1.1</version><version>1.2</version><version>2.0</version><version>2.1</version><version>2.2</version><fixVersion>4.0</fixVersion><due/><votes>0</votes><watches>0</watches><timeoriginalestimate seconds="7200">2h</timeoriginalestimate><timeestimate seconds="7200">2h</timeestimate><comments><comment id="13058536" author="luc" created="Fri, 1 Jul 2011 13:51:13 +0100"><p>I don't understand how you intend to separate the API.<br/>
Would that mean users would always have to know beforehand the shape of the matrix they use and manage both the matrix, the data store and the operators in sync ?</p>

<p>As this feature request will probably involve a long discussion, I think it would be better to discuss about it on the dev list rather than here, could you move the discussion there ?</p></comment><comment id="13082182" author="psteitz" created="Wed, 10 Aug 2011 07:40:03 +0100"><p>Fortunately or unfortunately, we need to resolve this for 3.0.</p></comment><comment id="13082332" author="gsteri1" created="Wed, 10 Aug 2011 14:39:27 +0100"><p>This was not a popular suggestion and would be a major slash and burn<br/>
operation. Postpone it, or kill it.</p>

<p>-Greg</p>

</comment><comment id="13202283" author="erans" created="Tue, 7 Feb 2012 12:25:56 +0000"><p>Postponed.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Fri, 1 Jul 2011 12:51:13 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2211</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>11073</customfieldvalue></customfieldvalues></customfield></customfields></item><item><title>[MATH-607] Current Multiple Regression Object does calculations with all data incore. There are non incore techniques which would be useful with large datasets.</title><link>https://issues.apache.org/jira/browse/MATH-607</link><project id="12310485" key="MATH">Commons Math</project><description><p>The current multiple regression class does a QR decomposition on the complete data set. This necessitates the loading incore of the complete dataset. For large datasets, or large datasets and a requirement to do datamining or stepwise regression this is not practical. There are techniques which form the normal equations on the fly, as well as ones which form the QR decomposition on an update basis. I am proposing, first, the specification of an "UpdatingLinearRegression" interface which defines basic functionality all such techniques must fulfill. </p>

<p>Related to this 'updating' regression, the results of running a regression on some subset of the data should be encapsulated in an immutable object. This is to ensure that subsequent additions of observations do not corrupt or render inconsistent parameter estimates. I am calling this interface "RegressionResults".  </p>

<p>Once the community has reached a consensus on the interface, work on the concrete implementation of these techniques will take place.</p>

<p>Thanks,</p>

<p>-Greg</p></description><environment><p>Java</p></environment><key id="12512279">MATH-607</key><summary>Current Multiple Regression Object does calculations with all data incore. There are non incore techniques which would be useful with large datasets.</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="10">Implemented</resolution><assignee username="-1">Unassigned</assignee><reporter username="gsteri1">greg sterijevski</reporter><labels><label>Gentleman's</label><label>QR</label><label>Regression</label><label>Updating</label><label>decomposition</label><label>lemma</label></labels><created>Thu, 30 Jun 2011 05:56:36 +0100</created><updated>Mon, 4 Mar 2013 18:53:26 +0000</updated><resolved>Sat, 22 Sep 2012 18:55:45 +0100</resolved><version>3.0</version><fixVersion>3.1</fixVersion><due/><votes>0</votes><watches>2</watches><timeoriginalestimate seconds="3024000">840h</timeoriginalestimate><timeestimate seconds="3024000">840h</timeestimate><comments><comment id="13057616" author="gsteri1" created="Thu, 30 Jun 2011 05:57:49 +0100"><p>This is the patch file with the proposed changes.</p></comment><comment id="13060744" author="psteitz" created="Wed, 6 Jul 2011 19:29:56 +0100"><p>First, thanks for pushing this along and sorry to be slow to respond.</p>

<p>I like both of the abstractions, but I am not sure that defining interfaces is the best way to go in either case.  The reporting interface (RegressionResults) could be a concrete class and it is probably best to define a base class that omits some of the reported stats (e.g. isRedundant, getRedundant).  Making this a class gives us more flexibility.  It also makes it a little easier / more convenient for users who want to store off intermediate results.  One thing that I would add to either the base or an extended version is adjusted R-square.  I think it is also a good idea at this point to ask what else might be missing.  Your suggestions on redundancy are a good example.  For now, I would suggest making RegressionResults a serializable class as we finalize its contents.  One small quibble on naming:  s/getNobs/getNumberOfObservations or if that is too onerous getN (similar to other stats).</p>

<p>Regarding the model interface, I would again suggest that we just define this as a class, UpdatingOLSRegression.  I suppose that if we end up implementing a weighted or other non-OLS version, we might want to factor out a common interface like what exists for MultipleLinearRegression, but in retrospect, I am not sure that interface was worth much.  Note that all that we could factor out is essentially what is in MultivariateRegression, which is analogous to your RegressionResults.</p>

<p>So, modulo the one name change, I propose to just change these to classes and get going on the implementation.  Any other suggestions on what we should add / modify in the RegressionResults?</p>
</comment><comment id="13060774" author="gsteri1" created="Wed, 6 Jul 2011 20:14:16 +0100"><p>Phil,</p>

<p>underlying solver is QR or Gaussian this info would exist. If the underlying<br/>
method is SVD, then we would register the rank reduction, but we would not<br/>
be able to attribute it to a particular column in the design matrix.</p>

<p>I am probably in agreement with with making RegressionResults concrete, but<br/>
there were a couple of considerations which forced me to interface.</p>

<p>Say that I begin with the following augmented matrix:</p>
<table class='confluenceTable'><tbody>
<tr>
<td class='confluenceTd'> X'X     X'Y</td>
</tr>
<tr>
<td class='confluenceTd'> X'Y    Y'Y</td>
</tr>
</tbody></table>

<p>  where X is the design matrix ( nobs x nreg ), Y is the dependent variable<br/>
(nobs x 1 )</p>

<p>On a copy of the cross products matrix (the thing above), I get the<br/>
following via gaussian elimination:</p>

<table class='confluenceTable'><tbody>
<tr>
<td class='confluenceTd'> inv(X'X)     -beta</td>
</tr>
<tr>
<td class='confluenceTd'> -beta           e'e</td>
</tr>
</tbody></table>


<p>inv(X'X) is the inverse of the X'X matrix. -beta is the OLS vector of<br/>
slopes. e'e is the sum of squared errors.</p>

<p>Getting most of the info (that RegressionResults surfaces) is simply a<br/>
matter of indexing. All I need to do in this case is write a wrapper around<br/>
a symmetric matrix which implements the interface.</p>

<p>I suppose that there could be constructor which took the matrix above and<br/>
did the indexing, but that seems too dirty. Furthermore, there are probably<br/>
other optimized formats for OLS which have similar aspects. I wanted to keep<br/>
the door open to other schemes, without making (potentially large) copies of<br/>
variance matrices, standard errors and so forth a necessity.</p>


<p>On the name of the getter for number of observations, I am okay with<br/>
whatever you feel is a better name.</p>



<p>So you are saying the UpdatingOLSRegression be an abstract class? There are<br/>
not that many methods in the interface. That would be okay if were sure that<br/>
subclasses always overrode either the regress(...) methods or the<br/>
addObservations(...) methods. I worry that you might get have a base class<br/>
full of nothing but abstract functions.</p>

<p>So, modulo the one name change, I propose to just change these to classes</p></comment><comment id="13060782" author="gsteri1" created="Wed, 6 Jul 2011 20:28:04 +0100"><p>Sorry for duplicating part of my response, but gmail has truncated it (maybe google is telling me something about my ideas... ;0 )</p>

<p>My complete response is:</p>

<p>I agree on eliminating getRedundant() and isRedundant(int idx). If the underlying solver is QR or Gaussian this info would exist. If the underlying method is SVD, then we would register the rank reduction, but we would not be able to attribute it to a particular column in the design matrix.</p>

<p>I am probably in agreement with with making RegressionResults concrete, but there were a couple of considerations which forced me to interface.</p>

<p>Say that I begin with the following augmented matrix:</p>
<table class='confluenceTable'><tbody>
<tr>
<td class='confluenceTd'> X'X     X'Y</td>
</tr>
<tr>
<td class='confluenceTd'> X'Y    Y'Y</td>
</tr>
</tbody></table>

<p>  where X is the design matrix ( nobs x nreg ), Y is the dependent variable (nobs x 1 )</p>

<p>On a copy of the cross products matrix (the thing above), I get the following via gaussian elimination:</p>

<table class='confluenceTable'><tbody>
<tr>
<td class='confluenceTd'> inv(X'X)     -beta</td>
</tr>
<tr>
<td class='confluenceTd'> -beta           e'e</td>
</tr>
</tbody></table>


<p>inv(X'X) is the inverse of the X'X matrix. -beta is the OLS vector of slopes. e'e is the sum of squared errors.</p>

<p>Getting most of the info (that RegressionResults surfaces) is simply a matter of indexing. All I need to do in this case is write a wrapper around a symmetric matrix which implements the interface.</p>

<p>I suppose that there could be constructor which took the matrix above and did the indexing, but that seems too dirty. Furthermore, there are probably other optimized formats for OLS which have similar aspects. I wanted to keep the door open to other schemes, without making (potentially large) copies of variance matrices, standard errors and so forth a necessity.</p>


<p>On the name of the getter for number of observations, I am okay with whatever you feel is a better name.</p>


<p>    Regarding the model interface, I would again suggest that we just define this as a class, UpdatingOLSRegression.  I suppose that if we end up implementing a weighted or other non-OLS version, we might want to factor out a common interface like what exists for MultipleLinearRegression, but in retrospect, I am not sure that interface was worth much.  Note that all that we could factor out is essentially what is in MultivariateRegression, which is analogous to your RegressionResults.</p>


<p>So you are saying the UpdatingOLSRegression be an abstract class? There are not that many methods in the interface. That would be okay if were sure that subclasses always overrode either the regress(...) methods or the addObservations(...) methods. I worry that you might get have a base class full of nothing but abstract functions.</p></comment><comment id="13060791" author="psteitz" created="Wed, 6 Jul 2011 20:52:46 +0100"><p>I get your point on the Results interface.  It did not look "large" to me at first (i.e., generally o(vars) vs o(obs)).  If it could get "large" it would indeed be better to leave as an interface.  The problem there is really nailing it because interfaces are very hard to change.  My sense at this point is that we may want to rev this a few times before it is really stable, so a concrete class would be better to start with.  Also, having the "value" class is handy.  StatisticalSummaryValues is an example of that (which implements the interface that preceded it - so maybe having both is a good longer term solution).  If it turns out to be too unwieldy to create the results factory methods, I am OK starting with the interface approach, but in that case we should review it very carefully prior to release.</p>

<p>I did not mean to suggest that UpdatingOLSRegression should be an abstract class.  If and when a weighted or non-OLS updating regression is implemented, we might consider introducing an abstract parent, but I would need to see good reason for this.  IMO, what we have now in OLS, WLS is of marginal value (I mean the abstract superclass and interface).</p>


</comment><comment id="13060792" author="gsteri1" created="Wed, 6 Jul 2011 20:54:13 +0100"><p>One more thing, on the subject of the adjusted R Squared. I am not sure I would include this, since this is dependent on knowledge that a constant exists. I currently envision being handed some data. If the data has a column which is nothing but ones, great. If not, great again. I could not come up with an elegant way to handle constant detection, and therefore a clean way to determine the Busse R squared. </p>

<p>I guess we could keep a flag for each regressor. If the regressor has a changed value then we would say it is not a constant. The other approach is to test the residuals for bias-if there is no bias, then constant or not we are okay. Though that would be messy since I do not keep the data around. Either way makes for a bit of unpleasantness that yields very little? </p></comment><comment id="13060797" author="psteitz" created="Wed, 6 Jul 2011 21:10:52 +0100"><p>Thanks, I forgot to mention that important point.  Initially, we took the "take what we are given" approach, but that proved confusing and error-prone for users (forcing them to add unitary columns to input data).  I think it is best to expect no unitary columns in the design matrix and have the user explicitly specify "noIntercept" to estimate a model without an intercept term.  This is how the MultipleLinearRegression impls now work.  (See the javadoc for newSampleData in AbstractMultipleLinearRegression).  In the updating impls, this can work the same way, allowing users to omit initial "1"s from added rows.  I guess this will have to be a constructor parameter to work correctly in the updating impls.</p>

<p>Another thing I forgot to mention is careful specification and validation of array shape constraints on input data (i.e., when things have to be rectangular and/or of length = previously determined nVars.  I liked the lack of a setter for the number of explanatory variables, but that means the first addData becomes definitional.</p>

<p>One final suggestion - maybe the row version of addData should be addObservation and the matrix version should be addObservations.</p></comment><comment id="13060800" author="gsteri1" created="Wed, 6 Jul 2011 21:13:16 +0100"><p>On the results object:</p>

<p>There are vars *( vars + 1 ) /2 elements in the cov matrix, vars int<br/>
parameters, vars int standard errors and a some other assorted stuff. Not<br/>
terribly large at first. However, consider doing panel regression via dummy<br/>
variables, the covariance matrix can get fast very quickly. That being said,<br/>
I don't think making RegressionResults a concrete class is a gamestopper.<br/>
Should I send a follow up patch with results made concrete?</p>

<p>On the regression object:</p>

<p>Are you concerned that we will be removing methods from any interface we<br/>
specify today? Or do you think the contract is too restrictive? The reason I<br/>
am pushing for interface is that I have two candidates for concrete<br/>
implementation of updating regression. The first implementation is based on<br/>
Gentleman's lemma and is detailed in the following article:</p>

<p>Algorithm AS 274: Least Squares Routines to Supplement those of Gentleman<br/>
Author: Alan J Miller<br/>
Source Journal of the Royal Statistical Society Vol 41 No 2 (1992)</p>

<p>The second approach is one detailed by this article by Goodnight:<br/>
A Tutorial on the SWEEP Operator<br/>
James H. Goodnight<br/>
The American Statistician, Vol. 33, No. 3. (Aug., 1979), pp. 149-158.</p>

<p>The first approach never forms the cross products matrix, the second does.<br/>
They are significantly different approaches to dealing with large data sets.</p>


<p>How would I do this in the concrete class you propose?</p>

<p>Thanks,</p>

<p>-Greg</p>


</comment><comment id="13060814" author="psteitz" created="Wed, 6 Jul 2011 21:33:53 +0100"><p>I did not see the parameter covariance matrix in RegressionResults.  I agree with your basic point on this, though.  I am less concerned with wanting to add stuff than including things that we either wish we had omitted (e.g. the redundancy stuff as just an example) or typed or constrained differently.  How about starting with a minimalist concrete class and once we have the interface stabilized, we can peel it off and keep the class for persisting / serializing results.</p>

<p>Sorry to flip/flop, but looking carefully at the UpdatingLinearRegression interface again, I think it is fine to just add it as an interface.  I would suggest the s/data/observation change in my last comment though and maybe renaming it to UpdatingMultipleLinearRegression.</p></comment><comment id="13060875" author="gsteri1" created="Wed, 6 Jul 2011 23:15:59 +0100"><p>Phil,</p>

<p>Attached is the patch based on your comments. Please review.</p>

<p>-Greg</p></comment><comment id="13062832" author="psteitz" created="Mon, 11 Jul 2011 00:46:06 +0100"><p>Thanks, Greg!</p>

<p>I committed the patch with minor modifications to make it (almost) consistent with <span class="error">&#91;math&#93;</span> style guidelines.  (Running "mvn site" and looking at the checkstyle report shows where problems are with patches).  I didn't make any really substantive changes, but there is still some work to be done.  I wanted to get the classes committed, though, so we could start the implementation work and refine them as we go.</p>

<p>Here is what still needs attention on the interface/value classes:</p>

<p>1) There is some missing javadoc<br/>
2) I made the static constants for the overall stats private in RegressionResults.  I did not see any use for them outside of the class and in fact I think it would likely be better to replace the internal array representation of those data by an inner class with proper field names or just define separate data members. Maybe you see that array has having variable length for some models?  I am OK leaving as is for now, but lets keep it all private.<br/>
3) We can wait to fix this until we know more exactly what is going to come out of the implementations, but we need to fit the exceptions into the <span class="error">&#91;math&#93;</span> hierarchy and be explicit in the throws clauses.<br/>
4) There are a couple of references in the javadoc for "reduncancy flags" but these are not actually available in the RegressionResults.  Probably the references should be dropped and subclasses that expose these will be added for models that include them.<br/>
5) The preconditions statements are good to retain, but I don't think they actually belong in the RegressionResults javadoc.  Most likely they should be in the javadoc for either UpdatingRegression#regress or the implementations.</p>

<p>Thanks for the patch!</p></comment><comment id="13063658" author="gsteri1" created="Tue, 12 Jul 2011 02:48:10 +0100"><p>Mea culpa,</p>

<p>I made a mistake in retrieving the standard errors. Two lines are defective. </p></comment><comment id="13067431" author="gsteri1" created="Tue, 19 Jul 2011 02:20:05 +0100"><p>Attached is the Miller regression and tests. </p>
</comment><comment id="13068001" author="psteitz" created="Tue, 19 Jul 2011 22:46:47 +0100"><p>Second Miller patch committed in r1148557, modified to meet coding standards, other than a) missing javadoc and b) exceptions. </p></comment><comment id="13068663" author="gsteri1" created="Wed, 20 Jul 2011 22:47:19 +0100"><p>Attached patch should fix the checkstyle errors... for the miller regression.</p></comment><comment id="13068685" author="gsteri1" created="Wed, 20 Jul 2011 23:44:00 +0100"><p>This patch should fix the errors in checkstyle for RegressionResults. </p></comment><comment id="13069167" author="psteitz" created="Thu, 21 Jul 2011 20:57:58 +0100"><p>Checkstyle fixes committed in r1149281, r1149335.  Many thanks, Greg.  Still remaining: 1) fix exceptions.  I will do this if I get no objections to RegressionModelSpecificationException proposed on the mailing list.  2) findbugs config to ignore unsafe access check in RegressionResults.  3) RegressionResults has no getter for rank  4) I am still not getting why we need globalFitInfo in RegressionResults.  Why not just name the fields instead of maintaining an array and names for indexes into it?</p></comment><comment id="13069256" author="gsteri1" created="Thu, 21 Jul 2011 23:33:57 +0100"><p>Phil,</p>

<p>1. Fix exceptions. I am not 100% sure what I needed to do in order to<br/>
correctly exclude this from the bug report. I did not want to commit<br/>
something half baked. I would appreciate your help here.</p>

<p>3. Yes, the rank getter is missing. I can put that in.</p>

<p>4. There are a couple of reasons I thought we should keep all that info in<br/>
an array.<br/>
     a.) Neater, all of the information on the fit is in one member<br/>
variable, as opposed to 5, 10 or 15 member variables. We really should have<br/>
a GlobalInfoEnum maybe? Then we could eliminate all the getters with:<br/>
     public double getGlobalFitInfo( GlobalInfoEnum gie );</p>

<p>     b.) Serialization is a bit easier should a hand coded serialization<br/>
routine need to be written.</p>

<p>     c.) Model Selection. If we use the regression results object in model<br/>
selection algorithms, then the criteria used for evaluate goodness of fit<br/>
could be accessible by an index (or enum) into that array. For example, I<br/>
might write a little app that runs a million regressions and chooses the top<br/>
1% by Rsquared. (I know that this example is complete ad hoc<span class="error">&#91;ery&#93;</span>. ) You<br/>
might then decide that mean squared error is really the criterion you want<br/>
to use. Instead of recoding the objective function to call<br/>
getMeanSquaredError() instead of getRSquared(), you simple provide the index<br/>
or the enum.</p>

<p>    d.) Growth. While we have a few parameters of global fit now, I am sure<br/>
that number will grow. We might need add likelihood function value, an F<br/>
Test of global applicability,.... In a simple beans interface setup we would<br/>
add many methods... I can't help but feel that this is messy and tedious for<br/>
the user.</p>

<p>-Greg</p>



</comment><comment id="13069298" author="psteitz" created="Fri, 22 Jul 2011 00:53:54 +0100"><p>Don't worry about the exceptions.  The only thing remaining there is to fit into the hierarchy.  I will fix that.  Feel free to weigh in on the ML thread, though.</p>

<p>I am still not sold on the globalstats array.  It is just not the Java way to use arrays with static constants into them to represent properties.  I agree strongly that we are going to want to add more fields to RegressionResults. In the public API, we are going to want them to be properties, though.  Why would a user ever want to use getGlobalStats<span class="error">&#91;THING_I_WANT&#93;</span> instead of getThingIWant?  It is actually more code to maintain the enum plus the array rather than just fields.  So I guess I disagree with a) and d) above.  I get b), but don't see it as a big deal or enough to change API.  I also get c), but it frankly looks a little scary.  I have been burned so many times over the years by indicies into blocks of storage, variable content hashmaps of attributes, etc. that I try to avoid these things in my code.  And think about the change in c) in any case - from globalStats<span class="error">&#91;OLD_INDEX&#93;</span> to globalStats<span class="error">&#91;NEW_INDEX&#93;</span> somehow through the API, when the same change is really s/oldProperty/newProperty likely at the same entry point.</p>

<p>If we think that the globalFit stuff needs to be encapsulated within RegressionResults, I would be fine with defining another class to hold global model fit statistics.  This class would then have the fit properties as fields.</p></comment><comment id="13069322" author="gsteri1" created="Fri, 22 Jul 2011 01:47:58 +0100"><p>How do you propose to allow for the growth of global fit statistics? Keep<br/>
the getter pattern?<br/>
If we decide to keep the getter pattern, then for sure eliminate the array,<br/>
eliminate the static int indices.</p>

<p>What is the ML thread?</p>

<p>-Greg</p>

</comment><comment id="13069326" author="psteitz" created="Fri, 22 Jul 2011 01:56:07 +0100"><p>To add global fit statistics, yes, we add properties and getters.  No easier to add constants and expand the array.  The public API needs to expose the new stats in either case.  As I said, if it turns out that just the fit statistics are useful by themselves, it may make sense to encapsulate them in a separate class and have RegressionResults have one of these as a member.</p>

<p>The ML thread I was referring to is the thread on commons-dev with subject "RegressionModelSpecificationException"</p></comment><comment id="13069330" author="gsteri1" created="Fri, 22 Jul 2011 02:01:57 +0100"><p>Thanks on both counts. I can understand your reticence on the array<br/>
approach.</p>

</comment><comment id="13113120" author="gsteri1" created="Fri, 23 Sep 2011 03:57:42 +0100"><p>I am pushing some changes to SimpleRegression which will allow it to support the UpdatingMultipleRegression interface. There are a couple of additions to Localizable. </p></comment><comment id="13113175" author="psteitz" created="Fri, 23 Sep 2011 07:01:43 +0100"><p>Lets s/UpdatingMultipleLinearRegression/UpdatingLinearRegression<br/>
It is a little, um, funny to have simple regression implement multiple regression <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p></comment><comment id="13113431" author="gsteri1" created="Fri, 23 Sep 2011 14:40:26 +0100"><p>Yes, I concur. Besides, having such long interface name is not a good idea<br/>
either..</p>

</comment><comment id="13420949" author="tn" created="Mon, 23 Jul 2012 21:42:48 +0100"><p>The patch has already been applied for 3.0. Is there still something to do?</p></comment><comment id="13461223" author="erans" created="Sat, 22 Sep 2012 18:55:45 +0100"><p>Nobody seems to be able to answer this question.<br/>
If someone wants to make further updates, a new ticket can be created...</p></comment></comments><attachments><attachment id="12487227" name="RegressResults2" size="4503" author="gsteri1" created="Wed, 20 Jul 2011 23:44:00 +0100"/><attachment id="12486951" name="millerreg" size="35873" author="gsteri1" created="Tue, 19 Jul 2011 02:20:05 +0100"/><attachment id="12487224" name="millerreg_take2" size="18777" author="gsteri1" created="Wed, 20 Jul 2011 22:47:18 +0100"/><attachment id="12486952" name="millerregtest" size="82518" author="gsteri1" created="Tue, 19 Jul 2011 02:20:05 +0100"/><attachment id="12486132" name="regres_change1" size="986" author="gsteri1" created="Tue, 12 Jul 2011 02:48:10 +0100"/><attachment id="12485493" name="updating_reg_cut2" size="17723" author="gsteri1" created="Wed, 6 Jul 2011 23:15:59 +0100"/><attachment id="12484719" name="updating_reg_ifaces" size="11366" author="gsteri1" created="Thu, 30 Jun 2011 05:57:49 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>7.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 6 Jul 2011 18:29:56 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2212</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160432</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-606] Root-finding algorithms (univariate real solvers) documentation out of date</title><link>https://issues.apache.org/jira/browse/MATH-606</link><project id="12310485" key="MATH">Commons Math</project><description><p>The information at <a href="http://commons.apache.org/math/userguide/analysis.html" class="external-link" rel="nofollow">http://commons.apache.org/math/userguide/analysis.html</a> is out of date, given the changes in <a href="https://issues.apache.org/jira/browse/MATH-599" title="Re-implementation of Secant-based root finding algorithms" class="issue-link" data-issue-key="MATH-599"><del>MATH-599</del></a>.</p></description><environment/><key id="12511952">MATH-606</key><summary>Root-finding algorithms (univariate real solvers) documentation out of date</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="dhendriks">Dennis Hendriks</reporter><labels><label>documentation</label></labels><created>Tue, 28 Jun 2011 07:08:31 +0100</created><updated>Sat, 24 Mar 2012 16:16:47 +0000</updated><resolved>Sun, 10 Jul 2011 12:14:02 +0100</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13062715" author="luc" created="Sun, 10 Jul 2011 12:14:03 +0100"><p>Fixed in subversion repository as of r1144832.</p>

<p>Thanks for the report</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 10 Jul 2011 11:14:03 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>68624</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60354</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-605] Missing state events due to events between t0 and t0+e being ignored</title><link>https://issues.apache.org/jira/browse/MATH-605</link><project id="12310485" key="MATH">Commons Math</project><description><p>The Commons Math page on ODEs (<a href="http://commons.apache.org/math/userguide/ode.html" class="external-link" rel="nofollow">http://commons.apache.org/math/userguide/ode.html</a>) states in section 13.3 (Discrete Events Handling), that: "Note that g function signs changes at the very beginning of the integration (from t0  to t0 + ε where ε is the events detection convergence threshold) are explicitely ignored. This prevents having the integration stuck at its initial point when a new integration is restarted just at the same point a previous one had been stopped by an event."</p>

<p>However, due the following issues:</p>
<ul class="alternate" type="square">
	<li><a href="https://issues.apache.org/jira/browse/MATH-586" title="Allow using a custom root-finding algorithm to detect state events" class="issue-link" data-issue-key="MATH-586"><del>MATH-586</del></a>: Allow using a custom root-finding algorithm to detect state events</li>
	<li><a href="https://issues.apache.org/jira/browse/MATH-599" title="Re-implementation of Secant-based root finding algorithms" class="issue-link" data-issue-key="MATH-599"><del>MATH-599</del></a>: Re-implementation of Secant-based root finding algorithms</li>
</ul>


<p>we can now use for instance the PegasusSolver to detect state events. Using the AllowedSolutions.RIGHT_SIDE we can guarantee that we have passed the event. As such, skipping (future) events between t0 and t0+e is not desired.</p>

<p>I attached a Java class to show this issue. It has 2 continuous variables, each starts at 0.0. The first has derivative 1.0, the second 2.0. Whenever they become larger than 1.0, they are reset. We thus expect resets for event 1 at 1.0, 2.0, 3.0, etc. We expect resets for event 2 at 0.5, 1.0, 1.5, etc. The events overlap (at 1.0, 2.0, etc). Due to numerical differences, the events however are not detected at the exact same times. After we processed the first, the 'skip everything between t0 and t0+e' may result in skipping events, as can be observed from the failing unit test. The second test has a hack to get around this problem: it is manually checked whether the guard changes, by evaluating t0 and t0+e. If an event is detected, a step of e is done, and integration is restarted from t0+e. This solves the issue, and the unit tests succeeds (we get the events at the expected times, and we don't miss any events).</p>

<p>From what I understand, event detection is complicated, as discussed in <a href="https://issues.apache.org/jira/browse/MATH-484" title="events detection in ODE solvers is too complex and not robust" class="issue-link" data-issue-key="MATH-484"><del>MATH-484</del></a>. I propose to make the skipping of events betweeen t0 and t0+e optional, as that is no longer needed in the cases I described above, and in fact causes severe problems that can only be solved by hacks. For other (non-bracketed solution) algorithms, it may still be necessary to skip such roots. Maybe an option could be introduced to control this behavior?</p>

<p>So, if an event is detected at time t, integration may continue from t0=t, and if there is a sign change for t0 and t0+e, then the step handler should be called for t0+e, and the step handler should be called for t0+e as well, with isLast=true. I'm not sure what the value of e should be. It could be the absolute accuracy of the root-finding algorithm. if there are multiple ones, maybe the maximum of all of them. Maybe even the minimal integration step should be taken into account, taking the maximum of that an dall the absolute accuracies of the root-finding algorithms?</p></description><environment/><key id="12511622">MATH-605</key><summary>Missing state events due to events between t0 and t0+e being ignored</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="dhendriks">Dennis Hendriks</reporter><labels>
                    </labels><created>Mon, 27 Jun 2011 11:52:36 +0100</created><updated>Sat, 24 Mar 2012 16:17:01 +0000</updated><resolved>Wed, 20 Jul 2011 13:47:43 +0100</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13055462" author="dhendriks" created="Mon, 27 Jun 2011 11:59:53 +0100"><p>Java class with two unit tests, to show the problem, and the hacky temporary solution.</p></comment><comment id="13055464" author="dhendriks" created="Mon, 27 Jun 2011 12:00:42 +0100"><p>Updated affected version to 3.0 from 'unset'.</p></comment><comment id="13055577" author="luc" created="Mon, 27 Jun 2011 15:30:37 +0100"><p>Your approach is <em>really</em> interesting.<br/>
You are right, the current handling of events still has many hacks. Ignoring events at start time was a way to solve issue <a href="https://issues.apache.org/jira/browse/MATH-421" title="restarting an ODE solver that has been stopped by an event doesn&#39;t work" class="issue-link" data-issue-key="MATH-421"><del>MATH-421</del></a>. There was also another problem resulting from a wrong choice in bracketed root depicted in issue <a href="https://issues.apache.org/jira/browse/MATH-322" title="during ODE integration, the last event in a pair of very close event may not be detected" class="issue-link" data-issue-key="MATH-322"><del>MATH-322</del></a>. As we can now ask the solver to select exactly the solution we want, we can probably have more robust and simpler handling.</p>

<p>There are some caveats, though, so we need to check a few corner cases.</p>

<p>First, we cannot ensure yet user will select a solmver that handles bracketing as we want. It would be nice to have a BracketingSolver and force events handler to use that. However, there is no such interface. There is a solvers hierarchy, and there is a BracketedSolution interface (by the way, I think this name is not appropriate, a solver is not a solution). I would suggest we adjust our hierarchy slightly and force user to use a solver from the bracketing part of the hierarchy only.</p>

<p>Second, we should let the integrator (or better the internal event state handler) select the side by itself. It should select the right side for forward integration, but it should select the left side for backward integration.</p>

<p>Looking at your example, I'm a little puzzled by the switching function. Switching functions are not required to be globally smooth, but they should not have discontinuities around the switch event. Here, the event is <em>defined</em> by discontinuities between +1 and -1. In addition, between discontinuities, the function is constant, so the solver has no clue to find a solution quickly, it simply recursively reduces the interval, leading to a lot of calls to g. For such cases, it is better to design a slightly different g function, ensuring it has the zero at the proper places, is continuous around the roots, and does not change sign between the roots (i.e. it will alternate signs between successive roots).</p>

<p>Here is one way to do this in your case, which should work either when eventOccurred returns STOP and is reused later, or returns CONTINUE and is reused in the same integration:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">private</span> <span class="code-object">int</span> sign = 1;

<span class="code-keyword">public</span> <span class="code-object">double</span> g(<span class="code-object">double</span> t, <span class="code-object">double</span>[] y) <span class="code-keyword">throws</span> EventException {
    <span class="code-keyword">return</span> (y[idx] &lt; 0.5) ? (sign * y[idx]) : (sign * (1.0 - y[idx]));
}

<span class="code-keyword">public</span> <span class="code-object">int</span> eventOccurred(<span class="code-object">double</span> t, <span class="code-object">double</span>[] y, <span class="code-object">boolean</span> increasing) <span class="code-keyword">throws</span> EventException {
    sign = -sign;
    <span class="code-keyword">return</span> STOP;
}
</pre>
</div></div>

<p>However, with this implementation of the g function, the hack in the test case does not work anymore.</p>

<p>I have tried to simply suppress the small ignore zone at the start of the integration, but it wasn't sufficient. I think we'll have to dig deeper in the code.</p>

<p>So as a partial conclusion, I think we should do as you propose and use smart selection of side in bracketing solver, force use of such solvers, and remove the ignore zone at the start of the integration.<br/>
We should make sure that it works for all existing unit tests (some of them are regression tests for previous bugs), that it works for your discontinuous function (despite such functions are not recommended), and that it works for the patched function above.</p>

<p>Thanks a lot for this report and the solution, it is really the way to go!</p></comment><comment id="13056360" author="dhendriks" created="Tue, 28 Jun 2011 08:16:24 +0100"><blockquote><p>there is a BracketedSolution interface (by the way, I think this name is not appropriate, a solver is not a solution)</p></blockquote>

<p>I agree. Maybe BracketedSolutionSolver? Or if you want to be really precise, then BracketedSolutionUnivariateRealSolver, but in my opinion that is way too long.</p>

<blockquote><p>I would suggest we adjust our hierarchy slightly and force user to use a solver from the bracketing part of the hierarchy only.</p></blockquote>

<p>Good idea.</p>

<blockquote><p>Second, we should let the integrator (or better the internal event state handler) select the side by itself. It should select the right side for forward integration, but it should select the left side for backward integration.</p></blockquote>

<p>I anticipated this, which is the reason I added the left side choice, even though I didn't personally need this (I don't use backward integration).</p>

<blockquote><p>Looking at your example, I'm a little puzzled by the switching function.</p></blockquote>

<p>This issue was part of a larger application. I extracted that what was needed to show the issue. Some of the things may not make sense in the simplified context. I agree that the switching function is less than ideal, but it should nonetheless work. It can be evaluated at each point, and a bracketed solution can be maintained. Even though convergence is not optimal, I think the Secant-based algorithms should be able to handle this. Note that the function has one root only, not more, which may be essential in this case.</p>

<blockquote><p>I have tried to simply suppress the small ignore zone at the start of the integration, but it wasn't sufficient. I think we'll have to dig deeper in the code.</p></blockquote>

<p>I tried this as well, and failed. I guess I don't have enough knowledge of the code involved to change this.</p>

<blockquote><p>So as a partial conclusion, <span class="error">&#91;...&#93;</span></p></blockquote>

<p>I agree.</p>

<blockquote><p>We should make sure that it works for all existing unit tests <span class="error">&#91;...&#93;</span></p></blockquote>

<p>An other interesting case would be 2 events at the same time, that actually are detected at the same time. Changing the derivative of the second function to 1, to be equal to the first one, may do that.</p>

<blockquote><p>Thanks a lot for this report and the solution, it is really the way to go!</p></blockquote>

<p>Thank you for your useful comments.</p></comment><comment id="13062758" author="luc" created="Sun, 10 Jul 2011 17:39:32 +0100"><p>Dennis, I have committed a few changes in the EventState class, following the previous comments.<br/>
Now we make sure the event time is located at or after the exact root (i.e. never before), according to the current integration time. This is done by either asking the user-provided solver to select the proper side if it is a bracketing solver, or by using the new forceSide method as a post-processing step if the solver is non-bracketing.<br/>
This has allowed me to remove at least one special case handling, and only slightly changing another one.<br/>
It does work on all unit cases of the library, and it has also been tested on my own user code.</p>

<p>Could you check if this works for you too ? If it works, I'll resolve this issue.</p></comment><comment id="13063225" author="dhendriks" created="Mon, 11 Jul 2011 09:48:11 +0100"><p>Nice work Luc! I tested it on my application, and I no longer need the hack that I previously used.</p>

<p>I added a new patch (overlapping-events-tests.patch) that provides a few test cases to test this new functionality. It is a modified unit test from the original file I attached to this issue, when I reported this issue, etc.</p>

<p>Also, I checked all your commits. The patch fixes some comments here and there.</p>

<p>Finally, I fixed the verifyBracketing/isBracketing methods in the UnivariateRealSolverUtils class, to also except intervals that have a zero function value at one of the end points.</p>

<p>Thanks for you efforts.</p></comment><comment id="13063275" author="dhendriks" created="Mon, 11 Jul 2011 11:36:08 +0100"><p>Fixed patch for consistency.</p></comment><comment id="13063276" author="dhendriks" created="Mon, 11 Jul 2011 11:37:09 +0100"><p>Forgot to add a file. So, third version of the patch...</p></comment><comment id="13063292" author="erans" created="Mon, 11 Jul 2011 12:35:05 +0100"><p>It would be easier if you could provide separate patches for distinct issues ("solvers" vs "ode").</p></comment><comment id="13063295" author="dhendriks" created="Mon, 11 Jul 2011 12:42:45 +0100"><blockquote><p>It would be easier if you could provide separate patches for distinct issues ("solvers" vs "ode").</p></blockquote>

<p>Unfortunately, I don't have time for that today, and today is my last day at work before my summer holiday. I'll keep this in mind for the future.</p></comment><comment id="13063308" author="erans" created="Mon, 11 Jul 2011 13:33:04 +0100"><p>No problem. I've taken care of your suggestion for the "solvers" part (revision 1145146). But in the log I've attributed to the <a href="https://issues.apache.org/jira/browse/MATH-599" title="Re-implementation of Secant-based root finding algorithms" class="issue-link" data-issue-key="MATH-599"><del>MATH-599</del></a> issue...</p></comment><comment id="13068335" author="luc" created="Wed, 20 Jul 2011 13:47:43 +0100"><p>Fixed in subversion repository as of r1148736.</p></comment></comments><attachments><attachment id="12483928" name="OverlappingEventsTest.java" size="10359" author="dhendriks" created="Mon, 27 Jun 2011 11:59:53 +0100"/><attachment id="12486045" name="overlapping-events-tests-v3.patch" size="14661" author="dhendriks" created="Mon, 11 Jul 2011 11:37:09 +0100"/><attachment id="12486044" name="overlapping-events-tests.patch" size="7983" author="dhendriks" created="Mon, 11 Jul 2011 11:36:08 +0100"/><attachment id="12486028" name="overlapping-events-tests.patch" size="14660" author="dhendriks" created="Mon, 11 Jul 2011 09:48:11 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>4.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Mon, 27 Jun 2011 14:30:37 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>67391</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60355</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-604] optional dense output in ODE step handlers leads to weird results</title><link>https://issues.apache.org/jira/browse/MATH-604</link><project id="12310485" key="MATH">Commons Math</project><description><p>The requiresDenseOutput method defined in the StepHandler interface was first created as an optimization feature to avoid calling computeDerivatives too many times for some integrators. In fact, only Dormand-Prince 8 (5,3) needs it because we can save 3 calls per step when the interpolator is not used.</p>

<p>This feature brings more problems than it solves:</p>
<ul>
	<li>it forces users to implement this method despite its purpose is not clear,</li>
	<li>even if the method returns false, sometimes dense output will be generated (in fact when there are events detectors),</li>
	<li>it creates problems with at least Gragg-Bulirsch-Stoer since this integrator really needs interpolation,</li>
	<li>it will create the same problems for Adams integrators (they also need interpolation),</li>
	<li>this "optimization" is useful only for one integrator: Dormand-Prince 8 (5,3),</li>
	<li>in many cases, even for Dormand-Prince 8 (5,3) it does not optimize anything since people will often need interpolation</li>
</ul>


<p>So I would like to completely remove this.</p>

<p>Removing the method is backward compatible for users.</p></description><environment/><key id="12511565">MATH-604</key><summary>optional dense output in ODE step handlers leads to weird results</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="luc">Luc Maisonobe</reporter><labels>
                    </labels><created>Sun, 26 Jun 2011 16:05:50 +0100</created><updated>Sat, 24 Mar 2012 16:16:42 +0000</updated><resolved>Sun, 26 Jun 2011 17:27:46 +0100</resolved><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13055111" author="luc" created="Sun, 26 Jun 2011 17:27:46 +0100"><p>Fixed in subversion repository as of r1139831</p></comment><comment id="13055352" author="dhendriks" created="Mon, 27 Jun 2011 07:24:58 +0100"><p>&gt; Removing the method is backward compatible for users.</p>

<p>Since I used @Override on that method (Java 6), I now get an error, as the interface no longer has the method, so I'm no longer overriding anything. It is easy to remove the method, and the error is nice, as you'd want to remove the method anyway. It is therefore however not backward compatible...</p></comment></comments><issuelinks><issuelinktype id="12310051"><name>Supercedes</name><outwardlinks description="supercedes"><issuelink><issuekey id="12510666">MATH-596</issuekey></issuelink></outwardlinks></issuelinktype></issuelinks><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Mon, 27 Jun 2011 06:24:58 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>69933</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60356</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-603] StepNormalizer in MULTIPLES mode may give output twice for the same time point</title><link>https://issues.apache.org/jira/browse/MATH-603</link><project id="12310485" key="MATH">Commons Math</project><description><p>If the StepNormalizer is used in MULTIPLES mode, and a normalized point is very close to the last point (for instance the start time), then it may be rounded to the same point as the previous point. This is because 1 + e = 1, where e &lt;= machine epsilon. This results in output being given twice for the same point. I made a small patch to avoid this from happening.</p></description><environment/><key id="12511450">MATH-603</key><summary>StepNormalizer in MULTIPLES mode may give output twice for the same time point</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="dhendriks">Dennis Hendriks</reporter><labels><label>patch</label></labels><created>Fri, 24 Jun 2011 10:24:28 +0100</created><updated>Sat, 24 Mar 2012 16:16:48 +0000</updated><resolved>Sun, 10 Jul 2011 17:51:38 +0100</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13054323" author="dhendriks" created="Fri, 24 Jun 2011 10:25:47 +0100"><p>Proposed fix.</p></comment><comment id="13062761" author="luc" created="Sun, 10 Jul 2011 17:51:38 +0100"><p>Fixed in subversion repository as of r1144902</p>

<p>Thanks for the report and for the patch.</p></comment></comments><attachments><attachment id="12483683" name="step-normalizer-multiples-mode-output-twice-603.patch" size="968" author="dhendriks" created="Fri, 24 Jun 2011 10:25:47 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 10 Jul 2011 16:51:38 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>68617</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60357</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-602] Inverse condition number</title><link>https://issues.apache.org/jira/browse/MATH-602</link><project id="12310485" key="MATH">Commons Math</project><description><p>In SingularValueDecompositionImpl, the condition number is given as the ratio of the largest singular value to the smallest singular value. While this is the correct calculation, because of concerns over rank deficiency, researchers have traditionally used the inverse of the condition number as a more stable indicator of rank deficiency.</p></description><environment><p>All</p></environment><key id="12511395">MATH-602</key><summary>Inverse condition number</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="10">Implemented</resolution><assignee username="-1">Unassigned</assignee><reporter username="gsteri1">greg sterijevski</reporter><labels><label>Condition</label><label>Inverse</label><label>Number</label></labels><created>Thu, 23 Jun 2011 20:46:52 +0100</created><updated>Mon, 4 Mar 2013 18:53:32 +0000</updated><resolved>Mon, 16 Jul 2012 23:30:56 +0100</resolved><version>2.2</version><fixVersion>3.1</fixVersion><due/><votes>0</votes><watches>1</watches><timeoriginalestimate seconds="3600">1h</timeoriginalestimate><timeestimate seconds="3600">1h</timeestimate><comments><comment id="13082181" author="psteitz" created="Wed, 10 Aug 2011 07:38:25 +0100"><p>I am fine with the proposed change as long as it is clearly documented.  Patches welcome.</p></comment><comment id="13082731" author="gsteri1" created="Wed, 10 Aug 2011 23:46:43 +0100"><p>Patch</p></comment><comment id="13084251" author="erans" created="Fri, 12 Aug 2011 18:01:32 +0100"><p>Could you possibly write a unit test for the new method?</p></comment><comment id="13084253" author="gsteri1" created="Fri, 12 Aug 2011 18:06:27 +0100"><p>Certainly, did not want to crowd up the ticket. Will submit it later in the<br/>
day.</p>

<p>-Greg</p>

</comment><comment id="13084525" author="gsteri1" created="Sat, 13 Aug 2011 04:42:41 +0100"><p>The first trivial test....</p></comment><comment id="13084560" author="erans" created="Sat, 13 Aug 2011 08:53:02 +0100"><p>Committed in revision 1157345.<br/>
However it would be nice to have a non-trivial test, showing the usefulness of the method. IIUC, the rationale for adding it is that</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
getInverseConditionNumber()
</pre>
</div></div>
<p>is not always equal to</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
1 / getConditionNumber()
</pre>
</div></div>
<p><img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/help_16.gif" height="16" width="16" align="absmiddle" alt="" border="0"/><br/>
Which is rather not obvious from the code...</p></comment><comment id="13084667" author="gsteri1" created="Sat, 13 Aug 2011 18:20:27 +0100"><p>I agree. I been trying to cook up a nice illustration, but nothing that is<br/>
good enough yet.</p>

<p>In the meanwhile, the R manual has a good discussion which eloquently (at<br/>
least far more eloquently than me..) summarizes the usefulness of the<br/>
inverse condition number.</p>

<p><a href="http://stat.ethz.ch/R-manual/R-devel/library/Matrix/html/rcond.html" class="external-link" rel="nofollow">http://stat.ethz.ch/R-manual/R-devel/library/Matrix/html/rcond.html</a></p>

<p>Suffice it to say, having an index <span class="error">&#91;0..1&#93;</span> is a bit more useful in comparing<br/>
matrices than an unbounded number.</p>

<p>-Greg</p>

<p>PS Will post a better example after I have concocted it.</p>




</comment><comment id="13415729" author="erans" created="Mon, 16 Jul 2012 23:30:56 +0100"><p>Suggestion was implemented quite some time ago.<br/>
An "interesting" case (as a unit test) is still missing, but it should not require this issue to stay open.</p></comment></comments><attachments><attachment id="12490046" name="svdinvcond" size="2746" author="gsteri1" created="Wed, 10 Aug 2011 23:46:43 +0100"/><attachment id="12490316" name="tstsvd" size="999" author="gsteri1" created="Sat, 13 Aug 2011 04:42:40 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 10 Aug 2011 06:38:25 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2213</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160433</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-601] SingularValueDecompositionImpl psuedoinverse is not consistent with Rank calculation</title><link>https://issues.apache.org/jira/browse/MATH-601</link><project id="12310485" key="MATH">Commons Math</project><description><p>In the SingularValueDecompositionImpl's internal private class Solver, a pseudo inverse matrix is calculated:</p>

<p>In lines 2600-264 we have:</p>

<p>                if (singularValues<span class="error">&#91;i&#93;</span> &gt; 0) </p>
{
                 a = 1 / singularValues[i];
                }
<p> else </p>
{
                 a = 0;
                }

<p>This is not consistent with the manner in which rank is determined (lines 225 to 233). That is to say a matrix could potentially be rank deficient, yet the psuedoinverse would still include the redundant columns... </p>

<p>Also, there is the problem of very small singular values which could result in overflow.  </p></description><environment><p>All</p></environment><key id="12511394">MATH-601</key><summary>SingularValueDecompositionImpl psuedoinverse is not consistent with Rank calculation</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="psteitz">Phil Steitz</assignee><reporter username="gsteri1">greg sterijevski</reporter><labels><label>Pseudoinverse</label></labels><created>Thu, 23 Jun 2011 20:31:50 +0100</created><updated>Sat, 24 Mar 2012 16:16:30 +0000</updated><resolved>Sun, 18 Sep 2011 22:07:04 +0100</resolved><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><timeoriginalestimate seconds="86400">24h</timeoriginalestimate><timeestimate seconds="86400">24h</timeestimate><comments><comment id="13069501" author="joubert" created="Fri, 22 Jul 2011 12:02:05 +0100"><p>getRank() employs a local tolerance value to determine if a singular value should be counted.  </p>

<p>I have attached a patch that moves this tolerance value to a static variable in the main class to be accessed by the Solver in working out the pseudo-inverse.  This tolerance value will also guard against overflow.</p></comment><comment id="13069628" author="gsteri1" created="Fri, 22 Jul 2011 18:23:07 +0100"><p>Patch looks good to me... </p></comment><comment id="13069937" author="axelclk" created="Sat, 23 Jul 2011 11:29:01 +0100"><p>For reference values try wolfram alpha:<br/>
N[SingularValueDecomposition<span class="error">&#91;{{1,2},{1,2}}&#93;</span>]</p>

<p>It's still different.<br/>
See: <a href="https://issues.apache.org/jira/browse/MATH-320" title="NaN singular value from SVD" class="issue-link" data-issue-key="MATH-320"><del>MATH-320</del></a></p></comment><comment id="13069982" author="gsteri1" created="Sat, 23 Jul 2011 16:33:09 +0100"><p>Axel,</p>

<p>You are correct, while the getRank()  emthods criterion was changed to:<br/>
double tol = FastMath.max(m, n) * singularValues<span class="error">&#91;0&#93;</span> * EPS;<br/>
there is nothing happening at line 591. The moore-penrose will still be not<br/>
consistent to the ranks calculation.</p>

<p>Line 591 and onwards:</p>

<p>                if (singularValues<span class="error">&#91;i&#93;</span> &gt; 0) </p>
{
                    a = 1 / singularValues[i];
                }
<p> else </p>
{
                    a = 0;
                }

<p>So the change of the zero criterion is good, there is one more spot to fix.</p>

<p>I would also put a lower bound on tol:</p>

<p>tol = FastMath.max(m, n) * singularValues<span class="error">&#91;0&#93;</span> * EPS;</p>

<p>if( FastMath.abs(tol) &lt; FastMath.sqrt( MathUtils.SAFE_MIN) ){</p>

<p>}</p>


<p>-Greg</p>

</comment><comment id="13069983" author="gsteri1" created="Sat, 23 Jul 2011 16:35:09 +0100"><p>Sorry,</p>

<p>Sent the previous inadvertently,</p>

<p>f( FastMath.abs(tol) &lt; FastMath.sqrt( MathUtils.SAFE_MIN) )</p>
{
 tol = FastMath.sqrt( MathUtils.SAFE_MIN);
}

<p>That should guard against the case of a small matrix with small eigenvalues.</p>

<p>-Greg</p>

<p>On Sat, Jul 23, 2011 at 10:31 AM, Greg Sterijevski</p>
</comment><comment id="13084556" author="psteitz" created="Sat, 13 Aug 2011 07:24:03 +0100"><p>I just committed (r1157336) a modified version of Chris' patch.  Please review, test and confirm that it fixes the issue.</p>

<p>Changes to the patch:<br/>
0) Incorporated Greg's suggestion to put a floor on tol<br/>
1) Made tol final, but not static and explicitly passed it to the Solver constructor.  The value depends on instance data so should not be static.</p></comment><comment id="13084559" author="erans" created="Sat, 13 Aug 2011 08:26:46 +0100"><p>Also changed "max(m, n)" to "m" in accordance with Greg's remark on the "dev" ML for other such occurrences (revision 1157342).</p></comment></comments><attachments><attachment id="12487425" name="SingularValueDecompositionImpl.patch" size="1614" author="joubert" created="Fri, 22 Jul 2011 12:02:05 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Fri, 22 Jul 2011 11:02:05 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>60261</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60358</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-600] Possibly misleading comment in "ODEIntegrator" interface definition</title><link>https://issues.apache.org/jira/browse/MATH-600</link><project id="12310485" key="MATH">Commons Math</project><description><p>The method <tt>addEventHandler</tt> of interface <tt>ODEIntegrator</tt> has this comment:</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>    /** Add an event handler to the integrator. Uses a {@link BrentSolver}
     * with an absolute accuracy equal to the given convergence threshold,
     * as root-finding algorithm to detect the state events.
</pre>
</div></div>

<p><tt>ODEIntegrator</tt> being an interface it cannot enforce that a specific solver will be used in all implementations.</p></description><environment/><key id="12511223">MATH-600</key><summary>Possibly misleading comment in "ODEIntegrator" interface definition</summary><type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="erans">Gilles</reporter><labels><label>documentation</label></labels><created>Wed, 22 Jun 2011 12:13:09 +0100</created><updated>Sat, 24 Mar 2012 16:16:42 +0000</updated><resolved>Wed, 22 Jun 2011 13:04:55 +0100</resolved><due/><votes>0</votes><watches>0</watches><comments><comment id="13053201" author="luc" created="Wed, 22 Jun 2011 13:04:55 +0100"><p>You're right. Thanks for the report.</p>

<p>Fixed in subversion repository as of r1138419</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 22 Jun 2011 12:04:55 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>70277</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160434</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-599] Re-implementation of Secant-based root finding algorithms</title><link>https://issues.apache.org/jira/browse/MATH-599</link><project id="12310485" key="MATH">Commons Math</project><description><p>Apache Commons Math currently has a SecantSolver. It is unclear exactly what algorithm this solver implements. It states: "The algorithm is modified to maintain bracketing of a root by successive approximations. Because of forced bracketing, convergence may be slower than the unrestricted Secant algorithm. However, this implementation should in general outperform the Regula Falsi method." The Regula Falsi method is exactly the Secant method modified to maintain a bracketed solution. It is therefore unclear what other modifications were done to make it 'better' than the Regula Falsi method.</p>

<p>Besides the Secant and Regula Falsi methods, several other Secant-based root-finding algorithms exist, such as the the Illinois method, and the Pegasus method. All 4 are well-known, publisched algorithms.</p>

<p>I created a patch, which changes the following:</p>
<ul class="alternate" type="square">
	<li>Removed SecantSolver root-finding algorithm.</li>
	<li>Implemented new Secant-based root-finding algorithms: SecantSolver, RegulaFalsiSolver, IllinoisSolver, and PegasusSolver.</li>
	<li>Introduced BracketedSolution interface and AllowedSolutions enumeration, to control allowed solutions (under-approximations and over-approximations) for bracketed root-finding algorithms. Implemented for RegulaFalsiSolver, IllinoisSolver, and PegasusSolver.</li>
	<li>Fixed documentation of BaseUnivariateRealSolver.solve methods, such that documentation order of arguments matches the order of the actual arguments.</li>
</ul>


<p>Note that the original SecantSolver was removed, and replaced by a root-finding algorithm that actually implements the Secant root-finding algorithm. As such, existing code using the SecantSolver is not backwards compatible. That is, even though the new SecantSolver does implement the same interfaces, the root-finding solutions may differ. In particular, the new SecantSolver does not maintain a bracketed solution, and does not guarantee convergence.</p>

<p>I added unit tests, and I did a build, including checkstyle checking. I did not fix all checkstyle warnings though, as I consider some of them false positives.</p></description><environment/><key id="12511216">MATH-599</key><summary>Re-implementation of Secant-based root finding algorithms</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="dhendriks">Dennis Hendriks</reporter><labels><label>documentation</label><label>patch</label></labels><created>Wed, 22 Jun 2011 10:52:36 +0100</created><updated>Sat, 24 Mar 2012 16:16:47 +0000</updated><resolved>Wed, 20 Jul 2011 13:29:23 +0100</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13053157" author="dhendriks" created="Wed, 22 Jun 2011 11:31:22 +0100"><p>Patch described in the issue description.</p></comment><comment id="13053274" author="erans" created="Wed, 22 Jun 2011 15:06:43 +0100"><blockquote>
<p>Apache Commons Math currently has a SecantSolver. It is unclear exactly what algorithm this solver implements</p></blockquote>

<p>The clarification is certainly welcome. Thanks.</p>

<p>However, since the changes are mostly adding whole new files, could you please attach them as files (i.e. <em>not</em> in diff format)? All of them in "tar.gz" or "zip" archive file is fine too.</p></comment><comment id="13053291" author="psteitz" created="Wed, 22 Jun 2011 15:52:08 +0100"><p>Thanks for the patch!  </p>

<p>Dennis: I agree with your comments on the current implementation, which IIRC was designed to ensure bracketing and convergence.  Excellent job on the documentation for both the new classes and the change to SecantSolver.  Now is the time to fix this kind of thing (as we approach 3.0)</p>

<p>Gilles: diffs are generally preferred over tars / zips where possible.  In this case, the patch is fine.  The only thing missing is the ID Keywords prop, which I can add on commit.</p>

<p>Unless others have objections, I will apply the patch with minor mods only.</p></comment><comment id="13053317" author="erans" created="Wed, 22 Jun 2011 16:40:28 +0100"><p>The patch did not apply cleanly for me.<br/>
Moreover I prefer reading actual code than code mixed with "diff" commands.<br/>
Finally, what's the purpose of a "diff" for a new file?</p></comment><comment id="13053321" author="psteitz" created="Wed, 22 Jun 2011 16:58:37 +0100"><p>We use diffs to represent change to code.  There are lots of reasons that diffs are preferred to passing around files, which I will not repeat here.</p>

<p>The purpose of a diff for new files is that a) when the new file is part of a larger patch, the diff can represent the entire change b) the diff is guaranteed to be plain text c) the diff places the file in the right directory location.  Again, we use diffs to represent changes from a local checkout and the svn repository.  This enables us to unambiguously communicate changes or proposed changes to the code.</p>

<p>That said, if contributors have a hard time creating diffs including new files and committers are willing to work with zips / tars for new files, that is OK too.  The point is that diffs are better where possible.</p></comment><comment id="13053336" author="erans" created="Wed, 22 Jun 2011 17:31:40 +0100"><p>My purpose was to comply with your oft repeated policy of not changing two things at the same time. So I'd have committed first the modification of "SecantSolver" and then added the new implementations, one by one, as they are <em>not</em> interdependent.</p>

<p>The "diff" are certainly better for automated handling, but you can't argue that it's as easy to read, for a human, as a plain file...</p></comment><comment id="13053670" author="dhendriks" created="Thu, 23 Jun 2011 07:15:25 +0100"><ul class="alternate" type="square">
	<li>Updated patch. Can now be applied without failures.</li>
	<li>Added zip with the patched files, as requested by Gilles.</li>
</ul>
</comment><comment id="13054189" author="erans" created="Fri, 24 Jun 2011 01:12:50 +0100"><p>Some changes were needed in order to eliminate CheckStyle warnings.<br/>
Code added in revision 1139126.</p></comment><comment id="13054252" author="dhendriks" created="Fri, 24 Jun 2011 07:16:12 +0100"><p>I noticed that the build seems to fail. See <a href="http://vmbuild.apache.org/continuum/buildResult.action?buildId=9284&amp;projectId=97" class="external-link" rel="nofollow">http://vmbuild.apache.org/continuum/buildResult.action?buildId=9284&amp;projectId=97</a>. Maybe it is due to Java 1.5 being used, and not Java 1.6?</p>

<p>Also, should this issue not be marked 'resolved', now that the code is in trunk?</p></comment><comment id="13054257" author="luc" created="Fri, 24 Jun 2011 07:28:25 +0100"><p>Yes, Apache Commons Math should be compatible to Java 5 and the build systems are set up for this. So the various @Override on method implementations should be removed, in Java 5 they can be used only when a subclass reimplement a method already implemented by its superclass. It cannot be used for the first implementation of an interface.</p>

<p>I have also one suggestion concerning the AllowedSolutions enumerate. Could we select size either along abscissa and along ordinate ? This would imply adding ABOVE_SIDE and BELOW_SIDE to the existing LEFT_SIDE and RIGHT_SIDE.</p>

<p>When we are OK with the complete fix, then yes, the issue will be marked as resolved.</p></comment><comment id="13054276" author="dhendriks" created="Fri, 24 Jun 2011 08:12:05 +0100"><p>&gt; Could we select size either along abscissa and along ordinate?</p>

<p>I think it would be a nice improvement. It should be rather straightforward to implement this in the SecantBase class.</p></comment><comment id="13054329" author="erans" created="Fri, 24 Jun 2011 10:40:43 +0100"><p>I'd like to have a few more "cosmetic" changes.</p>

<ol>
	<li><tt>SecantBase</tt> should be renamed <tt>BaseSecantSolver</tt> to comply with other similar hierarchies.<br/>
In some of those other occurrences there is also the "Abstract" prefix but this could be removed there when/if we decide to remove the "interface" level.</li>
	<li>There could be an intermediate <tt>BaseBracketedSecantSolver</tt> to avoid duplicating (3 times) the <tt>getAllowedSolutions</tt> and <tt>setAllowedSolutions</tt> methods.</li>
</ol>


<p>Is that OK?</p></comment><comment id="13054331" author="dhendriks" created="Fri, 24 Jun 2011 10:44:32 +0100"><p>&gt; Is that OK?</p>

<p>I have no objections.</p></comment><comment id="13054379" author="luc" created="Fri, 24 Jun 2011 12:33:01 +0100"><p>You are right.</p></comment><comment id="13054720" author="erans" created="Fri, 24 Jun 2011 23:37:38 +0100"><p>Proposed changes committed in revision 1139455.</p></comment><comment id="13062716" author="luc" created="Sun, 10 Jul 2011 12:19:30 +0100"><p>A bunch of new changes have been committed.<br/>
Now the bracketing feature can be added in a post-precessing stage for solvers which do not provide it by themselves.<br/>
This is done using a static forceSide method in the UnivariateRealSolverUtils utility class.<br/>
Also the get/setAllowedSolutions have been replaced by new signatures for solve methods, for consistency<br/>
with other solvers. In fact, all setters and getters were removed between version 2.2 and 3.0 and the<br/>
properties settings are now either done at construction time (relative accuracy, absolute accuracy, function accuracy)<br/>
or at solve time (maximal number of evaluations). The allowed solutions settings seemed more similar to maximal<br/>
number of evaluation, so it it set the same way.</p>

<p>If everyone agrees, we could resolve this issue.</p></comment><comment id="13062803" author="erans" created="Sun, 10 Jul 2011 21:48:48 +0100"><p>I wonder whether it should be "AllowedSolution" instead of "AllowedSolutions". To me, it seems odd to have a plural where exactly one solution type is expected...</p></comment><comment id="13063222" author="dhendriks" created="Mon, 11 Jul 2011 09:33:44 +0100"><blockquote><p>If everyone agrees, we could resolve this issue.</p></blockquote>

<p>Nice work Luc. As far as I'm concerned, the issue is resolved.</p></comment><comment id="13068322" author="luc" created="Wed, 20 Jul 2011 13:29:23 +0100"><p>declaring the issue solved as per last comments above</p></comment><comment id="13068340" author="erans" created="Wed, 20 Jul 2011 13:57:15 +0100"><p>There was one unresolved issue (see my question 3 comments up).</p></comment><comment id="13069940" author="axelclk" created="Sat, 23 Jul 2011 12:02:04 +0100"><p>I used the new RegulaFalsi implementation in my project<br/>
  <a href="http://code.google.com/p/symja/wiki/UsedLibraries#Commons-Math_functions" class="external-link" rel="nofollow">http://code.google.com/p/symja/wiki/UsedLibraries#Commons-Math_functions</a><br/>
for the FindRoot function.</p>

<p>The call:<br/>
  FindRoot[Exp<span class="error">&#91;x&#93;</span>==Pi^3,</p>
{x,1,10}
<p>, RegulaFalsi] <br/>
seems to run endlessly?</p>

<p>For the other Solvers the method stops very quick.</p>

<p>Shouldn't there be a test for a "maximum iteration" in the while loop of the BaseSecantSolver#doSolve() method()?</p></comment><comment id="13069945" author="erans" created="Sat, 23 Jul 2011 13:08:21 +0100"><p>Thanks for reporting; I've already found a copy/paste bug in the code, although I don't think it is the cause of your problem.</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>FindRoot[Exp[x]==Pi^3,{x,1,10}, RegulaFalsi] 
</pre>
</div></div>

<p>I'm not used to this syntax (sorry), what is the function?</p>

<blockquote>
<p>Shouldn't there be a test for a "maximum iteration" <span class="error">&#91;...&#93;</span></p></blockquote>

<p>No, the failure criterion is the number of function evaluations, which is taken care of in the parent class through the <tt>computeObjectiveValue</tt> method.</p></comment><comment id="13069946" author="erans" created="Sat, 23 Jul 2011 13:10:32 +0100"><p>The copy/paste bug was corrected in revision 1150089.</p></comment><comment id="13069954" author="axelclk" created="Sat, 23 Jul 2011 14:14:24 +0100"><p>Ok I change my implementation.</p>

<blockquote>
<p>I'm not used to this syntax (sorry), what is the function?</p></blockquote>

<p>The syntax means something like this test case:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
	<span class="code-keyword">public</span> void testRegulaFalsi() {
		UnivariateRealFunction f = <span class="code-keyword">new</span> UnivariateRealFunction() {

			@Override
			<span class="code-keyword">public</span> <span class="code-object">double</span> value(<span class="code-object">double</span> x) <span class="code-keyword">throws</span> MathUserException {
				<span class="code-keyword">return</span> <span class="code-object">Math</span>.exp(x) - <span class="code-object">Math</span>.pow(<span class="code-object">Math</span>.PI, 3.0);
			}

		};
		<span class="code-object">double</span> result;
		UnivariateRealSolver solver = <span class="code-keyword">new</span> RegulaFalsiSolver();

		result = solver.solve(100, f, 1, 10);
	}
</pre>
</div></div></comment><comment id="13070075" author="erans" created="Sun, 24 Jul 2011 00:52:19 +0100"><p>I opened a new <a href="https://issues.apache.org/jira/browse/MATH-631" title="&quot;RegulaFalsiSolver&quot; failure" class="issue-link" data-issue-key="MATH-631"><del>issue</del></a> for this problem.</p></comment><comment id="13073393" author="erans" created="Sun, 31 Jul 2011 22:28:53 +0100"><p>"AllowedSolutions" changed to"AllowedSolution" in revision 1152644.</p></comment></comments><issuelinks><issuelinktype id="12310010"><name>Incorporates</name><outwardlinks description="incorporates"><issuelink><issuekey id="12457288">MATH-345</issuekey></issuelink></outwardlinks></issuelinktype><issuelinktype id="10030"><name>Reference</name><outwardlinks description="relates to"><issuelink><issuekey id="12515172">MATH-631</issuekey></issuelink></outwardlinks></issuelinktype></issuelinks><attachments><attachment id="12483424" name="secant-based-root-finding-algos.patch" size="58074" author="dhendriks" created="Wed, 22 Jun 2011 11:31:22 +0100"/><attachment id="12483546" name="secant-based-root-finding-algos2.patch" size="58127" author="dhendriks" created="Thu, 23 Jun 2011 07:15:25 +0100"/><attachment id="12483547" name="secant-based-root-finding-algos2.zip" size="18235" author="dhendriks" created="Thu, 23 Jun 2011 07:15:25 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>3.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 22 Jun 2011 14:06:43 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>66603</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60359</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-598] Improving RandomDataTest</title><link>https://issues.apache.org/jira/browse/MATH-598</link><project id="12310485" key="MATH">Commons Math</project><description><p>The tests is non-consistent and not good enough. </p>

<p>To quote <a href="https://issues.apache.org/jira/secure/ViewProfile.jspa?name=psteitz" class="user-hover" rel="psteitz">Phil Steitz</a> from <a href="https://issues.apache.org/jira/browse/MATH-597" class="external-link" rel="nofollow">MATH-597</a>:</p>
<blockquote>
<p>Using testUtils.getQuartiles and chi-square is probably "best of breed." We might think about something fun like adding other quantile splits or even randomly generating quantiles (subject to bin size constraints).</p></blockquote></description><environment/><key id="12511005">MATH-598</key><summary>Improving RandomDataTest</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="mikl">Mikkel Meyer Andersen</reporter><labels>
                    </labels><created>Mon, 20 Jun 2011 22:14:34 +0100</created><updated>Sun, 7 Apr 2013 10:14:32 +0100</updated><resolved>Sun, 17 Mar 2013 17:19:31 +0000</resolved><fixVersion>3.2</fixVersion><due/><votes>0</votes><watches>4</watches><comments><comment id="13082180" author="psteitz" created="Wed, 10 Aug 2011 07:36:59 +0100"><p>This can wait for 3.1.  Patches welcome, of course!</p></comment><comment id="13420708" author="erans" created="Mon, 23 Jul 2012 16:19:12 +0100"><p>Most of the methods are now relocated (adapted and renamed "sample") into the distribution classes (in package "o.a.c.m.distribution"), following issue <a href="https://issues.apache.org/jira/browse/MATH-823" title="Distribution classes should allow randomData to be configured via constructor or setter" class="issue-link" data-issue-key="MATH-823"><del>MATH-823</del></a>.<br/>
If this improvement is to be done, it should be implemented in the <tt>IntegerDistributionAbstractTest</tt> and <tt>RealDistributionAbstractTest</tt> test classes (see method <tt>testSampling</tt>).</p></comment><comment id="13604670" author="psteitz" created="Sun, 17 Mar 2013 17:19:31 +0000"><p>What is left of this issue was fixed in r1457491.</p></comment><comment id="13624803" author="luc" created="Sun, 7 Apr 2013 10:14:32 +0100"><p>Closing issue as version 3.2 has been released on 2013-04-06.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 10 Aug 2011 06:36:59 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2214</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>11074</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-597] Improvement of sampling random exponential variables</title><link>https://issues.apache.org/jira/browse/MATH-597</link><project id="12310485" key="MATH">Commons Math</project><description/><environment/><key id="12510734">MATH-597</key><summary>Improvement of sampling random exponential variables</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="mikl">Mikkel Meyer Andersen</assignee><reporter username="mikl">Mikkel Meyer Andersen</reporter><labels><label>Exponential</label><label>Random</label></labels><created>Fri, 17 Jun 2011 23:53:25 +0100</created><updated>Sat, 24 Mar 2012 16:16:56 +0000</updated><resolved>Mon, 20 Jun 2011 22:48:44 +0100</resolved><fixVersion>2.2</fixVersion><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><timeoriginalestimate seconds="240">4m</timeoriginalestimate><timeestimate seconds="240">4m</timeestimate><comments><comment id="13051383" author="mikl" created="Fri, 17 Jun 2011 23:57:09 +0100"><p>Implementation of the method described in <br/>
Ahrens, J. H. and Dieter, U. (1972). Computer methods for sampling from the exponential and normal distributions. Communications of the ACM, 15, 873-882.</p></comment><comment id="13051711" author="psteitz" created="Sun, 19 Jun 2011 18:51:38 +0100"><p>Looks like a good improvement.</p>

<p>I have just a few comments:</p>

<p>0) Same comment as <a href="https://issues.apache.org/jira/browse/MATH-585" title="Very slow generation of gamma random variates" class="issue-link" data-issue-key="MATH-585"><del>MATH-585</del></a> on freely available reference.  If possible, we should add to javadoc.<br/>
1) It does not look like computing the constants takes much, so it might be better to do it on first call and save exact values instead of storing as constants.  I have not reviewed the paper, so am not sure if it makes any practical difference how accurate the stored values are.<br/>
2) Thanks for improving the test.  Looks like we have a real zoo in RandomDataTest.  Using testUtils.getQuartiles and chi-square is probably "best of breed."  We might think about something fun like adding other quantile splits or even randomly generating quantiles (subject to bin size constraints).  In any case, this is an improvement.  Thanks!</p></comment><comment id="13052224" author="mikl" created="Mon, 20 Jun 2011 22:10:42 +0100"><p>Cf. Phil's comments:</p>

<p>1) This patch calculates the constants at initiation.</p>

<p>0) As with <a href="https://issues.apache.org/jira/browse/MATH-585" title="Very slow generation of gamma random variates" class="issue-link" data-issue-key="MATH-585"><del>MATH-585</del></a>: I agree it is important, but I haven't been able to locate a free sample, and think that the quality of the algorithm is more important than whether it is freely available or not.</p>

<p>2) I agree it is important, and I'll create a new issue with this subject as it applies to all the distributions.</p></comment><comment id="13052228" author="psteitz" created="Mon, 20 Jun 2011 22:27:06 +0100"><p>Thanks!</p>

<p>I would say go ahead and commit.  Definitely an improvement.  Agreed on the reference comment.  Its a pity that the ACM does not make old Communications articles available online for free.  Here is a link to the Digital Library version (not really worth putting in the Javadoc, but may be useful to anyone looking at this ticket):<br/>
<a href="http://s.apache.org/sQ" class="external-link" rel="nofollow">http://s.apache.org/sQ</a></p></comment><comment id="13052240" author="mikl" created="Mon, 20 Jun 2011 22:48:44 +0100"><p>Fixed in revision 1137795.</p></comment><comment id="13082190" author="mikl" created="Wed, 10 Aug 2011 07:55:20 +0100"><p>This was only fixed in 3.0 as far as I recall. I think we should leave it at that and not fix 2.2 because this is not a bug but only an improvement. What do others think?</p></comment><comment id="13082321" author="erans" created="Wed, 10 Aug 2011 14:26:11 +0100"><p>2.2 cannot be fixed, since it was released <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p></comment><comment id="13082389" author="mikl" created="Wed, 10 Aug 2011 16:16:27 +0100"><p>Yes, you're absolutely right, Gilles - that should probably cost me a round of beer <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/>. What I meant was MATH_2_X in Subversion (e.g. for 2.2.1) <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/>.</p></comment></comments><attachments><attachment id="12483006" name="MATH597-1.patch" size="6528" author="mikl" created="Fri, 17 Jun 2011 23:57:09 +0100"/><attachment id="12483209" name="MATH597-2.patch" size="10892" author="mikl" created="Mon, 20 Jun 2011 22:10:42 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 19 Jun 2011 17:51:38 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>65574</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60360</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-596] GraggBulirschStoerIntegrator output too low</title><link>https://issues.apache.org/jira/browse/MATH-596</link><project id="12310485" key="MATH">Commons Math</project><description><p>I have the following problem:<br/>
x(3.0) = 4.0<br/>
x' = 3.0<br/>
t0 = 3.0<br/>
tend = 10.0</p>

<p>ODE solving using the GraggBulirschStoerIntegrator(1e-10, 100.0, 1e-7, 1e-7) integrator, gives me:</p>

<p>t, x, x'<br/>
3.0, 4.0, 3.0<br/>
3.105840007284127, 4.0, 3.0<br/>
3.829973288493221, 4.31752002185238, 3.0<br/>
8.784328663271161, 6.489919865479664, 3.0<br/>
10.0, 21.35298598981348, 3.0</p>

<p>Clearly, the value of x at time 3.10... should be something like 4.30... and not 4.0. Also, the value of x at time 10.0 should be around 25.0 and not be 21.35...</p>

<p>If we switch to the DormandPrince853Integrator(1e-10, 100.0, 1e-7, 1e-7), it gives me:</p>

<p>3.0, 4.0, 3.0<br/>
3.079933916721644, 4.239801750164932, 3.0<br/>
3.8792730839380845, 6.637819251814253, 3.0<br/>
10.0, 24.999999999999996, 3.0</p>

<p>as expected.</p>

<p>This seems to me like the GraggBulirschStoerIntegrator has a bug...</p></description><environment/><key id="12510666">MATH-596</key><summary>GraggBulirschStoerIntegrator output too low</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="dhendriks">Dennis Hendriks</reporter><labels>
                    </labels><created>Fri, 17 Jun 2011 15:44:50 +0100</created><updated>Sat, 24 Mar 2012 16:16:52 +0000</updated><resolved>Sun, 26 Jun 2011 17:28:07 +0100</resolved><version>3.0</version><due/><votes>0</votes><watches>1</watches><comments><comment id="13051106" author="dhendriks" created="Fri, 17 Jun 2011 15:46:32 +0100"><p>This is the file I used to test this. Running it gives the output as given in de issue description.</p></comment><comment id="13053278" author="luc" created="Wed, 22 Jun 2011 15:12:57 +0100"><p>It seems to me the problem is related to the interpolator the integrator sends to the step handler.<br/>
If I change the implementation of requiresDenseOutput to return true instead of false in the step handle, the error becomes about 9e-16.</p>

<p>Could you check this change completely solves the problem for you.</p>

<p>This requiresDenseOutput was added long ago (even before this code was included in Apache Commons Math) as an optimization to avoid calling computeDerivatives too many times for some integrators. In fact, only Dormand-Prince 8 (5,3) needs it because if the interpolator is not used, we can save 3 calls per step.</p>

<p>Now I think this feature brings more problems than it solves:</p>
<ul class="alternate" type="square">
	<li>it forces users to implement this method despite its purpose is not clear,</li>
	<li>obviously it creates problems with at least Gragg-Bulirsch-Stoer since this<br/>
   integrator really needs interpolation</li>
	<li>it will create the same problems for Adams integrators (they also need interpolation)</li>
	<li>this "optimization" is useful only for one integrator</li>
	<li>in many cases, even for this integrator it does not optimize anything since<br/>
   people will need interpolation</li>
</ul>


<p>So I would like to completely remove this.<br/>
I'm switching to the developers mailing list to discuss about it. It is a better place for discussion than<br/>
this JIRA issue. Please join the discussion here, and we will post the conclusion to complete this report.</p></comment><comment id="13053729" author="dhendriks" created="Thu, 23 Jun 2011 10:08:12 +0100"><p>New test, with output for both dense and non-dense step handler.</p>

<p>Note how for the non-dense step handler, the derivatives are computed for 10.0, and the result is 24.999999999999996. It then continues to call the step handler for time 10.0 with value 21.35298598981348, which is the value calculated for time 8.784328663271161, from before the previous time the step handler was called. It seems the compute derivative method is called for the appropriate times, only the output is not correctly used to set the interpolator values.</p>

<p>If you think this is indeed <b>only</b> caused by the optionality of dense output, or it is no longer relevant if non-dense output is removed, then removing the non-dense option would indeed fix this issue.</p>

<p>It would probably be better to create a separate issue for the removal of non-dense output. I have no objections to the removal of non-dense output.</p></comment><comment id="13055094" author="luc" created="Sun, 26 Jun 2011 15:57:10 +0100"><p>Yes, I think the optional dense output feature is the only problem here.<br/>
When the step handler doesn't requirs dense output and there are no events, a dummy step interpolator is used. This is due to the following statements in the integrator:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">if</span> (denseOutput) {
  interpolator = <span class="code-keyword">new</span> GraggBulirschStoerStepInterpolator(y, yDot0,
                                                        y1, yDot1,
                                                        yMidDots, forward);
} <span class="code-keyword">else</span> {
  interpolator = <span class="code-keyword">new</span> DummyStepInterpolator(y, yDot1, forward);
}
</pre>
</div></div>

<p>So in your case, you get a DummyStepInterpolator which simply copies some intermediate states computed earlier.</p>

<p>I will open a separate issue for removing optional dense output, solve the new issue and solve this one afterwards.</p></comment><comment id="13055112" author="luc" created="Sun, 26 Jun 2011 17:28:07 +0100"><p>Fixed in subversion repository as of r1139831.</p>

<p>Thanks for the report</p></comment></comments><issuelinks><issuelinktype id="12310051"><name>Supercedes</name><inwardlinks description="is superceded by"><issuelink><issuekey id="12511565">MATH-604</issuekey></issuelink></inwardlinks></issuelinktype></issuelinks><attachments><attachment id="12482939" name="MyTest.java" size="1590" author="dhendriks" created="Fri, 17 Jun 2011 15:46:32 +0100"/><attachment id="12483564" name="MyTest2.java" size="4935" author="dhendriks" created="Thu, 23 Jun 2011 10:08:12 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 22 Jun 2011 14:12:57 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>69988</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160435</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-595] StepNormalizer extension with normalization mode and bounds settings</title><link>https://issues.apache.org/jira/browse/MATH-595</link><project id="12310485" key="MATH">Commons Math</project><description><p>While I was the StepNormalizer to get output at fixed interval points instead of the points determined by the ODE integrator, I noticed the following:</p>

<p>1. It returns the first point (t0), and integer multiples of the step size add to it (t0+h, t0+2h, ...). Let's call these the 'normalized points'. I wanted it to return values at multiples of the step size, regardless of the start vaule. This would be a different semantics of 'normalized points'.</p>

<p>2. It returns the first point (t0), and the last point only if it is a 'normalized point'. I wanted it to never return the first point, and always return the last point, regardless of the 'normalized points'. If one used a StepHandler directly, and not a StepNormalizer, the first point would not be given to the handler, and the last point would. Thus, there is a difference in first/last point handling for 'normal' StepHandlers and StepNormalizer with FixedStepHandler.</p>

<p>Therefore I generalized the StepNormalizer:</p>

<p>1. It now has two modes (StepNormalizerMode enumeration). The first is INCREMENT, which has the old semantics for 'normalized points'. The second is MULTIPLES, which has the newly proposed semantics.</p>

<p>2. It is now possible to specify whether the first and last points should be given to the underlying fixed step size step handler (StepNormalizerBounds enumeration).</p>

<p>The changes should be transparent to already existing code, as I used the old semantics for existing constructors. The only change is in the calculation that determines whether the next 'normalized point' is in the current step interval. For forward integration, the end point was considered to be in the interval, while for backward integration the end point was considered NOT to be in the interval. I changed this so that the end point is in the interval regardless of the direction. This is the only non-backward compatible change. I personally consider the old behavior to be wrong... This change is also required for the correct functioning of the new bounds settings.</p>

<p>I also added a whole bunch of unit tests to test all different combinations of normalization modes, bounds settings (first/last inclusion), integration direction, and whether the 'normalized points' coincide/overlap the first/last points. This results in 2*4*2*2=32 unit tests.</p>

<p>I believe that the generalizations that I introduced make the StepNormalizer more powerful, and make it useful in more scenarios.</p></description><environment/><key id="12510639">MATH-595</key><summary>StepNormalizer extension with normalization mode and bounds settings</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="dhendriks">Dennis Hendriks</reporter><labels><label>patch</label></labels><created>Fri, 17 Jun 2011 10:01:53 +0100</created><updated>Sat, 24 Mar 2012 16:16:47 +0000</updated><resolved>Tue, 21 Jun 2011 16:49:55 +0100</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13050942" author="dhendriks" created="Fri, 17 Jun 2011 10:02:47 +0100"><p>Proposed generalization of the StepNormalizer.</p></comment><comment id="13052117" author="luc" created="Mon, 20 Jun 2011 19:12:11 +0100"><p>Thanks for the report and for the patch, Dennis.<br/>
Your approach is really interesting. I agree with the changes you propose and am glad you set them up in a compatible way for existing code.</p>

<p>I have only really minor remarks. I noticed you have already proposed the patch checking the box for allowing its inclusion as Apache code, but could you also put the Apache header in them. Of course, we could do that ourselves, but having the original author do it is more satisfying (at least to myself). There are also some checkstyle errors like line breaks. There is also a problem applying the patch on the StepNormalizer.java file to the current trunk version (most of the patch is rejected, I don't know why).</p></comment><comment id="13052381" author="dhendriks" created="Tue, 21 Jun 2011 07:55:53 +0100"><p>Updated patch.</p>

<p>1. I added the license as requested.</p>

<p>2. "svn diff" produced a patch that could not be applied using the Linux patch command. I used the Linux diff command instead (for StepNormalizer.java only), and put that part back into the patch. I can successfully apply it to trunk now.</p>

<p>3. I fixed a few javadoc warnings.</p>

<p>4. I could not figure out how to do checkstyle checking. The "mvn -Prc clean package" does not seem to do this?</p></comment><comment id="13052631" author="luc" created="Tue, 21 Jun 2011 16:49:55 +0100"><p>Fixed in subversion repository as of r1138061.</p>

<p>Thanks for the report and for the patch.</p>

<p>Concerning checkstyle, you can use "mvn clean site" to build the complete site including all reports, or "mvn checkstyle:checkstyle" to update only the checkstyle report.</p></comment></comments><attachments><attachment id="12482912" name="step-normalizer-mode-bounds.patch" size="37138" author="dhendriks" created="Fri, 17 Jun 2011 10:02:47 +0100"/><attachment id="12483247" name="step-normalizer-mode-bounds2.patch" size="37165" author="dhendriks" created="Tue, 21 Jun 2011 07:55:53 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Mon, 20 Jun 2011 18:12:11 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>70679</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60361</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-594] AdamsMoultonIntegrator documentation whitespace fix</title><link>https://issues.apache.org/jira/browse/MATH-594</link><project id="12310485" key="MATH">Commons Math</project><description/><environment/><key id="12510408">MATH-594</key><summary>AdamsMoultonIntegrator documentation whitespace fix</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="dhendriks">Dennis Hendriks</reporter><labels><label>documentation</label><label>patch</label></labels><created>Wed, 15 Jun 2011 08:30:23 +0100</created><updated>Sat, 24 Mar 2012 16:16:44 +0000</updated><resolved>Wed, 15 Jun 2011 08:46:44 +0100</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13049663" author="dhendriks" created="Wed, 15 Jun 2011 08:30:57 +0100"><p>Proposed patch.</p></comment><comment id="13049667" author="luc" created="Wed, 15 Jun 2011 08:46:44 +0100"><p>Fixed in subversion tree as of r1135946.</p>

<p>Thanks for the report and the patch.</p>

<p>Beware that the Adams integrators are still experimental one. I am working on them. They sometimes have a tendency to decrease the step down to zero regardless of the settings. I think this is a numeric issue but still have to solve it.</p></comment><comment id="13049677" author="dhendriks" created="Wed, 15 Jun 2011 09:30:24 +0100"><p>Of the integrators listed at <a href="http://commons.apache.org/math/userguide/ode.html" class="external-link" rel="nofollow">http://commons.apache.org/math/userguide/ode.html</a> (13.4 Available Integrators), are more of them experimental?</p>

<p>And maybe it is a good idea to list the experimental status at the documentation page (user guide) as well?</p></comment><comment id="13049678" author="luc" created="Wed, 15 Jun 2011 09:39:25 +0100"><p>Only the Adams integrators are experimental. There was another integrator (BDF, Backward Differential Formula) that was still more experimental but in fact it was not included in the library (it may be included once Adams integrators are OK, as it shares some code with them, as a multi-step integrator).</p>

<p>The good integrators I recommend are Dormand-Prince 8(5,3) and Gragg-Bulirsch-Stoer. They are very efficient and very accurate.</p>

<p>You are right, we should display the status of Adams integrators more prominently. The best thing however is really to remove this "experimental" status and have these integrators as suitable for production than the other ones. If we can't achieve this, we'll put a warning in the documentation.</p></comment></comments><attachments><attachment id="12482642" name="adams-moulton-integrator-docu-whitespace-fix.patch" size="986" author="dhendriks" created="Wed, 15 Jun 2011 08:30:57 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 15 Jun 2011 07:46:44 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>71217</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60362</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-593] 3D SubLine</title><link>https://issues.apache.org/jira/browse/MATH-593</link><project id="12310485" key="MATH">Commons Math</project><description><p>Add a SubLine class in the org.apache.commons.math.geometry.euclidean.threed package (similar to 2D and 3D lines).</p></description><environment/><key id="12510363">MATH-593</key><summary>3D SubLine</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="jensenc">Curtis Jensen</reporter><labels><label>Geometry</label><label>math</label></labels><created>Tue, 14 Jun 2011 22:05:51 +0100</created><updated>Sat, 24 Mar 2012 16:16:36 +0000</updated><resolved>Thu, 18 Aug 2011 19:51:31 +0100</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><timeoriginalestimate seconds="86400">24h</timeoriginalestimate><timeestimate seconds="86400">24h</timeestimate><comments><comment id="13083485" author="psteitz" created="Thu, 11 Aug 2011 21:23:50 +0100"><p>Enhancement can wait until 3.1</p></comment><comment id="13087193" author="luc" created="Thu, 18 Aug 2011 19:51:31 +0100"><p>Fixed in subversion repository as of r1159353</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Thu, 11 Aug 2011 20:23:50 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>64702</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60363</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-592] Convenience Methods for Retrieving the Start and End Points of a SubLine</title><link>https://issues.apache.org/jira/browse/MATH-592</link><project id="12310485" key="MATH">Commons Math</project><description><p>For convenience, it would be helpful to have methods in the SubLine class to retrieve the start and end points of the SubLine.</p></description><environment/><key id="12510354">MATH-592</key><summary>Convenience Methods for Retrieving the Start and End Points of a SubLine</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="jensenc">Curtis Jensen</reporter><labels><label>Geometry</label><label>math</label></labels><created>Tue, 14 Jun 2011 21:16:52 +0100</created><updated>Sat, 24 Mar 2012 16:17:03 +0000</updated><resolved>Mon, 20 Jun 2011 20:15:50 +0100</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><timeoriginalestimate seconds="86400">24h</timeoriginalestimate><timeestimate seconds="86400">24h</timeestimate><comments><comment id="13049969" author="luc" created="Wed, 15 Jun 2011 20:24:29 +0100"><p>Fixed in subversion as of r1136154.<br/>
A constructor using two endpoints has also been added.<br/>
Could you check if the API suits your needs ? The new method is called getSegments and returns a list of Vector2D arrays. Each element of the list correspond to one segment of the subline, and is contains exactly two points: a start point at index 0 and an endpoint at index 1. Perhaps a dedicated class with a getStart() and getEnd() methods would be better than a two points array.<br/>
Provisions have been taken for half-infinite or full lines (first and last points will have infinite coordinates with the right sign).</p></comment><comment id="13049976" author="jensenc" created="Wed, 15 Jun 2011 20:45:35 +0100"><p>Works great for me.  Thanks for the new constructor too.</p>

<p>I'm not sure if it makes sense or not, but there is the org.apache.commons.math.geometry.euclidean.twod.Segment class that could be used instead of a two point array.  I'm happy the way it is, just offering the Segment class in response to previous comment.</p></comment><comment id="13049993" author="luc" created="Wed, 15 Jun 2011 21:13:39 +0100"><p>I was considering the Segment class too. However, this class is really a speciliazed one for internal purposes in PolygonsSet (there is an horrible hack with OrderedTuple).</p>

<p>I guess I may simplify this class to hold only the start and end point, make it public (it is package protected) and use it in the new API, and add an internal OrderedSegment (and OrderedSegmentBuilder) inside PolygonsSet.</p>

<p>I'll resolve this issue when this will be ready. Please be aware that due to this change, you will have to slightly adapt your code.</p></comment><comment id="13050460" author="jensenc" created="Thu, 16 Jun 2011 15:41:06 +0100"><p>No worries, I'll adapt to what the final product is.  <br/>
We've gotten tired of writing our own geometry library and have been waiting for a while for a good Java geometry library to come along.  We're happy ASF has taken up the charge.</p></comment><comment id="13052169" author="luc" created="Mon, 20 Jun 2011 20:15:50 +0100"><p>Fix completed in subversion tree as of r1137749.<br/>
The Segment class is now public and simplified, and it is used to retrieve the endpoints.</p>

<p>One thing still bothers me, on the Line class. I would prefer to have it immutable, just like the various Vector classes and in fact I would like to have almost all classes in this geometry package immutable. This would imply some API changes in the partitioning package as applying a transform would create a new tree instead of changing it in place.</p>

<p>Would such a change still suit your needs or do you really want all these classes to be mutable ?</p></comment><comment id="13052177" author="jensenc" created="Mon, 20 Jun 2011 20:23:13 +0100"><p>Immutable works, and I agree, it is probably better than mutable.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 15 Jun 2011 19:24:29 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>70803</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>60364</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-591] SubLine Intersection</title><link>https://issues.apache.org/jira/browse/MATH-591</link><project id="12310485" key="MATH">Commons Math</project><description><p>It would be very helpful to have an intersection method in the SubLine class, similar to what is in the Line class.  The SubLine intersection method would return the point on the SubLines where two SubLines cross, null if they do not cross (or are parallel).</p></description><environment/><key id="12510352">MATH-591</key><summary>SubLine Intersection</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="jensenc">Curtis Jensen</reporter><labels><label>Geometry</label><label>math</label></labels><created>Tue, 14 Jun 2011 21:11:56 +0100</created><updated>Sat, 24 Mar 2012 16:16:44 +0000</updated><resolved>Mon, 20 Jun 2011 19:42:44 +0100</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><timeoriginalestimate seconds="86400">24h</timeoriginalestimate><timeestimate seconds="86400">24h</timeestimate><comments><comment id="13052148" author="luc" created="Mon, 20 Jun 2011 19:42:44 +0100"><p>Fixed in subversion repository as of r1137738.</p>

<p>An intersection method has been added. In addition to the other sub-line, it takes a boolean argument to specify if sub-lines are considered to be closed sets or open sets.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Mon, 20 Jun 2011 18:42:44 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>70806</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160436</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-590]  org.apache.commons.math.stats generated an error for OLSMultipleLinearRegression</title><link>https://issues.apache.org/jira/browse/MATH-590</link><project id="12310485" key="MATH">Commons Math</project><description><p>Hello, please be gentil since i am freshman student in statistics. I am trying to use the org.apache.commons.math.stats library for my multiple regression homework. The problem i am facing is that the error message telling me that OLSMultipleLinearRegression could not be resolved when i try to compile my java program; eventhough, i import org.apache.commons.math.stats in my program, <br/>
and i have OLSMultipleLinearRegression reg = new OLSMultipleLinearRegression() in my code.</p>

<p>I would like to report this error and get your help.</p>

<p>Many thanks.</p></description><environment/><key id="12510339">MATH-590</key><summary> org.apache.commons.math.stats generated an error for OLSMultipleLinearRegression</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="8">Not a Problem</resolution><assignee username="-1">Unassigned</assignee><reporter username="dtran">tran</reporter><labels>
                    </labels><created>Tue, 14 Jun 2011 19:47:21 +0100</created><updated>Wed, 15 Jun 2011 17:31:03 +0100</updated><resolved>Wed, 15 Jun 2011 17:31:03 +0100</resolved><version>2.2</version><due/><votes>0</votes><watches>0</watches><comments><comment id="13049848" author="psteitz" created="Wed, 15 Jun 2011 17:31:03 +0100"><p>This is a question for the user list.  </p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 15 Jun 2011 16:31:03 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>71182</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160437</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-589] JavaDoc error in OneWayAnovaImpl</title><link>https://issues.apache.org/jira/browse/MATH-589</link><project id="12310485" key="MATH">Commons Math</project><description><p>JavaDoc por OneWayAnovaImpl say:<br/>
Implements one-way ANOVA statistics defined in the OneWayAnovaImpl interface. <br/>
And the Javadoc must say:<br/>
Implements one-way ANOVA statistics defined in the OneWayAnova interface. </p></description><environment/><key id="12510244">MATH-589</key><summary>JavaDoc error in OneWayAnovaImpl</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="logongas">Lorenzo González</reporter><labels><label>javadoc</label></labels><created>Tue, 14 Jun 2011 00:00:56 +0100</created><updated>Sat, 24 Mar 2012 16:16:50 +0000</updated><resolved>Wed, 15 Jun 2011 17:43:21 +0100</resolved><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13049859" author="psteitz" created="Wed, 15 Jun 2011 17:43:21 +0100"><p>Fixed in r1136112.  Thanks for reporting this.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 15 Jun 2011 16:43:21 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>71180</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160438</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-588] Weighted Mean evaluation may not have optimal numerics</title><link>https://issues.apache.org/jira/browse/MATH-588</link><project id="12310485" key="MATH">Commons Math</project><description><p>I recently got this in a test run</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
testWeightedConsistency(org.apache.commons.math.stat.descriptive.moment.MeanTest)  Time elapsed: 0 sec  &lt;&lt;&lt; FAILURE!
java.lang.AssertionError: expected:&lt;0.002282165958997601&gt; but was:&lt;0.002282165958997157&gt;
	at org.junit.Assert.fail(Assert.java:91)
	at org.junit.Assert.failNotEquals(Assert.java:645)
	at org.junit.Assert.assertEquals(Assert.java:441)
	at org.apache.commons.math.TestUtils.assertRelativelyEquals(TestUtils.java:178)
	at org.apache.commons.math.TestUtils.assertRelativelyEquals(TestUtils.java:153)
	at org.apache.commons.math.stat.descriptive.UnivariateStatisticAbstractTest.testWeightedConsistency(UnivariateStatisticAbstractTest.java:170)
</pre>
</div></div>

<p>The correction formula used to compute the unweighted mean may not be appropriate or optimal in the presence of weights:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-comment">// Compute initial estimate using definitional formula
</span><span class="code-object">double</span> sumw = sum.evaluate(weights,begin,length);
<span class="code-object">double</span> xbarw = sum.evaluate(values, weights, begin, length) / sumw;

<span class="code-comment">// Compute correction factor in second pass
</span><span class="code-object">double</span> correction = 0;
<span class="code-keyword">for</span> (<span class="code-object">int</span> i = begin; i &lt; begin + length; i++) {
  correction += weights[i] * (values[i] - xbarw);
}
<span class="code-keyword">return</span> xbarw + (correction/sumw);
</pre>
</div></div></description><environment/><key id="12510061">MATH-588</key><summary>Weighted Mean evaluation may not have optimal numerics</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="psteitz">Phil Steitz</reporter><labels>
                    </labels><created>Sun, 12 Jun 2011 19:19:07 +0100</created><updated>Sat, 24 Mar 2012 16:16:31 +0000</updated><resolved>Sun, 5 Feb 2012 19:54:50 +0000</resolved><version>2.1</version><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13200835" author="tn" created="Sun, 5 Feb 2012 19:54:51 +0000"><p>Fixed it in r1240790.</p>

<p>There was a too strict equality test using an relative error of 10-14 which resulted in certain unforunate cases of an absolute error of 10-18.</p></comment><comment id="13200902" author="tn" created="Sun, 5 Feb 2012 21:17:31 +0000"><p>Corrected the equality test in r1240795 as it was leading to failure. In fact the test can range from very small to very large values which really requires a relative error estimate.</p>

<p>The test is problematic in general, as it may contain values from very different scales (due to its random nature), leading to unavoidable precision errors in the above formula.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 5 Feb 2012 19:54:51 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2215</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160439</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-587] AbstractIntegerDistribution cumulativeProbablitity(int, int) implementation does not match API documentation</title><link>https://issues.apache.org/jira/browse/MATH-587</link><project id="12310485" key="MATH">Commons Math</project><description><p>The documentation for this method says it computes p(x0 &lt; X &lt; x1), but the parameter documentation inconsistently states that the bounds are "inclusive" and what it actually returns is</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
cumulativeProbability(x1) - cumulativeProbability(x0 - 1);
</pre>
</div></div>
<p>which is p(x0-1 &lt;= X &lt; x1).<br/>
In the code above, x0 - 1 should be replaced by x0 + 1.</p></description><environment/><key id="12510035">MATH-587</key><summary>AbstractIntegerDistribution cumulativeProbablitity(int, int) implementation does not match API documentation</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="8">Not a Problem</resolution><assignee username="-1">Unassigned</assignee><reporter username="psteitz">Phil Steitz</reporter><labels>
                    </labels><created>Sun, 12 Jun 2011 07:55:50 +0100</created><updated>Sun, 12 Jun 2011 20:42:58 +0100</updated><resolved>Sun, 12 Jun 2011 20:42:58 +0100</resolved><due/><votes>0</votes><watches>0</watches><comments><comment id="13048424" author="psteitz" created="Sun, 12 Jun 2011 20:42:58 +0100"><p>Once the javadoc API descriptions were reverted to last release versions, the documentation matches the implementation.  Sorry I was confused by the javadoc.  I added a standalone test class confirming that the API contracts match the default impls.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>71364</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160440</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-586] Allow using a custom root-finding algorithm to detect state events</title><link>https://issues.apache.org/jira/browse/MATH-586</link><project id="12310485" key="MATH">Commons Math</project><description><p>When using an ODEIntegrator, event handlers can be added. The event handlers result in the construction of an EventState instance. Internally, that class uses a hard-coded instance of BrentSolver as root-finding algorithm. It should be possible to provide a custom root-finding algorithm to detect state events.</p></description><environment><p>n/a</p></environment><key id="12509815">MATH-586</key><summary>Allow using a custom root-finding algorithm to detect state events</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="dhendriks">Dennis Hendriks</reporter><labels><label>patch</label></labels><created>Fri, 10 Jun 2011 11:44:27 +0100</created><updated>Sat, 24 Mar 2012 16:16:44 +0000</updated><resolved>Tue, 14 Jun 2011 19:07:21 +0100</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13047131" author="dhendriks" created="Fri, 10 Jun 2011 11:48:12 +0100"><p>Proposed patch for this issue.</p></comment><comment id="13049171" author="dhendriks" created="Tue, 14 Jun 2011 14:10:17 +0100"><p>Proposed patch for this issue (2nd version, fixed method parameter documentation).</p></comment><comment id="13049317" author="luc" created="Tue, 14 Jun 2011 19:07:21 +0100"><p>Patch applied (it was almost perfect!)</p>

<p>Solved in subversion repository as of r1135726.</p>

<p>Thanks for the report and for the patch</p></comment></comments><attachments><attachment id="12482048" name="custom_solver_for_state_events.patch" size="9025" author="dhendriks" created="Fri, 10 Jun 2011 11:48:12 +0100"/><attachment id="12482552" name="custom_solver_for_state_events2.patch" size="9021" author="dhendriks" created="Tue, 14 Jun 2011 14:10:17 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 14 Jun 2011 18:07:21 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>71267</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160441</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-585] Very slow generation of gamma random variates</title><link>https://issues.apache.org/jira/browse/MATH-585</link><project id="12310485" key="MATH">Commons Math</project><description><p>The current implementation of gamma random variate generation works, but uses an inversion method. This is well-known to be a bad idea. Usually a carefully constructed rejection procedure is used. To give an idea of the magnitude of the problem, the Gamma variate generation in Parallel COLT is roughly 50 times faster than in Commons Math. </p></description><environment><p>All</p></environment><key id="12509278">MATH-585</key><summary>Very slow generation of gamma random variates</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="mikl">Mikkel Meyer Andersen</assignee><reporter username="darrenjw">Darren Wilkinson</reporter><labels><label>Gamma</label><label>Random</label></labels><created>Sat, 4 Jun 2011 19:37:26 +0100</created><updated>Sat, 24 Mar 2012 16:16:38 +0000</updated><resolved>Wed, 10 Aug 2011 07:56:06 +0100</resolved><version>2.2</version><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><timeoriginalestimate seconds="21600">6h</timeoriginalestimate><timeestimate seconds="21600">6h</timeestimate><comments><comment id="13044789" author="mikl" created="Mon, 6 Jun 2011 12:20:22 +0100"><p>Thank you very much for reporting this. I have looked in the documentation of cern.jet.random.tdouble.Gamma in the Parallel COLT, and they write:</p>
<blockquote>
<p>Method: Acceptance Rejection combined with Acceptance Complement.<br/>
High performance implementation. This is a port of RandGamma used in CLHEP 1.4.0 (C++). CLHEP's implementation, in turn, is based on gds.c from the C-RAND / WIN-RAND library. C-RAND's implementation, in turn, is based upon<br/>
J.H. Ahrens, U. Dieter (1974): Computer methods for sampling from gamma, beta, Poisson and binomial distributions, Computing 12, 223-246.</p>

<p>and</p>

<p>J.H. Ahrens, U. Dieter (1982): Generating gamma variates by a modified rejection technique, Communications of the ACM 25, 47-54.</p></blockquote>

<p>Looking in the ChangeLog file in the source for version 2.1.0.1 of CLHEP, I found that "CLHEP now uses the LGPL license.". As far as I can tell, LGPL is not compatible with Apache License which Commons Math is under. </p>

<p>This means that we must implement the method ourselves, e.g. based on the papers referred to above.</p>

<p>How urgent is your need for this speed-up? Unfortunately I'm quite busy for the next months, but please submit a patch if possible.</p></comment><comment id="13045058" author="darrenjw" created="Mon, 6 Jun 2011 21:03:36 +0100"><p>It is not urgent in the sense that I can use Parallel COLT! :-/ But it is quite a big deal for anyone wanting to use Commons Math and doing serious Monte Carlo work. Not only is the gamma distribution itself very important, but the gamma generator is used as the basis for simulating variates from many other distributions (including inverse gamma, chi-square, inverse chi-square, beta, Dirichlet, ...), so a slow gamma generator has lots of knock-on effects. It is certainly the next most important non-uniform generator to provide after Gaussian. It is not trivial to implement well, so I recommend copying or porting another implementation if possible, though I'm not an expert on open source software licenses so I don't know how practical that is. The GSL and R are GNU projects which have good C implementations, which I think are based on slightly better algorithms than the Ahrens and Dieter algorithm you mention above.</p></comment><comment id="13045326" author="mikl" created="Tue, 7 Jun 2011 09:46:43 +0100"><p>I know that it is indeed important, and I will look into it as soon as time allows me to. R is GPL, so using their implementation is a no-go. But the help file provides the methods they have implemented:</p>
<blockquote>
<p>‘rgamma’ for ‘shape &gt;= 1’ uses</p>

<p>Ahrens, J. H. and Dieter, U. (1982).  Generating gamma variates by<br/>
a modified rejection technique.  <em>Communications of the ACM</em>,<br/>
<b>25</b>, 47-54,</p>

<p>and for ‘0 &lt; shape &lt; 1’ uses</p>

<p>Ahrens, J. H. and Dieter, U. (1974).  Computer methods for<br/>
sampling from gamma, beta, Poisson and binomial distributions.<br/>
<em>Computing</em>, <b>12</b>, 223-246.</p></blockquote>

<p>Again, thanks for reporting this - we'll do our best to improve our implementation.</p></comment><comment id="13046519" author="mikl" created="Thu, 9 Jun 2011 14:08:10 +0100"><p>Just for your info: I'm working on implementing the methods described in the papers, and they are not too difficult. I need to do some cleaning, and then I'll upload a patch within a few weeks. Current status of a test run:</p>

<p>Generating 1000000 random gamma with mean 57.19 and var 245.91699999999997<br/>
nextGamma done<br/>
nextGamma took 23698.0 ms. with mean 57.17778720638469 and var 246.443482942482<br/>
nextNewGamma done<br/>
nextNewGamma took 230.0 ms. with mean 57.20940243394036 and var 245.80250080092702</p>

<p>So the performance gain is around 100 which isn't too bad <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/>.</p></comment><comment id="13046520" author="mikl" created="Thu, 9 Jun 2011 14:08:42 +0100"><p>To above is with shape = 13.3 and scale = 4.3</p></comment><comment id="13046528" author="darrenjw" created="Thu, 9 Jun 2011 14:22:56 +0100"><p>That looks great. I will be happy to do a bit of testing when the new version makes it into the snapshot. Thanks!</p></comment><comment id="13046779" author="mikl" created="Thu, 9 Jun 2011 20:59:08 +0100"><p>This is <em>NOT</em> a final patch proposal!</p>

<p>This is partly for experimenting and validation purposes (the old inversion based nextGamma is renamed to nextOldGamma), and partly for showing how I solved the many constants and caching involved in the algorithms (see the new class GammaRejectionSampler - I'm not sure what how I myself think about that way of doing it, maybe a private class in RandomDataImpl is better?).</p>

<p>So please comment on those two subjects.</p></comment><comment id="13047015" author="mikl" created="Fri, 10 Jun 2011 06:55:37 +0100"><p>It is probably possible to gain a bit more by using (reference found in R's ?rexp)</p>
<blockquote>
<p>Ahrens, J. H. and Dieter, U. (1972).  Computer methods for<br/>
sampling from the exponential and normal distributions.<br/>
<em>Communications of the ACM</em>, <b>15</b>, 873-882.</p></blockquote>
<p>instead of the currently simple inversion method to sample from the exponential distribution (step 8-9).</p></comment><comment id="13047110" author="mikl" created="Fri, 10 Jun 2011 10:53:34 +0100"><p>Algorithm SA (Ahrens) from p. 876 in the above is faster than the inversion-based exponential sampling. A couple of tests:</p>

<p>Generating 100000 random Exp(1.0) with mean 1.0 and var 1.0<br/>
nextOldExponential took 120.0 ms. with mean 0.9962712206756855 and var 0.9983243442732745<br/>
nextExponential took 20.0 ms. with mean 0.9958227425469129 and var 0.9990279223847179</p>

<p>Generating 10000000 random Exp(1.0) with mean 1.0 and var 1.0<br/>
nextOldExponential took 671.0 ms. with mean 1.0009038221005877 and var 1.001436791894477<br/>
nextExponential took 548.0 ms. with mean 1.0000246277478757 and var 0.9996828540541313</p>

<p>Generating 10000000 random Exp(12.23) with mean 12.23 and var 149.5729<br/>
nextOldExponential took 671.0 ms. with mean 12.229128607001826 and var 149.4295066207314<br/>
nextExponential took 543.0 ms. with mean 12.233285138487334 and var 149.55112465876087</p>

<p>Generating 10000000 random Exp(0.0013) with mean 0.0013 and var 1.69E-6<br/>
nextOldExponential took 669.0 ms. with mean 0.0012998098500627037 and var 1.6880018139800875E-6<br/>
nextExponential took 544.0 ms. with mean 0.0013003604434494178 and var 1.6893988569492528E-6</p>

<p>Generating 10000000 random Exp(6.0) with mean 6.0 and var 36.0<br/>
nextOldExponential took 687.0 ms. with mean 5.999958564653789 and var 36.008520922357725<br/>
nextExponential took 606.0 ms. with mean 5.997436087619412 and var 35.95429173708095</p>

<p>I'm not sure how much it will improve the new Gamma, because exponentials are rarely sampled (only in about 1-2% in average of the times, I guess).</p></comment><comment id="13047112" author="darrenjw" created="Fri, 10 Jun 2011 11:00:12 +0100"><p>That's great. Even if it makes little difference to the gamma generator, it is worth speeding up exponential generation - it is very important in many applications. In fact, in my own applications it is even more important than (general) gamma generation...</p></comment><comment id="13047176" author="darrenjw" created="Fri, 10 Jun 2011 14:21:47 +0100"><p>So, I am not very good at reading patches, and I am not set up right now to be able to apply it, but if I understand correctly, I think it looks fine. The idea is that there is just a single instance of the gamma class associated with each random number stream, and the reason for having it is to keep all of the constants and variables out of the name space of the random number stream. This makes sense. It probably could be done with an inner class, which might be slightly cleaner, but I do not feel strongly about it. Caching stuff is always a worry for thread safety, but is clearly important for performance. I'm guessing that the random number streams are not thread safe anyway, and that it is assumed that threads each have their own random number streams (preferably seeded differently!). Thanks again for making this a priority. You say it was quite easy, but I'm sure it was a lot of work!</p></comment><comment id="13047223" author="brentworden" created="Fri, 10 Jun 2011 15:40:17 +0100"><p>Here is a performance improvement suggestion to the implementation in the patch.</p>

<p>Since the loop in calculateQ is always a fixed number of iterations, eliminate it and compute the polynomial directly.  Also, instead of computing is as a1*v + a2*v^2 + a3*v^3 + ... a9*v^9 use the equivalent form v*(a1 + v*(a2 + v*(a3 + ... + v*(a8 + a9*v)))))))).  This method eliminates about half of the multiplications needed to compute the polynomial.</p>

<p>Apply the same technique to the loops found in Step 4 (lines 244-250 of MATH585-1.patch) and in Step 11 (lines 307-318).</p></comment><comment id="13047265" author="mikl" created="Fri, 10 Jun 2011 17:05:16 +0100"><p>Darren, exactly. I'm also thinking about an inner class, but it's quite easy to change so I'll wait to raise that question until I have written some tests and get closer to committing. Yes, it indeed took some time - but as you might imagine, it was good fun <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/>.</p>

<p>Brent, thanks for the proposals. They actually improved the algorithm slightly - around 7% in the (too) small tests I made (5 samples on each with one choice of parameters). Tests from before the change was made:</p>
<blockquote>
<p>Generating 1000000 random gamma(23.3, 4.5) with mean 104.85000000000001 and var 471.82500000000005<br/>
nextGamma took 502.0 ms. with mean 104.88707585478387 and var 471.92840503136534</p>

<p>Generating 1000000 random gamma(23.3, 4.5) with mean 104.85000000000001 and var 471.82500000000005<br/>
nextGamma took 483.0 ms. with mean 104.82077923605411 and var 470.1964562913125</p>

<p>Generating 1000000 random gamma(23.3, 4.5) with mean 104.85000000000001 and var 471.82500000000005<br/>
nextGamma took 542.0 ms. with mean 104.85678418999862 and var 471.6356319869918</p>

<p>Generating 1000000 random gamma(23.3, 4.5) with mean 104.85000000000001 and var 471.82500000000005<br/>
nextGamma took 471.0 ms. with mean 104.86904621863894 and var 472.21151252978103</p>

<p>Generating 1000000 random gamma(23.3, 4.5) with mean 104.85000000000001 and var 471.82500000000005<br/>
nextGamma took 491.0 ms. with mean 104.83920614619137 and var 473.1249434489607</p></blockquote>
<p>and afterwards</p>
<blockquote>
<p>Generating 1000000 random gamma(23.3, 4.5) with mean 104.85000000000001 and var 471.82500000000005<br/>
nextGamma took 447.0 ms. with mean 104.87373894447317 and var 471.39010480694253</p>

<p>Generating 1000000 random gamma(23.3, 4.5) with mean 104.85000000000001 and var 471.82500000000005<br/>
nextGamma took 455.0 ms. with mean 104.85845231810445 and var 472.42913996929894</p>

<p>Generating 1000000 random gamma(23.3, 4.5) with mean 104.85000000000001 and var 471.82500000000005<br/>
nextGamma took 482.0 ms. with mean 104.8721506023297 and var 471.1563267884988</p>

<p>Generating 1000000 random gamma(23.3, 4.5) with mean 104.85000000000001 and var 471.82500000000005<br/>
nextGamma took 460.0 ms. with mean 104.90256013379438 and var 472.7495176399378</p>

<p>Generating 1000000 random gamma(23.3, 4.5) with mean 104.85000000000001 and var 471.82500000000005<br/>
nextGamma took 461.0 ms. with mean 104.82129306938253 and var 470.8630399950795</p></blockquote>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
&gt; x1 &lt;- c(502, 483, 542, 471, 491)
&gt; x2 &lt;- c(447, 455, 482, 460, 461)
&gt; mean(x1)-mean(x2)
[1] 36.8
&gt; (mean(x2)-mean(x1))/mean(x1)
[1] -0.07392527
</pre>
</div></div></comment><comment id="13051372" author="mikl" created="Fri, 17 Jun 2011 23:42:28 +0100"><p>Patch proposal. I've made the rejection sampling class an inner class. Please comment.</p></comment><comment id="13051519" author="luc" created="Sat, 18 Jun 2011 15:14:05 +0100"><p>Here are my comments:</p>

<p>Shouldn't the inner class be static as well ? It seems independent from its upper class.</p>

<p>The constants seem to have few digits, could they be precomputed with a larger number of digits ?</p>

<p>The nextGamma should advertise throwing NotStrictlyPositiveException.<br/>
The two "throw new MathException()" should really be replaced by something else. Either something related to nonconvergence or even a MathInternalError if the correspondng cases should never happeN</p></comment><comment id="13051560" author="mikl" created="Sat, 18 Jun 2011 18:14:07 +0100"><p>The idea was that if I had to sample from both Gamma(1, 2) and Gamma(10, 34) I would instantiate two RandomDataImpl - one for sampling from Gamma(1, 2) and one for sampling from Gamma(10, 34). This would be efficient due to caching mechanisms in the inner class GammaRejectionSampler. If GammaRejectionSampler is made static, the two RandomDataImpl's would share the same GammaRejectionSampler, hence the caching would not be exploited, which is why it isn't static. I am not that used to using inner classes, so I might have misunderstood something - if so, please correct me.</p>

<p>Some of the constants are taken directly from the paper. I'll look into generating them with a larger number of digits.</p>

<p>Thanks for pointing out the exception-corrections.</p></comment><comment id="13051663" author="luc" created="Sun, 19 Jun 2011 10:56:59 +0100"><p>I was not suggesting a static field gammaRejectionSampler but a static inner class GammaRejectionSampler since you already pass the outer class as an argument to the constructor of the inner class.</p>

<p>You could also keep the inner class non-static but in this case you should not pass the reference to the outer class as a constructor argument and store it by yourself, but you should rely on the fact a non-static class is automatically bound to the instance of the outer class it belongs to and it does already have access to the outer class private fields. As you use randomData, this is perhaps a better solution than having a static inner class.</p></comment><comment id="13051702" author="mikl" created="Sun, 19 Jun 2011 17:12:02 +0100"><p>Now I understand. Originally GammaRejectionSampler was not an inner class but its own, and after I made it inner I did not give it as much thought as I should have. Thanks for clarifying. I like the solution of removing the reference to the outer class in the constructor best.</p>

<p>I'm working on the constants - it's not as easy as I thought, but the hunt is kind of fun <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/>.</p></comment><comment id="13051708" author="psteitz" created="Sun, 19 Jun 2011 18:23:43 +0100"><p>Wow, are having too much fun with this, Mikkel <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/>)  Nice work!</p>

<p>I agree with Luc's comments and wonder if it might actually be better to detach the inner class entirely and use composition instead - i.e. have RandomDataImpl (lazily) construct and hold a reference to one (or two) GammaRejectionSampler(s), passing itself as a constructor argument to the cached sampler instance(s).  I don't follow exactly how you are planning to implement the caching otherwise, since a single RandomDataImpl may get requests that split the parameter space.  Also, there is an invariant stated in the RandomDataImpl class javadoc that all of the variates that it sources come from the same (pluggble, reseedable) RandomGenerator.</p>

<p>I also agree with Luc on the exception typing and advertising.  We need to understand what exactly can cause the raw MathExceptions and type what we throw accordingly.  Also, I agree with Luc on advertising the NotStrictlyPositiveExceptions (or the superclass, IAE) for bad parameters.</p>

<p>One more thing.  It would be great if there were a freely available online reference somewhere.  Not a requirement, but it makes it easier for more people to join in the fun if the algorithm docs are freely available.</p>

<p>Thanks for jumping on this. </p></comment><comment id="13052035" author="mikl" created="Mon, 20 Jun 2011 17:14:48 +0100"><p>Thanks for the comments.</p>

<p>While working with the constants, I fell over a new and extremely interesting paper <span class="error">&#91;1&#93;</span> "A Simple Method for Generating Gamma Variables" from 2001 by Marsaglia and Tsang (I'm tempted to ask: who else? <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/>). It relies on a fast Gaussian random generator (which I believe we have). It is equivalent to the speed of the Gaussian random generator. Furthermore, it is really simple to implement. So in short, it looks very interesting. Actually, it also seems faster than Ahrens and Dieter (1982). A few samples (using JDKRandomGenerator):</p>
<blockquote>
<p>Generating 1000000 random gamma(1.0, 1.1) with mean 1.1 and var 1.2100000000000002<br/>
Marsaglia and Tsang (2001) took 269.0 ms. with mean 1.0997977261198317 and var 1.2113772336053434<br/>
Ahrens and Dieter (1982)   took 358.0 ms. with mean 1.1003522016214415 and var 1.212513390495578</p>

<p>Generating 1000000 random gamma(1.5, 2.0) with mean 3.0 and var 6.0<br/>
Marsaglia and Tsang (2001) took 279.0 ms. with mean 2.998893072520475 and var 5.978837507498615<br/>
Ahrens and Dieter (1982)   took 357.0 ms. with mean 2.9975071864627463 and var 5.999613004242815</p>

<p>Generating 1000000 random gamma(15.0, 1.0) with mean 15.0 and var 15.0<br/>
Marsaglia and Tsang (2001) took 259.0 ms. with mean 14.997425134380348 and var 15.006604469206364<br/>
Ahrens and Dieter (1982)   took 278.0 ms. with mean 14.993230125478366 and var 14.984980114735736</p></blockquote>

<p>It is implemented as follows:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">final</span> <span class="code-object">double</span> d = shape - 0.333333333333333333;
<span class="code-keyword">final</span> <span class="code-object">double</span> c = 1.0 / (3*FastMath.sqrt(d));

<span class="code-keyword">do</span> {
    <span class="code-keyword">final</span> <span class="code-object">double</span> x = generator.nextGaussian();
    <span class="code-keyword">final</span> <span class="code-object">double</span> v = (1+c*x)*(1+c*x)*(1+c*x);
    
    <span class="code-keyword">if</span> (v &lt;= 0) {
        <span class="code-keyword">continue</span>;                
    }

    <span class="code-keyword">final</span> <span class="code-object">double</span> xx = x*x;
    <span class="code-keyword">final</span> <span class="code-object">double</span> u = <span class="code-keyword">this</span>.nextUniform(0, 1);
    
    <span class="code-comment">// Squeeze
</span>    <span class="code-keyword">if</span> (u &lt; 1 - 0.0331*xx*xx) {
        <span class="code-keyword">return</span> scale*d*v;
    }
    
    <span class="code-keyword">if</span> (FastMath.log(u) &lt; 0.5*xx + d*(1 - v + FastMath.log(v))) {
        <span class="code-keyword">return</span> scale*d*v;
    }        

} <span class="code-keyword">while</span> (<span class="code-keyword">true</span>);
</pre>
</div></div>
<p>The algorithm is also usable for shape &lt; 1, but Ahrens and Dieter (1974) seems better in that case.</p>

<p>What do you think about using Marsaglia and Tsang (2001) instead of Ahrens and Dieter (1982)? I now prefer Marsaglia and Tsang (2001) <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/>.</p>

<p>Phil, in regards to freely available online reference, I agree that it would be great, but I also think that it is second to choosing a good algorithm.</p>

<p><span class="error">&#91;1&#93;</span>: <a href="http://dx.doi.org/10.1145/358407.358414" class="external-link" rel="nofollow">http://dx.doi.org/10.1145/358407.358414</a></p></comment><comment id="13052123" author="mikl" created="Mon, 20 Jun 2011 19:15:30 +0100"><p>A patch proposal. Note that the case of shape &gt;= 1 is now handled by a new algorithm from 2001.</p></comment><comment id="13069196" author="mikl" created="Thu, 21 Jul 2011 21:38:46 +0100"><p>Fixed in revision 1149350.</p></comment><comment id="13082157" author="psteitz" created="Wed, 10 Aug 2011 07:10:03 +0100"><p>Can we resolve this as FIXED now?</p></comment></comments><attachments><attachment id="12481973" name="MATH585-1.patch" size="15184" author="mikl" created="Thu, 9 Jun 2011 20:59:08 +0100"/><attachment id="12483003" name="MATH585-4-gamma.patch" size="17762" author="mikl" created="Fri, 17 Jun 2011 23:42:28 +0100"/><attachment id="12483186" name="MATH585-MT2001-1.patch" size="5631" author="mikl" created="Mon, 20 Jun 2011 19:15:30 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>3.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Mon, 6 Jun 2011 11:20:22 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>65615</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160442</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-584] KMeansPlusPlusClusterer incorrectly selects initial cluster centers and is unnecessarily slow</title><link>https://issues.apache.org/jira/browse/MATH-584</link><project id="12310485" key="MATH">Commons Math</project><description><p>The chooseInitialClusters() method declares sum as an int, when it should be double.  It also is quite slow because it contains a lot of unnecessary computation.  I'll attached a patch which corrects the problems.</p>

<p>I found the problems while comparing an optimized implementation of KMeans++ I've been working on with the one in commons math. </p>
</description><environment><p>All environments</p></environment><key id="12508995">MATH-584</key><summary>KMeansPlusPlusClusterer incorrectly selects initial cluster centers and is unnecessarily slow</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="drrandys">Randall Scarberry</reporter><labels><label>cluster</label><label>clustering</label></labels><created>Wed, 1 Jun 2011 17:50:27 +0100</created><updated>Sat, 24 Mar 2012 16:16:53 +0000</updated><resolved>Sun, 5 Jun 2011 17:28:48 +0100</resolved><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13042283" author="drrandys" created="Wed, 1 Jun 2011 17:53:15 +0100"><p>Patch file for correcting KMeansPlusPlusClusterer</p></comment><comment id="13042333" author="drrandys" created="Wed, 1 Jun 2011 19:09:49 +0100"><p>Noticed that one of the KMeanPlusPlusClusterer tests got caught in an infinite loop with my patched version, because of extremely small distances.  </p>

<p>Apply this patch instead &#8211; it ensures an exit from the while loop.</p></comment><comment id="13044570" author="luc" created="Sun, 5 Jun 2011 17:28:48 +0100"><p>Fixed in subversion repository as of r1132448.</p>

<p>Thanks for the report and for the patch.</p></comment></comments><attachments><attachment id="12481120" name="kmeans_plus_plus.patch" size="6475" author="drrandys" created="Wed, 1 Jun 2011 19:09:49 +0100"/><attachment id="12481109" name="kmeans_plus_plus.patch" size="5646" author="drrandys" created="Wed, 1 Jun 2011 17:53:15 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 5 Jun 2011 16:28:48 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>71902</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160443</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-583] Eigen value and SVD fail on a matrix with InvalidMatrixException while numpy has no problem on the same matrix</title><link>https://issues.apache.org/jira/browse/MATH-583</link><project id="12310485" key="MATH">Commons Math</project><description><p>Eigen value and SVD fail on a matrix with InvalidMatrixException while numpy has no problem on the same matrix</p>
</description><environment/><key id="12508221">MATH-583</key><summary>Eigen value and SVD fail on a matrix with InvalidMatrixException while numpy has no problem on the same matrix</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="vjeet">Vishv jeet</reporter><labels>
                    </labels><created>Tue, 24 May 2011 18:22:09 +0100</created><updated>Sat, 24 Mar 2012 16:16:35 +0000</updated><resolved>Wed, 20 Jul 2011 13:21:42 +0100</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13038675" author="vjeet" created="Tue, 24 May 2011 18:23:12 +0100"><p>matrix data</p></comment><comment id="13038676" author="vjeet" created="Tue, 24 May 2011 18:24:07 +0100"><p>1) java code to reproduce error</p>

<p>2) python code that works</p></comment><comment id="13068318" author="luc" created="Wed, 20 Jul 2011 13:21:42 +0100"><p>Fixed in subversion repository as of r1148714.</p>

<p>This issue was fixed by changing SVD implementation according to issue <a href="https://issues.apache.org/jira/browse/MATH-611" title="A fast and stable SVD implementation from JAMA" class="issue-link" data-issue-key="MATH-611"><del>MATH-611</del></a>.</p></comment></comments><issuelinks><issuelinktype id="12310010"><name>Incorporates</name><inwardlinks description="is part of"><issuelink><issuekey id="12512945">MATH-611</issuekey></issuelink></inwardlinks></issuelinktype></issuelinks><attachments><attachment id="12480284" name="EigenAndSVDFailure.java" size="1508" author="vjeet" created="Tue, 24 May 2011 18:24:07 +0100"/><attachment id="12480283" name="matrix.csv" size="181485" author="vjeet" created="Tue, 24 May 2011 18:23:12 +0100"/><attachment id="12480285" name="svd.py" size="230" author="vjeet" created="Tue, 24 May 2011 18:24:07 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>3.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 20 Jul 2011 12:21:42 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>67394</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160444</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-582] Percentile does not work as described in API</title><link>https://issues.apache.org/jira/browse/MATH-582</link><project id="12310485" key="MATH">Commons Math</project><description><p>example call:</p>

<p>StatUtils.percentile(new double[]</p>
{0d, 1d}
<p>, 25)   returns 0.0</p>

<p>The API says that there is a position being computed:  p*(n+1)/100 -&gt; we have p=25 and n=2<br/>
I would expect position 0.75 as result. Next step according to the API is: interpolation between both values at floor(0.25) and at ceil(0.25). Those values are 0d and 1d ... so lower + d * (upper - lower) should give 0d + 0.25*(1d - 0d) = 0.25</p>

<p>But the above call returns 0 as result. This does not make sense to me.</p>


<p>another example where I think the result is not correct:</p>

<p>StatUtils.percentile(new double[]</p>
{0d, 1d, 1d, 1d}
<p>, 25)   returns 0.25</p>

<p>we have pos = 25*5/100 = 1.25  ... so d = 0.25<br/>
values at position floor(1.25) and ceil(1.25) are 1d and 1d. How comes that the result is not between 1d?</p>
</description><environment/><key id="12508170">MATH-582</key><summary>Percentile does not work as described in API</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="moormaster">Andre Herbst</reporter><labels>
                    </labels><created>Tue, 24 May 2011 12:33:34 +0100</created><updated>Sat, 24 Mar 2012 16:16:56 +0000</updated><resolved>Sat, 11 Jun 2011 23:30:17 +0100</resolved><version>2.2</version><due/><votes>0</votes><watches>1</watches><comments><comment id="13046272" author="joubert" created="Thu, 9 Jun 2011 00:07:43 +0100"><p>I believe the implementation of percentiles within the library is in accordance with the NIST definition of percentiles.  To address your examples separately:</p>

<p>1.  What is missing from the API in the description of the implementation is "If pos &lt; 1 then return the smallest element in the array".  As such, the value of 0.0 returned in your first example is indeed correct for this implementation.</p>

<p>2.  In this definition of percentiles, the value of pos is a position in the array to be interpolated, but with array indices starting with 1. So with pos = 1.25, the value returned is correctly a quarter between the 1st and 2nd array values.</p>

<p>Percentiles do not meet intuition well when working with small datasets.  Other definitions, for example one with pos = 1+p*(n-1)/100 (like in MS Excel), may meet your requirement better in the above datasets, but not so well with medium ones.  With large datasets, the two definitions converge.</p>

<p>Hope this helps,</p>

<p>Chris N</p></comment><comment id="13047318" author="joubert" created="Fri, 10 Jun 2011 18:45:32 +0100"><p>Added a patch for org.apache.commons.math.stat.Percentile documentation in order to better describe the correct implementation of percentiles as recommended by NIST.</p></comment><comment id="13047997" author="psteitz" created="Sat, 11 Jun 2011 23:30:17 +0100"><p>Patch applied (with test) in trunk in r1134802.</p>

<p>Thanks, Andre for the report and thanks, Christopher for the patch!</p></comment></comments><attachments><attachment id="12482081" name="MATH-582.patch" size="1174" author="joubert" created="Fri, 10 Jun 2011 18:45:32 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 8 Jun 2011 23:07:43 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>676</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160445</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-581] Support for iterative linear solvers</title><link>https://issues.apache.org/jira/browse/MATH-581</link><project id="12310485" key="MATH">Commons Math</project><description><p>Dear all,<br/>
this issue has already been discussed on the forum. The idea is to implement the most popular linear iterative solvers (CG, SYMMLQ, etc...) in commons-math. The beauty of these solvers is that they do not need direct access to the coefficients of the matrix, only matrix-vector products are necessary. This is goof, as sometimes it is inetficient to store the coefficients of the matrix.<br/>
So basically, before implementing the iterative solvers, we need to define an interface slightly more general than a matrix, namely LinearOperator, with only one basic operation: matrix-vector product.<br/>
Here are a few interfaces and abstract classes that do that. Nothing fancy yet, I just wanted to have you advice on the implementation before I commit some solvers.<br/>
I thought these classes could go in a package org.apache.commons.math.linearoperator, but really, I haven't got a clue...<br/>
Best regards,<br/>
Sebastien</p></description><environment/><key id="12507841">MATH-581</key><summary>Support for iterative linear solvers</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="celestin">Sébastien Brisard</reporter><labels><label>iterative</label><label>linear</label><label>solver</label></labels><created>Fri, 20 May 2011 05:08:05 +0100</created><updated>Thu, 24 Nov 2011 19:47:44 +0000</updated><resolved>Thu, 24 Nov 2011 19:47:05 +0000</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13044578" author="luc" created="Sun, 5 Jun 2011 18:03:57 +0100"><p>I had a look at your proposal.<br/>
It seems interesting and the top level interfaces hierarchy you propose seems good and in line with what exists in Apache Commons Math. There are no error handling though.</p>

<p>If I understand correctly, the new LinearOperator interface would become a super-interface for the existing ones.</p></comment><comment id="13044638" author="erans" created="Sun, 5 Jun 2011 23:33:47 +0100"><p>Didn't we agree that we should avoid defining an interface if there would be a single best way to implement it? <span class="error">&#91;The rationale being that it would make it impossible to add, and a fortiori, remove) methods without breaking compatibility.&#93;</span></p>

<p>I think that what we have here are perfect candidates for abstract classes.<br/>
All that is needed is:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> <span class="code-keyword">abstract</span> class RealLinearOperator {
  <span class="code-comment">// ...
</span>}
</pre>
</div></div>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> <span class="code-keyword">abstract</span> class InvertibleRealLinearOperator <span class="code-keyword">extends</span> RealLinearOperator {
  <span class="code-comment">// ...
</span>}
</pre>
</div></div></comment><comment id="13044728" author="luc" created="Mon, 6 Jun 2011 07:45:56 +0100"><p>Abstract classes are fine, yes.</p></comment><comment id="13044737" author="celestin" created="Mon, 6 Jun 2011 08:56:54 +0100"><p>Thanks for this review.<br/>
I have implemented some exceptions to handle linear operators which should be symmetric, positive definite, etc.<br/>
These propositions are a little more intrusive, as the english error messages are to be written in org.apache.commons.math.exception.util.LocalizedFormats. I thought I would submit those changes once we agreed on the general picture.</p>

<p>OK for getting rid of the interfaces, keeping only the abstract classes. It is not consistent with AbstractRealMatrix implementing RealMatrix, though.</p>

<p>As for the package hierarchy? In which package should the whole lot go?</p>

<p>Finally, following Gilles, I think that yes, a RealMatrix should extend a RealLinearOperator, the main difference being that one allows access to its coefficients. From this perspective, there is a slight overlap between getDomainDimension()/getCodomainDimension() on the one hand, and getColumnDimension()/getRowDimension() on the other hand (the rationale being that rows/columns do not necessarily make sense in the more general case of a linear operator).</p></comment><comment id="13047990" author="erans" created="Sat, 11 Jun 2011 23:04:34 +0100"><p>Indeed there will be a design inconsistency in having <tt>RealLinearOperator</tt> an abstract class while <tt>RealMatrix</tt> is an interface, but it seems that it is preferable (for the sake of avoiding future compatibility problems) to try not to use interfaces...</p>

<p>Having <tt>RealLinearOperator</tt> as an abstract class will make it impossible that the current <tt>RealMatrix</tt> (an interface) can extend it.<br/>
We could maybe turn <tt>RealMatrix</tt> into an abstract class, but that's for another issue...</p>

<p>The package "linear" seems appropriate for the code you are proposing.</p></comment><comment id="13053612" author="celestin" created="Thu, 23 Jun 2011 03:49:53 +0100"><p>As a follow-up, please find attached patch #01, which accounts (I think) for your comments.<br/>
This patch contains</p>
<ul class="alternate" type="square">
	<li><tt>LinearOperator</tt></li>
	<li><tt>RealLinearOperator</tt></li>
	<li><tt>InvertibleRealLinearOperator</tt></li>
	<li><tt>NonSelfAdjointLinearOperatorException</tt></li>
	<li><tt>NonPositiveDefiniteLinearOperatorException</tt></li>
</ul>


<p>As soon as it will be validated, I'll be glad to contribute some real stuff, namely</p>
<ul class="alternate" type="square">
	<li><tt>IterativeSolver</tt></li>
	<li><tt>PreconditionedIterativeSolver</tt></li>
	<li><tt>IterativeSolverMonitor</tt></li>
	<li><tt>JacobiPreconditioner</tt></li>
	<li><tt>ConjugateGradient</tt></li>
	<li>...</li>
</ul>


<p>For testing purposes, it would be convenient indeed to have <tt>RealMatrix</tt> derive from <tt>RealLinearOperator</tt>, hence making it an abstract class instead of an interface. If the submitted patch is accepted, maybe this issue should be closed, and a new issue regarding this specific modification be opened. Once this in turn is done, maybe I can open a new issue and commit a new patch with the iterative solvers themselves (including Unit tests, which are based on small, tractable matrices).</p></comment><comment id="13053613" author="celestin" created="Thu, 23 Jun 2011 03:50:37 +0100"><p>This is patch #01 for this issue</p></comment><comment id="13054160" author="erans" created="Thu, 23 Jun 2011 23:56:57 +0100"><p>What I really meant above is that all that is needed is 2 abstract base classes and nothing more (especially: no interface definition). Thus, "LinearOperator" should not be there.</p>

<p>Concerning the code formatting:</p>
<ul>
	<li>Some lines are misaligned.</li>
	<li>You should remove "meta-comments" such as
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>//@formatter:off
</pre>
</div></div></li>
	<li>IMHO, you should avoid using HTML entities; it makes the comment quite unreadable:
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre> * |&amp;nbsp;x&lt;sup&gt;T&lt;/sup&gt;&amp;nbsp;&amp;middot;&amp;nbsp;A&amp;nbsp;&amp;middot;&amp;nbsp;y -
 * y&lt;sup&gt;T&lt;/sup&gt;&amp;nbsp;&amp;middot;&amp;nbsp;A&amp;nbsp;&amp;middot;&amp;nbsp;x&amp;nbsp;&amp;nbsp;|
 * &amp;ge;&amp;nbsp;&amp;epsilon;,
</pre>
</div></div>
<p>In Javadoc, I think that we should stick to ASCII, and if explanations that contain elaborate mathematical formulae are needed, they should go in the separate user guide.</p></li>
</ul>


<p>Additionally:</p>
<ul>
	<li>The exception classes are missing an accessor for the "offending vector".</li>
	<li>It's not necessary to copy the arguments passed to the exception constructor.</li>
	<li>The "LocalizedFormats" message template is missing info on the offending vectors (and maybe the operator but I think that it isn't possible, right?). We should certainly use the "ExceptionContext" to pass on this info.</li>
</ul>


<p>I can take care these last points.</p>

<blockquote>
<p>For testing purposes, it would be convenient indeed to have RealMatrix derive from RealLinearOperator,</p></blockquote>
<p>I don't know why you need that. Anyways it is not backward-compatible and will potentially entails quite a few other changes. Turning "RealMatrix" into an abstract class is the way to go but it certainly needs a JIRA ticket. You are welcome to raise the issue.</p>

<p>What we can do in the meantime is to make "AbstractRealMatrix" inherit from "RealLinearOperator". Would that be OK for your purpose?</p></comment><comment id="13054273" author="celestin" created="Fri, 24 Jun 2011 08:11:00 +0100"><p>Thank you for this in-depth review.</p>
<ol>
	<li>Regarding interfaces: OK for getting rid of LinearOperator, I just wanted to keep this one to maintain some similarity with matrices in the existing code. However, I agree, this one is not really useful. By the way, could you point to interesting docs on design recommendations regarding the choice between interfaces and abstract classes. I often tend to follow the model implemented in Swing
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> <span class="code-keyword">interface</span> Foo{}
<span class="code-keyword">public</span> <span class="code-keyword">abstract</span> class AbstractFoo{}
<span class="code-keyword">public</span> class BasicFoo{}
</pre>
</div></div>
<p>which means that very often, the interface is not really needed. But you seem to indicate in you previous comments that it might also turn into a <b>bad</b> design, which I would like to avoid...</p></li>
	<li>Regarding formatting:
	<ul>
		<li>not sure about what you mean by misalignment, but I guess that it has to do with checkstyle, will look into it</li>
		<li>meta-comments: OK (sorry about that),</li>
		<li>I see your point with Javadoc comments, but I tend to think the contrary : I personally always have the javadoc opened in a nearby browser, and then really appreciate the rich formatting it offers, especially for mathematical formulas (fortunately, I didn't embedd MathML in this proposal, otherwise I would have had you scream...). Nevermind, I'll get rid of these.</li>
	</ul>
	</li>
	<li>Regarding the exceptions
	<ul>
		<li>I agree with you, it would be highly desirable to keep a reference to the real offending vector, instead of storing a deep-copy. However, the exceptions can be raised with either <tt>double[]</tt> or <tt>RealVector</tt>, which makes it difficult to handle it in a consistent way with references. That's the reason why I work with copies. From this point of view, the methods <tt>copyOffendingVector</tt> and the likes can be used as "accessors".</li>
		<li>I am not aware of <tt>ExceptionContext</tt>, but I will look into it. Sounds interesting indeed</li>
	</ul>
	</li>
	<li>Regarding the links between <tt>RealMatrix</tt> and <tt>RealLinearOperator</tt>
	<ul>
		<li>What you suggest is great (have <tt>RealMatrix</tt> inherit from <tt>RealLinearOperator</tt>)! Didn't think about that...</li>
		<li>What I mean about unit testing is that I used simple matrices (Hilbert) to test the conjugate gradient, and I then had to reimplement matrix-vector product in a <tt>RealLinearOperator</tt>, while it is already implemented in <tt>RealMatrix</tt>. Thinking about it, composition would have done just as well, with a little less sweat. Oh well...</li>
	</ul>
	</li>
</ol>


<p>Thank you for proposing to take care of the design of the exceptions. Meanwhile, can you also correct the formatting of these two classes? I'll take care of the rest. How should I submit the new, corrected patch? As a new attachment to this ticket (say <tt><a href="https://issues.apache.org/jira/browse/MATH-581" title="Support for iterative linear solvers" class="issue-link" data-issue-key="MATH-581"><del>MATH-581</del></a>-02.patch</tt>), or as a new JIRA ticket?</p></comment><comment id="13054733" author="erans" created="Sat, 25 Jun 2011 00:02:05 +0100">
<ol>
	<li>The issue is not that it would lead to a bad design. It is just a compromise between being backward-compatible while still allowing the design to evolve. Thus it was suggested to limit the potential sources of incompatibilities. A Java interface is such a source because you cannot add or remove a method without breaking compatibility. An abstract class is more lenient since you can add a method and still be backward-compatible.</li>
	<li>Formatting
	<ul>
		<li>Sometimes a line of code is not aligned with its counterpart in the previous line, like
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>  void doSomething(final double param1,
        final double param2) { // ...
</pre>
</div></div>
<p>instead of</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>  void doSomething(final double param1,
                   final double param2) { // ...
</pre>
</div></div></li>
		<li>There are several levels of documentations and several target audiences. Javadoc comment is a mix of user help and developer help. It should probably explain how to use to the code to a user experienced with the concept at hand; and it should also help the developer understand how the concepts are implemented. But IMHO, it should not try to be a math textbook because HTML is not suited for that (I mean, <em>both</em> the source and the rendering of mathematical formulas are ugly). I recently stumbled upon "LaTeXlet" which enables the embedding of LaTeX code in Javadocs. I had proposed to use it for complex formulas but the idea was not accepted. Can MathML be used in Javadoc?</li>
	</ul>
	</li>
	<li>There is a <tt>getData</tt> method in <tt>RealVector</tt>. So, we can always retrieve a <tt>double[]</tt>, the accessor will return it, and it can used to format a message that will display the contents of the offending vector.</li>
</ol>


<p>Personally, I'd prefer plain files (not a patch), which you can attach here (no need for a new issue). After the first commit of a new file, we can go on with patches for further modifications.</p></comment><comment id="13054801" author="celestin" created="Sat, 25 Jun 2011 03:22:30 +0100"><ol>
	<li>OK, I think I understand</li>
	<li>Formatting
	<ul>
		<li>I'll fix that</li>
		<li>I agree, HTML is not designed for math formatting. Although I love LaTeX, I personally do not like much latex-to-html based stuff, because it leads to images embedded in a HTML page, with unmatched fonts, unmatched sizes, and so on. MathML is in my view just the way to go, it can lead to beautiful web pages. However, MathML works best with xhtml, and the default java doclet produces html pages... But there is a workaround, and I've implemented a Javadoc taglet to have mathML in a javadoc page. It works with thunderbird, and extension to other browsers should not be too much of a problem. However, it requires to declare all formulas in a separate file, which can be considered as tiresome (but do remember that MathML is <b>very</b> verbose anyway, and it would completely mess your java file). I've also recently stumbled upon <a href="http://www.mathjax.org/" class="external-link" rel="nofollow">MathJax</a> which seems great (Math stack exchange seems to be using it), but I've never tested it myself. Anyway, you're very welcome to my (very simple) taglet if you want to give it a try.</li>
	</ul>
	</li>
	<li>I'm aware of the <tt>getData</tt> method, but there is no requirement that it returns a shallow copy (indeed there is no requirement that an <tt>AbstractRealVector</tt> be backed by a <tt>double[]</tt>, so again, I cannot guarantee that the exception would return a reference to the offending vector: sometimes it would, sometimes it would not. That's the reason I chose the consistent deep-copy option, and called the corresponding method <tt>copyOffendingVector</tt> since deep-copy <b>is</b> guaranteed. That's really open for discussion, though.</li>
</ol>
</comment><comment id="13054851" author="luc" created="Sat, 25 Jun 2011 11:04:49 +0100"><p>I also think MathJax is very interesting, and I have seen another taglet about this here: <a href="http://chadretz.wordpress.com/2010/12/19/mathml-inside-javadoc-using-mathjax-and-a-custom-taglet/" class="external-link" rel="nofollow">http://chadretz.wordpress.com/2010/12/19/mathml-inside-javadoc-using-mathjax-and-a-custom-taglet/</a>. However I don't think we can use it.</p>

<p>MathJax is really really large (git clone is 163 Mbytes) so distributing it would be really cumbersome. It is distributed under the terms of the Apache 2 licence, by the way. It can be used from an external server through a Content Distribution Frameworl. This would imply we rely on a service outside from the Apache infrastructure which is frowned upon. The terms of service of this CDN can be also changed at will without notice and stopped by MathJax sponsors.</p>

<p>The last way would be to have MathJax installed on Apache servers and not distributed in the Apache Commons Math component. I don't know if this would prevent or not people to build and use the javadoc without links to Apache (say when they are on a secured network not connected to Internet). If this is possible, we should open a dedicated JIRA issue for this. If this is not possible (i.e. javadoc could not be rendered without access to the MathJax resources), then we cannot ue it.</p></comment><comment id="13054862" author="celestin" created="Sat, 25 Jun 2011 12:21:42 +0100"><p>As for my taglet, the idea is to embed a little piece of javascript in order to render the mathml code in a html page (instead of xhtml). So it is very (very) lightweight, with two drawbacks</p>
<ul>
	<li>portability : the javascript code would be different for every single browser (tested on firefox for the moment)</li>
	<li>file management : each equation must be kept in a separate file : this is not a big concern, all files are stored in the <tt>doc-files/</tt> directory. I also have implemented a taglet called <tt>@inlineMathML</tt>, where the MathML code is typed directly in the <tt>*.java</tt> file, but it applies only to very small formulae, since the source file gets very quickly blotted. Anyway, as I said, I'm very happy to contribute this code if you think it can be of any use. We can start a new JIRA ticket on this.</li>
</ul>


<p>I think I kind of agree with Gilles' point of view on javadoc sticking with ASCII. However, the code I develop at work is numerically oriented, and I do not have enough time to write both a thorough Javadoc <b>and</b> a math-oriented doc. So I decided to go for a detailed Javadoc, with MathML formulas.</p>

<p>BTW, I only used a tip found <a href="https://developer.mozilla.org/en/Mozilla_MathML_Project/Authoring" class="external-link" rel="nofollow">here</a>. I remember having found on the internet the corresponding code for IE.</p></comment><comment id="13061803" author="celestin" created="Fri, 8 Jul 2011 07:57:50 +0100"><p>A new version, accounting (I hope) for your comments. For the problem regarding exceptions, all vectors are actually stored as <tt>RealVector</tt>, and a <b>reference</b> is returned by <tt>getOffendingVector</tt>. In case the exception was raised by a <tt>double[]</tt>, then an <tt>ArrayRealVector</tt> holding a shallow copy of the <tt>double[]</tt> is returned, so that <tt>getOffendingVector()</tt> consistently returns a reference to the object concerned.</p>

<p>I'm still not completely happy with those clases, I'm seriously considering removing the methods<br/>
<tt>RealLinearOperator.operate(double[], double[])</tt>, which I had put in for performance reasons (I wanted to avoid array creations as much as possible). Some crude monitoring on fairly large vector spaces (n = 786432) shows that the GC does its work very well indeed, so this method is no longer necessary, I think. Besides, such a method signature departs slightly from the Commons-math approach, as far as I understand. What are your views on this?</p></comment><comment id="13062120" author="celestin" created="Fri, 8 Jul 2011 20:12:08 +0100"><p><a href="https://issues.apache.org/jira/browse/MATH-581" title="Support for iterative linear solvers" class="issue-link" data-issue-key="MATH-581"><del>MATH-581</del></a>-03 is my new attempt. I think we're nearly there. Exceptions now return references, and I've got rid of the evil<br/>
<tt>operate(double[], double[])</tt> and <tt>solve(double[], double[])</tt> which were meant to avoid memory allocation.</p></comment><comment id="13063695" author="celestin" created="Tue, 12 Jul 2011 04:45:36 +0100"><p>I've had afterthoughts. I think ultimately, we will have <tt>AbstractRealMatrix</tt> inherit from <tt>RealLinearOperator</tt>, right?<br/>
Initially, I wanted to mark the difference between a <em>linear operator</em> and a <em>matrix</em>, so I named <tt>getDomainDimension</tt> and <tt>getCodomainDimension</tt> the methods returning respectively the number of columns and the number of rows of the underlying matrix. I think if we want <tt>AbstractRealMatrix</tt> and <tt>RealLinearOperator</tt> to blend nicely, I should rename these methods according to the naming convention of the existing <tt>AbstractRealMatrix</tt>. Otherwise, the constructors would have different signatures!</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>RealLinearOperator(dimDomain, dimCodomain)</pre>
</div></div>
<p>(It would be unlogical to have the codomain appear before the domain). Since <tt>dimDomain == columnDimension</tt> and <tt>dimCodomain == rowDimension</tt>, this would translate into</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>RealLinearOperator(columnDimension, rowDimension)</pre>
</div></div>
<p>as opposed to</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>AbstractRealMatrix(rowDimension, columnDimension)</pre>
</div></div>
<p>which is a very dangerous inconsistency. <a href="https://issues.apache.org/jira/browse/MATH-581" title="Support for iterative linear solvers" class="issue-link" data-issue-key="MATH-581"><del>MATH-581</del></a>-04.zip corrects this.</p></comment><comment id="13063841" author="erans" created="Tue, 12 Jul 2011 12:57:46 +0100"><p>Initial code committed (with some "cosmetic" changes) in revision 1145559.</p></comment><comment id="13064074" author="celestin" created="Tue, 12 Jul 2011 20:06:04 +0100"><p>I'm sorry. Did you forget to commit <tt>InvertibleRealLinearOperator</tt> ?</p></comment><comment id="13064153" author="erans" created="Tue, 12 Jul 2011 22:35:12 +0100"><p>Oops, sorry. Done in revision 1145779.</p></comment><comment id="13064756" author="celestin" created="Wed, 13 Jul 2011 19:37:57 +0100"><p><tt><a href="https://issues.apache.org/jira/browse/MATH-581" title="Support for iterative linear solvers" class="issue-link" data-issue-key="MATH-581"><del>MATH-581</del></a>-05.patch</tt> makes <tt>getRowDimension()</tt> and <tt>getColumnDimension</tt> <tt>abstract</tt><br/>
I alsor removed the constructor.</p></comment><comment id="13065850" author="erans" created="Fri, 15 Jul 2011 11:48:05 +0100"><p>Changes discussed on the "dev" ML applied in revision 1147081.</p></comment><comment id="13079236" author="celestin" created="Thu, 4 Aug 2011 06:46:24 +0100"><p>Hi,<br/>
attached are some classes entering the heart of the matter.</p>
<ul>
	<li>Abstract classes
	<ul>
		<li><tt>AbstractIterativeLinearSolver</tt></li>
		<li><tt>AbstractPreconditionedIterativeLinearSolver</tt></li>
		<li><tt>AbstractIterativeLinearSolverMonitor</tt></li>
	</ul>
	</li>
	<li>Concrete implementations
	<ul>
		<li><tt>ConjugateGradient</tt></li>
		<li><tt>JacobiPreconditioner</tt></li>
		<li><tt>StoppingCriterion2</tt> (the "2" comes from the name this stopping criterion received in the "templates")</li>
	</ul>
	</li>
	<li>Unit tests
	<ul>
		<li><tt>ConjugateGradientTest</tt></li>
	</ul>
	</li>
	<li>Supporting classes for unit tests
	<ul>
		<li><tt>HilbertMatrix</tt></li>
		<li><tt>InverseHilbertMatrix</tt></li>
	</ul>
	</li>
</ul>


<p>Hope you like it!<br/>
Sébastien</p>

<p>EDIT Removed the attachment, because discussions on the forum revealed that the exceptions could be improved.</p></comment><comment id="13079542" author="celestin" created="Thu, 4 Aug 2011 20:33:55 +0100"><p><tt>exceptions.patch</tt> removes all getOffendinXXX methods. ExceptionContext will be used instead</p></comment><comment id="13079547" author="celestin" created="Thu, 4 Aug 2011 20:45:18 +0100"><p>conjugate-gradient.zip includes all above-mentioned classes, with correcte exceptions (with extensive use of ExceptionContext).<br/>
Thanks for your comments!</p></comment><comment id="13080172" author="erans" created="Fri, 5 Aug 2011 20:43:41 +0100"><p>Exceptions patch applied in revision 1154361.</p></comment><comment id="13080237" author="erans" created="Fri, 5 Aug 2011 22:21:36 +0100"><p>I just had a quick look; here are a few non-exhaustive remarks:</p>
<ul>
	<li>You should add the license header at the top of all files.</li>
	<li>I'm not fond of keys like "theVector", "otherOperator". We could name them according the parameter that triggered the exception e.g. in <tt>AbstractPreconditionedIterativeLinearSolver</tt>: "operator_m" and "operator_a" or just "m" and "a" <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/help_16.gif" height="16" width="16" align="absmiddle" alt="" border="0"/>.</li>
	<li>Couldn't the instance variables be made "final" (and assigned in the constructors)?</li>
	<li>There is a class "Incrementor" in package "util" which should be used to count things (e.g. iterations).</li>
	<li>If possible, I'd avoid cyclic references:
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> void setMonitor(<span class="code-keyword">final</span> AbstractIterativeLinearSolverMonitor monitor) {
  <span class="code-keyword">this</span>.monitor = monitor;
  monitor.setSolver(<span class="code-keyword">this</span>);
}
</pre>
</div></div>
<p>Also, you don't check that <tt>monitor</tt> is not null.</p></li>
	<li>Is a separate "monitor" class really necessary? Couldn't the monitoring be part of <tt>AbstractIterativeLinearSolver</tt>, e.g. through a "shouldStop" abstract method?</li>
	<li><tt>StoppingCriterion2</tt> is an odd name if there isn't yet a "StoppingCriterion" class. Are there other "monitor" types?</li>
</ul>
</comment><comment id="13080376" author="celestin" created="Sat, 6 Aug 2011 10:09:25 +0100"><p>Thanks for your comments!</p>
<h4><a name="License"></a>License</h4>
<p>OK</p>

<h4><a name="Keynames"></a>Key names</h4>
<p>I agree with you, they are not perfect, and more especially not homogeneous (I forgot to check that I got rid of all "the" prefixes...). Having said that, I would be happier with self-describing names, as opposed to symbols (a, m). Should we go for <tt>vector</tt>, <tt>operator</tt> (for a), and <tt>preconditioner</tt> (for m).</p>

<h4><a name="%22Couldn%27ttheinstancevariablesbemade%22final%22%28andassignedintheconstructors%29%3F%22"></a>"Couldn't the instance variables be made "final" (and assigned in the constructors)?"</h4>
<p>I do apologize, but I don't understand. Could you be more specific? Sorry to waste your time here.</p>

<h4><a name="Useof%7B%7BIncrementor%7D%7D"></a>Use of <tt>Incrementor</tt></h4>
<p>I wasn't aware of its existence. I'm very happy invoking it. My first thought would be to have the monitor create the incrementor, and return it to the solver, so that update() would no longer require the iteration number as a parameter. Also, the way I've implemented it at the moment, the solver <b>stops</b> if the maximum number of iterations is reached, but it is the responsibility of the user to <b>check</b> wether or not the solver stopped because of this (indicating poor convergence) or because the stopping criterion was fulfilled. This is not safe, as one may easily forget to check that everything happened according to the plan...</p>

<h4><a name="Cyclicreferences"></a>Cyclic references</h4>
<p>That is very true, thanks for pointing that out. What would you suggest (appart from getting rid of monitors, which I'm not really happy about, see below)?</p>

<h4><a name="Isaseparate%22monitor%22classreallynecessary%3F"></a>Is a separate "monitor" class really necessary?</h4>
<p>In my view, monitors are a very flexible way to handle CPU intensive iterative calculations. I should first mention that (IMO) monitors are much more than stopping criteria. The monitor is called at the end of each iteration, which is nice for logging purposes (e.g. if you want to plot how fast the algorithm converges). I also implemented similar monitors for large Monte-Carlo simulations (more than a week each), and monitors allowed me to schedule easily periodic backups (which proved to be useful, since the computer which ran the simulation was actually stopped because the power transformer was flooded...).<br/>
Finally, I don't like the idea of imposing the stopping criterion. There are many stopping criteria around. The only one I've submitted here is quite general, but you can think of more "physically-oriented" criteria. For example I'm using these iterative solvers at the moment for mechanical simulations. Then the stopping criterium could be related to the divergence of the stress tensor, which must be zero at equilibrium.<br/>
I hope I convinced you; if not, maybe we should move this point to the forum?</p>

<h4><a name="On%7B%7BStoppingCriterion2%7D%7D"></a>On <tt>StoppingCriterion2</tt></h4>
<p>I knew this would come up... That's why I mentioned in a previous comment that the "2" comes from the name this stopping criterion received in the "templates". Maybe I wasn't clear enough. This stopping criterion is a direct implementation of one of the stopping criteria proposed in <em>Templates for the Solution of Linear Systems: Building Blocks for Iterative Methods</em>.<br/>
I guess that the authors had not much more imagination than I had, so they just numbered the different criteria. For lack of a better idea, I did the same. To my defense, this is clearly stated in the javadoc; besides, I should mention that this book is freely available as a PDF file on the web. Anyway, I'm not dead-locked on this name, so let loose your imagination!!!</p></comment><comment id="13080395" author="erans" created="Sat, 6 Aug 2011 11:58:50 +0100"><p>About the usage of the <tt>ExceptionContext</tt>, could you start a thread on the ML? Maybe someone will have a good idea. One of the issue is that the keys should preferably make sense from the viewpoint of the caller. Hence, as you said, name like "m" and "a" could be confusing, since they are the parameter names (in the method definition) and not the argument names (as passed by the caller).</p>

<blockquote>
<p><span class="error">&#91;...&#93;</span> Sorry to waste your time here.</p></blockquote>
<p>Don't apologize; I knew that the comment was lacking... <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p>

<p>The idea is that, in general, code is easier to understand (and safer and more efficient) when as many variables as possible are actually constant (initialized in the constructor). I think that it's really worth trying to design classes that are immutable. Of course, this has consequences on the interactions between classes.</p>

<p>This design issue is also related to the other points: cyclic references and the role of the "monitor". Unfortunately, I didn't look at the details of yours classes's relationships, so it's difficult to come up with a concrete application to this case.<br/>
However, one question arises from your previous comment: You use the "monitor" to</p>
<ul>
	<li>monitor the computation (for plotting, making backup, ...)</li>
	<li>check the convergence of the algorithm</li>
</ul>


<p>I'm uncomfortable with these 2 very different things being clumped into one class, itself being tied to a particular set of classes in a particular package.</p>

<p>Monitoring is a feature that would be useful in many other areas (classes). And we should not have to re-implement similar thing in each of them. E.g. there was the same wish from the contributor of the CMA-ES optimizer implementation. In my opinion, this is also a kind of (advanced) logging, which I'm all for introducing in CM. However, this would imply an external library dependency, which is frowned upon by others.</p>

<p>On the other hand, checking for convergence is an integral part of the algorithm.</p>

<p>There was a similar discussion concerning optimizers (see classes in "optimization" package): There, the "monitor" is called "ConvergenceChecker": It might well be that you could reuse it here. It was also the result of a compromise between an "obvious" stopping criterion (usually tightly linked to the algorithm) and the potential need for user-defined special criteria (probably like the tensor condition you evoked).</p>

<p>Concerning the <tt>StoppingCriterion2</tt>, I had understood that you were "copying" the name from somewhere, but it nevertheless does not mean anything. At best, it could be used for a private inner class, renamed as "DefaultStoppingCriterion". In books, for pedagogical purposes, they could use a list of things to demonstrate increasingly better alternatives (I don't know if that's the case here): so you could have had "BadStoppingCriterion" and then "GoodStoppingCriterion", which, out of context, would not have made more sense... <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p></comment><comment id="13080759" author="celestin" created="Mon, 8 Aug 2011 06:54:54 +0100"><ul>
	<li>On the use of <tt>ExceptionContext</tt>: I'll start a thread</li>
	<li>Some (minor naming issues). I think <a href="http://mail-archives.apache.org/mod_mbox/commons-dev/201108.mbox/&lt;CAGRH7HobnHhmmd9D=e-7p1nWG-LsHm_Gs9QXh93__axAhO-nnQ@mail.gmail.com&gt;" class="external-link" rel="nofollow">this thread</a> on the ML confirmed that the following changes could be operated
	<ul>
		<li><tt>AbstractIterativeLinearSolver</tt> ---&gt; <tt>IterativeLinearSolver</tt>,</li>
		<li><tt>AbstractPreconditionedIterativeLinearSolver</tt> ---&gt; <tt>PreconditionedIterativeLinearSolver</tt>,</li>
		<li><tt>AbstractIterativeLinearSolverMonitor</tt> ---&gt; <tt>IterativeLinearSolverMonitor</tt>, provided of course that this class stays in the end,</li>
		<li><tt>StoppingCriterion2</tt> ---&gt; <tt>BasicStoppingCriterion</tt> (sorry for the lack of imagination, but maybe this new name will better suit your taste?).</li>
	</ul>
	</li>
	<li>Cyclic references and all that. The problem is both solver and monitor need to know about the other. I think <tt>IterativeLinearSolverMonitor</tt> are very related to <tt>java.util.EventListener</tt>. As far as I remember, these things work as follows
	<ul>
		<li>the listener is first registered by the component, e.g.
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
java.awt.Component.addFooListener(FooListener l)
</pre>
</div></div></li>
		<li>each time an event occurs, the component calls the listener
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
java.awt.Component.fireFooEventOccured(FooEvent event)
</pre>
</div></div></li>
		<li>The listener catches the event, and can retrieve the component from which it originates by the following method
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
java.util.EventObject.getSource()
</pre>
</div></div>
<p>At some point, I considered implementing monitors with exactly the same (rather neat) pattern, but considered it was probably "a jackhammer to drive a nail". However, if we want to make monitors more general, maybe that would be the way to go. And actually, we could probably reuse the very same object definitions (I guess the objects in java.util are intended to be more general than simply AWT/Swing). In any case, this is how the cyclic reference problem is avoided in AWT. What do you think of such a solution?</p></li>
	</ul>
	</li>
</ul>


<ul>
	<li>Stopping criterion. Ah! I see we have different views on this, but I take your point: objects should be confined to well-defined tasks (if I understood you correctly). I considered using the existing <tt>o.a.c.m.optimization.ConvergenceChecker</tt>, but in my view, the implementation is too restrictive, since convergence is explicitely checked based on the last two iterations. Some convergence checks only require the last iteration, so I could not see any way out. But I think it would be very nice to have a kind of general cross-package implementation of stopping criteria at large.</li>
</ul>


<ul>
	<li>Immutability. I guess that what you would like to have the following lines of code
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
IterativeLinearSolver solver = <span class="code-keyword">new</span> ConjugateGradient(a, monitor, <span class="code-keyword">true</span>);
solver.solve(b, x);
</pre>
</div></div>
<p>by</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
IterativeLinearSolver solver = <span class="code-keyword">new</span> ConjugateGradient(a, b, x, monitor, <span class="code-keyword">true</span>);
xx = solver.solve();
</pre>
</div></div>
<p>Please note that x has to be specified (initial guess) in the constructor. I gather that immutability is a very safe way of doing things. I'm just worried about the fact that it leads to copying objects (e.g. vectors), which can be quite large (since iterative linear solvers are used to solve large systems). Do you see this as an issue? Should we even consider it? I am not even thinking of the time issue, but rather of the memory issue.</p></li>
</ul>
</comment><comment id="13080954" author="erans" created="Mon, 8 Aug 2011 15:04:04 +0100"><blockquote>
<p>The problem is both solver and monitor need to know about the other.</p></blockquote>

<p>In your design, yes. My proposal in to change it so that the solver will pass the necessary information to the "Monitor", akin to what is done in the optimizers + <tt>ConvergenceChecker</tt>.<br/>
The monitor should not be able to alter the state of the solver.<br/>
At least, that is for the "checking" part which IMO should be a separate and quite small class.</p>

<p>For the real "monitor" part, you should really start a thread on the ML. I would be against the multiple special-purpose monitors tied to a specific algorithm. We must think of something generally applicable to all CM. That won't be trivial, and I'd leave that part out of the code which you are currently designing.<br/>
An alternative to using classes from "awt" or "swing", there is the <tt>java.util.Observable</tt> class which might be the basis for a CM monitoring feature.</p>

<blockquote>
<p>Some convergence checks only require the last iteration,</p></blockquote>

<p>Nothing forces you to use both arguments!</p>

<p>It would be beneficial that we find some common ground for checking convergence in different areas of CM. Maybe that from the point-of-view of iterative solvers, we can modify <tt>ConvergenceChecker</tt> so that it will become more flexible (i.e. applicable to both areas). Please post a message on the ML exposing your requirements and how <tt>ConvergenceChecker</tt> should be changed to fulfill them.</p>

<blockquote>
<p>Immutability. I guess that what you would like to have <span class="error">&#91;...&#93;</span></p></blockquote>

<p>Actually, no. The main issue is how to best separate the attributes of the algorithm from attributes of the data. Admittedly, there is a lot of subjectivity here. For example, see the current implementation of the root solvers (which itself was refactored to look like what was done for the optimizers).<br/>
So, in your case, a wild guess would be:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">final</span> IterativeLinearSolver solver = <span class="code-keyword">new</span> ConjugateGradient(monitor);
xx = solver.solve(a, b, x, <span class="code-keyword">true</span>);
</pre>
</div></div>
<p>Thus the "ConjugateGradient" instance is reusable: You don't need a new instance to solve different problems, represented by different input data. But I would associate the checker with the algorithm.</p>

<p>There is no clear-cut line; IMO, it must be a compromise between full procedural style (everything passed to the method) and full OO (but not necessarily good OO) style (everything passed to the constructors or through setters).</p>
</comment><comment id="13081129" author="celestin" created="Mon, 8 Aug 2011 20:03:18 +0100"><p>I like <tt>Observer</tt>, didn't know about them. I posted on the ML, hope others will like it too.</p>

<blockquote><p>Nothing forces you to use both arguments!</p></blockquote>
<p>Even I could have come with this (not too clean, you must admit) solution <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p>

<p>On immutability. I like this solution, but this is potentially very stringent if combined with the <tt>Observer</tt> thing. Indeed, an evil use case would be</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
xx = solver.solve(a, b, x, <span class="code-keyword">true</span>);
</pre>
</div></div>
<p>Let's imagine that the monitor holds a <b>reference</b> to e.g. <tt>x</tt>. Then if the monitor modifies <tt>x</tt>, this can ruin the iterations. This means that at the begining of <tt>solve</tt>, a copy of <tt>x</tt> and <tt>b</tt> must be made. That's no problem with these vectors, but it might be more problematic with the <tt>RealLinearOperator</tt>: some kind of <tt>clone()</tt> method <b>must</b> be implemented. Do you see that as a potential problem?</p></comment><comment id="13082176" author="psteitz" created="Wed, 10 Aug 2011 07:30:04 +0100"><p>I think we should try to find a way to get a simple version of this in 3.0; but would be OK pushing out to 3.1.  Setting at 3.0 for now.</p></comment><comment id="13105908" author="celestin" created="Fri, 16 Sep 2011 07:52:46 +0100"><p>Attached file <tt>conjugate-gradient.zip</tt> has been updated with a new version of this solver. It makes use of the new <tt>IterationManager</tt>.<br/>
Thanks for your comments.</p></comment><comment id="13113971" author="celestin" created="Sat, 24 Sep 2011 14:22:36 +0100"><p>Hi,<br/>
had anyone had time to play around with this code? Any thoughts?<br/>
Sébastien</p></comment><comment id="13114271" author="celestin" created="Sun, 25 Sep 2011 15:49:35 +0100"><p>Committed in rev r1175404. Happy to take any comments/corrections!</p></comment><comment id="13156884" author="celestin" created="Thu, 24 Nov 2011 19:47:05 +0000"><p>The proposed framework (+ two iterative solvers: conjugate gradient and SYMMLQ) are satisfactory for the time being. Practical use cases by other people will tell whether or not the current API needs changes.</p></comment></comments><attachments><attachment id="12483541" name="MATH-581-01.patch" size="18231" author="celestin" created="Thu, 23 Jun 2011 03:50:37 +0100"/><attachment id="12485697" name="MATH-581-02.zip" size="5560" author="celestin" created="Fri, 8 Jul 2011 07:57:50 +0100"/><attachment id="12485774" name="MATH-581-03.zip" size="5298" author="celestin" created="Fri, 8 Jul 2011 20:12:08 +0100"/><attachment id="12486141" name="MATH-581-04.zip" size="5324" author="celestin" created="Tue, 12 Jul 2011 04:49:09 +0100"/><attachment id="12486410" name="MATH-581-05.patch" size="2037" author="celestin" created="Thu, 14 Jul 2011 06:57:06 +0100"/><attachment id="12486344" name="MATH-581-05.patch" size="2167" author="celestin" created="Wed, 13 Jul 2011 19:37:57 +0100"/><attachment id="12494763" name="conjugate-gradient.zip" size="17260" author="celestin" created="Fri, 16 Sep 2011 07:52:46 +0100"/><attachment id="12489388" name="conjugate-gradient.zip" size="14560" author="celestin" created="Thu, 4 Aug 2011 20:45:18 +0100"/><attachment id="12489385" name="exceptions.patch" size="8631" author="celestin" created="Thu, 4 Aug 2011 20:33:55 +0100"/><attachment id="12479876" name="linearoperator.zip" size="4115" author="celestin" created="Fri, 20 May 2011 05:32:56 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>10.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 5 Jun 2011 17:03:57 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2216</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160446</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-580] FastMath Performance Test should use larger ranges where the functions support them</title><link>https://issues.apache.org/jira/browse/MATH-580</link><project id="12310485" key="MATH">Commons Math</project><description><p>FastMath calculations should be faster than Math, especially over larger ranges of operands.</p>

<p>The Performance test code currently uses a very small range of operands (probably so the same range can be used for all tests).</p>

<p>The test should be enhanced to use much larger ranges where this is supported by the function under test.</p></description><environment/><key id="12507524">MATH-580</key><summary>FastMath Performance Test should use larger ranges where the functions support them</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="sebb@apache.org">Sebb</reporter><labels>
                    </labels><created>Tue, 17 May 2011 21:05:11 +0100</created><updated>Sun, 7 Apr 2013 10:14:18 +0100</updated><resolved>Wed, 13 Mar 2013 12:57:34 +0000</resolved><fixVersion>3.2</fixVersion><due/><votes>0</votes><watches>2</watches><comments><comment id="13082172" author="psteitz" created="Wed, 10 Aug 2011 07:25:32 +0100"><p>Pushing out to 3.1 awaiting patch</p></comment><comment id="13128517" author="ijuma" created="Sun, 16 Oct 2011 21:43:09 +0100"><p>Not sure if this has been fixed in trunk, but the performance test code had some issues: <a href="http://blog.juma.me.uk/2011/02/23/performance-of-fastmath-from-commons-math/" class="external-link" rel="nofollow">http://blog.juma.me.uk/2011/02/23/performance-of-fastmath-from-commons-math/</a></p></comment><comment id="13128547" author="erans" created="Mon, 17 Oct 2011 01:08:08 +0100"><p>In revision 1184958, the test class "FastMathTestPerformance" contains an additional method that performs the same micro-benchmark using another utility.  You are very welcome to check the methodology (see also <a href="https://issues.apache.org/jira/browse/MATH-637" title="Simple utility for micro-benchmarking" class="issue-link" data-issue-key="MATH-637"><del>MATH-637</del></a>).</p></comment><comment id="13601088" author="luc" created="Wed, 13 Mar 2013 12:57:34 +0000"><p>Fixed in subversion repository as of r1455921.</p>

<p>The extension was done in the individual tests, not in the global catch-all one. The results show that for large ranges, there are some important slow down (for example for asin/acos/atan, probably due to range reduction).</p></comment><comment id="13624802" author="luc" created="Sun, 7 Apr 2013 10:14:18 +0100"><p>Closing issue as version 3.2 has been released on 2013-04-06.</p></comment></comments><issuelinks><issuelinktype id="10030"><name>Reference</name><outwardlinks description="relates to"><issuelink><issuekey id="12617007">MATH-904</issuekey></issuelink><issuelink><issuekey id="12617008">MATH-905</issuekey></issuelink></outwardlinks></issuelinktype></issuelinks><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 10 Aug 2011 06:25:32 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2217</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>11075</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-579] FastMath.pow much slower than Math.pow</title><link>https://issues.apache.org/jira/browse/MATH-579</link><project id="12310485" key="MATH">Commons Math</project><description><p>calculating FastMath.pow(10, 0.1 / 20) is approximately 65 times slower as the Math.pow() function.<br/>
Ether this is a bug or a javadoc comment is missing.</p></description><environment><p>java version "1.6.0_22"<br/>
OpenJDK Runtime Environment (IcedTea6 1.10.1) (6b22-1.10.1-0ubuntu1)<br/>
OpenJDK 64-Bit Server VM (build 20.0-b11, mixed mode)</p>


<p>java version "1.6.0_24"<br/>
Java(TM) SE Runtime Environment (build 1.6.0_24-b07)<br/>
Java HotSpot(TM) 64-Bit Server VM (build 19.1-b02, mixed mode)</p></environment><key id="12507487">MATH-579</key><summary>FastMath.pow much slower than Math.pow</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="aploese">Arne Plöse</reporter><labels>
                    </labels><created>Tue, 17 May 2011 14:14:59 +0100</created><updated>Sat, 24 Mar 2012 16:16:53 +0000</updated><resolved>Wed, 18 May 2011 10:50:25 +0100</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13034948" author="luc" created="Tue, 17 May 2011 19:33:05 +0100"><p>This is strange. Could you run the FastMathTestPerformance junit test (in the utils package).<br/>
On my personal computer (which is also a 64 bits machine running Ubuntu), FastMath.pow is about 28% faster than either StrictMath.pow or Math.pow on Java 5 and 26% faster on Java 6.</p></comment><comment id="13034952" author="aploese" created="Tue, 17 May 2011 19:36:22 +0100"><p>This happens only on the first! run.<br/>
So take a separate project and run this test case:</p>


<p>    @Test<br/>
    public void testPowDuration() {<br/>
        int n = 10;<br/>
        long t1 = System.currentTimeMillis();<br/>
        for (int i = 0; i &lt; n; i++) </p>
{
            double x1 = FastMath.pow(10, 0.1 / 20);
        }
<p>        long t2 = System.currentTimeMillis();<br/>
        for (int i = 0; i &lt; n; i++) </p>
{
            double x1 = Math.pow(10, 0.1 / 20);
        }
<p>        long t3 = System.currentTimeMillis();<br/>
        double d1 = t2 - t1;<br/>
        double d2 = t3 - t2;<br/>
          if (d2 == 0) </p>
{
            d2 = 1;
        }
<p>        if (d1 / d2 &gt; 2.0)<br/>
            throw new RuntimeException("pow(10, 0.1 / 20) ratio" + (d1 / d2));<br/>
    }<br/>
Looks like some initialization takes quite long ...</p></comment><comment id="13034996" author="luc" created="Tue, 17 May 2011 20:34:06 +0100"><p>This is normal and is probably the same for all FastMath methods (I just checked for sin, abs and sqrt, knowing that FastMath.sqrt simply calls Math.sqrt). The initialization occurs at class loading as many tables are computed, so this overhead occurs only one per program run and does not change with the number of calls.</p>

<p>The number of calls is also important as the native code optimizing compilers kicks of only after the same part of code has been used many times. FastMath relies heavily on this and attempts to be fast for large scale computation. The side effect you see is that it is much slower for very short programs like the benchmark above.</p>

<p>Also note that 10 runs is far too low with regard to both the resolution of currentTimeMillis (one can use System.nanoTime() instead) and for results significance.</p>

<p>So I would like to close this as WONTFIX. Perhaps we should add in the javadoc that FastMath targets large scale computation.</p></comment><comment id="13035012" author="sebb@apache.org" created="Tue, 17 May 2011 21:01:32 +0100"><p>AIUI FastMath is also targetted at faster calculation over the full range of the operands.</p>

<p>The performance test does not (currently) use suitable ranges for all the functions.</p></comment><comment id="13035029" author="aploese" created="Tue, 17 May 2011 21:30:21 +0100"><p>If you add a hint in the javadocs of class FastMath -&gt; usage for large scale (and initilaization time up to 100 ms) this issue is FIXED</p>

<p>So having small numbers of computation, stick with Math.* , except you need asinh, ... <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.gif" height="16" width="16" align="absmiddle" alt="" border="0"/>  </p></comment><comment id="13035103" author="erans" created="Tue, 17 May 2011 23:40:25 +0100"><p>I don't think that a remark like "targets large scale computation" adds any more information here (i.e. for "FastMath") than it would on any other class (slow initialization and JIT compiler behaviour is the same).<br/>
Also, I guess that if one fires up a Java application that only does a few math functions calls, there wouldn't be any noticeable time differences; they will be dwarfed by the JVM startup time.</p>

<p>OK for "won't fix".</p></comment><comment id="13035213" author="aploese" created="Wed, 18 May 2011 07:04:22 +0100"><p>How it I stumbled over it:</p>

<p>I did debug my app, and came across the call to FastMath.pow() (first call) it took some time (100 ms) to complete the call.<br/>
Then I searched the javadoc for pow - nothing the same for class FastMath - nothing. So I decided must be a bug.</p>

<p>As you wrote FastMath is no general replacement of Math as the name Fast* would suggest, but it is intended for large scale operation.<br/>
If you want prevent confusion by end users (developers), a hint would be fine. </p></comment><comment id="13035258" author="luc" created="Wed, 18 May 2011 10:50:25 +0100"><p>So I have added a thorough explanation in the class javadoc without any code change as of r1124151.</p>

<p>Thanks for reporting the issue and discussing about it.</p></comment><comment id="13035259" author="erans" created="Wed, 18 May 2011 10:53:46 +0100"><p>In the end, it is the <em>absolute</em> running time that counts. If you call "pow" <em>once</em> in an application, why would it matter that it takes 100 ms or 1 ms?</p>

<p>Could it be that the "Math" class is already loaded (as part of the JVM initialization), so that "FastMath" is at a disadvantage in your benchmark (because it still needs to be loaded at the first call to "pow")?</p>

<p>I maintain that such a disclaimer ("large scale usage") provides more confusion that it clears: What is large-scale? People who are worried will profile their (complete) application and can decide which implementation (of any interface) to use, based on realistic timings, not on a micro-benchmark (which can provide contradictory results).</p>

<p>What we could do is add a link to the performance test class.</p></comment><comment id="13035426" author="psteitz" created="Wed, 18 May 2011 16:05:30 +0100"><p>I think Luc did a great job providing the right information to users.  In answer to your question, Gilles, there are some applications where 100ms is a big deal and if they just make one or two calls, the associated latency will be surprising and could cause problems for them.  If we get a lot of feedback from users indicating that this latency is a material practical problem for them, or prevents them using the library, we may want to consider making the embedded use configurable.  I can think of only a few cases in my experience where this might be an issue; but I am thankful to Arne for having pointed it out and Luc for improving the documentation.</p></comment><comment id="13035464" author="erans" created="Wed, 18 May 2011 17:02:49 +0100"><blockquote>
<p>In answer to your question, Gilles, there are some applications where 100ms is a big deal and if they just make one or two calls <span class="error">&#91;...&#93;</span></p></blockquote>

<p>This does not answer my question, which could be restated as: How can 100 ms matter when the JVM can take several seconds to start up?<br/>
I'm curious of what real applications (that use CM) would run for less than a few seconds...</p>

<blockquote>
<p>If we get a lot of feedback from users indicating that this latency is a material practical problem for them, or prevents them using the library, we may want to consider making the embedded use configurable.</p></blockquote>

<p>I surely hope that micro-benchmarks are not going to be taken into consideration...</p>

<blockquote>
<p>I am thankful to Arne for having pointed it out <span class="error">&#91;...&#93;</span></p></blockquote>

<p>At the time "FastMath" was introduced, I had already pointed out the relative slowness of some functions, to which it had been answered that the "fast" in "FastMath" would kick in only when doing several millions calls (i.e. after the JIT compiler would compile the methods to native code).</p>

<blockquote>
<p>I am thankful to <span class="error">&#91;...&#93;</span> Luc for improving the documentation.</p></blockquote>

<p>+1</p></comment><comment id="13035501" author="luc" created="Wed, 18 May 2011 18:21:52 +0100"><blockquote>
<p>This does not answer my question, which could be restated as: How can 100 ms matter when the JVM can take several seconds to start up?<br/>
I'm curious of what real applications (that use CM) would run for less than a few seconds...</p></blockquote>

<p>I think mainly about hosted application, in environments like Eclipse, web servers, service oriented architectures, perhaps even Android devices. The JVM is already started but I'm not sure the class are reused between requests, I think a new fresh context is set up with a new classloader, which involves reloading the class.</p>

<p>For sure, micro-benchmark should be avoided. Despite it is quite old, the paper about flawed micro benchmark by Brian Goetz <a href="http://www.ibm.com/developerworks/java/library/j-jtp02225/index.html" class="external-link" rel="nofollow">http://www.ibm.com/developerworks/java/library/j-jtp02225/index.html</a> is really enlightening.</p>

<p>If we get further reports about this latency, we may look at a way to pre-compute the tables at compile time rather than at runtime to see if we can save some milliseconds.</p></comment><comment id="13035648" author="erans" created="Wed, 18 May 2011 21:33:27 +0100"><blockquote>
<p>hosted application, in environments like <span class="error">&#91;...&#93;</span> web servers, <span class="error">&#91;...&#93;</span></p></blockquote>

<p>From what I've just been reading, servlets are only reloaded when their ".class" file has changed. And they refer to this as a feature (to allow code to be modified without needing a server restart) but also as a hack (because the usual class loader of the JVM does not do that)...</p>

<p>I don't know how Eclipse or Android works but I don't see why a class would be reloaded inside a given application. For Android, the recompilation argument doesn't even apply.</p></comment><comment id="13036004" author="aploese" created="Thu, 19 May 2011 07:05:19 +0100"><blockquote><p>This does not answer my question, which could be restated as: How can 100 ms matter when the JVM can take several seconds to start up?<br/>
I'm curious of what real applications (that use CM) would run for less than a few seconds...</p></blockquote>

<p>I could imagin of an GUI app where the users put some values (maybe a 3x3 matix) ant hit the calc button and wait. In a GUI 100 ms are a long time.</p>

<p>So the developer can load FastMath (if she really want to use FastMath) in a separate thread at startup ...</p>

<p>Thist hwole issue is more about usabillity and expected behavior and not the fact that it takes up to 100ms to initialize FastMath.</p>

<p>If I use a lib where I am not really satified with, I will try to replace it. If I know there is a startup penalty, I know it, and I can put the startup time in a place where it does not hurt - its fine.   </p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 17 May 2011 18:33:05 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150674</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160447</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-578] Decrease DescriptiveStatistics performance from 2.0 to 2.2</title><link>https://issues.apache.org/jira/browse/MATH-578</link><project id="12310485" key="MATH">Commons Math</project><description><p>Switching between commons-math 2.0 to 2.2 we note how the<br/>
DescriptiveStatistics.addValue(double) has decrease the performance.</p>

<p>I tested with 2 million values.</p>

<p>DescriptiveStatistics ds = new DescriptiveStatistics();<br/>
for(int i = 0; i&lt;1000*1000*2; i++) </p>
{ //2 million values
    ds.addValue(v);
}

<p>ds.getPercentile(50);</p>


<p>Seems that depending by the values inserted in the DescriptiveStatistics it takes different time:</p>

<ul>
	<li>with a single value (0)
	<ul>
		<li>2.0 -&gt; take ~500 ms</li>
		<li>2.2 -&gt; take more than 10 minutes</li>
	</ul>
	</li>
	<li>with 50% fixed value (0) and 50% Math.random()
	<ul>
		<li>2.0 -&gt; take ~500 ms</li>
		<li>2.2 -&gt; take ~250000 ms -&gt; ~250 second</li>
	</ul>
	</li>
	<li>with 100% Math.random()
	<ul>
		<li>2.0 -&gt; take ~500 ms</li>
		<li>2.2 -&gt; take ~70 ms</li>
	</ul>
	</li>
</ul>

</description><environment><p>Linux</p></environment><key id="12507371">MATH-578</key><summary>Decrease DescriptiveStatistics performance from 2.0 to 2.2</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="mikl">Mikkel Meyer Andersen</assignee><reporter username="paolo.repele">Paolo Repele</reporter><labels>
                    </labels><created>Mon, 16 May 2011 15:34:47 +0100</created><updated>Mon, 4 Mar 2013 18:53:25 +0000</updated><resolved>Sun, 22 Jul 2012 16:01:30 +0100</resolved><version>2.2</version><fixVersion>3.1</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13034056" author="mikl" created="Mon, 16 May 2011 16:18:48 +0100"><p>Have you tried more detailed profiling? E.g. in Eclipse to see which methods are using the majority of time?</p></comment><comment id="13034061" author="psteitz" created="Mon, 16 May 2011 16:33:54 +0100"><p>Thanks for reporting this.  I assume the timings include the percentile calculation, right? </p>

<p>This could be related to the changes in the Percentile implementation in 2.2. If isolating the timing to just the percentile calculation shows that is where the latency difference is, we should reopen <a href="https://issues.apache.org/jira/browse/MATH-417" title="improve performance of Percentile" class="issue-link" data-issue-key="MATH-417"><del>MATH-417</del></a>.  The changes there were to improve Percentile performance, which in most cases they do.  The first two results above are disturbing, however.  If your data is largely constant and this creates a problem in your application, as a workaround, you can provide an alternative Percentile implementation to DescriptiveStatistics using setPercentileImpl.</p></comment><comment id="13034067" author="paolo.repele" created="Mon, 16 May 2011 16:45:51 +0100"><p>Image file to show the profile snapshot</p></comment><comment id="13034068" author="mikl" created="Mon, 16 May 2011 16:47:55 +0100"><p>Sorry for my (too) short first answer. Thanks for your proper introduction, Phil.</p>

<p>I'll try a more detailed profiling to see what's causing the performance problems.</p>
</comment><comment id="13034070" author="paolo.repele" created="Mon, 16 May 2011 16:56:37 +0100"><p>No Problem <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p>
<ul>
	<li>yep, the time was only for the getPercentile() method.</li>
	<li>I added an image where you can see the profile snapshot</li>
</ul>


<p>Usually we use this library to analyze some grids. These grids can be very huge and can be generated using the same values for all the cells or a continue function around the grid or any combination of both.<br/>
Then we have really no idea how these grids can be generated.</p></comment><comment id="13034094" author="mikl" created="Mon, 16 May 2011 17:44:35 +0100"><p>Also, it seems like FastMath is new to 2.2. I'll try to investigate what causes this.</p></comment><comment id="13034152" author="mikl" created="Mon, 16 May 2011 18:56:43 +0100"><p>As far as I can see, Percentile contributes a lot to the longer execution time, so reopening <a href="https://issues.apache.org/jira/browse/MATH-417" title="improve performance of Percentile" class="issue-link" data-issue-key="MATH-417"><del>MATH-417</del></a> for datasets of this type might be the right thing to do.</p></comment><comment id="13082179" author="psteitz" created="Wed, 10 Aug 2011 07:35:36 +0100"><p>Not sure this is in fact a bug, but rather a feature resulting from overall performance improvements in Percentile (poorer performance for a relatively small number of problem instances).  I do not see it as showstopper for 3.0, so moving to 3.1.</p></comment><comment id="13420032" author="erans" created="Sun, 22 Jul 2012 02:13:17 +0100"><p>Please rerun your test when <a href="https://issues.apache.org/jira/browse/MATH-805" title="Percentile calculation is very slow when input data are constants" class="issue-link" data-issue-key="MATH-805"><del>MATH-805</del></a> has been solved, as it seems that this issue might be caused by the same bug.</p></comment><comment id="13420185" author="tn" created="Sun, 22 Jul 2012 16:01:30 +0100"><p>Fixed in r1364318.<br/>
See also <a href="https://issues.apache.org/jira/browse/MATH-805" title="Percentile calculation is very slow when input data are constants" class="issue-link" data-issue-key="MATH-805"><del>MATH-805</del></a> with a description of the problem.</p></comment><comment id="13420188" author="tn" created="Sun, 22 Jul 2012 16:17:52 +0100"><p>I did the provided test myself and indeed it is the same problem and is fixed by the suggested changes.</p></comment></comments><issuelinks><issuelinktype id="12310000"><name>Duplicate</name><inwardlinks description="is duplicated by"><issuelink><issuekey id="12560360">MATH-805</issuekey></issuelink></inwardlinks></issuelinktype></issuelinks><attachments><attachment id="12479338" name="percentile.png" size="28463" author="paolo.repele" created="Mon, 16 May 2011 16:45:51 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Mon, 16 May 2011 15:18:48 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2218</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160448</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-577] Enhance Complex.java</title><link>https://issues.apache.org/jira/browse/MATH-577</link><project id="12310485" key="MATH">Commons Math</project><description><p>Add some double shorthand methods to Complex fix different NaN checks in add and subtract ! Testcase  testAddNaN will fail (what should be the result ?)</p>

<p>What is missing JavaDoc and testcases.</p></description><environment/><key id="12507333">MATH-577</key><summary>Enhance Complex.java</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="aploese">Arne Plöse</reporter><labels>
                    </labels><created>Mon, 16 May 2011 08:40:00 +0100</created><updated>Sat, 24 Mar 2012 16:17:03 +0000</updated><resolved>Wed, 27 Jul 2011 22:16:14 +0100</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13033899" author="aploese" created="Mon, 16 May 2011 08:43:04 +0100"><p>OK her is the diff</p></comment><comment id="13060329" author="aploese" created="Wed, 6 Jul 2011 08:09:37 +0100"><p>Some enhancements for scalar rhs.</p>

<p>With javadocs and fixed? test case of testAddNaN(Complex)</p>

<p>replaced call to isNaN() with field access isNaN. </p>

<p>test for scalar rhs missing.  </p></comment><comment id="13060477" author="erans" created="Wed, 6 Jul 2011 12:06:07 +0100"><blockquote>
<p>test for scalar rhs missing.</p></blockquote>

<p>Could add them then? <span class="error">&#91;If possible, one test method per test.&#93;</span></p>

<p>Thank you.</p></comment><comment id="13064469" author="erans" created="Wed, 13 Jul 2011 11:14:04 +0100"><blockquote>
<p>replaced call to isNaN() with field access isNaN. </p></blockquote>
<p>I've done this in revision 1145945.</p>

<p>If you'd like your other changes added, please provide a new patch (with tests for all added methods) with respect to the current trunk.</p></comment><comment id="13064479" author="aploese" created="Wed, 13 Jul 2011 11:59:00 +0100"><p>I would change hashCode, equals and add, subtract, multipy, divide also.<br/>
Should I initiate a poll on the devel list, or fix a pacht the way I want it and ask for comments?</p>

<p>Arne</p>
</comment><comment id="13064508" author="erans" created="Wed, 13 Jul 2011 13:12:54 +0100"><p>For new functionality like "add", "subtract", "multiply", "divide", a patch (with unit tests!) uploaded here will be fine.</p>

<p>Since "hashCode" and "equals" have already generated contradicting opinions, it's probably better to start a discussion on the "dev" ML.</p></comment><comment id="13064613" author="psteitz" created="Wed, 13 Jul 2011 15:45:55 +0100"><p>Please read the list archives before re-opening discussion of the arithmetic operations, equals or hashcode.  We can reopen, but any discussion should begin with review of decisions made in the archives.</p></comment><comment id="13064807" author="aploese" created="Wed, 13 Jul 2011 20:47:00 +0100"><p>Maybe Im a little dumb, but why are Complex.add and Complex.subtract<br/>
differently implemented regarding NaN values?<br/>
subtract returns Complex.NaN if there is one of both NaN.</p>


<p>Am Mittwoch, den 13.07.2011, 14:47 +0000 schrieb Phil Steitz (JIRA): <br/>
I only found your checkin of revision 280031 where you intoduced NaN in<br/>
equals, but cant find anything on commons-dev (maybe I got the wrong<br/>
keywords hashCode, equals)?</p>


</comment><comment id="13064815" author="psteitz" created="Wed, 13 Jul 2011 21:16:31 +0100"><p>Looks like add is bugged.  Seems to have been a merge victim quite a while back.  Probably best to open a separate issue.  I will do that and fix it.  Thanks for reporting this.</p>

<p>This thread from quite a while back explains some of the rationale for what is still pretty much current implementation of arithmetic methods:</p>

<p><a href="http://markmail.org/message/75kydsoqsrxdacic" class="external-link" rel="nofollow">http://markmail.org/message/75kydsoqsrxdacic</a></p></comment><comment id="13064862" author="erans" created="Wed, 13 Jul 2011 22:21:49 +0100"><p>I think that "equals" for "Complex" is indeed buggy (or inconsistent with "double"):</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">final</span> <span class="code-object">double</span> a = <span class="code-object">Double</span>.NaN;
<span class="code-keyword">final</span> <span class="code-object">double</span> b = <span class="code-object">Double</span>.NaN;
Assert.assertFalse(<span class="code-quote">"a == b"</span>, a == b); <span class="code-comment">// &lt;-- Passes
</span><span class="code-keyword">final</span> Complex cA = <span class="code-keyword">new</span> Complex(a, 0);
<span class="code-keyword">final</span> Complex cB = <span class="code-keyword">new</span> Complex(b, 0);
Assert.assertFalse(<span class="code-quote">"cA == cB"</span>, cA.equals(cB)); <span class="code-comment">// &lt;-- Fails</span>
</pre>
</div></div>

<p>Also, shouldn't any <tt>double</tt> number "a" (except Double.NaN) be considered equal to the object created with "new Complex(a, 0)"?</p></comment><comment id="13065128" author="aploese" created="Thu, 14 Jul 2011 10:02:59 +0100"><p>If you compare them this way:<br/>
{code]<br/>
final Complex cA = new Complex(a, 0);<br/>
final Complex cB = new Complex(b, 0);</p>


<p>Assert.assertEquals("a == b", a, b, Double.MIN_VALUE); // &lt;-- Passes<br/>
Assert.assertEquals("cA == cB", cA, cB); // &lt;-- Passes</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"></pre>
</div></div>

<p>It will be fine ... <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p>


</comment><comment id="13065196" author="erans" created="Thu, 14 Jul 2011 12:51:06 +0100"><p>The formatting of your last comment is wrong, could you please edit it to make it legible?<br/>
<span class="error">&#91;There is a &quot;preview&quot; icon below the comment window to check that it will look like you intended.&#93;</span></p></comment><comment id="13065215" author="erans" created="Thu, 14 Jul 2011 13:40:38 +0100"><div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">final</span> <span class="code-object">double</span> a = <span class="code-object">Double</span>.NaN;
<span class="code-keyword">final</span> <span class="code-object">double</span> b = <span class="code-object">Double</span>.NaN;
Assert.assertFalse(<span class="code-quote">"a == b"</span>, a == b); <span class="code-comment">// &lt;-- Passes
</span>Assert.assertEquals(<span class="code-quote">"a != b"</span>, a, b, <span class="code-object">Double</span>.MIN_VALUE); <span class="code-comment">// &lt;-- Passes
</span>Assert.assertFalse(<span class="code-quote">"a == b"</span>, MathUtils.equals(a, b, <span class="code-object">Double</span>.MIN_VALUE)); <span class="code-comment">// &lt;-- Passes
</span><span class="code-keyword">final</span> Complex cA = <span class="code-keyword">new</span> Complex(a, 0);
<span class="code-keyword">final</span> Complex cB = <span class="code-keyword">new</span> Complex(b, 0);
Assert.assertFalse(<span class="code-quote">"cA == cB"</span>, cA.equals(cB)); <span class="code-comment">// &lt;-- Fails</span>
</pre>
</div></div>

<p>As Arne pointed out, we have yet another problem (see lines 4 and 5 in the above code excerpt): JUnit and MathUtils do not give the same answer. In my opinion, lines 3 and 4 are contradictory; hence it would be a bug in JUnit)...</p></comment><comment id="13066879" author="aploese" created="Mon, 18 Jul 2011 11:44:42 +0100"><p>some scalar operators and locale independent toString() which fomatts like Double.toString(double)</p></comment><comment id="13066911" author="erans" created="Mon, 18 Jul 2011 12:55:19 +0100"><p>Please see the related issue.<br/>
I don't understand why explicit calls to "Double.toString()" are necessary.<br/>
"toString" should be as simple as possible (i.e. reflect as exactly as possible the contents of the object). Also, I think that modifying its behaviour based on the contents could make potential bugs less obvious...</p></comment><comment id="13066920" author="erans" created="Mon, 18 Jul 2011 13:04:10 +0100"><p>A small detail (for the other methods), when using "Complex.NaN" inside the class, I think that writing "NaN" is clear enough (and it conforms to the usual use of static final fields within their class).</p></comment><comment id="13067018" author="erans" created="Mon, 18 Jul 2011 14:23:40 +0100"><p>Isn't a comment like the following</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>  * Return the sum of this complex number and the given scalar number.
  * &lt;p&gt;
  * Uses the definitional formula
  * &lt;pre&gt;
  * (a + bi) + (c + di) = (a+c) + (b+d)i
  * &lt;/pre&gt;&lt;/p&gt;
  * optimized for di == 0
  * [...]
  * @param rhs the scalar number
  * @return the complex number sum
</pre>
</div></div>
<p>a bit convoluted?</p>

<p>The code does</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
  <span class="code-keyword">return</span> createComplex(real + rhs, imaginary);
</pre>
</div></div>

<p>So, why not write:</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre> * Return the sum of this complex number and the given scalar number.
 * [...]
 * @param c Real number to add.
 * @return (a + c) + bi
</pre>
</div></div>
<p>?</p>

<p><span class="error">&#91;And similarly for the other operations you&#39;ve overloaded.&#93;</span></p></comment><comment id="13067038" author="aploese" created="Mon, 18 Jul 2011 15:03:16 +0100"><p>Maybe this way?:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
    /**
     * Return the sum of <span class="code-keyword">this</span> complex number and the given scalar number.
     * This is a shorthand <span class="code-keyword">for</span> pure real value rsh of {@link #add(org.apache.commons.math.complex.Complex)}
     * 
     * @param rhs the scalar number
     * @<span class="code-keyword">return</span> the complex number sum
     * @see #add(org.apache.commons.math.complex.Complex)
     */
    <span class="code-keyword">public</span> Complex add(<span class="code-object">double</span> rhs) {
        <span class="code-keyword">if</span> (isNaN || <span class="code-object">Double</span>.isNaN(rhs)) {
            <span class="code-keyword">return</span> NaN;
        }
        <span class="code-keyword">return</span> createComplex(real + rhs, imaginary);
    }
</pre>
</div></div>

<p>I want to make it clear that you can expect the same behaviour as of () in this case </p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">add(<span class="code-keyword">new</span> Complex(rsh, 0);</pre>
</div></div></comment><comment id="13067189" author="erans" created="Mon, 18 Jul 2011 19:13:32 +0100"><p>Maybe a combination of my version and yours...<br/>
I don't like "shorthand" since it might let users wonder whether a temporary Complex variable is created.<br/>
The "@see" tag is fine.<br/>
I also wonder why the parameter is called "rhs".</p>

<p>So:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
/**
 * Computes the sum of <span class="code-keyword">this</span> complex number and the given scalar number.
 * 
 * @param c <span class="code-object">Number</span> to add.
 * @<span class="code-keyword">return</span> {@code <span class="code-keyword">this</span> + c}.
 * @see #add(Complex)
 */
<span class="code-keyword">public</span> Complex add(<span class="code-object">double</span> rhs) {
    <span class="code-keyword">if</span> (isNaN || <span class="code-object">Double</span>.isNaN(rhs)) {
      <span class="code-keyword">return</span> NaN;
    }
    <span class="code-keyword">return</span> createComplex(real + rhs, imaginary);
}
</pre>
</div></div></comment><comment id="13067292" author="aploese" created="Mon, 18 Jul 2011 21:55:08 +0100"><p>rhs = right hand side - it is commonly used in all methods that represent operators.<br/>
If you think c is better, I will take it.</p></comment><comment id="13067349" author="erans" created="Mon, 18 Jul 2011 23:06:21 +0100"><blockquote>
<p>rhs = right hand side <span class="error">&#91;...&#93;</span></p></blockquote>

<p>I figured that it meant that. But the common usage I know of that phrase is to indicate the right-hand side of an equation. I think that in this case, the term "right operand " (or "right-hand operand") is more accurate.</p>

<p>In the "Complex" class, many comments refer to the operator's arguments as "a + bi" and "c + di"; IMHO, it is better to use the same in the code.</p></comment><comment id="13067561" author="aploese" created="Tue, 19 Jul 2011 08:50:23 +0100"><p>I would suggest to use the style of java.math.BigDecimal both for parameter naming and javadoc style</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
    /**
     * Return the sum of <span class="code-keyword">this</span> complex number and the given complex number.
     * &lt;p&gt;
     * Uses the definitional formula
     * &lt;pre&gt;
     * (a + bi) + (c + di) = (a+c) + (b+d)i
     * &lt;/pre&gt;&lt;/p&gt;
     * &lt;p&gt;
     * If either <span class="code-keyword">this</span> or &lt;code&gt;rhs&lt;/code&gt; has a NaN value in either part,
     * {@link #NaN} is returned; otherwise Infinite and NaN values are
     * returned in the parts of the result according to the rules <span class="code-keyword">for</span>
     * {@link java.lang.<span class="code-object">Double</span>} arithmetic.&lt;/p&gt;
     *
     * @param  augend value to be added to <span class="code-keyword">this</span> {@code Complex}.
     * @<span class="code-keyword">return</span> {@code <span class="code-keyword">this</span> + augend}
     * @<span class="code-keyword">throws</span> NullArgumentException <span class="code-keyword">if</span> &lt;code&gt;rhs&lt;/code&gt; is <span class="code-keyword">null</span>
     */
    @Override
    <span class="code-keyword">public</span> Complex add(Complex augend)
        <span class="code-keyword">throws</span> NullArgumentException {
        MathUtils.checkNotNull(augend);
        <span class="code-keyword">if</span> (isNaN || augend.isNaN) {
            <span class="code-keyword">return</span> NaN;
        }
        <span class="code-keyword">return</span> createComplex(real + augend.getReal(),
            imaginary + augend.getImaginary());
    }

    /**
     * Return the sum of <span class="code-keyword">this</span> complex number and the given scalar number.
     * 
     * @param  augend value to be added to <span class="code-keyword">this</span> {@code BigDecimal}.
     * @<span class="code-keyword">return</span> {@code <span class="code-keyword">this</span> + augend}
     * @see #add(Complex)
     */
    <span class="code-keyword">public</span> Complex add(<span class="code-object">double</span> augend) {
        <span class="code-keyword">if</span> (isNaN || <span class="code-object">Double</span>.isNaN(augend)) {
            <span class="code-keyword">return</span> NaN;
        }
        <span class="code-keyword">return</span> createComplex(real + augend, imaginary);
    }
</pre>
</div></div>

<p>Then have a note on the class saying that this.real == a, this.imaginary == b, parameter.real == c, parameter.imaginary == d.</p></comment><comment id="13067569" author="aploese" created="Tue, 19 Jul 2011 09:14:17 +0100"><p>Fix for some typos:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
    /**
     * Returns a {@code Complex} whose value is {@code (<span class="code-keyword">this</span> +
     * augend)}.
     * &lt;p&gt;
     * Uses the definitional formula
     * &lt;pre&gt;
     * (a + bi) + (c + di) = (a+c) + (b+d)i
     * &lt;/pre&gt;&lt;/p&gt;
     * &lt;p&gt;
     * If either &lt;code&gt;<span class="code-keyword">this</span>&lt;/code&gt; or &lt;code&gt;augend&lt;/code&gt; has a &lt;code&gt;NaN&lt;/code&gt; value in either part,
     * {@link #NaN} is returned; otherwise &lt;code&gt;Infinite&lt;/code&gt; and &lt;code&gt;NaN&lt;/code&gt; values are
     * returned in the parts of the result according to the rules <span class="code-keyword">for</span>
     * {@link java.lang.<span class="code-object">Double</span>} arithmetic.&lt;/p&gt;
     *
     * @param  augend value to be added to <span class="code-keyword">this</span> {@code Complex}.
     * @<span class="code-keyword">return</span> {@code <span class="code-keyword">this</span> + augend}
     * @<span class="code-keyword">throws</span> NullArgumentException <span class="code-keyword">if</span> &lt;code&gt;rhs&lt;/code&gt; is <span class="code-keyword">null</span>
     */
    @Override
    <span class="code-keyword">public</span> Complex add(Complex augend)
        <span class="code-keyword">throws</span> NullArgumentException {
        MathUtils.checkNotNull(augend);
        <span class="code-keyword">if</span> (isNaN || augend.isNaN) {
            <span class="code-keyword">return</span> NaN;
        }
        <span class="code-keyword">return</span> createComplex(real + augend.getReal(),
            imaginary + augend.getImaginary());
    }
</pre>
</div></div>

<p>On can link Infinity and NaN to Double.*, but I think that is not necessary. </p></comment><comment id="13067652" author="erans" created="Tue, 19 Jul 2011 13:09:03 +0100"><p>I didn't know the word "augend".<br/>
It seems rather old-fashioned:</p>
<ul>
	<li><a href="http://en.wikipedia.org/wiki/Addition" class="external-link" rel="nofollow">http://en.wikipedia.org/wiki/Addition</a></li>
</ul>


<p>And, if I refer to these links:</p>
<ul>
	<li><a href="http://www.thefreedictionary.com/augend" class="external-link" rel="nofollow">http://www.thefreedictionary.com/augend</a></li>
	<li><a href="http://mathworld.wolfram.com/Augend.html" class="external-link" rel="nofollow">http://mathworld.wolfram.com/Augend.html</a></li>
</ul>


<p>its use in the Javadoc of <tt>BigDecimal</tt> is not correct, as the augend would be <tt>this</tt> and not the parameter of the <tt>add</tt> method.</p>

<p>Concerning the style, it seems OK, except that you should replace</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>&lt;code&gt;...&lt;/code&gt;
</pre>
</div></div>
<p>with</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>{@code ...}
</pre>
</div></div>

<p><span class="error">&#91;Also, you&#39;ve forgotten a &quot;rhs&quot; in the &quot;@throws&quot; Javadoc...&#93;</span></p></comment><comment id="13067683" author="aploese" created="Tue, 19 Jul 2011 13:53:31 +0100"><p>Should we file a bug against augend at Oracle <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.gif" height="16" width="16" align="absmiddle" alt="" border="0"/>?</p>

<p>No I choose addend, but summand sounds also fine.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
    /**
     * Returns a {@code Complex} whose value is {@code (<span class="code-keyword">this</span> +
     * addend)}.
     * &lt;p&gt;
     * Uses the definitional formula
     * &lt;pre&gt;
     * (a + bi) + (c + di) = (a+c) + (b+d)i
     * &lt;/pre&gt;&lt;/p&gt;
     * &lt;p&gt;
     * If either {@code <span class="code-keyword">this</span>} or {@code addend} has a {@code NaN} value in either part,
     * {@link #NaN} is returned; otherwise {@code Infinite} and {@code NaN} values are
     * returned in the parts of the result according to the rules <span class="code-keyword">for</span>
     * {@link java.lang.<span class="code-object">Double</span>} arithmetic.&lt;/p&gt;
     *
     * @param  addend value to be added to <span class="code-keyword">this</span> {@code Complex}.
     * @<span class="code-keyword">return</span> {@code <span class="code-keyword">this</span> + addend}
     * @<span class="code-keyword">throws</span> NullArgumentException <span class="code-keyword">if</span> {@code addend} is <span class="code-keyword">null</span>
     */
    @Override
    <span class="code-keyword">public</span> Complex add(Complex addend)
        <span class="code-keyword">throws</span> NullArgumentException {
        MathUtils.checkNotNull(addend);
        <span class="code-keyword">if</span> (isNaN || addend.isNaN) {
            <span class="code-keyword">return</span> NaN;
        }
        <span class="code-keyword">return</span> createComplex(real + addend.getReal(),
            imaginary + addend.getImaginary());
    }

    /**
     * Returns a {@code Complex} whose value is {@code (<span class="code-keyword">this</span> +
     * addend)}.      
     * 
     * @param  addend value to be added to <span class="code-keyword">this</span> {@code Complex}.
     * @<span class="code-keyword">return</span> {@code <span class="code-keyword">this</span> + addend}
     * @see #add(Complex)
     */
    <span class="code-keyword">public</span> Complex add(<span class="code-object">double</span> addend) {
        <span class="code-keyword">if</span> (isNaN || <span class="code-object">Double</span>.isNaN(addend)) {
            <span class="code-keyword">return</span> NaN;
        }
        <span class="code-keyword">return</span> createComplex(real + addend, imaginary);
    }

</pre>
</div></div></comment><comment id="13067728" author="erans" created="Tue, 19 Jul 2011 14:48:03 +0100"><p>No problem if you prefer <tt>addend</tt> to <tt>c</tt>...<br/>
But is it OK for subtraction too?</p>

<p>And you'll also have to use <tt>factor</tt> for multiplication...</p></comment><comment id="13067767" author="aploese" created="Tue, 19 Jul 2011 15:57:43 +0100"><p>fixed javadocs,<br/>
introduced </p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-keyword">public</span> <span class="code-keyword">static</span> valueOf()</pre>
</div></div>
<p> <br/>
deprecated </p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">createComplex()</pre>
</div></div></comment><comment id="13068005" author="sebb@apache.org" created="Tue, 19 Jul 2011 22:53:18 +0100"><p>At school our maths teacher used:</p>

<p>addend<br/>
subtrahend<br/>
multiplicand or multiplier. I don't think factor is appropriate.</p></comment><comment id="13068045" author="erans" created="Tue, 19 Jul 2011 23:58:19 +0100"><p><a href="http://www.mathsisfun.com/definitions/factor.html" class="external-link" rel="nofollow">http://www.mathsisfun.com/definitions/factor.html</a><br/>
<a href="http://www.mathsisfun.com/definitions/multiplicand.html" class="external-link" rel="nofollow">http://www.mathsisfun.com/definitions/multiplicand.html</a></p></comment><comment id="13068202" author="aploese" created="Wed, 20 Jul 2011 08:44:01 +0100"><p>Fixed some javadoc bugs (replaced {@code withcode tag when needed)</p>

<p>Pleas add this patch to svn and rename any parameter as you like - I am not a native speaker in english <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p></comment><comment id="13068245" author="erans" created="Wed, 20 Jul 2011 10:44:19 +0100"><p>Please remove the changes to the "toString" method. There is another <a href="https://issues.apache.org/jira/browse/MATH-614" title="&quot;toString&quot; method for &quot;Complex&quot;" class="issue-link" data-issue-key="MATH-614"><del>issue</del></a> associated with it, and this at least should be settled separately.</p>

<p>Once the new patch is ready, since it is quite a big one, could you please post a message on the "dev" ML, asking other people whether they have objections to merging it?<br/>
Thanks a lot.</p></comment><comment id="13068309" author="aploese" created="Wed, 20 Jul 2011 13:06:19 +0100"><p>toString() removed</p></comment><comment id="13070148" author="erans" created="Sun, 24 Jul 2011 12:31:07 +0100"><p>I had meant to remove the <em>changes</em> to the "toString" method; not that your patch remove it altogether!</p>

<p>Patch applied. I've just committed (revision 1150340) an updated version of "Complex.java" (your patch + additional modifications, mainly to complete the consistency update of the Javadoc and remove CheckStyle trailing speaces complaints).</p>

<p>I removed the @Deprecated annotation from "createComplex". As this change can already be deemed too big for comfortable review, could you please open a new issue for this?</p>

<p>I'll also create a new issue for the seemingly inconsistent behaviour of Complex NaN.</p></comment><comment id="13070209" author="psteitz" created="Sun, 24 Jul 2011 17:53:45 +0100"><p>I just committed a slight change to the scalar division implementation in r1150433 to make it behave consistently with complex division when both operands are infinite.  If we want the behavior to be different, we need to document that.  I thought it best to keep it consistent with the contract of Complex divide.</p>

<p>Are we ready to resolve this issue now?  If so, lets remember to update changes.xml with a complete summary of what has changed.</p></comment><comment id="13070226" author="aploese" created="Sun, 24 Jul 2011 19:06:40 +0100"><p>Thank you both, for cleaning up after me <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p>

<p>For me, its resolved</p></comment></comments><issuelinks><issuelinktype id="10030"><name>Reference</name><inwardlinks description="is related to"><issuelink><issuekey id="12513786">MATH-614</issuekey></issuelink></inwardlinks></issuelinktype></issuelinks><attachments><attachment id="12487144" name="Complex.diff" size="52364" author="aploese" created="Wed, 20 Jul 2011 13:06:19 +0100"/><attachment id="12487118" name="Complex.diff" size="53388" author="aploese" created="Wed, 20 Jul 2011 08:44:01 +0100"/><attachment id="12487012" name="Complex.diff" size="49248" author="aploese" created="Tue, 19 Jul 2011 15:57:43 +0100"/><attachment id="12486810" name="Complex.diff" size="18534" author="aploese" created="Mon, 18 Jul 2011 11:44:42 +0100"/><attachment id="12485382" name="Complex.diff" size="14020" author="aploese" created="Wed, 6 Jul 2011 08:09:37 +0100"/><attachment id="12479294" name="Complex.diff" size="5321" author="aploese" created="Mon, 16 May 2011 08:43:04 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>6.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 6 Jul 2011 11:06:07 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>66766</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160449</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-576] merge Apache Commons BSP component within Apache Commons Math</title><link>https://issues.apache.org/jira/browse/MATH-576</link><project id="12310485" key="MATH">Commons Math</project><description><p>The sandbox component Apache Commons BSP provides a generic implementation of Binary Partitioning Trees and specializations for 1D, 2D and 3D Euclidean spaces.<br/>
This features would fit nicely inside the geometry package of Apache Commons Math, as discussed on the developers mailing list <a href="http://markmail.org/thread/knwutrj32icqp7jw" class="external-link" rel="nofollow">here</a>.</p></description><environment/><key id="12507280">MATH-576</key><summary>merge Apache Commons BSP component within Apache Commons Math</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="luc">Luc Maisonobe</reporter><labels>
                    </labels><created>Sun, 15 May 2011 16:47:02 +0100</created><updated>Sat, 24 Mar 2012 16:16:40 +0000</updated><resolved>Sun, 15 May 2011 17:02:48 +0100</resolved><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13033711" author="luc" created="Sun, 15 May 2011 17:02:48 +0100"><p>fixed in repository as of r1103438</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150673</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160450</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-575] Exceptions in genetics package or not consistent with the rest of [math]</title><link>https://issues.apache.org/jira/browse/MATH-575</link><project id="12310485" key="MATH">Commons Math</project><description><p>InvalidRepresentationException is checked and non-localized.  This exception should be placed in the <span class="error">&#91;math&#93;</span> hierarchy.  The AbstractListChromosome constructor also throws a non-localised IAE, which should be replaced by an appropriate <span class="error">&#91;math&#93;</span> exception.</p></description><environment/><key id="12507228">MATH-575</key><summary>Exceptions in genetics package or not consistent with the rest of [math]</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="tn">Thomas Neidhart</assignee><reporter username="psteitz">Phil Steitz</reporter><labels>
                    </labels><created>Sat, 14 May 2011 17:40:34 +0100</created><updated>Sat, 24 Mar 2012 16:16:54 +0000</updated><resolved>Thu, 2 Feb 2012 11:12:52 +0000</resolved><version>2.0</version><version>2.1</version><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13191560" author="tn" created="Mon, 23 Jan 2012 22:30:24 +0000"><p>Phil started to work on this issue in r1135025.</p>

<p>In r1235038 additional cleanups have been performed:</p>

<ul class="alternate" type="square">
	<li>add localized messages for all exceptions</li>
	<li>add @throws to javadoc where appropriate</li>
	<li>add final to method parameters</li>
</ul>


<p>What is missing:</p>

<ul class="alternate" type="square">
	<li>Phil mentioned that InvalidRepresentationException should be placed into <span class="error">&#91;math&#93;</span>, although I am not sure why, as it is not used outside the genetics package</li>
	<li>add more custom exception classes specific to the genetics package (optional). By now mostly MathIllegalArgumentException or other appropriate ones have been used.</li>
</ul>
</comment><comment id="13191602" author="erans" created="Mon, 23 Jan 2012 23:16:46 +0000"><p>Thanks for working on this, but before you do start to make modifications, please assign the issue to yourself!</p>

<p>For the changes themselves, I don't agree with the creation of those many localized messages: We have been trying to rationalize and reduce the number of those, by removing duplicates and combining several ones to convey the full explanation of the problem. See my reply to the commit message.</p></comment><comment id="13192047" author="tn" created="Tue, 24 Jan 2012 10:18:27 +0000"><p>Fixed in r1235197.</p>

<p>Thanks for your suggestions!</p></comment><comment id="13198672" author="erans" created="Thu, 2 Feb 2012 10:34:38 +0000"><p>Thomas,<br/>
Could please check whether this issue is resolved? And if it is, mark it so? Thanks.</p></comment><comment id="13198680" author="tn" created="Thu, 2 Feb 2012 10:47:58 +0000"><p>As from the original issue description, Phil intended to move the InvalidRepresentationException to the general o.a.c.m.exceptions package. I am not sure about this, that's why I kept it aside for the time being. If we agree on keeping it in the genetics package we can resolve this issue.</p></comment><comment id="13198689" author="erans" created="Thu, 2 Feb 2012 11:08:31 +0000"><p>Phil had always been opposed to having all exceptions grouped in their own package; so I doubt that he meant to move that one over there... <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.gif" height="16" width="16" align="absmiddle" alt="" border="0"/><br/>
Here, the description just indicates that the exception should become <em>unchecked</em> and that the "detailed message" should be an element from the "LocalizedFormats" enum (i.e. derive from one of the base CM exceptions).</p></comment><comment id="13198691" author="tn" created="Thu, 2 Feb 2012 11:12:52 +0000"><p>Ah ok, that makes it clear. When reading hierarchy I was just thinking in terms of packages rather than class hierarchy.</p>

<p>Thus, I resolve this issue.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Mon, 23 Jan 2012 22:30:24 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2219</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160451</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-574] Remove the restriction that the two vectors in RealVector.outerProduct have to be of the same size.</title><link>https://issues.apache.org/jira/browse/MATH-574</link><project id="12310485" key="MATH">Commons Math</project><description><p>Currently RealMatrix M = x.outerProduct<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/thumbs_up.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> throws an exception if x and y are different sizes. This is as documented  in the Javadoc but not what one expects mathematically (see e.g. <a href="http://en.wikipedia.org/wiki/Outer_product" class="external-link" rel="nofollow">http://en.wikipedia.org/wiki/Outer_product</a>) - the vectors can be any size.</p>

<p>So please remove the restriction that the vectors should be the same size, as this doesn't seem to be necessary either mathematically or in terms of the implementation.</p>

</description><environment><p>All.</p></environment><key id="12507001">MATH-574</key><summary>Remove the restriction that the two vectors in RealVector.outerProduct have to be of the same size.</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="nasatyr">Emile Ben Nasatyr</reporter><labels><label>matrix</label><label>vector</label></labels><created>Thu, 12 May 2011 16:12:14 +0100</created><updated>Sat, 24 Mar 2012 16:16:55 +0000</updated><resolved>Tue, 17 May 2011 23:20:14 +0100</resolved><version>2.2</version><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><timeoriginalestimate seconds="86400">24h</timeoriginalestimate><timeestimate seconds="86400">24h</timeestimate><comments><comment id="13032469" author="erans" created="Thu, 12 May 2011 16:52:20 +0100"><p>"ArrayRealVector" fixed in revision 1102356.</p></comment><comment id="13032985" author="aploese" created="Fri, 13 May 2011 13:25:47 +0100"><p>Please check all other Vector implemenations as well (ArrayFieldvector seems to have the same bug)</p></comment><comment id="13033022" author="erans" created="Fri, 13 May 2011 14:04:11 +0100"><p>"ArrayFieldVector" fixed in revision 1102704.</p></comment><comment id="13033993" author="erans" created="Mon, 16 May 2011 13:31:12 +0100"><p>"OpenMapRealVector" fixed revision 1103716.</p></comment><comment id="13035078" author="erans" created="Tue, 17 May 2011 22:38:58 +0100"><p>"SparseFieldVector" fixed in revision 1104575.</p></comment><comment id="13035100" author="erans" created="Tue, 17 May 2011 23:20:14 +0100"><p>Revision 1104600.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Thu, 12 May 2011 15:52:20 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150672</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160452</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-573] in ArrayFielVector i.e. subtract calls wrong constructor</title><link>https://issues.apache.org/jira/browse/MATH-573</link><project id="12310485" key="MATH">Commons Math</project><description><p>I.E. subtract calls</p>

<p>"return new ArrayFieldVector&lt;T&gt;(out)" this constructor clones the array...<br/>
"return new ArrayFieldVector&lt;T&gt;(field, out, false)" would be better (preserving field as well)</p></description><environment/><key id="12506690">MATH-573</key><summary>in ArrayFielVector i.e. subtract calls wrong constructor</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="aploese">Arne Plöse</reporter><labels>
                    </labels><created>Tue, 10 May 2011 09:23:22 +0100</created><updated>Sat, 24 Mar 2012 16:16:27 +0000</updated><resolved>Sun, 5 Jun 2011 16:32:33 +0100</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13031286" author="luc" created="Tue, 10 May 2011 19:20:24 +0100"><p>Fixed in subversion repository as of r1101579.</p>

<p>The same problem was also present in the add methods.</p>

<p>Thanks for reporting the issue and providing the fix.</p></comment><comment id="13031351" author="aploese" created="Tue, 10 May 2011 21:21:33 +0100"><p>Sorry, but look at mapSubtract and further down in the source you will find plenty.</p>

<p>The same goes for AbstractArrayMatrix... </p>

<p>Sorry <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p>
</comment><comment id="13031570" author="luc" created="Wed, 11 May 2011 07:59:07 +0100"><p>Thanks to have checked this and sorry for forgetting these occurrences. Could you check again and reopen if I still forgot a few ones ?</p>

<p>Fixed in subversion repository as of r1101763</p></comment><comment id="13031864" author="aploese" created="Wed, 11 May 2011 18:19:19 +0100"><p>At least copy() and public constructor Array2DRowFieldMatrix&lt;T&gt; add(final Array2DRowFieldMatrix&lt;T&gt; m) in Array2DRowFieldMatrix.java ignores field | there is no contract what should happen with field (whetzer it is to pe basses or not, and if yes after what pattern) - so not really a bug more a hint.</p>

<p>Maybe an other issue: should the ArrayFieldVector v from which data is used, not given the chance to review its internal state by asking v.getDataRef() instead of simply taking v.data (currently just a philosophical question <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/>) ?</p></comment><comment id="13032016" author="luc" created="Wed, 11 May 2011 21:03:53 +0100"><p>Nice catch. I have added a few constructors with the field parameter as of r1102057.</p>

<p>Concerning v.data versus v.getDataRef(), there is no fixed rule. As far as I am concerned, I use directly the attribute as it is shorter and easier to read. Some other <span class="error">&#91;math&#93;</span> developers may do otherwise. I don't think derived class completely discard an attribute from their base class to replace it. However, in these rare cases, using a getter would of course be the right way to go.</p></comment><comment id="13032267" author="aploese" created="Thu, 12 May 2011 07:31:00 +0100"><p>No, I think more of a derived class which do some fancy cashing and not updating data immediately - as I said just a thought.</p></comment><comment id="13032332" author="aploese" created="Thu, 12 May 2011 10:53:38 +0100"><p>Array2DRowFieldMatrix.java: 263 | 295</p></comment><comment id="13032847" author="aploese" created="Fri, 13 May 2011 07:47:11 +0100"><p>I suggest to remove all constructores that not specify whether the data should be copied or not. If you do so you will find many "wrong" usages ...</p>

<p>An other point why there is the interface FieldVector when the implementing class (ArrayFieldVector) of FieldVector is leaking out (and in) of ArrayFieldVector on every place - IMHO this is bad coding style.</p></comment><comment id="13032848" author="aploese" created="Fri, 13 May 2011 07:47:37 +0100"><p>sorry, see my last comment</p></comment><comment id="13032856" author="aploese" created="Fri, 13 May 2011 08:19:19 +0100"><p> public T[] preMultiply(final T[] v) {</p>

<p>is implemented twice 1st in AbstractFieldMatrix.java and 2nd in Array2DRowFieldMatrix.java</p></comment><comment id="13033493" author="luc" created="Sat, 14 May 2011 11:05:20 +0100"><p>I have tried to specify field wherever it was possible. Thanks for the tip about removing the constructor and fixing the errors. I have left many calls of the no-field constructors in the tests, for testing purposes, there are no such calls left in the library itself.</p>

<p>We know ArrayFieldVector leaks out in the interface. This was on purpose when people already know they want to use this implementation. They are however free to have different implementations for storage, so the interface is also useful (but not to the same users). In fact, when we have a method that returns a FieldVector in the interface, we should say it returns an ArrayFieldVector in the implementation if we know this is what always happen. Implementing or overriding a method with a narrowed return type is allowed by the Java language. We did not do it on all methods, so I agree we are inconsistent here.</p>

<p>The two implementations of premultiply are different. One uses the generic getEntry methods and the other uses direct array access. At that time, it was done for efficiency. We did not benchmark it recently with new JVMs, but it may not be needed anymore. The usefulness of this overriding is really JVM dependent.</p></comment><comment id="13033544" author="aploese" created="Sat, 14 May 2011 16:05:10 +0100"><p>OK so fare.</p>

<p>I hope that you don't flame me for nagging you again <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p>

<p>Looking at RealArrayVecor and FieldArrayVector I see different implementations of mapSOMETHING ... Maybe check performance, define some best condiing practice and refactor | clean up?</p>

<p>Furthermore I saw the checkDimension() is sometimes called sometimes not? - Just a hint... </p></comment><comment id="13033681" author="luc" created="Sun, 15 May 2011 14:22:56 +0100"><p>Don't worry Arne, I'm happy you point out mistakes in our code.</p>

<p>I seem to have forgotten committing the changes I made yesterday about specifying field wherever possible. It's in the repository now.</p>

<p>Doing some benchmarks to check if we should remove or keep different implementations would be a good thing. Would you try to give it a try and report your results, preferably opening a new Jira issue ?</p>

<p>I found checkDimension only in MultivariateSummaryStatistics and checkdimension (small case "d") only in tests. Where did you see other use ?</p></comment><comment id="13033791" author="aploese" created="Sun, 15 May 2011 18:46:56 +0100"><p>In AbstractRealvector</p>

<p>public RealVector add(double[] v) {<br/>
there is no check of any dimension (goes for (at least some) other operators as well.</p>

<p>What kind of benchmark do you want (RealVector current implementations v.s. true array|sparse ?) or the operators in map*?</p>

<p>Maybe I could think of an implementations where there is a private interface Storage </p>
{
 T getEntrx(int i);
 void setEntry(int i; T e);
 int getDimension();
 int setDimension(Field f, int size);
 int setDimension(T[] v, boolean makeCopy); &lt;&lt; I dont like the name copyArray its implemetation specifict but dataIsInmutabe sounds also bad ....
}

<p>this is instatiated with ether An array implentation or a sparse list one could define if the fillstate is more than 50 % switch to array ore something else ... just an idea ....</p></comment><comment id="13044546" author="luc" created="Sun, 5 Jun 2011 16:32:33 +0100"><p>It now seems everything has finally been sorted out for this issue, after several failed attempts, so marking it as resolved.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 10 May 2011 18:20:24 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>71909</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160453</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-572] Constructor parameter not used</title><link>https://issues.apache.org/jira/browse/MATH-572</link><project id="12310485" key="MATH">Commons Math</project><description><p>the constructor public ArrayFieldVector(Field&lt;T&gt; field, T[] v1, T[] v2)<br/>
sets this<br/>
"this.field = data<span class="error">&#91;0&#93;</span>.getField();"<br/>
in the fast line...</p>

<p>"this.field = field;"</p>

<p>would be right - field was explicitly provided.</p></description><environment/><key id="12506688">MATH-572</key><summary>Constructor parameter not used</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="aploese">Arne Plöse</reporter><labels>
                    </labels><created>Tue, 10 May 2011 09:07:37 +0100</created><updated>Sat, 24 Mar 2012 16:16:47 +0000</updated><resolved>Tue, 10 May 2011 19:09:45 +0100</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13031279" author="luc" created="Tue, 10 May 2011 19:09:45 +0100"><p>Fixed in subversion repository as of r1101575.</p>

<p>Thanks for reporting the issue.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 10 May 2011 18:09:45 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150671</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160454</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-571] make FieldVector generic</title><link>https://issues.apache.org/jira/browse/MATH-571</link><project id="12310485" key="MATH">Commons Math</project><description><p>make FieldVector generic, so one can extend i.e. ArrayVieldVector&lt;Complex&gt; to ArrayComplexVector an introduce new methoids (getReal())...</p>

<p>if one has an equation complexvector.copy the original type ArrayComplexVector is lost thus access to getReal() is not possible.</p>

<p>solution:</p>

<p>public class InheritationTest {</p>

<p>    public static interface FieldVector&lt;T extends FieldElement&lt;T&gt;, R extends FieldVector&gt; </p>
{

        R copy();
    }

<p>    public abstract static class ArrayFieldVectorExtendable&lt;T extends FieldElement&lt;T&gt;, R extends FieldVector&gt; implements FieldVector&lt;T, R&gt;, Serializable {</p>

<p>        protected T[] data;</p>

<p>        @Override<br/>
        public R copy() </p>
{
            return createVector(data);
        }

<p>        abstract protected R createVector(T[] data);<br/>
    }</p>

<p>    public static class ArrayFieldVector&lt;T extends FieldElement&lt;T&gt;&gt; extends ArrayFieldVectorExtendable&lt;T, ArrayFieldVector&gt; {</p>

<p>        @Override<br/>
        protected ArrayFieldVector&lt;T&gt; createVector(T[] data) </p>
{
            ArrayFieldVector&lt;T&gt; result = new ArrayFieldVector&lt;T&gt;();
            result.data = data;
            return result;
        }
<p>    }</p>

<p>    public static class ArrayComplexVector extends ArrayFieldVectorExtendable&lt;Complex, ArrayComplexVector&gt; {</p>

<p>        @Override<br/>
        protected ArrayComplexVector createVector(Complex[] data) </p>
{
            ArrayComplexVector result = new ArrayComplexVector();
            result.data = data;
            return result;
        }

<p>        public double[] getReal() </p>
{
            return null;
        }<br/>
<br/>
        public double[] getImaginary() {
            return null;
        }
<p>    }</p>

<p>    public void test() </p>
{
        ArrayComplexVector v = new ArrayComplexVector();
        ArrayComplexVector v1 = v.copy();  // FiledVector type survives ...
    }
<p>}</p></description><environment/><key id="12506616">MATH-571</key><summary>make FieldVector generic</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="2">Won't Fix</resolution><assignee username="-1">Unassigned</assignee><reporter username="aploese">Arne Plöse</reporter><labels>
                    </labels><created>Mon, 9 May 2011 15:17:43 +0100</created><updated>Sat, 24 Mar 2012 16:23:56 +0000</updated><resolved>Sat, 1 Oct 2011 15:26:40 +0100</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13030839" author="luc" created="Mon, 9 May 2011 19:14:43 +0100"><p>I am not sure to understand what you mean. Do you want to add the second R parameter for the sake of implementing a copy method ?</p>

<p>The current way of copying a vector would be to use</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
ArrayComplexVector v = <span class="code-keyword">new</span> ArrayComplexVector();
ArrayComplexVector v1 = <span class="code-keyword">new</span> ArrayComplexVector(v);
</pre>
</div></div>

<p>Can you explain further what you need ?<br/>
Thanks</p></comment><comment id="13031066" author="aploese" created="Tue, 10 May 2011 08:05:02 +0100"><p>copy was just an example ... this change goes for all methods that generates an Fieldvector as output i.e. ebeMultiply ...</p></comment><comment id="13031300" author="luc" created="Tue, 10 May 2011 19:40:58 +0100"><p>I am slowly starting to understand.<br/>
Do you think ArrayFieldVectorExtendable interface is really needed or should the createVector method by directly implemented in ArrayFieldVector ?</p></comment><comment id="13031360" author="aploese" created="Tue, 10 May 2011 21:27:57 +0100"><p>Maybe this code works ... Yes it looks ugly ...</p>

<p>I want to extend FieldElement and wnt it use in vector and matrix.</p>

<p>so the problem is getting the right "backing class" for the interface.<br/>
For the matrix is a third generics needed....</p>

<p>Maybe someone has a better solution here is my "draft".</p>

<p>public class App <br/>
{<br/>
    public static interface FieldElement&lt;T&gt; </p>
{

        T add(T a);
    }

<p>    public static interface FieldVector&lt;T extends FieldElement&lt;T&gt;, V extends FieldVector&gt; </p>
{

        V multiply(FieldVector&lt;T, ?&gt; v);

        V createVector(T[] data);

    }

<p>    public static interface ComplexFieldElement&lt;T extends ComplexFieldElement&lt;T&gt;&gt; extends FieldElement&lt;T&gt; </p>
{

        double getReal();

        T conjugate();
    }

<p>    public static class Complex implements ComplexFieldElement&lt;Complex&gt; {</p>

<p>        @Override<br/>
        public double getReal() </p>
{
            return 1;
        }

<p>        @Override<br/>
        public Complex add(Complex a) </p>
{
            return new Complex();
        }

<p>        @Override<br/>
        public Complex conjugate() </p>
{
            throw new UnsupportedOperationException("Not supported yet.");
        }<br/>
    }<br/>
<br/>
    public static interface GenericComplexFieldVector&lt;T extends ComplexFieldElement&lt;T&gt;, V extends GenericComplexFieldVector&gt; extends FieldVector&lt;T, V&gt; {

        V conjugate();

        double[] getReal();
    }<br/>
<br/>
    public abstract static class AbstractArrayFieldVector&lt;T extends FieldElement&lt;T&gt;, V extends FieldVector&gt; implements FieldVector&lt;T, V&gt; {<br/>
<br/>
        protected T[] data;<br/>
<br/>
        @Override<br/>
        public V multiply(FieldVector&lt;T, ?&gt; v) {
            return createVector(data);
        }<br/>
    }<br/>
<br/>
    public static class ArrayFieldVector&lt;T extends FieldElement&lt;T&gt;&gt; extends AbstractArrayFieldVector&lt;T, FieldVector&gt; {<br/>
<br/>
        @Override<br/>
        public ArrayFieldVector createVector(T[] data) {
            ArrayFieldVector result = new ArrayFieldVector();
            result.data = data;
            return result;
        }<br/>
    }<br/>
<br/>
    public abstract static class AbstractArrayComplexVector&lt;T extends ComplexFieldElement&lt;T&gt;, V extends GenericComplexFieldVector&gt; extends AbstractArrayFieldVector&lt;T, V&gt; implements GenericComplexFieldVector&lt;T, V&gt;{<br/>
<br/>
        @Override<br/>
        public double[] getReal() {
            throw new UnsupportedOperationException("Not supported yet.");
        }

<p>        @Override<br/>
        public V conjugate() </p>
{
            throw new UnsupportedOperationException("Not supported yet.");
        }

<p>    }</p>

<p>    public static interface ComplexVector extends GenericComplexFieldVector&lt;Complex, ComplexVector&gt; {</p>

<p>    }</p>

<p>    public static class ArrayComplexVector extends AbstractArrayComplexVector&lt;Complex, ComplexVector&gt; implements ComplexVector {</p>

<p>        @Override<br/>
        public ComplexVector createVector(Complex[] data) </p>
{
            ArrayComplexVector result = new ArrayComplexVector();
            result.data = data;
            return (ComplexVector)result;
        }


<p>    }</p>

<p>public static void main(String [] args) </p>
{
        ArrayComplexVector v = new ArrayComplexVector();
        ComplexVector v1 = v.multiply(new ArrayComplexVector());  // FiledVector type survives ...
        FieldVector&lt;Complex, ?&gt; v2 = v1.multiply(v);
        FieldVector&lt;Complex, FieldVector&gt; v3 = v2.multiply(v2);
    }
<p>}</p></comment><comment id="13031627" author="aploese" created="Wed, 11 May 2011 11:15:36 +0100"><p>Here is my latest, if it looks promising, I will give it a try to make the big step and change the sources, test ...<br/>
If you thing this is not the way things should go, let me know before I waste my time on it.</p>

<p>/*</p>
<ul>
	<li>To each fieldElement interface belangs a fieldvector and fieldMatrix interface.</li>
	<li>if I create a new fieldElement I need a new fieldvector and fieldMatrix.</li>
	<li>The Abstract* classes implement these iterfaces and are open</li>
	<li>the classes without the Abstract prefix are final and hide the vector and maticx interfaces...</li>
	<li>so each new fieldElement results in 3 new interfaces and 4 new classes <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/><br/>
 */<br/>
public class App <br/>
{<br/>
    public static interface FieldElement&lt;T&gt; 
{

        T add(T a);

 //not really needed, but just to male sure one can mutiply a sclar to a vector ... vector times scalar is implemented in vector
       &lt;V extends FieldVector&gt; V mapMultiply(V v);
    }</li>
</ul>


<p>    public static interface FieldVector&lt;T extends FieldElement&lt;T&gt;, M extends FieldMatrix, V extends FieldVector&gt; </p>
{

        V ebeMultiply(FieldVector&lt;T, M, V&gt; v);

        V mapMultiply(T v);

        M multiply(FieldVector&lt;T, M, V&gt; v);

        V createVector(T[] data);

        V createVector(FieldVector&lt;T, ?, ?&gt; v);

        M createMatrix(T[][] data);

        M createMatrix(FieldMatrix&lt;T, ?, ?&gt; v);

        T procuct();
    }

<p>    public static interface FieldMatrix&lt;T extends FieldElement&lt;T&gt;, M extends FieldMatrix, V extends FieldVector&gt; </p>
{

        M multiply(FieldVector&lt;T, M, V&gt; v);

        M createMatrix(T[][] data);

        M createMatrix(FieldMatrix&lt;T, ?, ?&gt; v);

        V createVector(T[] data);

        V createVector(FieldVector&lt;T, ?, ?&gt; v);

        V getRow(int i);
    }

<p>    // generic interface that one can implement a BigReal ... CoplexClass if needed<br/>
    public static interface ComplexFieldElement&lt;T extends ComplexFieldElement&lt;T&gt;&gt; extends FieldElement&lt;T&gt; </p>
{

        T conjugate();


    }

<p>    public static interface GenericComplexFieldVector&lt;T extends ComplexFieldElement&lt;T&gt;, M extends GenericComplexFieldMatrix, V extends GenericComplexFieldVector&gt; extends FieldVector&lt;T, M, V&gt; </p>
{

        V conjugate();

    }

<p>    public static interface GenericComplexFieldMatrix&lt;T extends ComplexFieldElement&lt;T&gt;, M extends GenericComplexFieldMatrix, V extends GenericComplexFieldVector&gt; extends FieldMatrix&lt;T, M, V&gt; </p>
{

        M conjugate();

    }

<p>    public abstract static class AbstractArrayFieldVector&lt;T extends FieldElement&lt;T&gt;, M extends FieldMatrix, V extends FieldVector&gt; implements FieldVector&lt;T, M, V&gt; {</p>

<p>        protected T[] data;</p>

<p>     @Override<br/>
        public V ebeMultiply(FieldVector&lt;T, M, V&gt; v) </p>
{
            return createVector(data);
        }<br/>
<br/>
     @Override<br/>
        public V mapMultiply(T v) {
            return createVector(data);
        }

<p>     @Override<br/>
        public M multiply(FieldVector&lt;T, M, V&gt; v) </p>
{
            return createMatrix((T[][])null);
        }
<p>     @Override<br/>
        public T procuct() </p>
{
            return null;
        }

<p>    }</p>

<p>    public abstract static class AbstractArrayFieldMatrix&lt;T extends FieldElement&lt;T&gt;, M extends FieldMatrix, V extends FieldVector&gt; implements FieldMatrix&lt;T, M, V&gt; {</p>

<p>        protected T[][] data;</p>

<p>        @Override<br/>
        public M multiply(FieldVector&lt;T, M, V&gt; v) </p>
{
            return createMatrix(data);
        }

<p>        @Override<br/>
        public V getRow(int i) </p>
{
            return createVector((T[])null);
        }
<p>    }</p>

<p>    // get rid of the vector and matrix<br/>
    public final static class ArrayFieldVector&lt;T extends FieldElement&lt;T&gt;&gt; extends AbstractArrayFieldVector&lt;T, FieldMatrix, FieldVector&gt; {</p>

<p>        @Override<br/>
        public ArrayFieldVector createVector(T[] data) </p>
{
            ArrayFieldVector result = new ArrayFieldVector();
            result.data = data;
            return result;
        }<br/>
<br/>
        @Override<br/>
        public FieldMatrix createMatrix(T[][] data) {
            ArrayFieldMatrix result = new ArrayFieldMatrix();
            result.data = data;
            return result;
        }<br/>
<br/>
        @Override<br/>
        public FieldVector createVector(FieldVector&lt;T, ?, ?&gt; v) {
            ArrayFieldVector result = new ArrayFieldVector();
            return result;
        }<br/>
<br/>
        @Override<br/>
        public FieldMatrix createMatrix(FieldMatrix&lt;T, ?, ?&gt; v) {
            ArrayFieldMatrix result = new ArrayFieldMatrix();
            return result;
        }<br/>
<br/>
    }<br/>
<br/>
    // get rid of the vector and matrix<br/>
    public final static class ArrayFieldMatrix&lt;T extends FieldElement&lt;T&gt;&gt; extends AbstractArrayFieldMatrix&lt;T, FieldMatrix, FieldVector&gt; {<br/>
<br/>
        @Override<br/>
        public FieldVector createVector(T[] data) {
            ArrayFieldVector result = new ArrayFieldVector();
            result.data = data;
            return result;
        }

<p>        @Override<br/>
        public FieldMatrix createMatrix(T[][] data) </p>
{
            ArrayFieldMatrix result = new ArrayFieldMatrix();
            result.data = data;
            return result;
        }

<p>        @Override<br/>
        public FieldMatrix createMatrix(FieldMatrix&lt;T, ?, ?&gt; v) </p>
{
            ArrayFieldMatrix result = new ArrayFieldMatrix();
            return result;
        }

<p>        @Override<br/>
        public FieldVector createVector(FieldVector&lt;T, ?, ?&gt; v) </p>
{
            ArrayFieldVector result = new ArrayFieldVector();
            return result;
        }

<p>    }</p>

<p>    public abstract static class AbstractArrayComplexVector&lt;T extends ComplexFieldElement&lt;T&gt;, M extends  GenericComplexFieldMatrix, V extends GenericComplexFieldVector&gt; extends AbstractArrayFieldVector&lt;T, M, V&gt; implements GenericComplexFieldVector&lt;T, M, V&gt;{</p>

<p>        @Override<br/>
        public V conjugate() </p>
{
            throw new UnsupportedOperationException("Not supported yet.");
        }<br/>
<br/>
   }<br/>
<br/>
    public abstract static class AbstractArrayComplexMatrix&lt;T extends ComplexFieldElement&lt;T&gt;, M extends  GenericComplexFieldMatrix, V extends GenericComplexFieldVector&gt; extends AbstractArrayFieldMatrix&lt;T, M, V&gt; implements GenericComplexFieldMatrix&lt;T, M, V&gt; {<br/>
<br/>
        @Override<br/>
        public M conjugate() {
            throw new UnsupportedOperationException("Not supported yet.");
        }

<p>    }</p>

<p>    // should better be named ComplexDouble ...<br/>
        public static class Complex implements ComplexFieldElement&lt;Complex&gt; {</p>

<p>        public double getReal() </p>
{
            return 1;
        }

<p>        @Override<br/>
        public Complex add(Complex a) </p>
{
            return new Complex();
        }

<p>        @Override<br/>
        public Complex conjugate() </p>
{
            throw new UnsupportedOperationException("Not supported yet.");
        }<br/>
<br/>
        @Override<br/>
        public &lt;V extends FieldVector&gt; V mapMultiply(V v) {
            return (V)v.mapMultiply(this); // Call vectors mapMultiply
        }<br/>
    }<br/>
<br/>
<br/>
    // should better be named ComplexDoubleVector ...<br/>
    public static interface ComplexVector extends GenericComplexFieldVector&lt;Complex, ComplexMatrix, ComplexVector&gt; {

        double[] getReal();

    }<br/>
<br/>
    // should better be named ComplexDoubleMatrix ...<br/>
    public static interface ComplexMatrix extends GenericComplexFieldMatrix&lt;Complex, ComplexMatrix, ComplexVector&gt; {

        double[][] getReal();
    }<br/>
<br/>
    // get rid of the fieldElement, vector and matrix<br/>
    public final static class ArrayComplexVector extends AbstractArrayComplexVector&lt;Complex, ComplexMatrix, ComplexVector&gt; implements ComplexVector {<br/>
<br/>
        @Override<br/>
        public ComplexVector createVector(Complex[] data) {
            ArrayComplexVector result = new ArrayComplexVector();
            result.data = data;
            return result;
        }<br/>
<br/>
        @Override<br/>
        public ComplexMatrix createMatrix(Complex[][] data) {
            ArrayComplexMatrix result = new ArrayComplexMatrix();
            return result;
        }<br/>
<br/>
        @Override<br/>
        public double[] getReal() {
            throw new UnsupportedOperationException("Not supported yet.");
        }

<p>        @Override<br/>
        public ComplexVector createVector(FieldVector&lt;Complex, ?, ?&gt; v) </p>
{
            ArrayComplexVector result = new ArrayComplexVector();
            return result;
        }<br/>
<br/>
        @Override<br/>
        public ComplexMatrix createMatrix(FieldMatrix&lt;Complex, ?, ?&gt; v) {
            ArrayComplexMatrix result = new ArrayComplexMatrix();
            return result;
        }<br/>
<br/>
    }<br/>
<br/>
    // get rid of the fieldElement, vector and matrix  ... its just a matric of Copmplex<br/>
    public final static class ArrayComplexMatrix extends AbstractArrayComplexMatrix&lt;Complex, ComplexMatrix, ComplexVector&gt; implements ComplexMatrix {<br/>
<br/>
        @Override<br/>
        public ComplexVector createVector(Complex[] data) {
            ArrayComplexVector result = new ArrayComplexVector();
            result.data = data;
            return result;
        }<br/>
<br/>
        @Override<br/>
        public ComplexMatrix createMatrix(Complex[][] data) {
            ArrayComplexMatrix result = new ArrayComplexMatrix();
            return result;
        }<br/>
<br/>
        @Override<br/>
        public double[][] getReal() {
            throw new UnsupportedOperationException("Not supported yet.");
        }<br/>
<br/>
        @Override<br/>
        public ComplexMatrix createMatrix(FieldMatrix&lt;Complex, ?, ?&gt; v) {
            ArrayComplexMatrix result = new ArrayComplexMatrix();
            return result;
        }<br/>
<br/>
        @Override<br/>
        public ComplexVector createVector(FieldVector&lt;Complex, ?, ?&gt; v) {
            ArrayComplexVector result = new ArrayComplexVector();
            return result;
        }

<p>    }</p>

<p>    public static class SomeFancyStuff&lt;T extends FieldElement&lt;T&gt;, M extends FieldMatrix, V extends FieldVector&gt; {<br/>
        private V v;<br/>
        private M m;</p>

<p>        public SomeFancyStuff(M m) </p>
{
            this.m = m;
            v = (V)m.getRow(0);
        }<br/>
<br/>
        V getV() {
            return v;
        }<br/>
<br/>
    }<br/>
<br/>
    public static class SomeFancyStuffComplex&lt;T extends ComplexFieldElement&lt;T&gt;, M extends ComplexMatrix, V extends ComplexVector&gt; {<br/>
        private V v;<br/>
        private M m;<br/>
<br/>
        public SomeFancyStuffComplex(M m) {
            this.m = m;
            v = (V)m.getRow(0);
        }

<p>        V getV() </p>
{
            return v;
        }


<p>    }</p>

<p>public static void main(String [] args) </p>
{
        ComplexVector v = new ArrayComplexVector();
        ComplexMatrix m1 = v.multiply(new ArrayComplexVector());  // FiledVector type survives ...
        FieldVector&lt;Complex, ?, ?&gt; v2 = m1.getRow(0);
        ComplexVector v3 = m1.getRow(1);
        SomeFancyStuff&lt;Complex, FieldMatrix, FieldVector&gt; sf1 = new SomeFancyStuff&lt;Complex, FieldMatrix, FieldVector&gt;(new ArrayFieldMatrix&lt;Complex&gt;());
        SomeFancyStuffComplex sf2 = new SomeFancyStuffComplex(new ArrayComplexMatrix());
        SomeFancyStuff&lt;Complex, FieldMatrix, FieldVector&gt; sf3 = new SomeFancyStuff&lt;Complex, FieldMatrix, FieldVector&gt;(new ArrayComplexMatrix());
        v2= sf1.getV();
        v3 = sf2.getV();
        v2 = sf3.getV();
        Complex c = new Complex();
        ComplexVector v4 = c.mapMultiply(v);
        FieldVector&lt;Complex, FieldMatrix, FieldVector&gt; vc = c.mapMultiply(new ArrayFieldVector&lt;Complex&gt;());
        Complex c1 = vc.procuct();
    }
<p>}</p></comment><comment id="13031632" author="luc" created="Wed, 11 May 2011 11:39:01 +0100"><p>Lets take some time to review this, don't jump on the keyboard immediately.</p></comment><comment id="13082170" author="psteitz" created="Wed, 10 Aug 2011 07:24:18 +0100"><p>My inclination is WONT_FIX here; but if we do decide to go this route, we need to do it in 3.0</p></comment><comment id="13082504" author="luc" created="Wed, 10 Aug 2011 18:51:03 +0100"><p>OK for WONT_FIX for both this issue and <a href="https://issues.apache.org/jira/browse/MATH-569" title="Add more operators to FieldElement&lt;T&gt;" class="issue-link" data-issue-key="MATH-569"><del>MATH-569</del></a></p></comment><comment id="13118822" author="luc" created="Sat, 1 Oct 2011 15:26:40 +0100"><p>Setting to Won't Fix as per comments above.</p></comment><comment id="13237595" author="luc" created="Sat, 24 Mar 2012 16:23:56 +0000"><p>changing status to closed as 3.0 has been released</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Mon, 9 May 2011 18:14:43 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2220</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160455</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-570] Change some constructors of ArrayFieldVector to accept FieldVector</title><link>https://issues.apache.org/jira/browse/MATH-570</link><project id="12310485" key="MATH">Commons Math</project><description><p>the constructor     public ArrayFieldVector(T[] v1, ArrayFieldVector&lt;T&gt; v2) </p>
{
 ... 
}
<p>takes an ArrayFieldVector.</p>

<p>but the same can be easier archieved with this </p>

<p>    public ArrayFieldVector(T[] v1, FieldVector&lt;T&gt; v2) </p>
{
        this(v1, v2 == null ? null : v2.getData());
    }
<p>this goes for all other constructors...</p>

<p>P.S. I donk know if copying the data in getData is an issue ... for this the named constructor may make sense...</p></description><environment/><key id="12506593">MATH-570</key><summary>Change some constructors of ArrayFieldVector to accept FieldVector</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="aploese">Arne Plöse</reporter><labels>
                    </labels><created>Mon, 9 May 2011 13:17:07 +0100</created><updated>Sun, 7 Apr 2013 10:14:03 +0100</updated><resolved>Mon, 11 Mar 2013 17:56:13 +0000</resolved><fixVersion>3.2</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13030835" author="luc" created="Mon, 9 May 2011 19:01:44 +0100"><p>The purpose of the large number of constructors is precisely to avoid spurious copies.<br/>
So I would consider their existence as a feature.</p></comment><comment id="13031061" author="aploese" created="Tue, 10 May 2011 07:59:22 +0100"><p>OK I understand, but I don't want to have a param ArrayFieldvector&lt;T&gt; in the constructor.<br/>
Fieldvector&lt;T&gt; as a parameter is in my opinion enough.</p>

<p>on can do a if (v instance of ArrayFieldVector) </p>
{
"copy or wrap? v.data directly"
}
<p> else </p>
{
"use v.getData"
}

<p>This would be efficient code and gives the opportunity to have FieldVector as parameter.</p></comment><comment id="13031291" author="luc" created="Tue, 10 May 2011 19:32:47 +0100"><p>The difference between a dedicated constructor and an explicit instanceof check is that one is done at compile time and the other one at run time.<br/>
When I wrote that, I thought it would help the optimizer produce directly more efficient code. I'm not sure anymore this is true (dynamic optimization in modern JVM is really smart to detect the types by itself). So I agree with you, an explicit test is better. In fact, it would be more or less similar to our own copyArray boolean flag.</p>

<p>So +1 to simplify these constructors if nobody disagree. We should copy the data, not wrap it because FieldVector instances are mutable.</p></comment><comment id="13031363" author="aploese" created="Tue, 10 May 2011 21:34:27 +0100"><p>What agbout this (without generics)</p>

<p>    public ArrayFieldVector(FieldVector&lt;T, ?, ?&gt; v1, FieldVector&lt;T, ?, ?&gt; v2) {<br/>
        if (v1 == null</p>
<table class='confluenceTable'><tbody>
<tr>
<th class='confluenceTh'> v2 == null) 
{
            throw new NullArgumentException();
        }<br/>
        field = v1.getField();<br/>
        T[] v1Data;<br/>
        T[] v2Data;<br/>
        if (v1 instanceof ArrayFieldVector) {
            v1Data = ((ArrayFieldVector&lt;T, ?, ?&gt;) v1).data;
        } else {
            v1Data = v1.getData();
        }<br/>
        if (v2 instanceof ArrayFieldVector) {
            v2Data = ((ArrayFieldVector&lt;T, ?, ?&gt;) v2).data;
        } else {
            v2Data = v2.getData();
        }<br/>
        data = buildArray(v1Data, v2Data);<br/>
    }<br/>
<br/>
    private T[] buildArray(T[] v1, T[] v2) {
        T[] result = buildArray(v1.length + v2.length);
        System.arraycopy(v1, 0, data, 0, v1.length);
        System.arraycopy(v2, 0, data, v1.length, v2.length);
        return result;
    }<br/>
<br/>
    /**<br/>
     * Construct a vector by appending one vector to another vector.<br/>
     *<br/>
     * @param v1 First vector (will be put in front of the new vector).<br/>
     * @param v2 Second vector (will be put at back of the new vector).<br/>
     * @throws NullArgumentException if {@code v1} or {@code v2} is<br/>
     * {@code null}.<br/>
     */<br/>
    public ArrayFieldVector(FieldVector&lt;T, ?, ?&gt; v1, T[] v2) {<br/>
        if (v1 == null<br/>
                || v2 == null) {
            throw new NullArgumentException();
        }
<p>        field = v1.getField();<br/>
        T[] v1Data;<br/>
        if (v1 instanceof ArrayFieldVector) </p>
{
            v1Data = ((ArrayFieldVector&lt;T, ?, ?&gt;) v1).data;
        }
<p> else </p>
{
            v1Data = v1.getData();
        }
<p>        data = buildArray(v1Data, v2);<br/>
    }</p></th>
</tr>
</tbody></table>
</comment><comment id="13082168" author="psteitz" created="Wed, 10 Aug 2011 07:22:07 +0100"><p>If we do implement this, it can wait until 3.1 as it should be able to be accomplished without breaking compatibility IIUC the additions</p></comment><comment id="13599056" author="luc" created="Mon, 11 Mar 2013 17:56:13 +0000"><p>Fixed in subversion repository as of r1455260.</p>

<p>Thanks for the report and the fix suggestion.</p></comment><comment id="13624801" author="luc" created="Sun, 7 Apr 2013 10:14:03 +0100"><p>Closing issue as version 3.2 has been released on 2013-04-06.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Mon, 9 May 2011 18:01:44 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2221</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>11076</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-569] Add more operators to FieldElement</title><link>https://issues.apache.org/jira/browse/MATH-569</link><project id="12310485" key="MATH">Commons Math</project><description><p>it would be nice to have some additional operators in FieldElement i.e.</p>


<p>    T negate();</p>

<p>    T pow(T x);</p>

<p>    T sqrt();</p>

<p>maybe the double variant i.e.</p>

<p>    T pow(double x);</p>

<p>as well.</p>


<p>This would be affect FieldVector | Matrix, BigReal, ... as well.</p></description><environment/><key id="12506591">MATH-569</key><summary>Add more operators to FieldElement</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="2">Won't Fix</resolution><assignee username="-1">Unassigned</assignee><reporter username="aploese">Arne Plöse</reporter><labels>
                    </labels><created>Mon, 9 May 2011 13:05:07 +0100</created><updated>Mon, 4 Mar 2013 18:57:31 +0000</updated><resolved>Sat, 1 Oct 2011 15:26:56 +0100</resolved><version>3.0</version><due/><votes>0</votes><watches>0</watches><comments><comment id="13030834" author="luc" created="Mon, 9 May 2011 18:56:23 +0100"><p>This is possible only for negate() in the FieldElement interface. Not all fields support sqrt or pow. A typical example is Fraction, the square root of a fraction may not be a fraction for example.</p>

<p>This is exactly this limitation that explains while only LU decomposition is implemented for fields and not other decomposition algorithms.</p>

<p>One possibility would be to add an ExtendedFieldElement&lt;T&gt; interface that would add these methods for the fields that support it (Complex, Dfp ...). Then, we could add new decomposition algorithms that would work on these extended fields (but still not on simpler fields like fraction.</p></comment><comment id="13030849" author="psteitz" created="Mon, 9 May 2011 19:34:51 +0100"><p>negate() is OK, could be added wlog.</p>

<p>Regarding the others, note that a) real fields are not going to be closed under sqrt() (so Dfp, for example, can't support this) and b) pow(.,.) requires some significant extra-algebraic structure to be meaningful.  If you want all of this structure, then what you are really looking for is an algebraically closed field with exp - i.e. Complex.  So the natural thing to do is to extract a ComplexFieldElement interface, assuming this is really needed.  What exactly are the use cases served by this?  To make it easier to implement decomposition algorithms for both real and complex fields?  They can't rely on sqrt() if applied to real fields.</p></comment><comment id="13031070" author="aploese" created="Tue, 10 May 2011 08:14:19 +0100"><p>Ok i try to build a small DSP library, where i need to create some digital filters.<br/>
Having the octave code for this, they make use of complex vectors to calculate the parameters of the filter.</p>

<p>There are several possibilities to solve this problem:</p>

<p>1. Create an own Complex vector | matrix and copy code around...<br/>
2. extend FieldVector and ArrayFieldVector; problem all methods return a real ArrayFieldVector so I must recreate my ComplexVector every time.<br/>
3. add missing operators to FieldElement and Fieldvector and implementing classes.<br/>
  What is the point to simply throw a NotSupportedException if an operation is not supported? </p></comment><comment id="13031308" author="luc" created="Tue, 10 May 2011 19:54:23 +0100"><p>Option 1 is clearly only a last resort solution?<br/>
Option 2 seems linked to <a href="https://issues.apache.org/jira/browse/MATH-571" title="make FieldVector generic" class="issue-link" data-issue-key="MATH-571"><del>MATH-571</del></a>, so let's decide there how we solve it.<br/>
Option 3 could be done with an extended interface but in this case it would not solve your problem, as you would need also an ExtendedFieldVector and all the rest, so we would be back to options 1 or 2.<br/>
Option 4 (using only one level of interface and using NotSupportedException) is possible but seems awkward.</p>

<p>So I would say choose option 2 if we can solve <a href="https://issues.apache.org/jira/browse/MATH-571" title="make FieldVector generic" class="issue-link" data-issue-key="MATH-571"><del>MATH-571</del></a>, and choose option 4 if we cannot.</p></comment><comment id="13031315" author="psteitz" created="Tue, 10 May 2011 20:03:00 +0100"><p>Looks to me like what is needed here is just ComplexFieldElement.  Before solving this or <a href="https://issues.apache.org/jira/browse/MATH-571" title="make FieldVector generic" class="issue-link" data-issue-key="MATH-571"><del>MATH-571</del></a> using some "Extended" field interface that does not really define a field, I would like to understand what the use case beyond Complex is.</p></comment><comment id="13082178" author="psteitz" created="Wed, 10 Aug 2011 07:33:09 +0100"><p>I recommend WONT_FIX here.</p></comment><comment id="13082505" author="luc" created="Wed, 10 Aug 2011 18:51:10 +0100"><p>OK for WONT_FIX for both this issue and <a href="https://issues.apache.org/jira/browse/MATH-571" title="make FieldVector generic" class="issue-link" data-issue-key="MATH-571"><del>MATH-571</del></a></p></comment><comment id="13118823" author="luc" created="Sat, 1 Oct 2011 15:26:56 +0100"><p>Setting to Won't Fix as per comments above.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Mon, 9 May 2011 17:56:23 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2222</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160456</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-568] Code in Userguide for Statistics wrong or deprecated </title><link>https://issues.apache.org/jira/browse/MATH-568</link><project id="12310485" key="MATH">Commons Math</project><description><p>The code for the Statistics examples is not running and can easily be fixed. Example:<br/>
// Get a DescriptiveStatistics instance<br/>
DescriptiveStatistics stats = new DescriptiveStatistics();</p>

<p>// Add the data from the array<br/>
for( int i = 0; i &lt; inputArray.length; i++) </p>
{
        stats.addValue(inputArray[i]);
}

<p>// Compute some statistics<br/>
double mean = stats.getMean();<br/>
double std = stats.getStandardDeviation();<br/>
double median = stats.getMedian();</p>

<p>Fails with getMedian not found, change to getPercentile(50);</p>

<p>The second Codeexample for StatuUtils states:<br/>
// Compute statistics directly from the array<br/>
// assume values is a double[] array<br/>
double mean = StatUtils.mean(values);<br/>
double std = StatUtils.variance(values);<br/>
double median = StatUtils.percentile(50);</p>

<p>the last line needs to be changed to: double median = StatUtils.percentile(values,50);</p>
</description><environment><p>windows 7</p></environment><key id="12506496">MATH-568</key><summary>Code in Userguide for Statistics wrong or deprecated </summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="christophmf">Christoph M. Friedrich</reporter><labels><label>documentation</label></labels><created>Sat, 7 May 2011 13:41:05 +0100</created><updated>Sat, 24 Mar 2012 16:16:43 +0000</updated><resolved>Sun, 5 Jun 2011 16:42:45 +0100</resolved><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><timeoriginalestimate seconds="180">0.05h</timeoriginalestimate><timeestimate seconds="180">0.05h</timeestimate><comments><comment id="13044553" author="luc" created="Sun, 5 Jun 2011 16:42:45 +0100"><p>Fixed in subversion repository as of r1132437.</p>

<p>Thanks for the report and the patch.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 5 Jun 2011 15:42:45 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>71907</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160457</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-567] class Dfp toDouble method return -inf whan Dfp value is 0 "zero"</title><link>https://issues.apache.org/jira/browse/MATH-567</link><project id="12310485" key="MATH">Commons Math</project><description><p>I found a bug in the toDouble() method of the Dfp class.<br/>
If the Dfp's value is 0 "zero", the toDouble() method returns a  negative infini.</p>

<p>This is because the double value returned has an exposant equal to 0xFFF <br/>
and a significand is equal to 0.<br/>
In the IEEE754 this is a -inf.</p>

<p>To be equal to zero, the exposant and the significand must be equal to zero.</p>

<p>A simple test case is :<br/>
----------------------------------------------<br/>
import org.apache.commons.math.dfp.DfpField;</p>


<p>public class test {</p>

<p>	/**</p>
<ul>
	<li>@param args<br/>
	 */<br/>
	public static void main(String[] args) 
{
		DfpField field = new DfpField(100);
		System.out.println("toDouble value of getZero() ="+field.getZero().toDouble()+
				"\ntoDouble value of newDfp(0.0) ="+
				field.newDfp(0.0).toDouble());
	}
<p>}</p></li>
</ul>


<p>May be the simplest way to fix it is to test the zero equality at the begin of the toDouble() method, to be able to return the correctly signed zero ?</p></description><environment/><key id="12506317">MATH-567</key><summary>class Dfp toDouble method return -inf whan Dfp value is 0 "zero"</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="michubuntu">michel</reporter><labels>
                    </labels><created>Thu, 5 May 2011 18:49:00 +0100</created><updated>Sat, 24 Mar 2012 16:16:31 +0000</updated><resolved>Thu, 5 May 2011 20:44:09 +0100</resolved><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13029535" author="luc" created="Thu, 5 May 2011 20:44:09 +0100"><p>Fixed in subversion repository as of r1099938.</p>

<p>There were conversions problems in both directions! As you noticed, converting from Dfp to double generated infinities, but creating new Dfp(-0.0) did not preserve the sign.</p>

<p>Thanks for the report and the hint for fixing the bug.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Thu, 5 May 2011 19:44:09 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150670</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160458</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-566] Create "ExceptionContext" class</title><link>https://issues.apache.org/jira/browse/MATH-566</link><project id="12310485" key="MATH">Commons Math</project><description><p>The implementation of the customization of error messages will be moved from "MathRuntimeException" to a new "ExceptionContext" class.<br/>
Every exception class will implement an "ExceptionContextProvider" interface.<br/>
The purpose is to allow Commons Math exceptions to inherit from each of the Java standard exceptions (IAE, UOE, ISE, ...) while still provide the utility suggested by Jörg (borrowed from <span class="error">&#91;Lang&#93;</span>).</p></description><environment/><key id="12506279">MATH-566</key><summary>Create "ExceptionContext" class</summary><type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="erans">Gilles</assignee><reporter username="erans">Gilles</reporter><labels>
                    </labels><created>Thu, 5 May 2011 13:33:21 +0100</created><updated>Sat, 24 Mar 2012 16:16:43 +0000</updated><resolved>Thu, 8 Sep 2011 13:12:02 +0100</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13029304" author="erans" created="Thu, 5 May 2011 13:41:44 +0100"><p>Class "ExceptionContext" committed in revision 1099771.<br/>
The "MathIllegalArgumentEXception" has been modified as suggested on the dev ML.<br/>
If that's OK, I'll change the other exception base classes ("MathArithmeticException", etc.) similarly.</p>

<p>When that's done, I think that "MathThrowable" and "MathRuntimeException" can be removed.</p></comment><comment id="13030740" author="erans" created="Mon, 9 May 2011 14:54:54 +0100"><p>Remaining exception classes modified in revision 1101029.</p></comment><comment id="13064635" author="erans" created="Wed, 13 Jul 2011 16:29:32 +0100"><p>Removed "MathRuntimeException" in revision 1146099.</p></comment><comment id="13100251" author="erans" created="Thu, 8 Sep 2011 13:09:14 +0100"><p>Removed "MathThrowable" in revision 1166646.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>61925</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160459</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-565] Use subversion's $Id$ tag</title><link>https://issues.apache.org/jira/browse/MATH-565</link><project id="12310485" key="MATH">Commons Math</project><description><p>The contents of "@version" lines should use $Id$ instead of $Revision$ and $Date$.<br/>
The rule in "checkstyle.xml" must be changed accordingly.</p></description><environment/><key id="12505406">MATH-565</key><summary>Use subversion's $Id$ tag</summary><type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="erans">Gilles</reporter><labels><label>cleanup</label><label>documentation</label></labels><created>Thu, 28 Apr 2011 12:31:08 +0100</created><updated>Sat, 24 Mar 2012 16:16:46 +0000</updated><resolved>Sat, 4 Jun 2011 09:03:10 +0100</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13026913" author="luc" created="Fri, 29 Apr 2011 10:15:20 +0100"><p>Sounds good to me.<br/>
Are there any other opinions about this ?</p></comment><comment id="13026997" author="psteitz" created="Fri, 29 Apr 2011 15:49:42 +0100"><p>I don't really care.  I would be fine eliminating the @version and svn keywords altogether.</p></comment><comment id="13028147" author="sebb@apache.org" created="Tue, 3 May 2011 11:33:41 +0100"><p>So long as we don't use the $Date$ tag I don't care if @version is present or not.</p>

<p>Rather than forcing all @version tags to use $Id$ or $Revision$ why not just configure checkstyle to complain about using $Date$ ?</p>

<p>It is the Subversion tag that causes the problem, not @version.</p></comment><comment id="13044225" author="luc" created="Sat, 4 Jun 2011 09:03:10 +0100"><p>Fixed in subversion repository as of r1131229</p></comment></comments><issuelinks><issuelinktype id="12310000"><name>Duplicate</name><outwardlinks description="duplicates"><issuelink><issuekey id="12499353">MATH-528</issuekey></issuelink></outwardlinks></issuelinktype></issuelinks><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Fri, 29 Apr 2011 09:15:20 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>71918</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160460</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-564] add a double[][] solve(double[][]) method to Decompositionsolver</title><link>https://issues.apache.org/jira/browse/MATH-564</link><project id="12310485" key="MATH">Commons Math</project><description><p>The decomposition solver provides both RealVector and double[] types for vector solving, but it provides only RealMatrix type for matriw solving.<br/>
This breaks symmetry and is inconvenient in some algorithms which perform lots of iterations. Lots of copying occurs while converting back and forth between RealMatrix and arrays, with no value added when the matrix aspect of the data is only used in the solve operation.<br/>
Adding a double[][] counterpart to RealMatrix in decomposition is also trivial as internally the various implementations already use that.</p></description><environment/><key id="12505402">MATH-564</key><summary>add a double[][] solve(double[][]) method to Decompositionsolver</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="luc">Luc Maisonobe</reporter><labels>
                    </labels><created>Thu, 28 Apr 2011 11:49:11 +0100</created><updated>Sat, 24 Mar 2012 16:16:41 +0000</updated><resolved>Fri, 29 Apr 2011 09:49:33 +0100</resolved><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13026331" author="psteitz" created="Thu, 28 Apr 2011 15:49:19 +0100"><p>+1 to add this</p></comment><comment id="13026909" author="luc" created="Fri, 29 Apr 2011 09:49:33 +0100"><p>Fixed in subversion repository as of r1097730</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Thu, 28 Apr 2011 14:49:19 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150669</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160461</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-563] resetting relative and absolute tolerances in ODE adaptive step size integrators</title><link>https://issues.apache.org/jira/browse/MATH-563</link><project id="12310485" key="MATH">Commons Math</project><description><p>There is a limitation of the current implementation of ODE integrators with<br/>
adaptive step size. For now, the tolerances that are used to adjust the step<br/>
size are specified only at construction time and cannot be changed afterwards.<br/>
However, these tolerances are highly problem-dependent and in fact the dimension<br/>
of the problem (which is related to the dimension of the vectorial version of<br/>
the tolerances) is specified only at integration time, not at construction time.</p>

<p>So it would be interesting to add at the top-level hierarchy (abstract class<br/>
AdaptiveStepsizeIntegrator) a few setters to allow users to change these<br/>
tolerances after the integrator has been built. It seems the integrators by<br/>
themselves were not documented as immutable (I first thought they were), so this<br/>
change is probably harmless.</p>

<p>There was a discussion on the developers mailing list about this feature here: <a href="http://markmail.org/thread/djrjpm5pwcgg3ev4" class="external-link" rel="nofollow">http://markmail.org/thread/djrjpm5pwcgg3ev4</a></p></description><environment/><key id="12505100">MATH-563</key><summary>resetting relative and absolute tolerances in ODE adaptive step size integrators</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="luc">Luc Maisonobe</reporter><labels>
                    </labels><created>Mon, 25 Apr 2011 10:11:12 +0100</created><updated>Sat, 24 Mar 2012 16:16:58 +0000</updated><resolved>Mon, 25 Apr 2011 10:46:31 +0100</resolved><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13024765" author="luc" created="Mon, 25 Apr 2011 10:46:31 +0100"><p>fixed in subversion repository as of r1096443</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150668</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160462</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-562] "UnivariateRealPeriodicInterpolator"</title><link>https://issues.apache.org/jira/browse/MATH-562</link><project id="12310485" key="MATH">Commons Math</project><description><p>It would be an interpolator implementation that assumes that the data to be interpolated is periodic. Thus values that are outside of the range can be passed to the interpolation function:<br/>
They will be wrapped into the initial range before being passed to the class that actually computes the interpolation.<br/>
The constructor prototype would be:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
/**
 * Builds an interpolator.
 *
 * @param interpolator Interpolator.
 * @param period Period.
 * @param offset Offset.
 * @param extend <span class="code-object">Number</span> of points to be appended at the beginning and
 * end of the sample arrays in order to avoid interpolation failure at
 * the (periodic) boundaries of the orginal interval. The value is the
 * number of sample points which the original {@code interpolator} needs
 * on each side of the interpolation point.
 */
<span class="code-keyword">public</span> UnivariateRealPeriodicInterpolator(UnivariateRealInterpolator interpolator,
                                          <span class="code-object">double</span> period,
                                          <span class="code-object">double</span> offset,
                                          <span class="code-object">int</span> extend) {
    <span class="code-comment">// ...
</span>}
</pre>
</div></div>
<p>Would it be useful to have that in CM?</p></description><environment/><key id="12504986">MATH-562</key><summary>"UnivariateRealPeriodicInterpolator"</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="erans">Gilles</assignee><reporter username="erans">Gilles</reporter><labels>
                    </labels><created>Fri, 22 Apr 2011 16:15:59 +0100</created><updated>Sat, 24 Mar 2012 16:16:59 +0000</updated><resolved>Thu, 28 Apr 2011 12:57:59 +0100</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13023264" author="luc" created="Fri, 22 Apr 2011 17:20:47 +0100"><p>Why not ?</p></comment><comment id="13023337" author="psteitz" created="Fri, 22 Apr 2011 20:04:18 +0100"><p>Indeed, why not?  I am not following exactly what is being proposed, though.  Is the idea that the data are assumed to be coming from a periodic function with known period?  Is there any constraint on the number of periods that the sample data is supposed to represent, or are we assuming that it represents just one period with some points extending before and after?  I guess the application is to extend the domain of the interpolating function outside of the domain determined by the data?  Don't you maybe need two parameters for "extend" (number before beginning of function period and number after) and maybe even two "offset" parameters (distance between beginning of the period and the first "interior" domain value and between last "interior" domain value and end of the period)?  Could well be I am misunderstanding the setup here.  Another thing that I don't quite get is it would seem some kind of fitness measure would be needed to ensure that the designation of the "interior" points is consistent with periodicity (i.e., behavior in a neighborhood of period start and end points is similar).</p></comment><comment id="13023431" author="erans" created="Fri, 22 Apr 2011 23:20:09 +0100"><blockquote>
<p>Is the idea that the data are assumed to be coming from a periodic function with known period?</p></blockquote>
<p>Yes.</p>

<blockquote>
<p>Is there any constraint on the number of periods that the sample data is supposed to represent, or are we assuming that it represents just one period with some points extending before and after?</p></blockquote>
<p>No, it is just assumed that the underlying time series is periodic with the given period.<br/>
However, there might be a problem if more than one period is covered by the sample data: If there are 2 samples exactly one period apart, they will be mapped to the same point and the interpolator will throw an exception because "xval" is not strictly increasing...</p>

<blockquote>
<p><span class="error">&#91;...&#93;</span> the application is to extend the domain of the interpolating function outside of the domain determined by the data?</p></blockquote>
<p>Yes.</p>

<blockquote>
<p>Don't you maybe need two parameters for "extend" (number before beginning of function period and number after) <span class="error">&#91;...&#93;</span></p></blockquote>
<p>Why? The "extend" points are there only to avoid that the interpolating algorithm fails because it would lack the required number of points when trying to interpolate at the ends of the interval: For example, the linear interpolation needs one point before and one point after the interpolated point but the latter won't exist when x &gt; xval<span class="error">&#91;xval.length - 1&#93;</span>. Hence, we replace "xval" with an <em>extended</em> "xvalP" such that</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
  xvalP[xvalP.length - 1] = xval[0] + period
</pre>
</div></div>

<blockquote>
<p>Don't you <span class="error">&#91;...&#93;</span> maybe even <span class="error">&#91;need&#93;</span> two "offset" parameters (distance between beginning of the period and the first "interior" domain value and between last "interior" domain value and end of the period)?</p></blockquote>
<p>I'm not sure that we mean the same thing with that "offset". I only meant it as the "zero-point" of the periodic signal.</p>

<p>I didn't get the "fitness" idea. Maybe that you target something more powerful than what I had in mind.</p></comment><comment id="13024947" author="psteitz" created="Mon, 25 Apr 2011 21:26:48 +0100"><p>Sorry for the slow response and lack of understanding.  I still don't quite get the "offset."  What exactly does this mean? Isn't every point a potential period start point?  Maybe this is a root?  </p>

<p>What I meant by "fitness" was some kind of reasonability test to ensure that the data conform to the assumption of periodicity.  Not necessary, but I can imagine scenarios where piecing together a periodic interpolator from a set of sample points would result in strange and/or not well-defined behavior.  I could be misunderstanding the setup, but isn't there a risk that values for points near "cut points" are not well-defined?  What I mean by a "cut point" is a point near the end of the sample, say between the period sample point and the "extra" point added after the end.  There will be an interpolated value for that point based on the "base" interpolator.  The periodic interpolator will return a value for that point based on translation / extrapolation (assuming I am understanding the setup).  If the underlying function really is periodic, we have the right period and the base interpolator works perfectly, then these values will be the same.  If not, they could be different.  How badly different they can be is what I was referring to as "fitness."</p>

<p>In any case, I think this could be a useful addition and as long as we document exactly what it does, I am +1 to add.</p></comment><comment id="13025766" author="erans" created="Wed, 27 Apr 2011 13:20:55 +0100"><p>I've removed the "offset" parameter.</p>

<p>Shall I commit the code? You can then maybe figure out a unit test that shows the possible problems.</p></comment><comment id="13026267" author="erans" created="Thu, 28 Apr 2011 12:57:59 +0100"><p>Initial code committed in revision 1097426.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Fri, 22 Apr 2011 16:20:47 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150667</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160463</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-561] Analogous to "normalizeAngle" in "MathUtils"</title><link>https://issues.apache.org/jira/browse/MATH-561</link><project id="12310485" key="MATH">Commons Math</project><description><p>I'd like to create a "reduce" method in "MathUtils", similar to "normalizeAngle" but more general:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
/**
 * Reduce to the primary interval {@code [offset offset+period)}.
 *
 * @param a Value to reduce.
 * @param period Period.
 * @param offset Offset.
 */
<span class="code-keyword">public</span> <span class="code-keyword">static</span> <span class="code-object">double</span> reduce(<span class="code-object">double</span> a,
                            <span class="code-object">double</span> period,
                            <span class="code-object">double</span> offset) {
    <span class="code-keyword">return</span> a - period * FastMath.floor((a - offset) / period);
}
</pre>
</div></div>
<p>Thus the "period" parameter the is not fixed to 2 as is the case in "normalizeAngle".</p></description><environment/><key id="12504965">MATH-561</key><summary>Analogous to "normalizeAngle" in "MathUtils"</summary><type id="5" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Wish</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="erans">Gilles</assignee><reporter username="erans">Gilles</reporter><labels>
                    </labels><created>Fri, 22 Apr 2011 10:51:24 +0100</created><updated>Sat, 24 Mar 2012 16:16:50 +0000</updated><resolved>Wed, 27 Apr 2011 12:57:31 +0100</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13025753" author="erans" created="Wed, 27 Apr 2011 12:57:31 +0100"><p>Revision 1097088.<br/>
[The image interval is actually [0, period); not <span class="error">&#91;offset, period+offset), as first proposed.&#93;</span></p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150666</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160464</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-560] Incorrect @Deprecated tags added to no-args Solver constructors in org.apache.commons.math.analysis.solvers</title><link>https://issues.apache.org/jira/browse/MATH-560</link><project id="12310485" key="MATH">Commons Math</project><description><p>During refactoring of the solvers, an @Deprecated javadoc comment was added to the no argument constructor for a number of Solvers, saying they would be removed for 3.0. </p>

<p>This is incorrect - there is no plan to remove those constructors. See the discussion on the user list on 2011-04-20. The @deprecated tag should be removed.</p>

<p>This causes deprecation warnings in previously compliant code, and should not.</p>

<p>This affects at least the following Solvers: MullerSolver, SecantSolver, NewtonSolver. </p></description><environment/><key id="12504806">MATH-560</key><summary>Incorrect @Deprecated tags added to no-args Solver constructors in org.apache.commons.math.analysis.solvers</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="nfortescue">Nick Fortescue</reporter><labels>
                    </labels><created>Wed, 20 Apr 2011 17:48:41 +0100</created><updated>Tue, 24 Jul 2012 00:18:14 +0100</updated><resolved>Sat, 13 Aug 2011 18:34:12 +0100</resolved><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><timeoriginalestimate seconds="3600">1h</timeoriginalestimate><timeestimate seconds="3600">1h</timeestimate><comments><comment id="13084668" author="erans" created="Sat, 13 Aug 2011 18:34:12 +0100"><p>Removed deprecations in revision 1157395.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sat, 13 Aug 2011 17:34:12 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>65080</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160465</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-559] Remove "assert" from "MathUtils.equals"</title><link>https://issues.apache.org/jira/browse/MATH-559</link><project id="12310485" key="MATH">Commons Math</project><description><p>The "assert" in methods "equals(double,double,int)" and "equals(float,float,int)" is not necessary.</p></description><environment/><key id="12504038">MATH-559</key><summary>Remove "assert" from "MathUtils.equals"</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="erans">Gilles</assignee><reporter username="erans">Gilles</reporter><labels><label>cleanup</label></labels><created>Tue, 12 Apr 2011 12:37:16 +0100</created><updated>Sat, 24 Mar 2012 16:16:45 +0000</updated><resolved>Tue, 12 Apr 2011 12:46:31 +0100</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13018797" author="erans" created="Tue, 12 Apr 2011 12:46:31 +0100"><p>Revision 1091378.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150665</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160466</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-558] resetting relative and absolute tolerances in ODE adaptive step size integrators</title><link>https://issues.apache.org/jira/browse/MATH-558</link><project id="12310485" key="MATH">Commons Math</project><description><p>The current implementation of ODE integrators with adaptive step size has a major limitation. For now, the tolerances that are used to adjust the step size are specified only at construction time and cannot be changed afterwards. However, these tolerances are highly problem-dependent and in fact the dimension of the problem (which is related to the dimension of the vectorial version of the tolerances) is specified only at integration time, not at construction time.</p>

<p>It would be nice to add at the top-level hierarchy (abstract class AdaptiveStepsizeIntegrator) a few setters to allow users to change these tolerances after the integrator has been built. It seems the integrators by themselves were not documented as immutable, so this change is probably harmless.</p></description><environment/><key id="12504027">MATH-558</key><summary>resetting relative and absolute tolerances in ODE adaptive step size integrators</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="3">Duplicate</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="luc">Luc Maisonobe</reporter><labels>
                    </labels><created>Tue, 12 Apr 2011 10:00:48 +0100</created><updated>Sat, 24 Mar 2012 16:16:33 +0000</updated><resolved>Mon, 25 Apr 2011 14:18:54 +0100</resolved><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13024786" author="luc" created="Mon, 25 Apr 2011 14:18:54 +0100"><p>duplicated by issue <a href="https://issues.apache.org/jira/browse/MATH-663" title="Remove &quot;getData&quot; in &quot;RealVector&quot; (package &quot;o.a.c.m.linear&quot;)" class="issue-link" data-issue-key="MATH-663"><del>MATH-663</del></a><br/>
sorry for having created it twice <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/sad.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150664</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160467</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-557] add a compareTo method to MathUtils that use a number of ulps for equality tolerance</title><link>https://issues.apache.org/jira/browse/MATH-557</link><project id="12310485" key="MATH">Commons Math</project><description><p>There are equals methods with either double epsilon and integer maxUlps tolerance.<br/>
There is only once compareTo method with a double epsilon tolerance.</p>

<p>For symmetry, it would be nice to also have a compareTo method with an integer maxUlps tolerance.</p></description><environment/><key id="12503871">MATH-557</key><summary>add a compareTo method to MathUtils that use a number of ulps for equality tolerance</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="luc">Luc Maisonobe</reporter><labels>
                    </labels><created>Sun, 10 Apr 2011 15:48:27 +0100</created><updated>Sat, 24 Mar 2012 16:16:53 +0000</updated><resolved>Sun, 10 Apr 2011 16:57:20 +0100</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13018102" author="luc" created="Sun, 10 Apr 2011 16:57:20 +0100"><p>Fixed in subversion repository as of r1090820</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150663</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160468</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-556] CMAESOptimizer constructor should copy rather than reference input arrays</title><link>https://issues.apache.org/jira/browse/MATH-556</link><project id="12310485" key="MATH">Commons Math</project><description><p>The CMAESOptimizer constructors take array arguments but do not copy the input arrays.  The current implementation does not write to the input arrays, but client code could, making the API contract ambiguous.  This practice should in general be avoided unless the arrays are meant to be in/out parameters or they are expected to be very large.  Neither of these conditions appear to hold in CMAESOptimizer, so the constructors should be modified to copy the input arrays.</p></description><environment/><key id="12503332">MATH-556</key><summary>CMAESOptimizer constructor should copy rather than reference input arrays</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="psteitz">Phil Steitz</reporter><labels>
                    </labels><created>Mon, 4 Apr 2011 21:03:51 +0100</created><updated>Tue, 24 Jul 2012 00:24:42 +0100</updated><resolved>Tue, 5 Apr 2011 05:55:13 +0100</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13015758" author="psteitz" created="Tue, 5 Apr 2011 05:55:13 +0100"><p>Fixed in r1088895.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150662</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160469</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-555] MathUtils round method should propagate rather than wrap Runitme exceptions</title><link>https://issues.apache.org/jira/browse/MATH-555</link><project id="12310485" key="MATH">Commons Math</project><description><p>MathUtils.round(double, int, int) can generate IllegalArgumentException or ArithmeticException.  Instead of wrapping these exceptions in MathRuntimeException, the conditions under which these exceptions can be thrown should be documented and the exceptions should be propagated directly to the caller.</p></description><environment/><key id="12503246">MATH-555</key><summary>MathUtils round method should propagate rather than wrap Runitme exceptions</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="psteitz">Phil Steitz</reporter><labels>
                    </labels><created>Mon, 4 Apr 2011 05:13:04 +0100</created><updated>Sat, 24 Mar 2012 16:16:43 +0000</updated><resolved>Mon, 4 Apr 2011 05:53:13 +0100</resolved><version>2.0</version><version>2.1</version><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13015280" author="psteitz" created="Mon, 4 Apr 2011 05:53:13 +0100"><p>Fixed in trunk in r1088473</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150661</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160470</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-554] Vector3D.crossProduct is sensitive to numerical cancellation</title><link>https://issues.apache.org/jira/browse/MATH-554</link><project id="12310485" key="MATH">Commons Math</project><description><p>Cross product implementation uses the naive formulas (y1 z2 - y2 z1, ...). These formulas fail when vectors are almost colinear, like in the following example:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
Vector3D v1 = <span class="code-keyword">new</span> Vector3D(9070467121.0, 4535233560.0, 1);
Vector3D v2 = <span class="code-keyword">new</span> Vector3D(9070467123.0, 4535233561.0, 1);
<span class="code-object">System</span>.out.println(Vector3D.crossProduct(v1, v2));
</pre>
</div></div>

<p>The previous code displays </p>
{ -1, 2, 0 }
<p> instead of the correct answer </p>
{ -1, 2, 1 }</description><environment><p>Linux, Sun JDK 1.5.0.22</p></environment><key id="12503224">MATH-554</key><summary>Vector3D.crossProduct is sensitive to numerical cancellation</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="luc">Luc Maisonobe</reporter><labels>
                    </labels><created>Sun, 3 Apr 2011 15:14:38 +0100</created><updated>Sat, 24 Mar 2012 16:16:42 +0000</updated><resolved>Sun, 3 Apr 2011 15:33:56 +0100</resolved><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13015153" author="luc" created="Sun, 3 Apr 2011 15:33:56 +0100"><p>fixed in subversion repository as of r1088316</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>34151</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160471</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-553] Bug in class# org.apache.commons.math.dfp.Dfp / org.apache.commons.math.linear.RealVectorwith reproducible JUnit test</title><link>https://issues.apache.org/jira/browse/MATH-553</link><project id="12310485" key="MATH">Commons Math</project><description><p>Hi all:</p>


<p>I am writing an automated bug finding tool, and using<br/>
Apache Commons Math as an experimental subject<br/>
for evaluation.</p>

<p>The tool creates executable JUnit tests as well as<br/>
explanatory code comments. I attached one bug-revealing<br/>
test as follows. Could you please kindly check it, to<br/>
see if it is a real bug or not?</p>

<p>Also, it would be tremendous helpful if you could give<br/>
some feedback and suggestion on the quality of generated code comments?<br/>
From the perspective of developers who are familiar with the code,<br/>
is the automatically-inferred comment useful in understanding<br/>
the generated test? is the comment helpful in bug fixing from the<br/>
perspective of developers?<br/>
Particularly when the automatically-generated tests<br/>
are often long.</p>

<p>Your suggestion will help us improve the tool.</p>

<p>Please see attachment for the failed test.</p>

<p>The comment appears in the form of:<br/>
//Tests pass if .... (it gives some small change to the test which can make the failed test pass)</p>

<p>For example:</p>

<p>//Test passes if var10 is: (double)&lt;0<br/>
java.lang.Double var10 = new java.lang.Double(0.0d);</p>

<p>means if you change var10 to a double value which is &lt; 0 (e.g., -1d), the failed test will pass</p></description><environment><p>jdk 1.6</p></environment><key id="12503221">MATH-553</key><summary>Bug in class# org.apache.commons.math.dfp.Dfp / org.apache.commons.math.linear.RealVectorwith reproducible JUnit test</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="8">Not a Problem</resolution><assignee username="-1">Unassigned</assignee><reporter username="saizhang">Sai Zhang</reporter><labels>
                    </labels><created>Sun, 3 Apr 2011 09:10:33 +0100</created><updated>Mon, 4 Mar 2013 18:58:52 +0000</updated><resolved>Sun, 3 Apr 2011 20:16:57 +0100</resolved><version>2.2</version><due/><votes>0</votes><watches>0</watches><comments><comment id="13015196" author="luc" created="Sun, 3 Apr 2011 20:16:57 +0100"><p>Apart from Sebb comments on <a href="https://issues.apache.org/jira/browse/COLLECTIONS-374" title="Bug in class#BeanMap and TransformedBuffer with reproducible JUnit test" class="issue-link" data-issue-key="COLLECTIONS-374"><del>COLLECTIONS-374</del></a>, here are a few additional comments for math.</p>

<p>The test is targeted at 2.2 which will probably be the last version in the 2.X series. In this series, we used a mix of Junit 3 and Junit 4 tests. The current code in the trunk for 3.0 has completely switched to Junit 4. It would be nice to have Junit 4 tests rather than Junit 3 tests.</p>

<p>In math, we use a lot of double primitive variables. What about replacing the java.lang.double objects to primitive doubles (and similarly for other primitives types), this would help read the tests.</p>

<p>The failing test for var87.equals(var87) is a false positive. This is a very specific feature of real numbers, some special numbers called NaN (which stands for Not A Number) are equals to nothing, including themselves. So var87.equals(var87) must return false for a NaN. In fact, all boolean predicates on NaN must fail, so if you have two NaNs a and b, the predicates a == b, a <span class="error">Unable to render embedded object: File (= b, a &lt; b, a &lt;= b, a &gt; b, a &gt;= b are ALL false) not found.</span></p>

<p>This is very specific and I don't expect an automatic tool to be aware of this. Also having a way to configure the tool for such a rare case would really be overkill.</p>

<p>So this bug is in fact not a bug.</p></comment><comment id="13015199" author="saizhang" created="Sun, 3 Apr 2011 20:48:05 +0100"><p>Thanks Luc.</p>

<p>Seems there is a contradiction between mathematical equality and Java object<br/>
equality. OK, I understand<br/>
that is very special case.</p>

<p>Could you please check the other test "test1()", to see if it is a real bug?</p>

<p>-Sai</p>





<p>&#8211; </p>

<p>          Thanks</p>

<p>                    Sai</p></comment><comment id="13015206" author="luc" created="Sun, 3 Apr 2011 21:27:00 +0100"><p>Test1 one is another strange feature of IEEE754 arithmetic. There are two different encodings for 0: +0 and -0 (i.e. in IEEE754 standard, the sign of 0 is meaningful). Most of the time, -0 and +0 cannot be distinguished, and they evaluate as equals (this is the reason why var19.equals(var44) returns true). However, they do not correspond to the same encoding. -0.0 is encoded as 0x8000000000000000 whereas +0.0 is encoded as 0x0000000000000000 (the most significant bit is the sign bit). This implies that these values are equal but do not have the same hash code.</p>

<p>In your case, var19 is an array containing </p>
{ 1, 0, 1 }
<p>, it was obtained by raising the same numbers to the power 100, which did not affect their sign. On the other hand, var44 is an array containing </p>
{ 1, -0, 1 }
<p>, it was obtained by dividing </p>
{ -1, 0, -1 }
<p> by -1, and this changed all signs, including the sign of the central 0. Hence both arrays contain equals elements, but their hash code are different due to the central element.</p>

<p>This behavior is also produced by the following code:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-object">double</span> a = <span class="code-object">Math</span>.pow(0.0, 100.0);
<span class="code-object">double</span> b = 0.0 / -1.0;
<span class="code-object">System</span>.out.println(a == b);
<span class="code-object">System</span>.out.println(<span class="code-quote">"0X"</span> + <span class="code-object">Long</span>.toHexString(<span class="code-object">Double</span>.doubleToLongBits(a)));
<span class="code-object">System</span>.out.println(<span class="code-quote">"0X"</span> + <span class="code-object">Long</span>.toHexString(<span class="code-object">Double</span>.doubleToLongBits(b)));
</pre>
</div></div>

<p>which displays:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">true</span>
0X0
0X8000000000000000
</pre>
</div></div>

<p>So test1 is not a bug either.</p>

<p>These two cases are not the only ones to be strange in double arithmetic. There are also encodings for infinity (plus and minus infinity) and there are subnormal numbers (which are almost like standard numbers, only with decreasing accuracy as the numbers vanish towards 0).</p></comment><comment id="13015209" author="saizhang" created="Sun, 3 Apr 2011 21:44:05 +0100"><p>Thanks Luc for your detailed explanation. It makes me much clearer on these<br/>
cases.</p>

<p>We will carefully consider your suggestion into the design of our tool.</p>

<p>As I mentioned in the post, another feature of this tool is trying to infer<br/>
descriptive code<br/>
comments to explain failure,  could you please kindly give us some comments<br/>
on<br/>
such generated comments? like:</p>

<p>//Test passes if var10 is: (double)&lt;0<br/>
java.lang.Double var10 = new java.lang.Double(0.0d);</p>

<p>From the viewpoint of developers, do you think such comment is useful for<br/>
debugging?<br/>
Particularly, if the automatically-generated test itself is long and does<br/>
not have good readability. Can such<br/>
comment be used as a good start point of diagnose?  We would like to hear<br/>
developers'<br/>
voice and feedback on such code enhancement, to decide whether to improve<br/>
along<br/>
that line. (of course,  you are already very familiar with the code base,<br/>
and may identify<br/>
the failure cause by simply look at the execution trace and assertions.But<br/>
intuitively,<br/>
we think such comments might be helpful for junior developers)</p>

<p>Thanks a lot. Really appreciate your reply!</p>


</comment><comment id="13015214" author="luc" created="Sun, 3 Apr 2011 21:53:52 +0100"><p>Yes, I think these comments are helpful.<br/>
They give an hint about what to look at. In both cases, I add to run the test in a debugger to see exactly what happened but the comment showed me exactly the variable to look at. I don't know how you generate these comments, would it be possible to have both the information about the values that make the test pass and the value that did make the test fail ? This would allow the reader to simply compare these values without having to run a debugger by himself. If this is not possible, the current comments already provide valuable information.</p></comment><comment id="13015221" author="saizhang" created="Sun, 3 Apr 2011 22:06:05 +0100"><p>Thanks Luc for your comments.</p>

<p>I used a statistical algorithm to summarize the properties of a set of<br/>
"failure-correcting" objects. A technical report<br/>
describing the technique is on its way.</p>

<p>Yes, it is possible to have both an example value which make the test pass<br/>
(we have already implemented it<br/>
in our tool). For the reported test, the generated comment is: (after<br/>
appending an example value):</p>

<p>//Test passes if var10 is: (double)&lt;0, for example, -1.0d<br/>
 java.lang.Double var10 = new java.lang.Double(0.0d);</p>

<p>The value making the test fail is already shown in the test (var10 = 0.0d in<br/>
the above test).</p>








<p>&#8211; </p>

<p>          Thanks</p>

<p>                    Sai</p></comment><comment id="13086717" author="saizhang" created="Thu, 18 Aug 2011 02:05:26 +0100"><p>Hi Luc:</p>

<p>(sorry for the late reply. I thought my previous email was sent out, but<br/>
found it<br/>
still lies in my draft box)</p>

<p>I agree that  it does not make sense to compare 2 NaNs. However,  I think<br/>
two Java objects can still be compared, and the code maybe improved to<br/>
avoid violation of  the Java specification.</p>

<p>For the problem revealed in the test case, I suggest to fix this bug by<br/>
adding a comparison to<br/>
<b>this</b> object itself. Doing so will avoid   "var.equals(var)" returns<br/>
false. and prevent Java containers becoming unstable, when they<br/>
are containing a Dfp object.</p>

<p>A suggested fix is:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-object">Class</span>: org.apache.commons.math.dfp.Dfp

@Override
    <span class="code-keyword">public</span> <span class="code-object">boolean</span> equals(<span class="code-keyword">final</span> <span class="code-object">Object</span> other) {
          <span class="code-keyword">if</span>(<span class="code-keyword">this</span> == other) {
               <span class="code-keyword">return</span> <span class="code-keyword">true</span>;
          }
          ....<span class="code-comment">// all existing code goes here
</span>   }
</pre>
</div></div>


<p>For the other case, when comparing RealVector </p>
{ 1, 0, 1 }
<p>  and </p>
{1, -0, 1}
<p>,<br/>
 it seems that<br/>
the equals method uses "numeric comparison" to conclude that  0 == -0.<br/>
However,<br/>
when computing their hashcodes, the code implicitly treats "0" as an object,<br/>
and use<br/>
Arrays.hashcode to get the results (0, -0 are 2 different objects).</p>

<p>Therefore, I suggest to use a <b>consistent</b> way for comparison and computing<br/>
hashcodes. It is<br/>
completely feasible to fix the above problem. Here are 2 possible fixes:</p>

<p>1.  change the ArrayRealVector#equals, lines 1207 - 1211</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">for</span> (<span class="code-object">int</span> i = 0; i &lt; data.length; ++i) {
        <span class="code-keyword">if</span> (data[i] != rhs.getEntry(i)) {      <span class="code-comment">//<span class="code-keyword">do</span> not use numeric
</span>comparison, convert both sides
          <span class="code-keyword">return</span> <span class="code-keyword">false</span>;                               <span class="code-comment">//into <span class="code-object">Double</span> type,
</span>and use <span class="code-object">Double</span>.equals to compare
        }
      }
</pre>
</div></div>

<p>2.  change the ways to compute hashcode in: ArrayRealVector#hashCode</p>

<p>Do not use </p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">Arrays.hashCode(value);</pre>
</div></div>
<p> to get hashcode, since it<br/>
will implicitly<br/>
boxes each primitive values. Instead, use a method like below to compute<br/>
hashcode numerically:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> <span class="code-keyword">static</span> <span class="code-object">int</span> hash(<span class="code-object">double</span>[] value) {
        <span class="code-object">int</span> retHashCode = 0;
        <span class="code-keyword">for</span>(<span class="code-object">double</span> v : value) {
             retHashCode +=  retHashCode*3 + 17*v;
        }
       <span class="code-keyword">return</span> retHashCode;
    }
</pre>
</div></div>

<p>I think either way above will fix this problem (though it may be not that<br/>
important), and keep<br/>
the code behavior consistent!</p>

<p>Thanks</p>

<p>-Sai</p>





<p>&#8211; </p>

<p>Sai Zhang</p>

<p><a href="http://www.cs.washington.edu/homes/szhang/" class="external-link" rel="nofollow">http://www.cs.washington.edu/homes/szhang/</a></p></comment></comments><attachments><attachment id="12475304" name="ApacheMath_Documented_Test.java" size="11890" author="saizhang" created="Sun, 3 Apr 2011 09:10:45 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 3 Apr 2011 19:16:57 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>64753</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160472</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-552] MultidimensionalCounter.getCounts(int) returns wrong array of indices</title><link>https://issues.apache.org/jira/browse/MATH-552</link><project id="12310485" key="MATH">Commons Math</project><description><p>MultidimensionalCounter counter = new MultidimensionalCounter(2, 4);<br/>
for (Integer i : counter) </p>
{
    int[] x = counter.getCounts(i);
    System.out.println(i + " " + Arrays.toString(x));
}

<p>Output is:<br/>
0 <span class="error">&#91;0, 0&#93;</span><br/>
1 <span class="error">&#91;0, 1&#93;</span><br/>
2 <span class="error">&#91;0, 2&#93;</span><br/>
3 <span class="error">&#91;0, 2&#93;</span>   &lt;=== should be <span class="error">&#91;0, 3&#93;</span><br/>
4 <span class="error">&#91;1, 0&#93;</span><br/>
5 <span class="error">&#91;1, 1&#93;</span><br/>
6 <span class="error">&#91;1, 2&#93;</span><br/>
7 <span class="error">&#91;1, 2&#93;</span>   &lt;=== should be <span class="error">&#91;1, 3&#93;</span></p></description><environment><p>Java 1.6</p></environment><key id="12503079">MATH-552</key><summary>MultidimensionalCounter.getCounts(int) returns wrong array of indices</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="jbence@pobox.com">James Bence</reporter><labels>
                    </labels><created>Thu, 31 Mar 2011 23:36:56 +0100</created><updated>Sat, 24 Mar 2012 16:16:51 +0000</updated><resolved>Fri, 1 Apr 2011 11:12:29 +0100</resolved><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13014251" author="jbence@pobox.com" created="Thu, 31 Mar 2011 23:39:38 +0100"><p>To resolve this, replace lines 198 through 204:</p>

<p>int idx = 1;<br/>
while (count &lt; index) </p>
{
   count += idx;
   idx += 1;
}
<p>--idx;<br/>
indices<span class="error">&#91;last&#93;</span> = idx;</p>

<p>with the following:</p>


<p>     indices<span class="error">&#91;last&#93;</span> = index - count;</p>
</comment><comment id="13014253" author="jbence@pobox.com" created="Thu, 31 Mar 2011 23:42:46 +0100"><p>I am working on a patch and some tests.</p></comment><comment id="13014273" author="jbence@pobox.com" created="Fri, 1 Apr 2011 00:16:19 +0100"><p>This patch file patches the corresponding test to reveal the problem, and then patches the MultidimensionalCounter class to fix the problem.</p></comment><comment id="13014503" author="erans" created="Fri, 1 Apr 2011 11:12:29 +0100"><p>Oops, I wrote this code <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/sad.gif" height="16" width="16" align="absmiddle" alt="" border="0"/>. Many thanks for finding out and fixing that bug.<br/>
Patch applied in revision 1087637.</p></comment></comments><attachments><attachment id="12475168" name="MultidimensionalCounter.patch" size="1998" author="jbence@pobox.com" created="Fri, 1 Apr 2011 00:16:19 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Fri, 1 Apr 2011 10:12:29 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>34213</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160473</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-551] Remove "SerializablePair"</title><link>https://issues.apache.org/jira/browse/MATH-551</link><project id="12310485" key="MATH">Commons Math</project><description><p>Class "SerializablePair" is not serializable. And rendering it so is outside the scope of CM. It was created as an implementation detail for enabling the serialization of "MathRuntimeException" objects. This class will thus be modified so that it will not need "SerializablePair" objects.</p></description><environment/><key id="12502524">MATH-551</key><summary>Remove "SerializablePair"</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="erans">Gilles</assignee><reporter username="erans">Gilles</reporter><labels><label>cleanup</label></labels><created>Sun, 27 Mar 2011 22:40:51 +0100</created><updated>Sat, 24 Mar 2012 16:16:52 +0000</updated><resolved>Sun, 27 Mar 2011 22:51:45 +0100</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13011855" author="erans" created="Sun, 27 Mar 2011 22:51:45 +0100"><p>Revision 1086045.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150660</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160474</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-550] Add factory / convert methods that accept and convert BigDecimal, BigInteger to /from Dfp.</title><link>https://issues.apache.org/jira/browse/MATH-550</link><project id="12310485" key="MATH">Commons Math</project><description><p>As a suggestion perhaps the Dfp.toBigDecimal( MathContext) method would use the context when building up the BD rather than taking some.</p></description><environment/><key id="12501649">MATH-550</key><summary>Add factory / convert methods that accept and convert BigDecimal, BigInteger to /from Dfp.</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status><statusCategory id="3" key="done" colorName="green"/><resolution id="4">Incomplete</resolution><assignee username="-1">Unassigned</assignee><reporter username="mp1">Miroslav Pokorny</reporter><labels>
                    </labels><created>Thu, 17 Mar 2011 04:39:05 +0000</created><updated>Sun, 22 Jul 2012 02:22:51 +0100</updated><resolved>Sun, 22 Jul 2012 02:22:51 +0100</resolved><due/><votes>0</votes><watches>1</watches><comments><comment id="13052178" author="luc" created="Mon, 20 Jun 2011 20:25:54 +0100"><p>Could you explain a little more what you would expect here ?<br/>
Also if you could provide a patch, it would be great.</p></comment><comment id="13082155" author="psteitz" created="Wed, 10 Aug 2011 07:09:00 +0100"><p>Pushing to 3.1 (awaiting clarification and patch)</p></comment><comment id="13420043" author="erans" created="Sun, 22 Jul 2012 02:22:51 +0100"><p>Issue is unclear, and there hasn't been a reaction from the reporter for more than one year; thus closing.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Mon, 20 Jun 2011 19:25:54 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2223</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160475</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-549] Suggestion: Make PearsonsCorrelation.correlation(double[], double[]) static</title><link>https://issues.apache.org/jira/browse/MATH-549</link><project id="12310485" key="MATH">Commons Math</project><description><p>Making PearsonsCorrelation.correlation(double[], double[]) static would allow for calculating a correlation without instantiating a PearsonsCorrelation object.</p></description><environment/><key id="12501296">MATH-549</key><summary>Suggestion: Make PearsonsCorrelation.correlation(double[], double[]) static</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="2">Won't Fix</resolution><assignee username="-1">Unassigned</assignee><reporter username="t0mas">Tomas Salfischberger</reporter><labels>
                    </labels><created>Sun, 13 Mar 2011 14:07:21 +0000</created><updated>Sat, 24 Mar 2012 16:22:22 +0000</updated><resolved>Fri, 1 Apr 2011 10:33:00 +0100</resolved><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13011859" author="erans" created="Sun, 27 Mar 2011 23:06:45 +0100"><p>Revision 1086057.</p></comment><comment id="13011876" author="psteitz" created="Mon, 28 Mar 2011 01:27:41 +0100"><p>As stated, I would say WONT_FIX for this; but I am open to providing a utils class with static convenience methods for this and other similar methods in the correlation package.</p></comment><comment id="13014489" author="erans" created="Fri, 1 Apr 2011 10:33:00 +0100"><p>Reverted to original code (revision 1087630) as this was done on purpose (to allow overriding).</p></comment><comment id="13237589" author="luc" created="Sat, 24 Mar 2012 16:22:22 +0000"><p>changing status to closed as 3.0 has been released</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 27 Mar 2011 22:06:45 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150659</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160476</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-548] KMeansPlusPlusClusterer should run multiple trials</title><link>https://issues.apache.org/jira/browse/MATH-548</link><project id="12310485" key="MATH">Commons Math</project><description><p>The interface and documentation for KMeansPlusPlusClusterer imply that a single call to cluster() is sufficient to get the optimal set of clusters.  But this isn't true &#8211; practically every client should be calling cluster() multiple times, selecting the best resulting set of clusters.  It seems to me that rather than forcing every client to implement this functionality, it should be placed directly in the KMeansPlusPlusClusterer class.</p>

<p>I propose adding a new method to KMeansPlusPlusClusterer:<br/>
  List&lt;Cluster&lt;T&gt;&gt; cluster(Collection&lt;T&gt; points, int k, int numTrials, int maxIterationsPerTrial)<br/>
which calls the existing cluster() method numTrials times, returning the best result.</p></description><environment/><key id="12501229">MATH-548</key><summary>KMeansPlusPlusClusterer should run multiple trials</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="npaymer">Nate Paymer</reporter><labels>
                    </labels><created>Sat, 12 Mar 2011 05:12:15 +0000</created><updated>Sat, 24 Mar 2012 16:16:36 +0000</updated><resolved>Mon, 20 Jun 2011 20:49:30 +0100</resolved><due/><votes>0</votes><watches>0</watches><comments><comment id="13044562" author="luc" created="Sun, 5 Jun 2011 17:05:57 +0100"><p>If I understand correctly, you suggest putting something similar to the multi-start feature from the optimization package.</p>

<p>What I don't get is how we can define "best result".</p></comment><comment id="13044654" author="bigg_nate" created="Mon, 6 Jun 2011 01:02:34 +0100"><p>The best result would be the one that minimizes the sum of the squared distance from each point to the center of its cluster.  See <a href="http://en.wikipedia.org/wiki/K-means_clustering#Description" class="external-link" rel="nofollow">http://en.wikipedia.org/wiki/K-means_clustering#Description</a></p></comment><comment id="13052188" author="luc" created="Mon, 20 Jun 2011 20:49:30 +0100"><p>Fixed in subversion tree as of r1137759.</p>

<p>Thanks for the report</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 5 Jun 2011 16:05:57 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>70722</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160477</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-547] KMeansPlusPlusClusterer should not call equals()</title><link>https://issues.apache.org/jira/browse/MATH-547</link><project id="12310485" key="MATH">Commons Math</project><description><p>In determining whether the clusters have changed between iterations, the KMeansPlusPlusClusterer currently calls equals to determine whether the cluster centers have changed.  It would be better to avoid relying on equals by instead checking whether any points have moved between clusters.</p>

<p>equals can be problematic because floating point operations are not strictly commutative or associative, so getCentroid may return slightly different values even when called with the same set of inputs.  Additionally, the client may choose not to override equals at all, since it's not clear that it's required.</p></description><environment/><key id="12501228">MATH-547</key><summary>KMeansPlusPlusClusterer should not call equals()</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="npaymer">Nate Paymer</reporter><labels>
                    </labels><created>Sat, 12 Mar 2011 05:04:54 +0000</created><updated>Sat, 24 Mar 2012 16:17:02 +0000</updated><resolved>Mon, 4 Apr 2011 19:37:17 +0100</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13014637" author="tn" created="Fri, 1 Apr 2011 15:57:33 +0100"><p>Added a simple patch to prevent comparing cluster centroids as an exit condition. <br/>
Instead, the assignments of the data points to the clusters are tracked using an int array.</p></comment><comment id="13015155" author="luc" created="Sun, 3 Apr 2011 15:52:09 +0100"><p>This seems good to me.<br/>
I let Gilles review it too.</p></comment><comment id="13015351" author="erans" created="Mon, 4 Apr 2011 11:57:25 +0100"><p>I'm not familiar with the code; so please go ahead with the changes if they are satisfactory to you.</p></comment><comment id="13015538" author="luc" created="Mon, 4 Apr 2011 19:35:32 +0100"><p>I thought you wrote this code but in fact it was Ben, sorry for the confusion.</p></comment><comment id="13015540" author="luc" created="Mon, 4 Apr 2011 19:37:17 +0100"><p>Fixed in subversion repository as of r1088702.</p>

<p>Thanks to Nate for identifying the problem and thanks to Thomas for providing the patch</p></comment></comments><attachments><attachment id="12475227" name="MATH-547.patch" size="5333" author="tn" created="Fri, 1 Apr 2011 15:57:33 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Fri, 1 Apr 2011 14:57:33 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150658</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160478</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-546] Truncation issue in KMeansPlusPlusClusterer</title><link>https://issues.apache.org/jira/browse/MATH-546</link><project id="12310485" key="MATH">Commons Math</project><description><p>The for loop inside KMeansPlusPlusClusterer.chooseInitialClusters defines a variable<br/>
  int sum = 0;<br/>
This variable should have type double, rather than int.  Using an int causes the method to truncate the distances between points to (square roots of) integers.  It's especially bad when the distances between points are typically less than 1.</p>

<p>As an aside, in version 2.2, this bug manifested itself by making the clusterer return empty clusters.  I wonder if the EmptyClusterStrategy would still be necessary if this bug were fixed.</p></description><environment/><key id="12501227">MATH-546</key><summary>Truncation issue in KMeansPlusPlusClusterer</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="npaymer">Nate Paymer</reporter><labels><label>cluster</label></labels><created>Sat, 12 Mar 2011 04:52:54 +0000</created><updated>Sat, 24 Mar 2012 16:16:51 +0000</updated><resolved>Wed, 16 Mar 2011 12:58:17 +0000</resolved><version>3.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13006189" author="npaymer" created="Sun, 13 Mar 2011 13:13:27 +0000"><p>I've a patch to fix this bug.</p>

<p>This is my first contribution to this project, so apologies if I've screwed something up <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p></comment><comment id="13006890" author="erans" created="Tue, 15 Mar 2011 12:22:16 +0000"><p>Fixed in revision 1081744.<br/>
Thanks for the report and the patch.</p>

<p>Leaving open until an answer can be provided concerning the "EmptyClusterStrategy" question.</p></comment><comment id="13006894" author="luc" created="Tue, 15 Mar 2011 12:31:46 +0000"><p>The empty cluster strategy is needed regardless of this bug. It may appear with different conditions and is a feature commonly found in clustering implementations.<br/>
This issue can be marked as resolved if the patch has been applied and works.</p>

<p>Thanks to Nate for reporting and fixing the issue, thanks to Gilles for reviewing and applying the patch.</p></comment></comments><attachments><attachment id="12473504" name="MATH-546.txt" size="4654" author="npaymer" created="Sun, 13 Mar 2011 13:13:27 +0000"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 15 Mar 2011 12:22:16 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150657</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160479</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-545] Feature Request: RealVector cosine</title><link>https://issues.apache.org/jira/browse/MATH-545</link><project id="12310485" key="MATH">Commons Math</project><description><p>I'd like a method to compute the cosine similarity between vectors.<br/>
<a href="http://en.wikipedia.org/wiki/Cosine_similarity" class="external-link" rel="nofollow">http://en.wikipedia.org/wiki/Cosine_similarity</a></p></description><environment/><key id="12501111">MATH-545</key><summary>Feature Request: RealVector cosine</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="erans">Gilles</assignee><reporter username="bmccann">Benjamin McCann</reporter><labels>
                    </labels><created>Fri, 11 Mar 2011 05:51:39 +0000</created><updated>Sat, 24 Mar 2012 16:16:50 +0000</updated><resolved>Thu, 17 Mar 2011 10:40:06 +0000</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13005517" author="bmccann" created="Fri, 11 Mar 2011 06:33:20 +0000"><p>I guess it's pretty simple, but it still might be nice as a convenience method:</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre> 
  public double cosine(double[] a1, double[] a2) {
    ArrayRealVector v1 = new ArrayRealVector(a1);
    ArrayRealVector v2 = new ArrayRealVector(a2);
    return v1.dotProduct(v2) / (v1.getNorm() * v2.getNorm());
  }
</pre>
</div></div></comment><comment id="13005609" author="erans" created="Fri, 11 Mar 2011 11:43:27 +0000"><p>Shall we add "cosine" to the "RealVector" interface?</p>

<p>And the implementation would go in "AbstractRealVector":</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>public double cosine(RealVector v) {
  final double norm = getNorm();
  final double vNorm = v.getNorm();
  if (norm == 0 || vNorm == 0) {
      throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
  }
  return dotProduct(v) / (norm * vNorm);
}
</pre>
</div></div></comment><comment id="13007884" author="erans" created="Thu, 17 Mar 2011 10:40:06 +0000"><p>Method "cosine" added in "RealVector" interface (revision 1082442).</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Fri, 11 Mar 2011 11:43:27 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150656</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160480</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-544] Exceptions classes pertaining to matrices move back to package "linear"</title><link>https://issues.apache.org/jira/browse/MATH-544</link><project id="12310485" key="MATH">Commons Math</project><description><p>Under the assumption that no exception related to matrices should ever be thrown by classes other than those in package "linear", these exception classes will be relocated in that package.</p></description><environment/><key id="12500700">MATH-544</key><summary>Exceptions classes pertaining to matrices move back to package "linear"</summary><type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="erans">Gilles</assignee><reporter username="erans">Gilles</reporter><labels><label>api-change</label></labels><created>Mon, 7 Mar 2011 22:51:02 +0000</created><updated>Sat, 24 Mar 2012 16:16:37 +0000</updated><resolved>Tue, 8 Mar 2011 13:43:51 +0000</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13003936" author="erans" created="Tue, 8 Mar 2011 13:43:51 +0000"><p>Done in revision 1079350.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150655</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160481</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-543] Enable Sampling from Integer Distributions</title><link>https://issues.apache.org/jira/browse/MATH-543</link><project id="12310485" key="MATH">Commons Math</project><description><p>Have AbstractIntegerDistribution implement sample() and sample(int) methods similar to those in AbstractContinuousDistribution</p>

<p>For background See <a href="https://issues.apache.org/jira/browse/MATH-540" class="external-link" rel="nofollow">https://issues.apache.org/jira/browse/MATH-540</a></p></description><environment/><key id="12500573">MATH-543</key><summary>Enable Sampling from Integer Distributions</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="ole">Ole Ersoy</reporter><labels>
                    </labels><created>Sun, 6 Mar 2011 17:42:33 +0000</created><updated>Mon, 7 Mar 2011 19:48:01 +0000</updated><resolved>Mon, 7 Mar 2011 19:48:00 +0000</resolved><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13003466" author="ole" created="Mon, 7 Mar 2011 17:51:50 +0000"><p>It looks like it's already implemented.  I see both methods AbstractIntegerDistribution.sample() and AbstractIntegerDistribution.sample(int) in the trunk.</p></comment><comment id="13003541" author="ole" created="Mon, 7 Mar 2011 19:48:01 +0000"><p>Already implemented.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150654</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160482</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-542] Allow the addition of multiple messages to the exceptions generated by CM</title><link>https://issues.apache.org/jira/browse/MATH-542</link><project id="12310485" key="MATH">Commons Math</project><description><p>Borrowing on the idea of "ExceptionContext" implemented in <span class="error">&#91;Lang&#93;</span>, "MathRuntimeException" (base class of all exceptions generated from CM) will be enhanced so that an unlimited number of (localized) messages can be added to an exception object.</p>

<p>The "MathThrowable" interface (implemented by "MathRuntimeException") will contain the following new method:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
/**
  * Sets a message.
  *
  * @param pattern Message pattern.
  * @param arguments Values <span class="code-keyword">for</span> replacing the placeholders in the message
  * pattern.
  */
  <span class="code-keyword">public</span> void addMessage(Localizable pattern,
                         <span class="code-object">Object</span> ... arguments);
</pre>
</div></div></description><environment/><key id="12500565">MATH-542</key><summary>Allow the addition of multiple messages to the exceptions generated by CM</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="erans">Gilles</assignee><reporter username="erans">Gilles</reporter><labels><label>api-change</label></labels><created>Sun, 6 Mar 2011 14:14:21 +0000</created><updated>Sat, 24 Mar 2012 16:17:01 +0000</updated><resolved>Mon, 21 Mar 2011 00:14:52 +0000</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13003177" author="luc" created="Sun, 6 Mar 2011 14:59:37 +0000"><p>I don't think we want to add messages, but key-value pairs.<br/>
In <span class="error">&#91;lang&#93;</span> the methods in interface ExceptionContext are:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> ExceptionContext addValue(<span class="code-object">String</span> label, <span class="code-object">Object</span> value);
<span class="code-keyword">public</span> <span class="code-object">Object</span> getValue(<span class="code-object">String</span> label);
</pre>
</div></div>
<p>The purpose is that upper layers can propagate information from one level to an upper level</p></comment><comment id="13003182" author="erans" created="Sun, 6 Mar 2011 15:33:08 +0000"><p>Do you really want to allow "String" keys?<br/>
My understanding was that we would allow the addition of "Localizable"s. This is a direct adaptation of the concept but satisfying the requirement of CM.</p>

<p>The "getValue" is not useful for CM because the intended goal is the display of the message (as a localized string). We don't need the added flexibility of retrieving unprocessed patterns. Those should remain implementation details.</p>

<p>The map feature enhances the stack trace by indeed allowing to provide additional messages when the exception travels up the stack. Similarly to the stack trace, this info should remain ordered with respect to the call chain, resulting in a final message such as<br/>
&#8212;<br/>
original cause: more info added: some more info added by an intermediate call: last message added before display<br/>
&#8212;<br/>
<span class="error">&#91;The &quot;: &quot; is the separator inserted between each bit of info added through &quot;addMessage&quot;.&#93;</span></p></comment><comment id="13003186" author="luc" created="Sun, 6 Mar 2011 16:45:38 +0000"><blockquote>
<p>Do you really want to allow "String" keys?</p></blockquote>

<p>I would even allow Object keys.</p>

<blockquote>
<p>My understanding was that we would allow the addition of "Localizable"s. This is a direct adaptation of the concept but satisfying the requirement of CM.</p></blockquote>
<p>This is more cumbersome for users. If they only want to have a key, requiring them to implement the Localizable interface is overkill.</p>

<blockquote>
<p>The "getValue" is not useful for CM because the intended goal is the display of the message (as a localized string). We don't need the added flexibility of retrieving unprocessed patterns. Those should remain implementation details.</p></blockquote>
<p>My understanding was that the intended goal was not to display message (of course it could be used for that), but rather to get some values. In fact I saw it as a more fine grained version of our existing getArguments() method from MathThrowable, with the additional benefit to retrieve a specific argument from its key.</p>

<blockquote>
<p>The map feature enhances the stack trace by indeed allowing to provide additional messages when the exception travels up the stack. Similarly to the stack trace, this info should remain ordered with respect to the call chain, resulting in a final message such as<br/>
—<br/>
original cause: more info added: some more info added by an intermediate call: last message added before display<br/>
—<br/>
<span class="error">&#91;The &quot;: &quot; is the separator inserted between each bit of info added through &quot;addMessage&quot;.&#93;</span></p></blockquote>
<p>With this behaviour, the key-values pairs would only be used for messages building. I think the ExceptionContext feature from <span class="error">&#91;lang&#93;</span> goes beyond that.</p></comment><comment id="13003190" author="erans" created="Sun, 6 Mar 2011 17:34:37 +0000"><p>Of course an object like "ExceptionContext" could store arbitrary (key, value) pairs.<br/>
But if users want to use "ExceptionContext", they can use the real thing <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> i.e. depend on <span class="error">&#91;Lang&#93;</span> for that functionality. We don't need that <em>in</em> CM.<br/>
What we need to do in CM is provide a fully informative localized message. I know it is a burden for users to implement "Localizable" but, IIRC, you said that you were doing exactly that in your application (because you need localization).<br/>
So to achieve that goal in the simplest way, "addMessage" is all that's needed.<br/>
Allowing arbitrary types for the key will go in the way of the above goal. Indeed, how do you localize the message string if you don't have a "Localizable" key? I know that we <em>could</em> do it (with "instanceof") but I think that we wouldn't do a favour to CM users: When some code layers insert non-localizable messages/objects, it will result in a patchwork of different languages in the final display. And if we don't display the non-localizable info, then we contradict part the stated goal (full information).</p>

<p>Again, I recommend to keep it simple at first, until a clear-cut use-case shows that some functionality is missing.</p></comment><comment id="13003193" author="erans" created="Sun, 6 Mar 2011 17:45:11 +0000"><p>I think that the most interesting use of the new functionality (as I see it) might be to do away with exception wrapping. In particular, this would apply in the controversial example in "ContinuedFraction". <br/>
We don't need a "ConvergenceException": A high-level message (conveying convergence failure) can be attached to the low-level exception (description of the failure).</p></comment><comment id="13003209" author="luc" created="Sun, 6 Mar 2011 19:38:04 +0000"><p>No, users can't use <span class="error">&#91;lang&#93;</span> ExceptionContext on <span class="error">&#91;math&#93;</span> exception if <span class="error">&#91;math&#93;</span> does not provide the same feature.<br/>
The key-value pairs are more general than Localizable-arguments and they may be used for something different than building a message.</p>

<p>I don't intend to suppress the Localizable-arguments part, just to add the possibility to add key-values. We could even use this to hold the Localizable and the arguments array if we want. So an exception would have at least the localizable and the arguments (enforced by constructor) but also additional parameters. Some of these parameters would be directly injected by <span class="error">&#91;math&#93;</span> for some specific exceptions (iteration count, out of bound value ...) but the user could add its own, thus effectively removing some of the use of wrapping. The additional parameters are not intended to appear in the message, so there would not be a patchwork of languages in the final display.</p>

<p>The typical use case I have (from my own code) is something like a spacecraft maneuver planning algorithm that do call an optimizer from <span class="error">&#91;math&#93;</span>. If the optimizer fails, we get some <span class="error">&#91;math&#93;</span> exception. We just catch it, add some information about the context of the maneuver planning and throw the same exception again for the top level to catch it and react on the context information and decide if it can make another try (for example switch to another propulsion mode) or if it should give up and display the original exception (most of the time without its context, because when we decide to give up we want to display something more general than the context of the last attempt only).</p></comment><comment id="13003220" author="erans" created="Sun, 6 Mar 2011 22:39:47 +0000"><p>So, IIUC, there would be two kinds of storage:</p>
<ul>
	<li>one for localizable messages</li>
	<li>one for any kind of values represented by a (key, value) pair where the value can have any type (thus "Object")</li>
</ul>


<p>And only the first kind will contribute to the compound message.<br/>
Is that so?</p>

<p>I would then add those methods:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> void setContext(<span class="code-object">String</span> key, <span class="code-object">Object</span> value);
<span class="code-keyword">public</span> <span class="code-object">Object</span> getContext(<span class="code-object">String</span> key);
<span class="code-keyword">public</span> Set&lt;<span class="code-object">String</span>&gt; getContextKeys();
</pre>
</div></div>
<p><span class="error">&#91;Don&#39;t you think that a key of type &quot;Object&quot; is unnecessarily general? I also wonder how upper layers will even make sense of a given key if they don&#39;t know what type it is.&#93;</span></p></comment><comment id="13003290" author="luc" created="Mon, 7 Mar 2011 08:28:16 +0000"><p>This seems fine to me.<br/>
We can restrict keys to String.</p>

<p>thanks!</p></comment><comment id="13003319" author="erans" created="Mon, 7 Mar 2011 10:41:32 +0000"><p>Implementation committed in revision 1078734.</p>

<p>One further simplification would be to remove the constructor that allows wrapping of exceptions, but there might be cases where wrapping will still be useful.</p></comment><comment id="13005071" author="erans" created="Thu, 10 Mar 2011 14:09:24 +0000"><p>"readObject" and "writeObject" methods implemented (revision 1080231), following Jörg's suggestion on the ML.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 6 Mar 2011 14:59:37 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150653</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160483</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-541] add a "rectangular" Cholesky-like decomposition</title><link>https://issues.apache.org/jira/browse/MATH-541</link><project id="12310485" key="MATH">Commons Math</project><description><p>The CorrelatedRandomVectorGenerator class uses a kind of rectangular Cholesky-like transform M = B.Bt where B is a rectangular matrix. The difference with respect to a regular Cholesky decomposition is that rows/columns may be permuted (hence the rectangular shape instead of the traditional triangular shape) and there is a threshold to ignore small diagonal elements. This is used for example to generate correlated random n-dimensions vectors in a p-dimension subspace (p &lt; n). In other words, it allows generating random vectors from a covariance matrix that is only positive semidefinite, and not positive definite.</p>

<p>It would be nice to have this decomposition available as a stand-alone class outside of the CorrelatedRandomVectorGenerator.</p></description><environment/><key id="12500564">MATH-541</key><summary>add a "rectangular" Cholesky-like decomposition</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="luc">Luc Maisonobe</reporter><labels>
                    </labels><created>Sun, 6 Mar 2011 13:52:26 +0000</created><updated>Sat, 24 Mar 2012 16:16:31 +0000</updated><resolved>Mon, 25 Apr 2011 17:28:14 +0100</resolved><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="13024826" author="luc" created="Mon, 25 Apr 2011 17:28:14 +0100"><p>fixed in subversion repository as of r1096496</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150652</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160484</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-540] AbstractIntegerDistribution.inverseCumulativeProbability(...) Bug</title><link>https://issues.apache.org/jira/browse/MATH-540</link><project id="12310485" key="MATH">Commons Math</project><description><p>The AbstractIntegerDistribution.inverseCumulativeProbability(...) function attempts to decrement the lower bound of discrete distributions to values that go below the lower bound.</p></description><environment/><key id="12500531">MATH-540</key><summary>AbstractIntegerDistribution.inverseCumulativeProbability(...) Bug</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="ole">Ole Ersoy</reporter><labels>
                    </labels><created>Sun, 6 Mar 2011 00:43:45 +0000</created><updated>Sat, 24 Mar 2012 16:16:36 +0000</updated><resolved>Sun, 12 Jun 2011 06:58:50 +0100</resolved><version>2.1</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13003097" author="psteitz" created="Sun, 6 Mar 2011 05:32:11 +0000"><p>I don't think this is a bug.  Per the javadoc, the contract for inverse cum is</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
/**
 * For a random variable {@code X} whose values are distributed according
 * to <span class="code-keyword">this</span> distribution, <span class="code-keyword">this</span> method returns the largest {@code x}, such
 * that {@code P(X &lt; x) &lt; p}.
</pre>
</div></div>

<p>This implies that if the first non-zero mass point has probability greater than p, the right value to return is one less than that value, which is whet the method will do.  Your example distribution throws NPE when trying to compute probabilities outside of its domain of support. </p></comment><comment id="13003103" author="ole" created="Sun, 6 Mar 2011 05:58:44 +0000"><p>I'm looking at it like this.  I have very simple distribution like the one provided (Four sided dice).  I'm trying to write a simulation that draws values of x for a a set of uniform 0-1 probabilities.  So I'm expecting:</p>

<p>0 When p is less than or equal to 0.25<br/>
1 When p is greater than 0.25 but less than or equal to 0.50<br/>
2 When p is greater than 0.50 but less than or equal to 0.75<br/>
3 When p is greater than 0.75 but less than or equal to 1.0</p>

<p>So for the line </p>

<p>int neverSucceeds = d.inverseCumulativeProbability(0.0001);</p>

<p>I'm really expecting 0 to be returned.</p>

<p>Make sense?</p></comment><comment id="13003107" author="psteitz" created="Sun, 6 Mar 2011 06:39:30 +0000"><p>I see now that there actually does appear to be an error in the javadoc.  The implementation really returns the largest x such that p(X &lt;= x) &lt;= p.  In the discrete case, &lt;= matters and I think both inequalities in the javadoc should be changed.</p>

<p>In your example, if the probability distribution vanishes outside 0, 1, 2, 3 and puts .25 mass on each of these values, the inverse cumulative probability function evaluated at .0001 should be -1, as this is the largest value such that <br/>
p(X &lt;= x) &lt;= .0001.</p>

<p>If you fix your distribution so that both probability and cumulativeProbability return correct values (rather than throwing NPEs) outside of the mass values, you should get -1 returned.</p></comment><comment id="13003178" author="psteitz" created="Sun, 6 Mar 2011 15:16:09 +0000"><p>Reading your last comment a little more carefully, it looks like what you are trying to do is implement sampling.  IIUC, something like what you are suggesting should work - you just have an off-by-one problem vis-s-vis the contract of inverse cumulative probabilities as we define them.  I would be +1 for adding direct support for sampling from discrete distributions, but we should open a separate ticket for that.</p></comment><comment id="13003191" author="ole" created="Sun, 6 Mar 2011 17:36:01 +0000"><p>OK - I'll close this one and open a separate ticket.</p></comment><comment id="13003215" author="psteitz" created="Sun, 6 Mar 2011 22:05:34 +0000"><p>There is a javadoc bug that needs to be fixed here</p></comment><comment id="13003254" author="ole" created="Mon, 7 Mar 2011 03:41:05 +0000"><p>Ooops - Thanks.  </p>

<blockquote>
<p>...inverse cumulative probability function evaluated at .0001 should be -1, as this is the largest value such that <br/>
p(X &lt;= x) &lt;= .0001.</p></blockquote>

<p>It seems to me that users would be better served if it returned 0 and that it is also correct to do so.</p>

<p>In the definition we say "For a random variables X whose values are distributed according to this distribution...".</p>

<p>Suppose the distribution was for a six sided dice.  One could assert that the distribution is only defined for the values 1,2,3,4,5,6.  In this case the inverseCumulativeDistribution returns 0, but that does not have any meaning.  So now developers are forced to define the meaning of 0 for a six sided dice implementation.  </p>

<p>In Grad school we were taught the the inverse cumulative distribution is for sampling.  So for a six sided dice uniform probabilities less than 1/6 would return 1, less than 2/6 would return 2, etc.</p>

<p>With the current implementation for values less than 1/6 we get 0 which is meaningless, and the only time we get 6 is when the uniform probability argument is 1.</p>

<p>So if someone mistakenly tries to use the inverseCumulativeProbability function for sampling the results are going to be wacked.  What is the use case for the inverseCumulativeProbability the way it is right now?</p></comment><comment id="13003369" author="psteitz" created="Mon, 7 Mar 2011 14:39:20 +0000"><p>You have a choice in defining the inverse cum whether to define it the way we have or to use and inf rather than a sup.  We can implement sampling using the current impl.  We just need to take into account the way the inverse cum is defined in AbstractIntegerDistribution.  </p></comment><comment id="13003414" author="ole" created="Mon, 7 Mar 2011 16:10:34 +0000"><p>OK - I think it's starting to make more sense to me now.  So when implementing sampling we just add one to the value returned by inverseCumulativeDistribution, unless the uniform probability argument is 1?</p></comment><comment id="13003468" author="psteitz" created="Mon, 7 Mar 2011 17:53:41 +0000"><p>I am sorry.  I forgot that we had in fact already implemented this in version 2.2. See AbstractIntegerDistribution#sample.  The base class implementation delegates to RandomDataImpl#nextInversionDeviate (adding one per the last comment).</p></comment><comment id="13003578" author="psteitz" created="Mon, 7 Mar 2011 20:38:50 +0000"><p>Sorry for the noise. I closed the wrong ticket.  Still need to fix the javadoc to match behavior and user guide.</p></comment><comment id="13048250" author="psteitz" created="Sun, 12 Jun 2011 06:58:50 +0100"><p>Javadoc fixed in trunk r1134866</p></comment></comments><attachments><attachment id="12472763" name="DummyDiscreteDistribution.java" size="2325" author="ole" created="Sun, 6 Mar 2011 00:45:04 +0000"/><attachment id="12472764" name="DummyDiscreteDistributionTest.java" size="603" author="ole" created="Sun, 6 Mar 2011 00:45:04 +0000"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 6 Mar 2011 05:32:11 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>71391</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160485</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-539] Removing some packages that are not needed in some classes</title><link>https://issues.apache.org/jira/browse/MATH-539</link><project id="12310485" key="MATH">Commons Math</project><description><p>Well,</p>

<p>Looking at the junit test files of CM project i noticed that in some of them are imported some classes that are never used so i decided to remove them... Here are the patches!</p></description><environment><p>Ubuntu Linux 10.04 (lucid)</p></environment><key id="12500525">MATH-539</key><summary>Removing some packages that are not needed in some classes</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="8">Not a Problem</resolution><assignee username="-1">Unassigned</assignee><reporter username="miccagiann">Michael Yannakopoulos</reporter><labels><label>cleanup</label><label>patch</label></labels><created>Sat, 5 Mar 2011 21:21:48 +0000</created><updated>Wed, 23 Mar 2011 20:44:40 +0000</updated><resolved>Sun, 6 Mar 2011 01:52:29 +0000</resolved><version>3.0</version><due/><votes>0</votes><watches>0</watches><comments><comment id="13003085" author="sebb@apache.org" created="Sun, 6 Mar 2011 01:52:29 +0000"><p>These imports are currently needed.</p>

<p>By the way, please don't use Eclipse workspace-relative patches. They only work if everyone uses exactly the same name for projects.</p>

<p>Project-relative patches can be used by anyone.</p></comment><comment id="13003089" author="erans" created="Sun, 6 Mar 2011 03:04:28 +0000"><p>I don't see those imports in "trunk" as of revision 1078400.</p></comment><comment id="13010434" author="luc" created="Wed, 23 Mar 2011 20:44:40 +0000"><p>Closing an issue that was not a problem</p></comment></comments><attachments><attachment id="12472759" name="CorrelatedRandomVectorGeneratorTest_Patch.txt" size="816" author="miccagiann" created="Sat, 5 Mar 2011 21:22:56 +0000"/><attachment id="12472760" name="UncorrelatedRandomVectorGeneratorTest_Patch.txt" size="763" author="miccagiann" created="Sat, 5 Mar 2011 21:23:26 +0000"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 6 Mar 2011 01:52:29 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150651</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160486</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-538] [Math] org.apache.commons.math.ode.DerivativeException constuctor should be deprecated</title><link>https://issues.apache.org/jira/browse/MATH-538</link><project id="12310485" key="MATH">Commons Math</project><description><p>In class 'org.apache.commons.math.ode.DerivativeException' the public method (constructor) 'public DerivativeException(final String specifier, final Object ... parts)' should be deprecated since 'public DerivativeException(final Localizable specifier, final Object ... parts)' constructor exists (since version 2.2...)...</p></description><environment><p>Ubuntu Linux (lucid) 10.04</p></environment><key id="12500015">MATH-538</key><summary>[Math] org.apache.commons.math.ode.DerivativeException constuctor should be deprecated</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="miccagiann">Michael Yannakopoulos</reporter><labels><label>cleanup</label><label>patch,</label></labels><created>Tue, 1 Mar 2011 07:01:24 +0000</created><updated>Sat, 24 Mar 2012 16:16:42 +0000</updated><resolved>Sun, 5 Jun 2011 12:19:49 +0100</resolved><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13000748" author="miccagiann" created="Tue, 1 Mar 2011 07:03:08 +0000"><p>Here is the patch...</p></comment><comment id="13000803" author="luc" created="Tue, 1 Mar 2011 09:42:58 +0000"><p>Thanks Michael.<br/>
I'm not sure this one will be fixed as a 6th release candidate for 2.2 as already been frozen and the vote is ongoing.<br/>
If the 6th release candidate fails, we will certainly include the fix for the next release candidate.<br/>
If the 6th release candidate succeds, the issue will be closed as "won't fix" since the DerivativeException has been removed in 3.0 and is unlikely to reappear.</p></comment><comment id="13044501" author="luc" created="Sun, 5 Jun 2011 12:19:49 +0100"><p>The DerivativeException class has been removed in 3.0</p></comment></comments><attachments><attachment id="12472288" name="DerivativeException.java" size="2342" author="miccagiann" created="Tue, 1 Mar 2011 07:03:08 +0000"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 1 Mar 2011 09:42:58 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>71920</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160487</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-537] [Math] org.apache.commnons.math.linear.MatrixVisitorException constructor should be deprecated</title><link>https://issues.apache.org/jira/browse/MATH-537</link><project id="12310485" key="MATH">Commons Math</project><description><p>In the class org.apache.commons.math.linear.MatrixVisitorException the method "public MatrixVisitorException(final String pattern, final Object[] arguments)" should be deprecated, since method "public MatrixVisitorException(final Localizable pattern, final Object[] arguments)" already exists from version 2.2...</p></description><environment><p>Linux Ubuntu 10.04 (lucid)</p></environment><key id="12500014">MATH-537</key><summary>[Math] org.apache.commnons.math.linear.MatrixVisitorException constructor should be deprecated</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="miccagiann">Michael Yannakopoulos</reporter><labels><label>cleanup</label><label>patch</label></labels><created>Tue, 1 Mar 2011 06:48:20 +0000</created><updated>Sat, 24 Mar 2012 16:16:34 +0000</updated><resolved>Sun, 5 Jun 2011 12:17:56 +0100</resolved><version>2.2</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="13000745" author="miccagiann" created="Tue, 1 Mar 2011 06:50:48 +0000"><p>Here is the patch...</p></comment><comment id="13000801" author="luc" created="Tue, 1 Mar 2011 09:42:03 +0000"><p>Thanks Michael.<br/>
I'm not sure this one will be fixed as a 6th release candidate for 2.2 as already been frozen and the vote is ongoing.<br/>
If the 6th release candidate fails, we will certainly include the fix for the next release candidate.<br/>
If the 6th release candidate succeds, the issue will be closed as "won't fix" since the MatrixVisitorException has been removed in 3.0 and is unlikely to reappear.<br/>
By the way, instead of providing a full class for short fixes, you can provide just a patch (you can create them with the unix diff command, or with svn diff, or with Eclipse team-&gt;create path menu entry).</p></comment><comment id="13044500" author="luc" created="Sun, 5 Jun 2011 12:17:56 +0100"><p>The MatrixVisitorException class has been removed in 3.0</p></comment></comments><attachments><attachment id="12472287" name="MatrixVisitorException.java" size="2056" author="miccagiann" created="Tue, 1 Mar 2011 06:50:48 +0000"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 1 Mar 2011 09:42:03 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>71921</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160488</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-536] String representation of polynomials</title><link>https://issues.apache.org/jira/browse/MATH-536</link><project id="12310485" key="MATH">Commons Math</project><description><p>The "toString" method in "PolynomialFunction" actually creates strings like</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>  1.0 - 3.0 x + x^2
</pre>
</div></div>
<p>whereas the Javadoc provides this example:</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>  1 - 3 x + x^2
</pre>
</div></div>
<p>The second form is indeed more user-friendly.<br/>
I propose to modify the code so that the redundant ".0" suffix is removed.</p>
</description><environment/><key id="12499838">MATH-536</key><summary>String representation of polynomials</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="erans">Gilles</assignee><reporter username="erans">Gilles</reporter><labels>
                    </labels><created>Sun, 27 Feb 2011 00:38:24 +0000</created><updated>Sat, 24 Mar 2012 16:16:46 +0000</updated><resolved>Sun, 27 Feb 2011 12:58:58 +0000</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12999953" author="erans" created="Sun, 27 Feb 2011 12:58:58 +0000"><p>Revision 1075048.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150650</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160489</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-535] Closing the loop in function objects</title><link>https://issues.apache.org/jira/browse/MATH-535</link><project id="12310485" key="MATH">Commons Math</project><description><p>Some function classes (in package "analysis.function") now contains a "Parametric" inner class that provides a parametric version of the function represented by the enclosing class.</p>

<ol>
	<li>We could enhance the "UnivariateRealFunction" interface to contain:
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>  public ParametricUnivariateRealFunction createParametricFunction();
</pre>
</div></div>
<p>which, e.g. for the "Gaussian" concrete class, would translate to:</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>  public Gaussian.Parametric createParametricFunction() {
    return new Gaussian.Parametric();
  }
</pre>
</div></div></li>
	<li>We could enhance the "ParametricUnivariateRealFunction" interface to contain:
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>  public UnivariateRealFunction createFunction(double[] param);
</pre>
</div></div>
<p>which, in "Gaussian.Parametric", would translate to:</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>  public Gaussian createFunction(double[] param) {
    validateParameters(param);
    return new Gaussian(param[0], param[1], param[2]);
  }
</pre>
</div></div></li>
</ol>


<p>In both cases, it would allow programming against interfaces.</p>

<p>For the first case, not all current implementations of "UnivariateRealFunction" provide a "Parametric" version (and for most there are no parameters). So either we create a new "AbstractUnivariateRealFunction" that provides a default implementation of "createParametricFunction" (throwing an exception) and make all current function classes extends this one, or we create a new interface (something like "ParametricFactory") that declares the new "createParametricFunction()" and add the "implements ParametricFactory" clause to any class that provides a parametric version.<br/>
I think that the latter is the cleanest. Or is there still another possibility?</p></description><environment/><key id="12499606">MATH-535</key><summary>Closing the loop in function objects</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="8">Not a Problem</resolution><assignee username="-1">Unassigned</assignee><reporter username="erans">Gilles</reporter><labels><label>api-change</label></labels><created>Thu, 24 Feb 2011 16:04:43 +0000</created><updated>Thu, 3 Mar 2011 14:12:52 +0000</updated><resolved>Thu, 3 Mar 2011 14:12:52 +0000</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12998943" author="luc" created="Thu, 24 Feb 2011 17:20:57 +0000"><p>Yes, the second proposal is far better than the first one.<br/>
The UnivariateRealFunction is a user interface. Users must implement it for example to solve roots. Such user interface should be as simple as possible and should not define additional methods.<br/>
In many case I know, such functions already extends user class (i.e. we have code like MyClass extends SuperClass implements UnivariateRealFunction). So in such cases an abstract class with a default implementation does not help, users would be forced to implement the additional method even if they don't use it and the solver don't use it either.</p></comment><comment id="13000601" author="erans" created="Mon, 28 Feb 2011 23:18:57 +0000"><p>In the end, I don't think that these methods are useful. Within the current code, all they would do is hide a constructor call. In the case of "createParametric()" the returned object would not be very interesting: e.g. a caller that would treat it as a "ParametricUnivariateRealFunction" would not know how many parameters are needed to call "value(double x, double[] param)".<br/>
So, unless someone sees a real usefulness, I'm going to close this issue.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Thu, 24 Feb 2011 17:20:57 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150649</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160490</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-534] Refactor "PolynomialFitter"</title><link>https://issues.apache.org/jira/browse/MATH-534</link><project id="12310485" key="MATH">Commons Math</project><description><p>This class should be refactored similarly to what was done in <a href="https://issues.apache.org/jira/browse/MATH-512" title="&quot;GaussianFitter&quot; could inherit from &quot;CurveFitter&quot;" class="issue-link" data-issue-key="MATH-512"><del>MATH-512</del></a> and <a href="https://issues.apache.org/jira/browse/MATH-517" title="Refactor &quot;HarmonicFitter&quot;" class="issue-link" data-issue-key="MATH-517"><del>MATH-517</del></a>.</p>

<p>As part of this issue, I propose to move the functionality of "ParametricPolynomial" (currently a private inner class of "PolynomialFitter") over to the class "PolynomialFunction" (in package "analysis.polynomials").</p></description><environment/><key id="12499423">MATH-534</key><summary>Refactor "PolynomialFitter"</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="erans">Gilles</assignee><reporter username="erans">Gilles</reporter><labels><label>api-change</label></labels><created>Tue, 22 Feb 2011 23:32:27 +0000</created><updated>Sat, 24 Mar 2012 16:16:28 +0000</updated><resolved>Sun, 27 Feb 2011 14:59:36 +0000</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12999969" author="erans" created="Sun, 27 Feb 2011 14:59:36 +0000"><p>Revision 1075054.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150648</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160491</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-533] [Math] Clirr report and 'org.apache.commons.math.util.ResizableDoubleArray'</title><link>https://issues.apache.org/jira/browse/MATH-533</link><project id="12310485" key="MATH">Commons Math</project><description><p>Clirr reports mention that method 'public void addElements(double[])' has been added, however there is no "@since 2.2" indication in the javadoc of this function...</p></description><environment><p>Linux Ubuntu 10.04 (lucid)</p></environment><key id="12499379">MATH-533</key><summary>[Math] Clirr report and 'org.apache.commons.math.util.ResizableDoubleArray'</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="miccagiann">Michael Yannakopoulos</reporter><labels><label>documentation</label></labels><created>Tue, 22 Feb 2011 18:08:25 +0000</created><updated>Wed, 23 Mar 2011 20:43:40 +0000</updated><resolved>Tue, 22 Feb 2011 19:53:39 +0000</resolved><version>2.2</version><fixVersion>2.2</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="12998007" author="luc" created="Tue, 22 Feb 2011 19:53:39 +0000"><p>fixed in subversion repository as of r1073474 for branch 2.X and r1073475 for trunk</p></comment><comment id="13010432" author="luc" created="Wed, 23 Mar 2011 20:43:40 +0000"><p>Closing issue as it was included in version 2.2, which has been released</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 22 Feb 2011 19:53:39 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150647</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160492</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-532] [Math] Clirr report and 'org.apache.commons.math.util.MathUtils'</title><link>https://issues.apache.org/jira/browse/MATH-532</link><project id="12310485" key="MATH">Commons Math</project><description><p>Clirr report mentions that method 'public void checkOrder(double[], org.apache.commons.math.util.MathUtils$OrderDirection, boolean)' has been added, however this doesn't comply with the javadoc of the very same function (because not "@since 2.2" tag was found). The same thing happens with the methods listed bellow:<br/>
'public void checkOrder(double[])'<br/>
'public boolean equals(float, float, float)'<br/>
'public boolean equals(float, float, int)'<br/>
'public boolean equalsIncludingNaN(float, float)'<br/>
'public boolean equalsIncludingNaN(float, float, float)'<br/>
'public boolean equalsIncludingNaN(float, float, int)'<br/>
'public boolean equalsIncludingNaN(float[], float[])'<br/>
'public boolean equalsIncludingNaN(double, double)'<br/>
'public boolean equalsIncludingNaN(double, double, double)'<br/>
'public boolean equalsIncludingNaN(double, double, int)'<br/>
'public boolean equalsIncludingNaN(double[], double[])'<br/>
'public double safeNorm(double[])'</p>

<p>In addition to this some functions have been deprecated but neither is it mentioned in the javadoc the version as of which they have been deprecated nor the clirr report refers to these methods. These are:<br/>
Deprecated Methods:<br/>
'public boolean equals(float, float)'<br/>
'public boolean equals(float[], float[])'</p></description><environment><p>Linux Ubuntu 10.04 (lucid)</p></environment><key id="12499377">MATH-532</key><summary>[Math] Clirr report and 'org.apache.commons.math.util.MathUtils'</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="miccagiann">Michael Yannakopoulos</reporter><labels><label>documentation</label></labels><created>Tue, 22 Feb 2011 17:57:22 +0000</created><updated>Wed, 23 Mar 2011 20:43:23 +0000</updated><resolved>Tue, 22 Feb 2011 19:50:19 +0000</resolved><version>2.2</version><fixVersion>2.2</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="12997931" author="miccagiann" created="Tue, 22 Feb 2011 18:01:56 +0000"><p>What is more, the enumeration 'public static enum OrderDirection' that is included in the same class doesn't mentions in its javadoc a "@since 2.2" tag, although clirr reports state that the enum is added in the 2.2 version of ASF Commons Math project...</p></comment><comment id="12998005" author="luc" created="Tue, 22 Feb 2011 19:50:19 +0000"><p>fixed in subversion repository as of r1073472 for branch 2.X and r1073473 for trunk</p></comment><comment id="13010431" author="luc" created="Wed, 23 Mar 2011 20:43:23 +0000"><p>Closing issue as it was included in version 2.2, which has been released</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 22 Feb 2011 19:50:19 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150646</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160493</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-531] [Math] Clirr report and 'org.apache.commons.math.stat.regression.OLSMultipleLinearRegression'</title><link>https://issues.apache.org/jira/browse/MATH-531</link><project id="12310485" key="MATH">Commons Math</project><description><p>All the methods that are marked as added in the above class in the clirr report haven't "@since 2.2" tag on their javadocs respectively... </p></description><environment><p>Linux Ubuntu 10.04 (lucid)</p></environment><key id="12499371">MATH-531</key><summary>[Math] Clirr report and 'org.apache.commons.math.stat.regression.OLSMultipleLinearRegression'</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="miccagiann">Michael Yannakopoulos</reporter><labels><label>documentation</label></labels><created>Tue, 22 Feb 2011 17:19:53 +0000</created><updated>Wed, 23 Mar 2011 20:43:04 +0000</updated><resolved>Tue, 22 Feb 2011 19:36:15 +0000</resolved><version>2.2</version><fixVersion>2.2</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="12997993" author="luc" created="Tue, 22 Feb 2011 19:36:15 +0000"><p>fixed in subversion repository as of r1073464 for branch 2.X and r1073466 for trunk</p></comment><comment id="13010430" author="luc" created="Wed, 23 Mar 2011 20:43:04 +0000"><p>Closing issue as it was included in version 2.2, which has been released</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 22 Feb 2011 19:36:15 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150645</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160494</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-530] [Math] Clirr report and 'org.apache.commons.math.stat.regression.GLSMultipleLinearRegression</title><link>https://issues.apache.org/jira/browse/MATH-530</link><project id="12310485" key="MATH">Commons Math</project><description><p>Clirr report mentions that method 'protected double calculateErrorVariance()' has been added... However this addition isn't reflected to the javadoc with the "@since 2.2" clause.</p></description><environment><p>Linux Ubuntu 10.04 (lucid)</p></environment><key id="12499365">MATH-530</key><summary>[Math] Clirr report and 'org.apache.commons.math.stat.regression.GLSMultipleLinearRegression</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="miccagiann">Michael Yannakopoulos</reporter><labels><label>documentation</label></labels><created>Tue, 22 Feb 2011 16:58:56 +0000</created><updated>Wed, 23 Mar 2011 20:42:46 +0000</updated><resolved>Tue, 22 Feb 2011 19:30:50 +0000</resolved><version>2.2</version><fixVersion>2.2</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="12997990" author="luc" created="Tue, 22 Feb 2011 19:30:50 +0000"><p>fixed in subversion repository as of r1073450 for branch 2.X and r1073463 for trunk</p></comment><comment id="13010429" author="luc" created="Wed, 23 Mar 2011 20:42:46 +0000"><p>Closing issue as it was included in version 2.2, which has been released</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 22 Feb 2011 19:30:50 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150644</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160495</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-529] [Math] Clirr report and 'org.apache.commons.math.stat.regression.AbstractMultipleLinearRegression'</title><link>https://issues.apache.org/jira/browse/MATH-529</link><project id="12310485" key="MATH">Commons Math</project><description><p>Clirr report states that method 'protected double calculateErrorVariance()' has been added, but in the javadoc no "@since 2.2" tag found...</p></description><environment><p>Linux Ubuntu 10.04 (lucid)</p></environment><key id="12499355">MATH-529</key><summary>[Math] Clirr report and 'org.apache.commons.math.stat.regression.AbstractMultipleLinearRegression'</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="miccagiann">Michael Yannakopoulos</reporter><labels><label>documentation</label></labels><created>Tue, 22 Feb 2011 15:37:10 +0000</created><updated>Wed, 23 Mar 2011 20:42:28 +0000</updated><resolved>Tue, 22 Feb 2011 19:19:51 +0000</resolved><version>2.2</version><fixVersion>2.2</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="12997860" author="miccagiann" created="Tue, 22 Feb 2011 15:43:02 +0000"><p>Also check out the following methods: 'public double estimateErrorVariance()', 'public double estimateRegressionStandardError()', 'public boolean isNoIntercept()'and 'public void setNoIntercept(boolean)'... Thanks in advance! </p></comment><comment id="12997981" author="luc" created="Tue, 22 Feb 2011 19:19:51 +0000"><p>fixed in subversion repository as of r1073459 for branch 2.X and r1073458 for trunk</p></comment><comment id="13010428" author="luc" created="Wed, 23 Mar 2011 20:42:28 +0000"><p>Closing issue as it was included in version 2.2, which has been released</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 22 Feb 2011 19:19:51 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150643</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160496</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-528] Change subversion tags</title><link>https://issues.apache.org/jira/browse/MATH-528</link><project id="12310485" key="MATH">Commons Math</project><description><p>Shall we follow Sebb's suggestion to replace</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>/**
 * @version $Revision$ $Date$
 */
</pre>
</div></div>
<p>by</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>/**
 * @version $Id$
 */
</pre>
</div></div>
<p>?</p></description><environment/><key id="12499353">MATH-528</key><summary>Change subversion tags</summary><type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="erans">Gilles</reporter><labels><label>documentation</label></labels><created>Tue, 22 Feb 2011 15:30:38 +0000</created><updated>Sat, 24 Mar 2012 16:16:33 +0000</updated><resolved>Sun, 5 Jun 2011 12:51:03 +0100</resolved><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12997869" author="sebb@apache.org" created="Tue, 22 Feb 2011 15:59:09 +0000"><p>Or just use:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
/**
 * @version $Revision$
 */
</pre>
</div></div>

<p>which is sufficient to obtain the date if really required.</p></comment><comment id="13044505" author="luc" created="Sun, 5 Jun 2011 12:51:03 +0100"><p>Fixed in subversion repository as of r1131229</p></comment></comments><issuelinks><issuelinktype id="12310000"><name>Duplicate</name><inwardlinks description="is duplicated by"><issuelink><issuekey id="12505406">MATH-565</issuekey></issuelink></inwardlinks></issuelinktype></issuelinks><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 22 Feb 2011 15:59:09 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>71917</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160497</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item></channel></rss>