<rss version="0.92"><channel><title>ASF JIRA</title><link>https://issues.apache.org/jira/secure/IssueNavigator.jspa?reset=true</link><description>An XML representation of a search request</description><language>en-uk</language><issue start="0" end="89" total="89"/><build-info><version>6.3.4</version><build-number>6332</build-number><build-date>15-08-2014</build-date></build-info><item><title>[MATH-326] getLInfNorm() uses wrong formula in both ArrayRealVector and OpenMapRealVector (in different ways)</title><link>https://issues.apache.org/jira/browse/MATH-326</link><project id="12310485" key="MATH">Commons Math</project><description><p>the L_infinity norm of a finite dimensional vector is just the max of the absolute value of its entries.</p>

<p>The current implementation in ArrayRealVector has a typo:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
    <span class="code-keyword">public</span> <span class="code-object">double</span> getLInfNorm() {
        <span class="code-object">double</span> max = 0;
        <span class="code-keyword">for</span> (<span class="code-object">double</span> a : data) {
            max += <span class="code-object">Math</span>.max(max, <span class="code-object">Math</span>.abs(a));
        }
        <span class="code-keyword">return</span> max;
    }
</pre>
</div></div>

<p>the += should just be an =.</p>

<p>There is sadly a unit test assuring us that this is the correct behavior (effectively a regression-only test, not a test for correctness).</p>

<p>Worse, the implementation in OpenMapRealVector is not even positive semi-definite:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">   
    <span class="code-keyword">public</span> <span class="code-object">double</span> getLInfNorm() {
        <span class="code-object">double</span> max = 0;
        Iterator iter = entries.iterator();
        <span class="code-keyword">while</span> (iter.hasNext()) {
            iter.advance();
            max += iter.value();
        }
        <span class="code-keyword">return</span> max;
    }
</pre>
</div></div>

<p>I would suggest that this method be moved up to the AbstractRealVector superclass and implemented using the sparseIterator():</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
  <span class="code-keyword">public</span> <span class="code-object">double</span> getLInfNorm() {
    <span class="code-object">double</span> norm = 0;
    Iterator&lt;Entry&gt; it = sparseIterator();
    Entry e;
    <span class="code-keyword">while</span>(it.hasNext() &amp;&amp; (e = it.next()) != <span class="code-keyword">null</span>) {
      norm = <span class="code-object">Math</span>.max(norm, <span class="code-object">Math</span>.abs(e.getValue()));
    }
    <span class="code-keyword">return</span> norm;
  }
</pre>
</div></div>

<p>Unit tests with negative valued vectors would be helpful to check for this kind of thing in the future.</p></description><environment><p>all</p></environment><key id="12444282">MATH-326</key><summary>getLInfNorm() uses wrong formula in both ArrayRealVector and OpenMapRealVector (in different ways)</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="jake.mannix">Jake Mannix</reporter><labels>
                    </labels><created>Tue, 29 Dec 2009 00:09:20 +0000</created><updated>Sat, 3 Apr 2010 21:37:40 +0100</updated><resolved>Tue, 29 Dec 2009 12:26:59 +0000</resolved><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12795040" author="luc" created="Tue, 29 Dec 2009 12:26:59 +0000"><p>Fixed in subversion repository as of r894367.<br/>
For consistency, the implementation of L1 and L2 norms have also been pushed upward in the abstract class.<br/>
Thanks for reporting and providing a fix to this bug</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 29 Dec 2009 12:26:59 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>34173</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160691</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-325] Improvement of Romberg extrapolation</title><link>https://issues.apache.org/jira/browse/MATH-325</link><project id="12310485" key="MATH">Commons Math</project><description><p>One can use a one-dimensional array (instead of Romberg's tableau) for extrapolating subsequent values.<br/>
Please have a look at following code fragments (which I've taken form the class RombergExtrapolator of<br/>
my MathLibrary). Feel free to use this code.</p>

<p>	/**</p>
<ul>
	<li>Default number of maximal extrapolation steps.<br/>
	 */<br/>
	public static int DEF_MAXIMAL_EXTRAPOLATION_COUNT = 8;</li>
</ul>


<p>	/**</p>
<ul>
	<li>The approximation order. &lt;br&gt;</li>
	<li>Assume that f(h) is approximated by a function a(h), so that f(h) = a(h) +</li>
	<li>O(h&lt;sup&gt;p&lt;/sup&gt;). We say that p is the approximation order.<br/>
	 */<br/>
	private int approximationOrder;<br/>
	private int extrapolationCount = 0;<br/>
	private double prevResult;</li>
</ul>


<p>	/**</p>
<ul>
	<li>The estimate and tolerance may be used to deside wether to finalize the</li>
	<li>iteration process (|estimate| &lt; tolerance).<br/>
	 */</li>
</ul>


<p>	/** Holds the current estimated error. */<br/>
	private double estimate;<br/>
	/** Holds the current reached tolerance. */<br/>
	private double tolerance;</p>

<p>	private double result[] = new double<span class="error">&#91;DEF_MAXIMAL_EXTRAPOLATION_COUNT + 1&#93;</span>;;</p>

<p>	/**</p>
<ul>
	<li>Set the maximal number of subsequent extrapolation steps.</li>
	<li></li>
	<li>@param maximalExtrapolationCount</li>
	<li>maximal extrapolation steps<br/>
	 */<br/>
	public void setMaximalExtrapolationCount(int maximalExtrapolationCount)
	{
		result = new double[maximalExtrapolationCount + 1];
	}</li>
</ul>


<p>	/**</p>
<ul>
	<li>Extrapolate a sequence of values by means of Romberg's algorithm.</li>
	<li>Therefore a polynomial of degree maximalExtraploationCount</li>
	<li>is used. Calculates the current estimate and tolerance using the</li>
	<li>approximation order.</li>
	<li></li>
	<li>@param value</li>
	<li>value to extrapolate</li>
	<li>@return extrapolated value<br/>
	 */<br/>
	public double extrapolate(double value)<br/>
	{<br/>
		if (extrapolationCount == 0) 
{
			// first estimate
			estimate = value;
			tolerance = -1.0;

			prevResult = 0;
		}</li>
</ul>


<p>		int i, m, m1 = idx(extrapolationCount);<br/>
		long k = (1 &lt;&lt; approximationOrder);<br/>
		int imin = Math.max(0, extrapolationCount - (result.length - 1));</p>

<p>		result<span class="error">&#91;m1&#93;</span> = value;</p>

<p>		for (i = extrapolationCount - 1; i &gt;= imin; i--) </p>
{
			m = idx(i);
			m1 = idx(i + 1);
			result[m] = (k * result[m1] - result[m]) / (k - 1);
			k &lt;&lt;= approximationOrder;
		}
<p>		m1 = idx(i + 1);<br/>
		estimate = result<span class="error">&#91;m1&#93;</span> - prevResult;<br/>
		tolerance = Math.abs(result<span class="error">&#91;m1&#93;</span>) * relativeAccuracy + absoluteAccuracy;</p>

<p>		prevResult = result<span class="error">&#91;m1&#93;</span>;</p>

<p>		extrapolationCount++;</p>

<p>		return result<span class="error">&#91;m1&#93;</span>;<br/>
	}</p>

<p>	/**</p>
<ul>
	<li>Ring buffer index<br/>
	 */<br/>
	private int idx(int i)
	{
		return (i % result.length);
	}</li>
</ul>
</description><environment/><key id="12444194">MATH-325</key><summary>Improvement of Romberg extrapolation</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="alpha">Andreas mueller</reporter><labels>
                    </labels><created>Fri, 25 Dec 2009 11:53:15 +0000</created><updated>Sat, 3 Apr 2010 21:38:22 +0100</updated><resolved>Sun, 24 Jan 2010 10:30:57 +0000</resolved><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>0</watches><timeoriginalestimate seconds="7200">2h</timeoriginalestimate><timeestimate seconds="7200">2h</timeestimate><comments><comment id="12794719" author="luc" created="Sun, 27 Dec 2009 19:35:58 +0000"><p>I think this issue has already been solved since 2009-10-13. Could you check the current implementation from subversion repository ?<br/>
The fix was introduced in r824822 with the following comment:</p>
<blockquote>
<p>improved array structure in Romberg integrator<br/>
since the integrator uses only two rows at a time, we allocate only two arrays and reuse them</p></blockquote></comment><comment id="12804218" author="luc" created="Sun, 24 Jan 2010 10:30:57 +0000"><p>Solved since 2009-10-13 as of r824822.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 27 Dec 2009 19:35:58 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150502</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160692</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-324] Error in the the convergence control for GraggBulirschStoerIntegrator (GBS)</title><link>https://issues.apache.org/jira/browse/MATH-324</link><project id="12310485" key="MATH">Commons Math</project><description><p>By reading the source code and making a compareason with the theory described by Hairer in his book (Solving Ordinary Differential Equations 1 : Nonstiff Problems) I have found an error in the convergence control.</p>

<p>EFFECTS  :<br/>
The mistake is unvisible from a user's point of view but makes the integration slower than it should be. Some steps are rejected whereas they could have offer convergence. The theory discribed by Hairer isn't correctly used. </p>

<p>LOCATION : </p>

<p>The problem comes from the line 693 of GraggBulirschStoerIntegrator.java : </p>

<p>"final double ratio = ((double) sequence <span class="error">&#91;k&#93;</span> * sequence<span class="error">&#91;k+1&#93;</span>) / (sequence<span class="error">&#91;0&#93;</span> * sequence<span class="error">&#91;0&#93;</span>);"</p>

<p>This line should be replaced by :</p>

<p>final double ratio = ((double) sequence <span class="error">&#91;k+1&#93;</span> * sequence<span class="error">&#91;k+2&#93;</span>) / (sequence<span class="error">&#91;0&#93;</span> * sequence<span class="error">&#91;0&#93;</span>);</p>

<p>or (which is the same) : final double ratio = ((double) sequence <span class="error">&#91;targetIter&#93;</span> * sequence<span class="error">&#91;targetIter + 1&#93;</span>) / (sequence<span class="error">&#91;0&#93;</span> * sequence<span class="error">&#91;0&#93;</span>);</p>


<p>EXPLANATION :</p>

<p>The corresponding chapter in Hairer's book is page 233 : Order and Step Size Control (for GBS method) :</p>

<p>Following the theory, we compute k-1 modified midpoint integration to obtain the k-1lines of the extrapolation tableau where k is the predicted index in which there should be convergence. (In the java code source the variable is 'targetIter')</p>

<p>If there is convergence (errk-1 &lt; 1) we accept the step and continue the integration.<br/>
If not we use the asymptotic evolution of error to evaluate if there is convergence at least in line k+1 (so two integration later)</p>

<p>This stage is wrongly done in the java code source by the line 693.</p>

<p>Following the theory the estimation of convergence in line k+1 (when you are in line k-1) is <br/>
                errk-1 &gt; (nk+1 * nk  /  (n1 * n1) )² <br/>
So you shall use the number of substeps (nk and nk+1) that haven't been used yet. you shall use the number of substep of the next two integration.</p>

<p>In the java code source :</p>
<ul>
	<li>the predicted index for convergence is targetIter</li>
	<li>the current integration number is k</li>
	<li>nk, number of substep for the integration is sequence[ ]</li>
</ul>


<p>When we are in line 693 :<br/>
     Here k = targetIter - 1 (case -1 of the switch)<br/>
     To evaluate the convergence at least in targetIter + 1 is is done :</p>

<p>       "final double ratio = ((double) sequence <span class="error">&#91;k&#93;</span> * sequence<span class="error">&#91;k+1&#93;</span>) / (sequence<span class="error">&#91;0&#93;</span> * sequence<span class="error">&#91;0&#93;</span>);"</p>

<p>It seems like a nonsense to use sequence<span class="error">&#91;k&#93;</span> to evaluate convergence in next lines whereas sequence<span class="error">&#91;k&#93;</span> has already been used in the last call to tryStep(...,k,..)</p>

<p>we should do : <br/>
        final double  ratio = ((double) sequence <span class="error">&#91;targetIter&#93;</span> * sequence<span class="error">&#91;targetIter + 1&#93;</span>) / ( sequence<span class="error">&#91;0&#93;</span> *  sequence<span class="error">&#91;0&#93;</span>);</p>

<p>Or (because targetIter = k+1)   final double ratio = ((double) sequence <span class="error">&#91;k+1&#93;</span> *sequence<span class="error">&#91;k+2&#93;</span>) /(sequence<span class="error">&#91;0&#93;</span> * sequence<span class="error">&#91;0&#93;</span>);</p>

<p>ie to use the number os substeps for the next integrations, as described in the Hairer's book.</p>



<p>COMMENT :</p>

<p>1) in the java code for case = 0   we have k = targetIter and the estimation of the convergence at least in targetIter + 1 is done by  <br/>
                final double ratio = ((double) sequence<span class="error">&#91;k+1&#93;</span>) / sequence<span class="error">&#91;0&#93;</span>;<br/>
Since k = targetIter the instruction is correct.</p>

<p>2) The compareason with the fortran code delivered by Hairer (easily found on his website page)  confirms the error in the java code.</p>


<p>Sorry for the length of this message, looking forward to hearing from you soon</p>

<p>Vincent Morand</p></description><environment><p>Red Hat 5 </p></environment><key id="12443923">MATH-324</key><summary>Error in the the convergence control for GraggBulirschStoerIntegrator (GBS)</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="vincent.morand">Morand Vincent</reporter><labels>
                    </labels><created>Mon, 21 Dec 2009 15:39:21 +0000</created><updated>Sat, 3 Apr 2010 21:39:03 +0100</updated><resolved>Tue, 22 Dec 2009 19:31:24 +0000</resolved><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12793339" author="luc" created="Mon, 21 Dec 2009 20:22:45 +0000"><p>Hi Vincent,</p>

<p>I'm trying to follow your reasoning. From what you say, it appears that what we call targetIter is what is called k in Hairer (with the classical index shift due to array beginning at 0 and not 1), and what we call k is only a current index when Hairer only specifically identity k-1, k and k+1. Am I right ? If yes, then I agree with you that the current implementation is wrong.</p>

<p>What puzzled me first was that applying the fix lead to a larger number of functions evaluations in the few test that were affected by the change. After more investigation, I think this is due to the fact the order is not reduced when the step is accepted so the number of evaluations per step is kept higher. In one case, I get a reduced number of steps but a larger number of calls, and at the end a slightly increased accuracy.</p>

<p>If you can confirm the understanding of our k and targetIter variables with respect to the theory, I'll commit the fix.</p></comment><comment id="12793622" author="vincent.morand" created="Tue, 22 Dec 2009 14:12:39 +0000"><p>Hi Luc,</p>

<p>you have perfectly understood the error, targetIter is the index we have predicted in the previous step and k is the current index, whereas Hairer uses only "k" to explain his theory.</p>

<p>Before sending my bug report i ran some test (those provided by apache) and also found a larger number of function evaluations. I think it is explained by the fact that the asymptotic development of the error is just an estimation of the chance of convergence in k+1. Sometimes it gives the good information, sometimes not, depending on the function itself.</p>

<p>Whatever, applying the fix allows us to follow the theory described by Hairer.</p>

<p>Thanks for the efficiency of your answer</p>

<p>Vincent</p>

</comment><comment id="12793748" author="luc" created="Tue, 22 Dec 2009 19:31:24 +0000"><p>Fixed in subversion repository as of r893281.<br/>
Thanks for the bug report, the analysis and the fix.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Mon, 21 Dec 2009 20:22:45 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150501</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160693</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-323] Add Semivariance calculation</title><link>https://issues.apache.org/jira/browse/MATH-323</link><project id="12310485" key="MATH">Commons Math</project><description><p>I've added semivariance calculations to my local build of commons-math and I would like to contribute them.</p>

<p>Semivariance is described a little bit on <a href="http://en.wikipedia.org/wiki/Semivariance" class="external-link" rel="nofollow">http://en.wikipedia.org/wiki/Semivariance</a> , but a real reason you would use them is in finance in order to compute the Sortino ratio rather than the Sharpe ratio.</p>

<p><a href="http://en.wikipedia.org/wiki/Sortino_ratio" class="external-link" rel="nofollow">http://en.wikipedia.org/wiki/Sortino_ratio</a> gives an explanation of the Sortino ratio and why you would choose to use that rather than the Sharpe ratio.  (There are other ways to measure the performance of your portfolio, but I wont bore everybody with that stuff)</p>

<p>I've already got the coding completed along with the test cases and building using mvn site.</p>

<p>The only two files I've modified is src/main/java/org/apache/commons/stat/StatUtils.java and src/test/java/org/apache/commons/math/stat/StatUtilsTest.java</p></description><environment/><key id="12443140">MATH-323</key><summary>Add Semivariance calculation</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="psteitz">Phil Steitz</assignee><reporter username="ldiamond">Larry Diamond</reporter><labels>
                    </labels><created>Fri, 11 Dec 2009 20:31:19 +0000</created><updated>Sat, 3 Apr 2010 21:47:40 +0100</updated><resolved>Mon, 15 Feb 2010 17:17:44 +0000</resolved><version>2.1</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12789512" author="ldiamond" created="Fri, 11 Dec 2009 20:32:50 +0000"><p>Please find attached the modified StatUtils.java and StatUtilsTest.java classes for semivariance</p></comment><comment id="12789524" author="ldiamond" created="Fri, 11 Dec 2009 20:56:39 +0000"><p>And here's the patch file as per the Math developers contribution guideline</p></comment><comment id="12790906" author="luc" created="Tue, 15 Dec 2009 19:30:16 +0000"><p>I have just a comment on this proposal, but beware I have almost no knowledge in the field of statistics.<br/>
In your implementation, you seem to use 0 as the mean. Shouldn't the mean be computed beforehand to know where to put the cutoff value ?</p>

<p>I let the real statisticians give their feeling about this feature.</p></comment><comment id="12791336" author="psteitz" created="Wed, 16 Dec 2009 11:42:51 +0000"><p>Looks like a good addition to me.  Will complete review and commit (possibly with some mods) this weekend assuming others are OK with the addition.</p></comment><comment id="12791454" author="ldiamond" created="Wed, 16 Dec 2009 17:18:37 +0000"><p>Oh my this is embarrassing.  You're right Luc.  I messed up the algo when copying it from my source.</p>

<p>When computing the Sortino ratio, you're eliminating the losses - so the code is correct for the Sortino ratio but is not truly semivariance.  </p>

<p>For anything below the mean, you should replace the value with the mean for the original distribution.  I had zero adjusted the distribution before I called the method.</p>

<p>I'll do a rewrite on this code and reattach it to this issue.  Thank you for reviewing the code!  I am so embarrassed!</p></comment><comment id="12792057" author="ldiamond" created="Thu, 17 Dec 2009 18:35:38 +0000"><p>Here's an update where the zero adjustment isn't presumed elsewhere.</p>

<p>I've also added more test cases.</p>

<p>Please feel free to contact me if you have any questions about this submission.</p>

<p>Thank you very much for your time and attention.</p></comment><comment id="12793669" author="psteitz" created="Tue, 22 Dec 2009 16:50:31 +0000"><p>First, thanks for the patch.   I am having a hard time validating the computing formula, based on the description in the references.  The formula provided in the Wikipedia reference appears to be different from what the patch is computing.   That is OK if what we want to compute is something different.  We can provide the formula directly in the javadoc.  But if there is a standard formula, we should try to implement something equivalent.</p>

<p>If the intent is to estimate the Sortino ratio, it would seem to me that the values above the mean should be excluded, rather than collapsed to the mean.  If I understand correctly what the code is trying to compute, these values should be excluded, not recoded.  The Sortino ratio also would seem to require another parameter - the "target" return value.  I guess this is why in your application you shift the mean to zero?  </p>

<p>Thanks again for the patch and sorry for the delay reviewing it. </p>

<p>Two comments on the code in the latest patch:<br/>
1)  the mean() function (actually the Mean statistic) will perform the array bounds check, so if you move that outside the if statement, you can eliminate the test function.<br/>
2)  If this is a widely used statistic and/or the computation becomes any more involved than the patch, we should implement a UnivariateStatisic class to represent it.</p>
</comment><comment id="12794241" author="ldiamond" created="Wed, 23 Dec 2009 22:04:35 +0000"><p>Hi Phil.  No worries - its the holiday season and it's an all volunteer project.  I find you and Luc to be very responsive all things given.</p>

<p>I actually find the process of contributing to the project very straightforward - it's intimidating until you try, but you both have been very easy to work with.</p>

<p>Short Answer - we'll be talking about a UnivariateStatistic really soon.</p>

<p>Long Answer - Addressing your questions (in no particular order)....</p>

<p>This link will help somewhat - <a href="http://thecuriousinvestor.com/2007/10/03/sortino-ratio/" class="external-link" rel="nofollow">http://thecuriousinvestor.com/2007/10/03/sortino-ratio/</a></p>

<p>1.  Some of the tests will occur twice in some of the functions.  I copied the four methods for variance to create the semi-variance methods - I'm having second thoughts about that since I really would only call the one that takes the array or possibly the array and the mean.  I've never needed to compute semi-variance for a part of an array.<br/>
I'm very flexible on this - I went for consistency rather than the best performance possible - feel free to make changes as you see fit.</p>

<p>2.  The Sortino ratio uses the downward standard deviation, which is the square root of the semivariance.  You definitely would want to keep the values above the mean and collapse them rather than exclude them altogether.<br/>
A simple explanation of the Sortino Ratio is probably in order to explain why.  <br/>
The Sortino Ratio comes from the Sharpe Ratio.  The Sharpe Ratio is used to rate how much reward you're getting for the risk you're taking.  Standard Deviation is the divisor.  Higher is better.<br/>
One criticism of the Sharpe Ratio is that returns in excess of the mean increase your standard deviation, but you don't getting big rewards from time to time - those periods shouldnt count.<br/>
An example helps here<br/>
Here's your monthly returns.<br/>
-1 <br/>
0<br/>
1<br/>
2<br/>
2<br/>
20</p>

<p>That 20% return is nice (I'd like a 20% monthly return too!) but that 20% makes your standard deviation higher and your Sharpe Ratio lower.<br/>
But nobody minds an occassional blowout return - that doesnt increase the risk of the fund in the view of people who prefer the Sortino Ratio.<br/>
Mean = 4, Variance = 52.333, Std Dev = 7.234</p>

<p>But for the semivariance calculation, that 20 becomes a 4 and stays in the set, so semivariance becomes 9.666 and the downward standard deviation becomes 3.109.  Dropping out the 20% isn't appropriate because it's part of your return.</p>

<p>That's a big difference in how your performance looks - 7.234 / 3.109 = 2.326.  Your fund now looks 2.3 times better than it did before!</p>


<p>That "other" parameter is often called the "minimum acceptable return".  Some people prefer to look at only when you lost money or would fail to meet some regular performance metric.  Pension managers get estimates on what they need to make that year and will look for people who have the best chance of making that return.</p>

<p>Instead of looking at the mean, they have a minimum return that they want to measure off of.<br/>
So, from the example above, let's say that the pension manager has a minimum acceptable return of 2%.<br/>
In that case, the 2% and 20% returns dont add into the semivariance so you get a semivariance of 8.333<br/>
This is where that zero initially came from.</p>

<p>Okay, now here's the little curveball that initially sounds bad but really turns into something easy:<br/>
Some years, you lose money.  The mean is below zero.  In those cases, that minimum acceptable return is "sometimes" the minimum of the mean and zero.  Rather than putting in code that automatically checks the mean and replaces the minimum acceptable return, if we have code that takes in the double array and the MAR, I think we're fine.</p>


<p>Okay, now that I've made a really long JIRA comment, what's the next step?</p>

<p>Should I rewrite as a UnivariateStatistic?  Should I just make the semivariance code two methods - one that takes the array and one that takes the array and a MAR?  Or has this entry been so long I've made you want to hit the eggnog?</p></comment><comment id="12794279" author="psteitz" created="Thu, 24 Dec 2009 00:03:50 +0000"><p>Thanks, Larry. I am happy that you are not finding it too hard to get started contributing.   We appreciate and welcome your contributions!</p>

<p>Now to the eggnog...er, I mean issue at hand....</p>

<p>I now (think I) understand what you are trying to compute and get why you leave the top-coded entries in place.  What now looks funny to me is to recode and then just compute ordinary variance.  That will not give you E(X - MAR)^2, but rather E(X - E(recoded X))^2.  I think you may need to directly compute the squared deviations from the MAR (or the mean with the top-coded entries contributing 0) instead of computing the variance on the recoded data.  That seems to be what your second reference above is describing.   Consider the influence of the original values greater than or equal to the mean in the result computed below:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">for</span> (<span class="code-object">int</span> loop = 0; loop &lt; values.length; loop++) {
    		<span class="code-keyword">if</span> (values [loop] &lt; mean)
   			semivariancevalues [loop] = values [loop];
    		<span class="code-keyword">else</span>
    			semivariancevalues [loop] = mean;
    	}
        <span class="code-keyword">return</span> VARIANCE.evaluate(semivariancevalues, mean);
</pre>
</div></div>

<p>The top-coded values will not contribute 0, but will instead contribute whatever their deviation is above the mean of the recoded dataset.  Is this what you really want?  It would seem to me that the more natural measure would be E(X - original mean)^2</p>

<p>Sorry to ask so many questions.  Could well be I am just misunderstanding what the statistic is trying to estimate. I just want to make sure we are computing something that we can easily describe and more importantly what is really useful.</p>

<p>Regarding the UnivariateStatistic, I think we should go ahead and do that and include the target as an optional constructor argument.</p></comment><comment id="12794740" author="psteitz" created="Sun, 27 Dec 2009 21:07:30 +0000"><p>The definition provided here: <a href="http://www.jstor.org/pss/2330500" class="external-link" rel="nofollow">http://www.jstor.org/pss/2330500</a> makes sense to me as a "semivariance" measure.  An unbiased estimator would be the sum of the squared deviations from the target of the values below the target divided by the total number of values minus one.</p></comment><comment id="12794944" author="ldiamond" created="Mon, 28 Dec 2009 21:57:20 +0000"><p>I'm working on a SemiVariance.java class and SemiVarianceTest.java class for the second try on this.  </p>

<p>It's a bit different working on code for public reuse than it is working on code for reuse within the firm or for your own use.</p>

<p>As regards to the biased vs unbiased thing, I feel that Variance does it right - start it off bias corrected and allow the caller to change it if it's appropriate for their use.</p>

<p>There's also an upside standard deviation which is the same thing except you accept only the data elements above the cutoff value.</p>

<p>I should have it ready tomorrow</p></comment><comment id="12795132" author="psteitz" created="Tue, 29 Dec 2009 20:13:53 +0000"><p>It might make sense to introduce another boolean constructor parameter to indicate upper- or lower- semivariance.  Assuming that lower semivariance is more common, lower could be the default.   Alternatively, this can always just be computed by subtracting the lower value from the unconditioned variance, so it might not be necessary.  Could always be added later.  </p></comment><comment id="12795454" author="ldiamond" created="Wed, 30 Dec 2009 21:37:24 +0000"><p>How do the files I'm about to attach look?  I believe this is the right direction - I still need to hook this into the class hierarchy, write up the documentation, and possibly put in something into the StatUtils class.</p>

<p>I went with an independent class that's a peer of Variance.  </p>

<p>This code does require Java 5 to build - I hope Math is building that way.</p></comment><comment id="12795456" author="ldiamond" created="Wed, 30 Dec 2009 21:39:22 +0000"><p>Please find attached the new class for SemiVariance and the testing class.  I'll get going on the remaining items I listed.  Can you please take a look and confirm this is the right direction please?</p>

<p>Thank you very much!<br/>
Larry Diamond</p>

<p>(PS - Happy New Year if we dont email before then!)</p></comment><comment id="12795553" author="psteitz" created="Thu, 31 Dec 2009 06:40:02 +0000"><p>Happy almost New Year to you, Larry!</p>

<p>Great progress here.  I like the the less smelly approach to defining upper and lower than a boolean.  I do have a couple of comments:</p>

<ul>
	<li>This class should extend either AbstractStorelessUnivatiateStatistic or AbstractUnivariateStatistic.  The former is for stats that do not require the full array of values to be provided and stored.  I am honestly not sure at this point whether we are going to be able to define increment() methods for this statistic, so it could be AbstractUnivariateStatistic is a better parent.  Once you do this, you can replace your argument checking with calls to the test() method defined in AbstractUnivariateStatistic.  Have a look at how Variance does this.</li>
</ul>


<ul>
	<li>The cutoff and direction should be optional constructor parameters.  The UnivariateStatistic interface requires that statistics have evaluate methods that require no parameters beyond the input array and subarray indices.  To implement this interface while supporting the other config options, you need to supply the config parameters in constructor arguments.</li>
</ul>


<ul>
	<li>I am still struggling a little with the definition.  This is why the "documentation goes here" bits would really help <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.gif" height="16" width="16" align="absmiddle" alt="" border="0"/>.  I was assuming that when you use a cutoff value in place of the mean, you compute deviations from the cutoff rather than from the mean.  That would correspond more neatly to the variance decomposition that I thought this statistic was supposed to measure.  If I have this right, you don't need to compute the mean when a cutoff value is provided and deviations should be computed against the cutoff.</li>
</ul>
</comment><comment id="12795667" author="ldiamond" created="Thu, 31 Dec 2009 20:35:10 +0000"><p>Thanks - I'll hopefully get this over the weekend.  Those annoying people who pay me a salary have been actually consuming me time recently and I havent gotten done what I hoped.</p>

<p>Clearly, step one is those "Documentation Goes Here" bits. Getting those in there would clarify your third point and I see is **<b>KEY</b>** to publicly reusable software.</p>

<p>I agree with not using AbstractStorelessUnivariateStatistic - I have to read over AbstractUnivariateStatistic to make sure I can use it.  I'd like to extend something in the package.</p>

<p>I'll look at the UnivariateStatistic to see the constructors.  I can see that you'd want to calculate Upward and Downward on the same data (and really the full variance too), although yeah, once you have one you automatically have the other (full - downward = upward).<br/>
Clearly, those documentation bits would make what I'm talking about much clearer to all readers of this post.</p>

<p>Thanks for the note on the not using boolean there.  There was just no way that I could have people try to remember which direction was true and which direction was false.  That's just silly and cruel.</p>
</comment><comment id="12798141" author="ldiamond" created="Fri, 8 Jan 2010 19:12:23 +0000"><p>Hi again.  </p>

<p>The class is now documented, hopefully I have made the concept easier to understand.  </p>

<p>Most of the work on this class has been documentation, most of the code changes are to ensure the class extends AbstractUnivariateStatistic and fills in any missing methods that AbstractUnivariateStatistic requires.</p>

<p>I've broken every last one of my test cases and I need to rework them from scratch now, but I think I'm at a point now where I can post the work for review.</p></comment><comment id="12799340" author="ldiamond" created="Tue, 12 Jan 2010 19:32:15 +0000"><p>And now the tests are complete!</p>

<p>I'm glad I did all this - the code itself was not difficult, explaining the concept and the documentation for the code and all the "stuff" around it was much more extensive than what I've worked with in the past.</p>

<p>Thank you very much - I hope my code makes it into the next release - it certainly was interesting, fun, and "cool" to do from my perspective.</p>

<p>Larry Diamond</p></comment><comment id="12799858" author="ldiamond" created="Wed, 13 Jan 2010 18:19:49 +0000"><p>Added more documentation for the class and some more test cases.</p>

<p>Hopefully, these additions will make the contribution easier to understand.</p></comment><comment id="12828062" author="psteitz" created="Mon, 1 Feb 2010 10:21:50 +0000"><p>Apologies for the response latency on the latest patch. Almost there. </p>

<p>I still think we should be computing deviations from the cutoff, rather than the mean when a cutoff is provided. The version of evaluate that takes a cutoff value should not require the mean as a parameter. We can also improve efficiency in evaluate(...h...) by computing the deviation and incrementing the SS only for values on the correct side of the cutoff. </p>

<p>We need to add references and formulas to the javadoc. I can take care of that as long as we agree that we are using the mathematical formula here for lower (aka downside) semivariance: <a href="http://www.jstor.org/pss/2330500" class="external-link" rel="nofollow">http://www.jstor.org/pss/2330500</a>. That formula says that the lower semivariance is the expected squared deviation of a value below the cutoff from the cutoff.</p>

<p>This can wait, but we should also see if we can get better numerics on the SS computation by using a two-pass algorithm as we do in Variance</p></comment><comment id="12828207" author="ldiamond" created="Mon, 1 Feb 2010 18:23:30 +0000"><p>No worries.  I'm on the apache mailing lists - you've been busy.</p>

<p>Sure - I'm on board.  How can I help make it happen?</p>
</comment><comment id="12833892" author="psteitz" created="Mon, 15 Feb 2010 17:17:44 +0000"><p>Last patch committed with the following changes in r910264:</p>

<ul>
	<li>per comments above, used deviations from cutoff rather than the mean when a cutoff is provided</li>
	<li>improved efficiency of evaluate loop</li>
	<li>added convenience evaluate methods (different sets of parameters)</li>
	<li>conform to Commons Math coding standards (CheckStyle)</li>
</ul>


<p>I did look into improved numerics similar to Variance on the sum of squares computation, but without assumptions on cutoff, I do not see a way to improve accuracy in the sum.  </p>

<p>Thanks for the patch!</p></comment><comment id="12836607" author="ldiamond" created="Mon, 22 Feb 2010 12:56:47 +0000"><p>Thank you!  </p>

<p>This was a great experience for me and I appreciate your time and effort in making this happen.  </p>

<p>I was more than happy to contribute and will probably do it again (I've done other quantitative work that I'd like to contribute).</p>

<p>I have a better idea on how to format the contribution from the initial proposal so it can be included quicker.</p>

<p>Thank you for your time and effort - this was a good learning experience for me.</p></comment></comments><attachments><attachment id="12430157" name="SemiVariance.java" size="11823" author="ldiamond" created="Wed, 13 Jan 2010 18:19:49 +0000"/><attachment id="12429774" name="SemiVariance.java" size="10056" author="ldiamond" created="Fri, 8 Jan 2010 19:12:23 +0000"/><attachment id="12429176" name="SemiVariance.java" size="4748" author="ldiamond" created="Wed, 30 Dec 2009 21:39:22 +0000"/><attachment id="12430156" name="SemiVarianceTest.java" size="2581" author="ldiamond" created="Wed, 13 Jan 2010 18:19:49 +0000"/><attachment id="12430036" name="SemiVarianceTest.java" size="1984" author="ldiamond" created="Tue, 12 Jan 2010 19:32:15 +0000"/><attachment id="12429177" name="SemiVarianceTest.java" size="1987" author="ldiamond" created="Wed, 30 Dec 2009 21:39:22 +0000"/><attachment id="12428325" name="StatUtils.java" size="34285" author="ldiamond" created="Thu, 17 Dec 2009 18:35:38 +0000"/><attachment id="12427770" name="StatUtils.java" size="34119" author="ldiamond" created="Fri, 11 Dec 2009 20:32:50 +0000"/><attachment id="12428326" name="StatUtilsTest.java" size="16505" author="ldiamond" created="Thu, 17 Dec 2009 18:35:38 +0000"/><attachment id="12427771" name="StatUtilsTest.java" size="16758" author="ldiamond" created="Fri, 11 Dec 2009 20:32:50 +0000"/><attachment id="12427772" name="patch.txt" size="12797" author="ldiamond" created="Fri, 11 Dec 2009 20:56:39 +0000"/><attachment id="12428324" name="patch2.txt" size="12262" author="ldiamond" created="Thu, 17 Dec 2009 18:35:38 +0000"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>12.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 15 Dec 2009 19:30:16 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150500</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160694</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-322] during ODE integration, the last event in a pair of very close event may not be detected</title><link>https://issues.apache.org/jira/browse/MATH-322</link><project id="12310485" key="MATH">Commons Math</project><description><p>When an events follows a previous one very closely, it may be ignored. The occurrence of the bug depends on the side of the bracketing interval that was selected. For example consider a switching function that is increasing around first event around t = 90, reaches its maximum and is decreasing around the second event around t = 135. If an integration step spans from 67.5 and 112.5, the switching function values at start and end of step will  have opposite signs, so the first event will be detected. The solver will find the event really occurs at 90.0 and will therefore truncate the step at 90.0. The next step will start from where the first step ends, i.e. it will start at 90.0. Let's say this step spans from 90.0 to 153.0. The switching function switches once again in this step.</p>

<p>If the solver for the first event converged to a value slightly before 90.0 (say 89.9999999), then the switch will not be detected because g(89.9999999) and g(153.0) are both negative.</p>

<p>This bug was introduced as of r781157 (2009-06-02) when special handling of events very close to step start was added.</p></description><environment><p>All</p></environment><key id="12442588">MATH-322</key><summary>during ODE integration, the last event in a pair of very close event may not be detected</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="luc">Luc Maisonobe</reporter><labels>
                    </labels><created>Sun, 6 Dec 2009 23:01:35 +0000</created><updated>Sat, 3 Apr 2010 21:48:07 +0100</updated><resolved>Sun, 6 Dec 2009 23:06:04 +0000</resolved><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12786733" author="luc" created="Sun, 6 Dec 2009 23:06:04 +0000"><p>fixed in subversion repository as of r887794</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>34217</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160695</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-321] Support for Sparse (Thin) SVD</title><link>https://issues.apache.org/jira/browse/MATH-321</link><project id="12310485" key="MATH">Commons Math</project><description><p>Current the SingularValueDecomposition implementation computes the full SVD.  However, for some applications, e.g. LSA, vision applications, only the most significant singular values are needed.  For these applications, the full decomposition is impractical, and for large matrices, computationally infeasible.   The sparse SVD avoids computing the unnecessary data, and more importantly, has significantly lower computational complexity, which allows it to scale to larger matrices.</p>

<p>Other linear algebra implementation have support for the sparse svd.  Both Matlab and Octave have the svds function.  C has SVDLIBC.  SVDPACK is also available in Fortran and C.  However, after extensive searching, I do not believe there is any existing Java-based sparse SVD implementation.  This added functionality would be widely used for any pure Java application that requires a sparse SVD, as the only current solution is to call out to a library in another language.</p></description><environment/><key id="12442524">MATH-321</key><summary>Support for Sparse (Thin) SVD</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status><statusCategory id="2" key="new" colorName="blue-gray"/><resolution id="-1">Unresolved</resolution><assignee username="-1">Unassigned</assignee><reporter username="david_jurgens">David Jurgens</reporter><labels>
                    </labels><created>Fri, 4 Dec 2009 23:10:34 +0000</created><updated>Mon, 16 Jul 2012 23:52:48 +0100</updated><version>2.1</version><version>2.2</version><due/><votes>1</votes><watches>2</watches><comments><comment id="12786250" author="jake.mannix" created="Fri, 4 Dec 2009 23:57:11 +0000"><p>I'm in the process of porting my sparse SVD work from decomposer (<a href="http://decomposer.googlecode.com" class="external-link" rel="nofollow">http://decomposer.googlecode.com</a>) to Apache Mahout (see ticket <a href="https://issues.apache.org/jira/browse/MAHOUT-180" title="port Hadoop-ified Lanczos SVD implementation from decomposer" class="issue-link" data-issue-key="MAHOUT-180"><del>MAHOUT-180</del></a> on the mahout JIRA), which has both non-parallized stream-based sparse SVD (using the generalized hebbian algorithm) as well as Hadoopified Lanczos and probabalistic partial decomposition.  These are designed to scale to tens of millions of dimensions (the GHA version), and to billions of dimensions or more (in the Hadoopified version - add more machines to your Hadoop cluster, and you can go higher!).</p></comment><comment id="12786673" author="luc" created="Sun, 6 Dec 2009 19:04:32 +0000"><p>There is some work ongoing (very slowly though, I'm sorry about that) to improve both SVD and eigen decomposition.</p>

<p>The current implementation is a simplified version of  lapack DSTEMR. Part of the simplification was to always compute all the eigenvalues, despite the original lapack function allowed to select some of them, either by a value range or by an index range. I want to remove this limitation and provide this feature in commons-math too.</p>

<p>This would be a first step towards partial SVD.</p>

<p>Any help on implementing this is welcome.</p></comment><comment id="12795630" author="luc" created="Thu, 31 Dec 2009 18:02:58 +0000"><p>A partial fix as been committed in subversion repository as of r894908.<br/>
The current implementation computes either the compact SVD (considering only positive singular values) or the truncated SVD (considering a user-specified maximal number of singular values).<br/>
The issue is however not completely solved yet as the underlying eigendecomposition still computes all eigenvalues,. The SVD upper layer only truncates this computation afterwards. This means lots of things are computed just to be discarded later.<br/>
I'll take care of this shortly.<br/>
Also note that this implementation still considers only dense matrices, not sparse ones. Any contributions for sparse SVD is welcome!</p></comment><comment id="12892271" author="luc" created="Mon, 26 Jul 2010 12:48:26 +0100"><p>SVD has been once again revamped for 2.1 and will probably be changed again soon.<br/>
We need to stabilize the implementation of regular SVD before working on this.<br/>
Postponing to 3.0</p></comment><comment id="13082192" author="psteitz" created="Wed, 10 Aug 2011 07:58:43 +0100"><p>This should be doable without breaking compat, so pushing to 3.1</p></comment><comment id="13415753" author="erans" created="Mon, 16 Jul 2012 23:52:48 +0100"><p>Setting to low priority. Patch welcome.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Fri, 4 Dec 2009 23:57:11 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2247</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>11085</customfieldvalue></customfieldvalues></customfield></customfields></item><item><title>[MATH-320] NaN singular value from SVD</title><link>https://issues.apache.org/jira/browse/MATH-320</link><project id="12310485" key="MATH">Commons Math</project><description><p>The following jython code<br/>
Start code</p>

<p>from org.apache.commons.math.linear import *</p>

<p>Alist = [<span class="error">&#91;1.0, 2.0, 3.0&#93;</span>,<span class="error">&#91;2.0,3.0,4.0&#93;</span>,<span class="error">&#91;3.0,5.0,7.0&#93;</span>]</p>

<p>A = Array2DRowRealMatrix(Alist)</p>

<p>decomp = SingularValueDecompositionImpl(A)</p>

<p>print decomp.getSingularValues()</p>

<p>End code</p>

<p>prints<br/>
array('d', <span class="error">&#91;11.218599757513008, 0.3781791648535976, nan&#93;</span>)<br/>
The last singular value should be something very close to 0 since the matrix<br/>
is rank deficient.  When i use the result from getSolver() to solve a system, i end <br/>
up with a bunch of NaNs in the solution.  I assumed i would get back a least squares solution.</p>

<p>Does this SVD implementation require that the matrix be full rank?  If so, then i would expect<br/>
an exception to be thrown from the constructor or one of the methods.</p>

</description><environment><p>Linux (Ubuntu 9.10) java version "1.6.0_16"</p></environment><key id="12440296">MATH-320</key><summary>NaN singular value from SVD</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="dieterv77">Dieter Vandenbussche</reporter><labels>
                    </labels><created>Tue, 10 Nov 2009 15:42:34 +0000</created><updated>Thu, 23 Jun 2011 21:02:56 +0100</updated><resolved>Thu, 31 Dec 2009 17:55:04 +0000</resolved><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="12776063" author="luc" created="Tue, 10 Nov 2009 20:23:02 +0000"><p>This is a real new bug, thanks for reporting it.</p>

<p>Before I look more precisely at it, could you do a quick check for me ?</p>

<p>If at the end of the SingularValueDecompositionImpl constructor, around line 118 in the java source file you change from:</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>  singularValues[i] = Math.sqrt(singularValues[i]);
</pre>
</div></div>
<p>to</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>  singularValues[i] = Math.sqrt(Math.max(0, singularValues[i]));
</pre>
</div></div>

<p>does the problem still appear on singular values and does the solver work properly ?</p></comment><comment id="12776449" author="dieterv77" created="Wed, 11 Nov 2009 13:37:27 +0000"><p>Yes, making that change fixes the singular values, printing the singular values now gives</p>

<p>array('d', <span class="error">&#91;11.218599757513008, 0.3781791648535976, 0.0&#93;</span>)</p>

<p>The unittests for the project still pass as well.</p>

<p>However, now the solve fails with a SinularMatrixException</p>

<p>Traceback (most recent call last):<br/>
  File "testdecomp.py", line 14, in &lt;module&gt;<br/>
    soln = solver.solve(<span class="error">&#91;5.0, 6.0,7.0&#93;</span>)<br/>
	at org.apache.commons.math.linear.SingularValueDecompositionImpl$Solver.solve(SingularValueDecompositionImpl.java:371)<br/>
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br/>
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)<br/>
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)<br/>
	at java.lang.reflect.Method.invoke(Method.java:597)</p>

<p>org.apache.commons.math.linear.SingularMatrixException: org.apache.commons.math.linear.SingularMatrixException: matrix is singular</p>

<p>This confuses me, i guess i'm assuming incorrectly that if the solve method can solve in the least squares sense, then it should be<br/>
able to handle singular matrices.  Is that just a restriction on the current solve methods and if so, are there plans to relax that restriction?</p>

<p>thanks very much for your time</p></comment><comment id="12776462" author="luc" created="Wed, 11 Nov 2009 14:21:59 +0000"><p>The method should solve the problem in the least square sense.<br/>
The fact it does not do it is not a restriction, it's a bug.<br/>
I'll have a look at it</p></comment><comment id="12792062" author="axelclk" created="Thu, 17 Dec 2009 18:43:44 +0000">
<p>Is this a similar problem for the getU() method?</p>

<p>  public void testU() {<br/>
      double[][] testMatrix = {<br/>
          </p>
{ 1.0 , 2.0 },<br/>
          { 1.0 , 2.0 }
<p> };<br/>
      SingularValueDecompositionImpl svd =<br/>
          new SingularValueDecompositionImpl(MatrixUtils.createRealMatrix(testMatrix));<br/>
// wrong result:<br/>
      assertEquals("Array2DRowRealMatrix{{-0.7071067811865472,NaN},{-0.7071067811865475,NaN}}", svd.getU().toString());<br/>
    }</p></comment><comment id="12792132" author="luc" created="Thu, 17 Dec 2009 21:21:11 +0000"><p>The two issues are probably related.<br/>
I'll look at both cases.</p></comment><comment id="12795490" author="luc" created="Wed, 30 Dec 2009 23:27:04 +0000"><p>A first round on fixing this bug has been committed in the subversion repository as of r894735.<br/>
Axel example is confirmed to be an occurrence of the same bug as Dieter example.</p>

<p>The SVD is now computed either as a compact SVD (only positive singular values considered) or as a truncated SVD<br/>
(max number of singular values to consider is user-specified). The solver simply applies the pseudo-inverse.</p>

<p>The fix is not considered complete yet because I think that the results provided by the solver are not really the ones<br/>
that give the smallest residuals. See for example the commented out parts of testMath320A in<br/>
SingularValueSolverTest.  Could you check this, please ?</p></comment><comment id="12795591" author="axelclk" created="Thu, 31 Dec 2009 11:57:52 +0000"><p>This statement should print the values of the original matrix approximately:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"> 
  <span class="code-object">System</span>.out.println(svd.getU().multiply(svd.getS()).multiply(svd.getVT()));
</pre>
</div></div> 

<p>This is true for</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"> 
    <span class="code-keyword">public</span> void testMath320A() {
</pre>
</div></div> 
<p>but not for</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"> 
    <span class="code-keyword">public</span> void testMath320B() {
</pre>
</div></div> 

<p>For reference values try wolfram alpha:<br/>
N[SingularValueDecomposition<span class="error">&#91;{{1,2},{1,2}}&#93;</span>]</p></comment><comment id="12795606" author="luc" created="Thu, 31 Dec 2009 14:47:19 +0000"><p>Thanks for the hint Axel!<br/>
The print statement is even not satisfying for testMath320A, the approximation is really too bad. I would expect about 13 exact figures, not 1 or 2.<br/>
The problem seems to be related to matrix U which is not correct. In fact, it is even not unitary (i.e. U^T^.U is not the identity matrix).<br/>
I'll look at this.</p></comment><comment id="12795628" author="luc" created="Thu, 31 Dec 2009 17:55:04 +0000"><p>This should be fixed in subversion repository now (r894908).<br/>
Thanks for reporting the bug and sorry for the delay.</p></comment><comment id="13054069" author="gsteri1" created="Thu, 23 Jun 2011 21:02:56 +0100"><p>Did anyone notice that the 3rd eigenvalue is negative? On my box the eigenvalue is -2.1028862676867717E-14. I am not sure what the fix was, but whatever problems existed still persist. </p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 10 Nov 2009 20:23:02 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>34206</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160696</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-319] Include "cobertura" target in "build.xml"</title><link>https://issues.apache.org/jira/browse/MATH-319</link><project id="12310485" key="MATH">Commons Math</project><description><p>Can we have the possibility to run "cobertura" on the unit tests?<br/>
This would provide useful hints when chasing bugs.</p></description><environment/><key id="12440112">MATH-319</key><summary>Include "cobertura" target in "build.xml"</summary><type id="5" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Wish</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="2">Won't Fix</resolution><assignee username="-1">Unassigned</assignee><reporter username="erans">Gilles</reporter><labels>
                    </labels><created>Sat, 7 Nov 2009 22:34:38 +0000</created><updated>Sun, 8 Nov 2009 13:56:53 +0000</updated><resolved>Sun, 8 Nov 2009 13:56:53 +0000</resolved><due/><votes>0</votes><watches>0</watches><comments><comment id="12774682" author="erans" created="Sat, 7 Nov 2009 22:42:53 +0000"><p>In case this could be useful, here is the "diff" of the current "build.xml" where I cloned the existing "test" and "compile.tests" targets to create equivalent ones but with the calls to "cobertura". This is for illustration purpose and surely needs to be adapted to the CM project layout policy. <span class="error">&#91;Namely, I introduced an environment variable (SOFCOMMON), but maven may do this differently.&#93;</span></p></comment><comment id="12774685" author="bayard" created="Sat, 7 Nov 2009 23:16:25 +0000"><p>Cobertura is already hooked up as a part of Maven2:</p>

<p><a href="http://commons.apache.org/math/cobertura/index.html" class="external-link" rel="nofollow">http://commons.apache.org/math/cobertura/index.html</a></p>

<p>Adding it to Ant is adding more duplication - generally the Ant builds tend to just be there to support non-Maven users in the basic act of compiling.</p></comment><comment id="12774780" author="erans" created="Sun, 8 Nov 2009 13:56:53 +0000"><p>Since the "build.xml" is somewhat deprecated, I remove my suggestion.</p>

<p>I've just discovered that I must do<br/>
  mvn cobertura:cobertura<br/>
to get what I wanted.</p>

<p>Sorry for the noise,<br/>
Gilles</p></comment></comments><attachments><attachment id="12424271" name="build.xml.diff" size="3248" author="erans" created="Sat, 7 Nov 2009 22:42:53 +0000"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sat, 7 Nov 2009 23:16:25 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150499</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160697</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-318] wrong result in eigen decomposition</title><link>https://issues.apache.org/jira/browse/MATH-318</link><project id="12310485" key="MATH">Commons Math</project><description><p>Some results computed by EigenDecompositionImpl are wrong. The following case computed by Fortran Lapack fails with version 2.0</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
    <span class="code-keyword">public</span> void testMathpbx02() {

        <span class="code-object">double</span>[] mainTridiagonal = {
        	  7484.860960227216, 18405.28129035345, 13855.225609560746,
        	 10016.708722343366, 559.8117399576674, 6750.190788301587, 
        	    71.21428769782159
        };
        <span class="code-object">double</span>[] secondaryTridiagonal = {
        	 -4175.088570476366,1975.7955858241994,5193.178422374075, 
        	  1995.286659169179,75.34535882933804,-234.0808002076056
        };

        <span class="code-comment">// the reference values have been computed using routine DSTEMR
</span>        <span class="code-comment">// from the fortran library LAPACK version 3.2.1
</span>        <span class="code-object">double</span>[] refEigenValues = {
        		20654.744890306974412,16828.208208485466457,
        		6893.155912634994820,6757.083016675340332,
        		5887.799885688558788,64.309089923240379,
        		57.992628792736340
        };
        RealVector[] refEigenVectors = {
        		<span class="code-keyword">new</span> ArrayRealVector(<span class="code-keyword">new</span> <span class="code-object">double</span>[] {-0.270356342026904, 0.852811091326997, 0.399639490702077, 0.198794657813990, 0.019739323307666, 0.000106983022327, -0.000001216636321}),
        		<span class="code-keyword">new</span> ArrayRealVector(<span class="code-keyword">new</span> <span class="code-object">double</span>[] {0.179995273578326,-0.402807848153042,0.701870993525734,0.555058211014888,0.068079148898236,0.000509139115227,-0.000007112235617}),
        		<span class="code-keyword">new</span> ArrayRealVector(<span class="code-keyword">new</span> <span class="code-object">double</span>[] {-0.399582721284727,-0.056629954519333,-0.514406488522827,0.711168164518580,0.225548081276367,0.125943999652923,-0.004321507456014}),
        		<span class="code-keyword">new</span> ArrayRealVector(<span class="code-keyword">new</span> <span class="code-object">double</span>[] {0.058515721572821,0.010200130057739,0.063516274916536,-0.090696087449378,-0.017148420432597,0.991318870265707,-0.034707338554096}),
        		<span class="code-keyword">new</span> ArrayRealVector(<span class="code-keyword">new</span> <span class="code-object">double</span>[] {0.855205995537564,0.327134656629775,-0.265382397060548,0.282690729026706,0.105736068025572,-0.009138126622039,0.000367751821196}),
        		<span class="code-keyword">new</span> ArrayRealVector(<span class="code-keyword">new</span> <span class="code-object">double</span>[] {-0.002913069901144,-0.005177515777101,0.041906334478672,-0.109315918416258,0.436192305456741,0.026307315639535,0.891797507436344}),
        		<span class="code-keyword">new</span> ArrayRealVector(<span class="code-keyword">new</span> <span class="code-object">double</span>[] {-0.005738311176435,-0.010207611670378,0.082662420517928,-0.215733886094368,0.861606487840411,-0.025478530652759,-0.451080697503958})
        };

        <span class="code-comment">// the following line triggers the exception
</span>        EigenDecomposition decomposition =
            <span class="code-keyword">new</span> EigenDecompositionImpl(mainTridiagonal, secondaryTridiagonal, MathUtils.SAFE_MIN);

        <span class="code-object">double</span>[] eigenValues = decomposition.getRealEigenvalues();
        <span class="code-keyword">for</span> (<span class="code-object">int</span> i = 0; i &lt; refEigenValues.length; ++i) {
            assertEquals(refEigenValues[i], eigenValues[i], 1.0e-3);
            <span class="code-keyword">if</span> (refEigenVectors[i].dotProduct(decomposition.getEigenvector(i)) &lt; 0) {
                assertEquals(0, refEigenVectors[i].add(decomposition.getEigenvector(i)).getNorm(), 1.0e-5);
            } <span class="code-keyword">else</span> {
                assertEquals(0, refEigenVectors[i].subtract(decomposition.getEigenvector(i)).getNorm(), 1.0e-5);
            }
        }

    }
</pre>
</div></div></description><environment/><key id="12440038">MATH-318</key><summary>wrong result in eigen decomposition</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="luc">Luc Maisonobe</reporter><labels>
                    </labels><created>Fri, 6 Nov 2009 15:09:36 +0000</created><updated>Sat, 3 Apr 2010 21:49:07 +0100</updated><resolved>Fri, 6 Nov 2009 15:12:47 +0000</resolved><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12774307" author="luc" created="Fri, 6 Nov 2009 15:12:47 +0000"><p>fixed in subversion repository as of r833433.<br/>
Thanks again to Dimitri would found and fixed this bug.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>34177</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160698</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-317] Perf improvement: OpenMapRealVector should iterate over smaller of two OMRVs, and should call ArrayRealVector.getDataRef() when possible</title><link>https://issues.apache.org/jira/browse/MATH-317</link><project id="12310485" key="MATH">Commons Math</project><description><p>In RealVector methods which take other RealVector parameters, OpenMapRealVector should check to see which vector has more entries, and iterate over the smaller of the two, when possible.  When the other vector is an ArrayRealVector, it should be explicitly cast to this, and getDataRef() should be called, to avoid an unnecessary and possibly large array copy.</p></description><environment><p>all</p></environment><key id="12439701">MATH-317</key><summary>Perf improvement: OpenMapRealVector should iterate over smaller of two OMRVs, and should call ArrayRealVector.getDataRef() when possible</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="jake.mannix">Jake Mannix</reporter><labels>
                    </labels><created>Mon, 2 Nov 2009 20:38:57 +0000</created><updated>Sat, 3 Apr 2010 21:49:38 +0100</updated><resolved>Sun, 27 Dec 2009 20:11:06 +0000</resolved><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12772664" author="jake.mannix" created="Mon, 2 Nov 2009 20:39:57 +0000"><p>Unit tests all pass, and as with <a href="https://issues.apache.org/jira/browse/MATH-316" title="Perf improvement: ArrayRealVector makes superfluous copies and often doesn&#39;t optimally operate on array values" class="issue-link" data-issue-key="MATH-316"><del>MATH-316</del></a>, this is an internal performance-only fix, so no new unit tests are added.</p></comment><comment id="12794728" author="luc" created="Sun, 27 Dec 2009 20:11:06 +0000"><p>This was resolved in subversion repository as of r890159 by Bill Barker two weeks ago, using a slightly modified version of the patch.<br/>
Thanks for the patch.</p></comment></comments><attachments><attachment id="12423850" name="MATH-317.patch" size="10531" author="jake.mannix" created="Mon, 2 Nov 2009 20:39:57 +0000"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 27 Dec 2009 20:11:06 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150498</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160699</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-316] Perf improvement: ArrayRealVector makes superfluous copies and often doesn't optimally operate on array values</title><link>https://issues.apache.org/jira/browse/MATH-316</link><project id="12310485" key="MATH">Commons Math</project><description><p>As discussed in the mailing list, things like ArrayRealVector#add:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
            <span class="code-object">double</span>[] out = <span class="code-keyword">new</span> <span class="code-object">double</span>[data.length];
            <span class="code-keyword">for</span> (<span class="code-object">int</span> i = 0; i &lt; data.length; i++) {
                out[i] = data[i] + v.getEntry(i);
            }
            <span class="code-keyword">return</span> <span class="code-keyword">new</span> ArrayRealVector(out);
</pre>
</div></div>
<p>can be improved in the inner loop by simply</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
            <span class="code-object">double</span>[] out = out.clone();
            <span class="code-keyword">for</span> (<span class="code-object">int</span> i = 0; i &lt; data.length; i++) {
                out[i] += v.getEntry(i);
            }
            <span class="code-keyword">return</span> <span class="code-keyword">new</span> ArrayRealVector(out);
</pre>
</div></div>

<p>Which cuts down on array accesses.</p>

<p>Even more importantly, the last return line should pass in the boolean false, for "shallow copy", or else this whole temporary array is being copied again and then the original discarded.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
  <span class="code-keyword">return</span> <span class="code-keyword">new</span> ArrayRealVector(out, <span class="code-keyword">false</span>);
</pre>
</div></div></description><environment><p>all</p></environment><key id="12439683">MATH-316</key><summary>Perf improvement: ArrayRealVector makes superfluous copies and often doesn't optimally operate on array values</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="jake.mannix">Jake Mannix</reporter><labels>
                    </labels><created>Mon, 2 Nov 2009 17:47:52 +0000</created><updated>Sat, 3 Apr 2010 21:50:01 +0100</updated><resolved>Sun, 27 Dec 2009 20:21:59 +0000</resolved><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12772572" author="jake.mannix" created="Mon, 2 Nov 2009 17:48:26 +0000"><p>or course, out.clone() should be data.clone();</p></comment><comment id="12772597" author="jake.mannix" created="Mon, 2 Nov 2009 18:50:46 +0000"><p>All unit tests pass after patch is applied, and since it has no new features, only perf improvements, no new unit tests are attached.  Only ArrayRealVector.java is modified.</p>

<p>In addition to what is described in the bug, the idiom of implementing mapXXX as return copy().mapXXXtoSelf() which is followed in OpenMapRealVector is copied here, as these methods all had the "return new ArrayRealVector(v);" extra copy bug and had to be modified anyways.</p></comment><comment id="12794732" author="luc" created="Sun, 27 Dec 2009 20:21:59 +0000"><p>This was solved as part of <a href="https://issues.apache.org/jira/browse/MATH-312" title="RealVector interface could use some iterators (dense and sparse) and generic map() and collect() methods." class="issue-link" data-issue-key="MATH-312"><del>MATH-312</del></a> since the provided patch included both fixes.</p></comment><comment id="12794777" author="jake.mannix" created="Mon, 28 Dec 2009 07:53:37 +0000"><p>Is the proper copy part of this fixed?</p>

<p>I still see in trunk places where we </p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
  <span class="code-object">double</span>[] out = <span class="code-comment">// stuff      
</span>  <span class="code-keyword">return</span> <span class="code-keyword">new</span> ArrayRealVector(out);
</pre>
</div></div>

<p>instead of </p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
  <span class="code-object">double</span>[] out = <span class="code-comment">// stuff
</span>  <span class="code-keyword">return</span> <span class="code-keyword">new</span> ArrayRealVector(out, <span class="code-keyword">false</span>);
</pre>
</div></div>

<p>The default behavior for ArrayRealVector is to deep copy arrays passed in, which needs to be overridden here, no?</p>

<p>See ArrayRealVector.add,  ArrayRealVector.subtract, in particular.  I didn't pick through to see if this caught all of them.</p>

<p>It's entirely possible this was my fault and I missed them in my patches for the other issues which covered some of this.</p></comment><comment id="12794827" author="luc" created="Mon, 28 Dec 2009 15:32:04 +0000"><p>The last few forgotten copies should have been fixed now I hope.<br/>
I have also added a few more constructors using RealVectors and improved test coverage which lies now somewhere between 99% and 100% for this class.</p></comment></comments><attachments><attachment id="12423841" name="MATH-316.patch" size="16562" author="jake.mannix" created="Mon, 2 Nov 2009 18:50:46 +0000"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 27 Dec 2009 20:21:59 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150497</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160700</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-315] GeneticAlgorithm: Register number of populations evolved during evolve()</title><link>https://issues.apache.org/jira/browse/MATH-315</link><project id="12310485" key="MATH">Commons Math</project><description><p>GeneticAlgorithm: Register number of populations evolved during evolve() is useful knowledge to have after an evole()-session is done.</p></description><environment/><key id="12439480">MATH-315</key><summary>GeneticAlgorithm: Register number of populations evolved during evolve()</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="mikl">Mikkel Meyer Andersen</reporter><labels>
                    </labels><created>Fri, 30 Oct 2009 03:11:12 +0000</created><updated>Sat, 3 Apr 2010 21:50:35 +0100</updated><resolved>Sun, 22 Nov 2009 19:53:49 +0000</resolved><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>0</watches><timeoriginalestimate seconds="600">10m</timeoriginalestimate><timeestimate seconds="600">10m</timeestimate><comments><comment id="12771748" author="mikl" created="Fri, 30 Oct 2009 03:11:43 +0000"><p>Patch to get the desired functionality.</p></comment><comment id="12781203" author="psteitz" created="Sun, 22 Nov 2009 19:53:49 +0000"><p>Patch applied in r883132, with following changes:</p>
<ul>
	<li>improved javadoc</li>
	<li>added a test case</li>
</ul>


<p>Thanks!</p></comment></comments><attachments><attachment id="12423653" name="patch" size="1437" author="mikl" created="Fri, 30 Oct 2009 03:11:43 +0000"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 22 Nov 2009 19:53:49 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150496</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160701</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-314] New sparse vector implementation: int[] indices; double[] values;</title><link>https://issues.apache.org/jira/browse/MATH-314</link><project id="12310485" key="MATH">Commons Math</project><description><p>OpenMapRealVector is nice for fast random access, but if all you do with your sparse vectors is dot them together, add them onto dense vectors, and so forth, the representation as just an array of indices and an array of values is more compact, and faster (for these operations).  </p>

<p>It becomes prohibitive to do modification, however, so the usual thing is to have them be immutable - use an OpenMapRealVector while modifing, then seal them up into the constructor for an IntDoubleArrayVector form for fast iteration and so forth.</p></description><environment><p>all</p></environment><key id="12439381">MATH-314</key><summary>New sparse vector implementation: int[] indices; double[] values;</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="7">Later</resolution><assignee username="-1">Unassigned</assignee><reporter username="jake.mannix">Jake Mannix</reporter><labels>
                    </labels><created>Thu, 29 Oct 2009 08:15:45 +0000</created><updated>Sat, 3 Apr 2010 21:50:55 +0100</updated><resolved>Mon, 25 Jan 2010 21:41:12 +0000</resolved><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="12773635" author="jake.mannix" created="Wed, 4 Nov 2009 20:36:54 +0000"><p>I've got a patch which has an implementation of this, but it inherits from AbstractRealVector, which is in <a href="https://issues.apache.org/jira/browse/MATH-312" title="RealVector interface could use some iterators (dense and sparse) and generic map() and collect() methods." class="issue-link" data-issue-key="MATH-312"><del>MATH-312</del></a>'s patch.</p></comment><comment id="12794726" author="luc" created="Sun, 27 Dec 2009 20:07:34 +0000"><p>As <a href="https://issues.apache.org/jira/browse/MATH-312" title="RealVector interface could use some iterators (dense and sparse) and generic map() and collect() methods." class="issue-link" data-issue-key="MATH-312"><del>MATH-312</del></a> as been resolved recently, could you provide the patch you told us about ?</p></comment><comment id="12794776" author="jake.mannix" created="Mon, 28 Dec 2009 07:46:30 +0000"><p>Sure thing, let me make sure it's up-to-date and works in the general case.  I see there are some more RealVector methods which could be implemented in AbstractRealVector to cut down on cutting and pasting (isInfiniite(), isNan(), ebeXXX, projection, the norms).  </p>

<p>These are folded that into this patch, because otherwise all those methods are basically copy/pasted from the other vectors (they just use the iterators, which allows them to live in AbstractRealVector).  </p>

<p>My current patch for this isn't fully tested for all the mutating methods (in particular, growing efficiently is moderately nontrivial), but I'll try to whip it into shape.</p></comment><comment id="12804223" author="luc" created="Sun, 24 Jan 2010 10:38:10 +0000"><p>I don't remember the status of this issue yet.<br/>
Jake, did you provide another patch that I again forgot to apply ?</p></comment><comment id="12804667" author="tdunning" created="Mon, 25 Jan 2010 19:39:38 +0000">
<p>I just asked Jake about this off-list and his reply was that this functionality has been incorporated in the Mahout math package.  This decreased his level of urgency below the critical level required to get a patch into good shape and he is reluctant to give you guys an 80% done patch since it would just increase the work for you.</p>

</comment><comment id="12804738" author="luc" created="Mon, 25 Jan 2010 21:41:11 +0000"><p>Closing problem for now as issuer doesn't need this feature anymore and as there are other sparse implementation available in commons-math for general use.<br/>
Will be implemented later if someone else asks again for it.</p></comment></comments><issuelinks><issuelinktype id="10032"><name>Blocker</name><inwardlinks description="is blocked by"><issuelink><issuekey id="12439377">MATH-312</issuekey></issuelink></inwardlinks></issuelinktype></issuelinks><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 27 Dec 2009 20:07:34 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150495</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160702</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-313] Functions could be more object-oriented without losing any power.</title><link>https://issues.apache.org/jira/browse/MATH-313</link><project id="12310485" key="MATH">Commons Math</project><description><p>UnivariateRealFunction, for example, is a map from R to R.  The set of such functions has tons and tons of structure: in addition to being an algebra, equipped with +,-,*, and scaling by constants, it maps the same space into itself, so it is composable, both pre and post.</p>

<p>I'd propose we add:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
  UnivariateRealFunction plus(UnivariateRealFunction other);
  UnivariateRealFunction minus(UnivariateRealFunction other);
  UnivariateRealFunction times(UnivariateRealFunction other);
  UnivariateRealFunction times(<span class="code-object">double</span> scale);
  UnivariateRealFunction preCompose(UnivariateRealFunction other);
  UnivariateRealFunction postCompose(UnivariateRealFunction other);
</pre>
</div></div>

<p>to the interface, and then implement them in an AbstractUnivariateRealFunction base class.  No implementer would need to notice, other than switching to extend this class rather than implement UnivariateRealFunction.</p>

<p>Many people don't need or use this, but... it makes for some powerfully easy code:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">UnivariateRealFunction gaussian = Exp.preCompose(Negate.preCompose(Pow2));</pre>
</div></div>

<p>which is even nicer when done anonymously passing into a map/collect method (a la <a href="https://issues.apache.org/jira/browse/MATH-312" title="RealVector interface could use some iterators (dense and sparse) and generic map() and collect() methods." class="issue-link" data-issue-key="MATH-312"><del>MATH-312</del></a>).</p></description><environment><p>all</p></environment><key id="12439380">MATH-313</key><summary>Functions could be more object-oriented without losing any power.</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="jake.mannix">Jake Mannix</reporter><labels>
                    </labels><created>Thu, 29 Oct 2009 08:08:49 +0000</created><updated>Sat, 3 Apr 2010 21:51:28 +0100</updated><resolved>Sat, 12 Dec 2009 23:16:41 +0000</resolved><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12771647" author="luc" created="Thu, 29 Oct 2009 22:03:55 +0000"><p>I strongly disagree with this proposal.<br/>
UnivariateRealFunction is a very basic interface and used in many place, for exemple in root solvers.<br/>
Almost all uses I have seen for the interface are people declaring their existing class implements it only to be able to use it in a solver. These users class may already belong to a class hierarchy. Java does not support multiple inheritance (which is a good thing), so in many rxisting use cases (in fact all the cases I have seen myself) extending the class would be a real problem.</p></comment><comment id="12771651" author="jake.mannix" created="Thu, 29 Oct 2009 22:09:30 +0000"><p>At least within Commons-math, nowhere do people have complex classes which implement UnivariateRealFunction, they have static inner classes (or anonymous inner classes) which do the work for them, and I was able to replace all such occurences with AbstractUnivariateRealFunction without much trouble.  I've already got a patch which easily takes care of this throughout all of commons-math.</p>

<p>Are you saying that people outside of commons-math, who are using it, have their solver classes implement a function interface as well?</p></comment><comment id="12771672" author="jake.mannix" created="Thu, 29 Oct 2009 22:50:11 +0000"><p>Of course, the easy alternative, if we really want to keep this interface the way it is, is to extend it with an interface like "AlgebraicallyComposableUnivariateRealFunction" (with a better name), which does have an abstract implementation (although we really don't want AbstractAlgebraicallyComposalbeUnivariateRealFunction as a class name!!!), and people can have both choices, and in fact, a concrete impl - DelegatingAlgebraicallyComposableUnivariateRealFunction - could be implemented by taking a UnivariateRealFunction as a constructor arg, and delegates value() to the delegate, and this way you can easily transition between using Functions as genuine objects, and as an interface on your more complex object as well, and you have the best of both worlds.</p></comment><comment id="12771681" author="luc" created="Thu, 29 Oct 2009 23:04:53 +0000"><p>I'm not aware of people implementing their solver classes, but they implement the function they want to solve. The fact is that in many applications, what users want to find is not the root of an arbitrary mathematical function that can be composed at will. They want to find the root of a function which already has a semantic and despite its free parameter and output value both belong to R in an abstract view, they really belong to different semantic fields, for example a time in seconds for the input and a distance in meters for the output.</p>

<p>I agree with a separate interface extending the existing one.</p></comment><comment id="12771695" author="jake.mannix" created="Thu, 29 Oct 2009 23:35:29 +0000"><p>I can totally see that many people would not care about composing the function with other functions, but just as many people don't care about doing anything with vectors other than adding them or dot()'ing them doesn't mean that giving them the ability to do so isn't a good thing, right?  From a design perspective, what are the real cases where someone has a class which implements UnivariateRealFunction, but also extends some other class?  You mentioned solvers or root finders, but all the solvers take functions which are passed into them, so they're ok, these could be subclasses of AbstractUnivariateRealFunction very easily.  And even functions which go from one domain to another can be composed with functions which go from the target domain to itself.</p>

<p>But if people really are used to the interface living the way it is, that's fine, in this case (unlike in the RealVector case) it's easy to extend the interface, so I'll draw up a patch to do it in this non-invasive way.</p></comment><comment id="12771957" author="luc" created="Fri, 30 Oct 2009 14:36:26 +0000"><p>I guess you didn't get my point so I'll try to be more explicit.<br/>
I don't speak about solvers classes, which users almost never extend. I speak about the functions that are solved, which are what the user must implement.<br/>
Of course, if a solver accepts an UnivariateRealFunction as parameter it will accept an AbstractUnivariateRealFunction without any change, but it's not the point.</p>

<p>Consider a user with an existing AbstractSensor and a complete classes hierarchy extending this abstract class: OpticalSensor, ContactSensor, HeatSensor, SmellSensor, TelepathicSensor, QuanticSensor, MagicSensor ... One of these derived class, say HeatSensor also implements UnivariateRealFunction because it is used somewhere to find when the heat crosses a desired value:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> class HeatSensor <span class="code-keyword">extends</span> AbstractSensor <span class="code-keyword">implements</span> UnivariateRealFunction {

  <span class="code-keyword">public</span> <span class="code-object">double</span> getHeat(<span class="code-object">double</span> controlValue) {
     <span class="code-comment">// some computation
</span>  }

   <span class="code-keyword">public</span> <span class="code-object">double</span> f(<span class="code-object">double</span> controlValue) {
      <span class="code-keyword">return</span> getHeat(controlValue) - desiredHeat;
   }

}
</pre>
</div></div>

<p>The previous code is sufficient to find the controlValue that should be used to get the desired heat by providing an instance of this user class to one of the existing commons-math solvers. This user really doesn't want to implement seven methods when he really needs only one. The contract for the solvers is that the must be able to call f, that's all. HeatSensor cannot extend AbstractUnivariateRealFunction because it already extends AbstractSensor.</p>

<p>There is a big conceptual difference between interfaces that users are almost forced to implement because they will provide instances to commons-math algorithms and interfaces that are rather extension points for which we provide one or a few implementations but want to let users add their own. In the first set, you will find UnivariateRealfunction (analytical), MutationPolicy (genetics), RealMatrixChangingVisitor (linear), FirstOrderDifferentialEquation (ode) ... In the second set you will find RealVector, RealMatrix, ODEIntegrator ...</p>

<p>The interfaces from the first step should remain as simple as possible.</p>

<p>Could you on your side present real use cases for functions composition that could not be handled by a simple:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
UnivariateRealFunction gaussian = <span class="code-keyword">new</span> UnivariateRealFunction {
  <span class="code-keyword">public</span> <span class="code-object">double</span> f(<span class="code-object">double</span> t) {
      <span class="code-keyword">return</span> Exp.f((Negate.f(Pow2.f(t))));
  }
}
</pre>
</div></div>
</comment><comment id="12772090" author="jake.mannix" created="Fri, 30 Oct 2009 21:10:14 +0000"><p>Ok, if people are typically out there using commons-math and implementing all the interfaces in the analysis package in classes which have totally separate functionalities and class hierarchies like you're describing (which is what I was questioning whether it happens - I misunderstood you to be talking about the Solvers themselves), then regardless of whether this is good design or not, the interface should be left alone, and can be, even while allowing this functionality for "throwaway functions".</p>

<p>I was thinking of the interface as primarily for lightweight callback-like functions, which are effectively operated <em>with</em>, not operated <em>on</em>, which is why having the ability to make method calls like:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
RealVector v = w.map(Exp.preCompose(Negate.preCompose(Pow2)));
</pre>
</div></div>

<p>as opposed to this</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
RealVector v = w.map(<span class="code-keyword">new</span> UnivariateRealFunction() {
  <span class="code-keyword">public</span> <span class="code-object">double</span> value(<span class="code-object">double</span> t) <span class="code-keyword">throws</span> FunctionEvaluationException {
    <span class="code-keyword">return</span> Exp.value(Negate.value(Pow2.value(t))));
  });
</pre>
</div></div>

<p>and instead puts the same boilerplate for composing functions, adding them, subtracting them, multiplying them and scaling them away in an abstract class instead of littering user code.</p>

<p>So like I said - knowing that these interfaces were designed to be used as providing APIs for implementers to toss their own class instances into solvers and other c-math algorithms (which I did not know, just looking at the set of interfaces themselves), it's easy enough to leave the interface alone and make a new one which extends from it which is designed for "pure functions on Real numbers", that really are meant to be nothing <b>other</b> than a function.  Maybe that's a better name for this interface: RealPureFunction.  But perhaps it should <b>only</b> be an abstract class then, since you don't expect anyone to be implmeneting their own composition methods.</p></comment><comment id="12772259" author="luc" created="Sat, 31 Oct 2009 16:14:19 +0000"><p>This consensus is fine to me.<br/>
If you want to provide a patch, I'll be glad to apply it. What about ComposableFunction or CompositableFunction for the name (I don't know which one is real english) ? It could be an interface with an abstract class underneath or simply an abstract class. I agree that not many people would want to provide their own implementation for composition.</p></comment><comment id="12772262" author="jake.mannix" created="Sat, 31 Oct 2009 17:30:23 +0000"><p>Excellent, I can whip up a patch for that sometime this weekend - I think ComposableFunction is closer to real english, that can work.  </p>

<p>Some other things pure function objects can be used for, which I thought might be nice to provide in the abstract implementation is the following: if you have a univariate function, you can produce a MultiVariateRealFunction by applying the input function on each entry of the multivariate case, and then combining the values together, either by default by addition, or by providing a BinaryRealFunction to combine them:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> <span class="code-keyword">interface</span> BinaryRealFunction {
<span class="code-comment">// useful special <span class="code-keyword">case</span> of MultivariateRealFunction <span class="code-keyword">for</span> two variables
</span>  <span class="code-object">double</span> value(<span class="code-object">double</span> d1, <span class="code-object">double</span> d2);
<span class="code-comment">// a binary real function, when you fix one of the two arguments to be some value, becomes a UnivariateRealFunction
</span>  ComposableFunction fix2ndArgument(<span class="code-object">double</span> d2);
  ComposableFunction fix1stArgument(<span class="code-object">double</span> d1);
}
</pre>
</div></div>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> <span class="code-keyword">interface</span> ComposableFunction <span class="code-keyword">extends</span> UnivariateRealFunction {

    ComposableFunction preCompose(<span class="code-keyword">final</span> UnivariateRealFunction f);

    ComposableFunction postCompose(<span class="code-keyword">final</span> UnivariateRealFunction f);

/*
 * returns a function implemented as:  combiner.value(<span class="code-keyword">this</span>.value(input), f.value(input));
 */
    ComposableFunction combine(<span class="code-keyword">final</span> UnivariateRealFunction f, <span class="code-keyword">final</span> BinaryRealFunction combiner);

/****
 * common algebraically sensible use cases <span class="code-keyword">for</span> the above combine method:
 ****/

    ComposableFunction plus(UnivariateRealFunction f);

    ComposableFunction minus(UnivariateRealFunction f);

    ComposableFunction times(UnivariateRealFunction f);

    ComposableFunction scale(<span class="code-keyword">final</span> <span class="code-object">double</span> scaleFactor);

/*
 * generates a function on <span class="code-object">double</span>[] inputs as:
 * initialize result = initialValue;
 * then as you iterate: result = combiner.value(result, <span class="code-keyword">this</span>.value(nextMultivariateEntry) ); 
 * <span class="code-keyword">return</span> result;
 */
  MultivariateRealFunction asCollector(<span class="code-keyword">final</span> BinaryRealFunction combiner, <span class="code-keyword">final</span> <span class="code-object">double</span> initialValue);

/*
 * use initialValue as 0 as a simple <span class="code-keyword">default</span>:
 */
  MultivariateRealFunction asCollector(<span class="code-keyword">final</span> BinaryRealFunction combiner);

/*
 * use Addition as combiner as a simple <span class="code-keyword">default</span>:
 */
  MultivariateRealFunction asCollector(<span class="code-keyword">final</span> <span class="code-object">double</span> initialValue);

/*
 * initialValue = 0; combiner = Addition as the most <span class="code-keyword">default</span> <span class="code-keyword">default</span>
 */
  MultivariateRealFunction asCollector();
}
</pre>
</div></div>

<p>Maybe I can just put them all in the same patch with abstract base class definitions which have the full implementation of what I'm talking about, since it's now "non-invasive" as far as the analysis package is concerned, and doesn't affect any other classes, and it could be useful in the implementation of AbstractRealVector, among other places.</p></comment><comment id="12772263" author="luc" created="Sat, 31 Oct 2009 17:50:09 +0000"><p>For now, I'll prefer to avoid BinaryRealFunction until with have a clear use case for it.<br/>
Adding layers and layers of pure object oriented features should be done only when really needed. Commons-math try to stay pragmatic. It is a component dedicated to efficient computation not pure theoretical constructs.</p></comment><comment id="12772273" author="psteitz" created="Sat, 31 Oct 2009 19:08:35 +0000"><p>I agree with Luc on limiting abstract infrastructure to what we have practical use cases for.  See "guiding principles" on the home page.  I am +0 on adding ComposableFunction.  One thing to consider is do we require that Composable functions be total and finite-valued.  If not, documenting and debugging NaN/Inf/Exceptions could be tricky for users.  Also, do we require that composition be only "with" ComposableFunctions?  If yes to the second question, you don't need both pre- and postCompose.  I guess another thing to think about is inverses.  I am interested in seeing more on practical use cases for these things.</p></comment><comment id="12772285" author="jake.mannix" created="Sat, 31 Oct 2009 21:06:02 +0000"><blockquote><p>I agree with Luc on limiting abstract infrastructure to what we have practical use cases for. See "guiding principles" on the home page.</p></blockquote>

<p>Maybe I misunderstood the uses for this library - when I see classes like "Field&lt;T&gt;" and "FeildElement&lt;T&gt;" in the main o.a.c.math package, I assumed that building in generic mathematical actions is desired as well as simply a toolbox of specific use-cases.</p>

<blockquote><p>One thing to consider is do we require that Composable functions be total and finite-valued. If not, documenting and debugging NaN/Inf/Exceptions could be tricky for users.</p></blockquote>

<p>I wondered the same thing: why does UnivariateRealFunction throw a checked exception, forcing users to deal with it on every call?  Could this not be a (specific subclass of) RuntimeException, and let users who need to deal with it deal with it, and other people can ignore it, knowing that they have safe/entire functions, or that they will handle the NaN/Inf cases on their own.</p>

<blockquote><p>Also, do we require that composition be only "with" ComposableFunctions?</p></blockquote>

<p>I didn't think that was necessary, no.  The implementation of preCompose, postCompose, plus, minus, times, divide, scale don't require that the argument be ComposableFunction, but they will return an anonymous subclass of ComposableFunction, which has the side benefit of trivially allowing you to turn a non-composable function (Luc's HeatSensor) into a composable one, with ComposableFunction composableHeatSensorFunction = Identity.postCompose(heatSensor);  (this could just as easily be implemented with a delgating function as well, of course).</p>

<blockquote><p>I guess another thing to think about is inverses.</p></blockquote>

<p>How would you implement this, in general?</p></comment><comment id="12772289" author="jake.mannix" created="Sat, 31 Oct 2009 22:20:50 +0000"><p>Regarding practicality of these abstractions, we could limit the scope of "generalized real-valued functions" to instead a set of static building blocks:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> class Functions {
  
  <span class="code-keyword">public</span> <span class="code-keyword">abstract</span> class ComposableFunction <span class="code-keyword">implements</span> UnivariateRealFunction {
  <span class="code-comment">// has all the methods we described implemented, or maybe shortens <span class="code-quote">"preCompose"</span> to <span class="code-quote">"of"</span> - so you can read it <span class="code-quote">"f of g..."</span> 
</span>  <span class="code-comment">// leaves <span class="code-keyword">this</span> <span class="code-keyword">abstract</span>:
</span>    <span class="code-keyword">abstract</span> <span class="code-object">double</span> value(<span class="code-object">double</span> d);
  }

  <span class="code-keyword">public</span> <span class="code-keyword">static</span> ComposableFunction Exp = <span class="code-keyword">new</span> ComposableFunction() { <span class="code-object">double</span> value(<span class="code-object">double</span> d) { <span class="code-keyword">return</span> <span class="code-object">Math</span>.exp(d); } }
  <span class="code-keyword">public</span> <span class="code-keyword">static</span> ComposableFunction Sinh = ...
  
  <span class="code-comment">// lots of java.lang.<span class="code-object">Math</span> functions here, with object-oriented ways to combine them
</span>
  <span class="code-keyword">public</span> <span class="code-keyword">abstract</span> class BinaryFunction {
    <span class="code-keyword">abstract</span> <span class="code-object">double</span> value(<span class="code-object">double</span> d1, <span class="code-object">double</span> d2);
    ComposableFunction fix2ndArg(<span class="code-object">double</span> secondArg) { /*impl*/ }
    ComposableFunction fix1stArg(<span class="code-object">double</span> firstArg) { /* impl */ }
  }

  <span class="code-keyword">public</span> <span class="code-keyword">static</span> BinaryFunction Pow = <span class="code-keyword">new</span> BinaryFunction() { <span class="code-object">double</span> value(<span class="code-object">double</span> d1, <span class="code-object">double</span> d2) { <span class="code-keyword">return</span> <span class="code-object">Math</span>.pow(d1, d2); } }
  <span class="code-keyword">public</span> <span class="code-keyword">static</span> BinaryFunction Log = <span class="code-keyword">new</span> BinaryFunction() { <span class="code-object">double</span> value(<span class="code-object">double</span> d1, <span class="code-object">double</span> d2) { <span class="code-keyword">return</span> <span class="code-object">Math</span>.log(d1, d2); } }
  <span class="code-keyword">public</span> <span class="code-keyword">static</span> BinaryFunction Max = <span class="code-keyword">new</span> BinaryFunction() ...
  <span class="code-keyword">public</span> <span class="code-keyword">static</span> BinaryFunction Min = ... 
}
</pre>
</div></div>

<p>This contains the abstraction within one holder class which has a bunch of functional building blocks which are easy to use, and doing things like</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
  RealVector w = v.map(Exp.of(Negate.of(Pow.fix2ndArg(2))));
</pre>
</div></div>
<p>for when you want to map to a gaussian of your vector.</p>

<p>The use for this kind of thing is pretty varied, but in general allows for some really easy to read and concise stuff, when combined with the Collector paradigm, imagining you have this interface (with the extra collect methods, instead of just one, because for collecting on Vectors, you might imagine the Collector doing something different at different index values - for example, a weighted euclidean dot product, and similarly for matrices):</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> <span class="code-keyword">interface</span> UnivariateCollector {
  void collect(<span class="code-object">double</span> d);
  void collect(<span class="code-object">int</span> i, <span class="code-object">double</span> d);
  void collect(<span class="code-object">int</span> i, <span class="code-object">int</span> j, <span class="code-object">double</span> d);
  <span class="code-object">double</span> result();
}
</pre>
</div></div>

<p>This is the interface which gets given to collections of doubles ( like, say, RealVector, and possibly RealMatrix, which already has a visitor, but it's a mutating visitor ), which has the following method and implementation:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> <span class="code-keyword">interface</span> DoubleCollection {
  Iterator&lt;DoubleEntry&gt; iterator();
  Iterator&lt;DoubleEntry&gt; sparseIterator();
  <span class="code-object">double</span> collect(UnivariateCollector collector);
}
</pre>
</div></div>

<p>Note I'm not specifically saying this particular interface should exist in this level of generality, but imagine that these methods are available on AbstractRealVector, at least:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> <span class="code-keyword">abstract</span> class AbstractRealVector <span class="code-keyword">implements</span> RealVector, DoubleCollection {

  <span class="code-comment">// leave iterator() and sparseIterator() <span class="code-keyword">abstract</span>
</span>
  <span class="code-keyword">public</span> <span class="code-object">double</span> collect(UnivariateCollector collector) {
    Iterator&lt;DoubleEntry&gt; it  = <span class="code-comment">// use some logic to decide whether to take sparse or dense iterator
</span>    DoubleEntry e;
    <span class="code-keyword">while</span>(it.hasNext() &amp;&amp; (e = it.next()) != <span class="code-keyword">null</span>) {
      collector.collect(entry.index(), entry.value());
    }
    <span class="code-keyword">return</span> collector.result();
  }

<span class="code-comment">// useful <span class="code-keyword">for</span> generalized dot products, kernels, distances and angles:
</span>  <span class="code-keyword">public</span> <span class="code-object">double</span> collect(BivariateCollector collector, RealVector v) {
    <span class="code-comment">// use some logic based on whether <span class="code-keyword">this</span> or v is <span class="code-keyword">instanceof</span> SparseVector, to decide how to iterate both of them, then
</span>    some loop {
      collector.collect(index, thisVectorAtIndex, vAtIndex);
    }
    <span class="code-keyword">return</span> collector.result();
  }

  <span class="code-keyword">public</span> <span class="code-object">double</span> normL1() { <span class="code-keyword">return</span> collect(Abs.asCollector()); }
  <span class="code-keyword">public</span> <span class="code-object">double</span> normLInf() { <span class="code-keyword">return</span> collect(Abs.asCollector(Max)); }
  
 <span class="code-comment">// and in general:
</span>  <span class="code-keyword">public</span> <span class="code-object">double</span> normLp(<span class="code-keyword">final</span> <span class="code-object">double</span> p) { <span class="code-object">Math</span>.pow(collect(Pow.fix2ndArg(p)).asCollector()), 1/p); }

  <span class="code-keyword">public</span> <span class="code-object">double</span> dot(RealVector v) { <span class="code-keyword">return</span> collect(Times.asCollector(), v); }

  <span class="code-keyword">public</span> RealVector subtract(RealVector v) { <span class="code-keyword">return</span> map(Subtract, v); }

  <span class="code-keyword">public</span> RealVector ebeMultiply(RealVector v) { <span class="code-keyword">return</span> mapToSelf(Multiply, v); } 
  <span class="code-comment">// ditto <span class="code-keyword">for</span> all the other ebeXXX methods
</span>
  <span class="code-keyword">public</span> <span class="code-object">double</span> distance(RealVector v) {
    <span class="code-keyword">return</span> collect(<span class="code-keyword">new</span> AbstractBivariateCollector() {
      <span class="code-keyword">public</span> void collect(<span class="code-object">int</span> index, <span class="code-object">double</span> d1, <span class="code-object">double</span> d2) { result += <span class="code-object">Math</span>.pow(d1-d2, 2); }
    }
  }
  
  <span class="code-comment">// similarly <span class="code-keyword">for</span> L1Distance, LInfDistance and in general any Lp distance, and in fact, since Collector knows
</span>  <span class="code-comment">// what index you're on when collecting, it easily deals with weighted distances, and projected onto missing 
</span>  <span class="code-comment">// dimension subspaces in particular</span>
</pre>
</div></div>

<p>The reason I bring up these kinds of things is that in Machine Learning, in general, you often want to do fairly arbitrary manipulations on vectors, and you also may want to do arbitrary combinations of them.  I'm primarily interested in vectors and functions from vectors to reals (note: MultivariateRealFunction currently only takes double[] arguments, not RealVector - how to deal with the sparse case, ack!), and vectors to vectors and reals to reals, the the fairly generic sense, and having to write a ton of boilerplate every time I want to compose a function, or write a generalized dot product.  If I can't pass in a function to my vector, I need a method in another class, which doesn't have access to the internals of the vector, which is usually fine, but in general: Vectors should know how to compute their generalized distances, lengths, angles, differences, inner products, etc - given a little guidance on what the specific kind of generalized method they need to use.  </p>

<p>Of course, yes, this can be done fully outside of the linear package: once we have at the very least access to dense + sparse iterators on RealVector, we can write a whole framework outside of linear which has DotProduct (defining double dot(RealVector v1, RealVector v2) ), Distance, KernelizedNorm, etc. This can be done, but doing it this way is not my preference, and dulls my desire to try and help get Commons-Math as the linear library to be used with Mahout and Decomposer.</p></comment><comment id="12789816" author="luc" created="Sat, 12 Dec 2009 23:16:41 +0000"><p>fixed in subversion repository as of r890002</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Thu, 29 Oct 2009 22:03:55 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150494</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160703</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-312] RealVector interface could use some iterators (dense and sparse) and generic map() and collect() methods.</title><link>https://issues.apache.org/jira/browse/MATH-312</link><project id="12310485" key="MATH">Commons Math</project><description><p>As discussed on the <span class="error">&#91;math&#93;</span> list, there are other projects out there which would love to get a chance to standardize on using commons-math for things like linear algebra primitives, as it would build a common base to build upon.  But to do that, some well-known and used techniques for dealing with vectors, for one thing, are missing.  Most glaringly is the treatment of sparse vectors: giving no Iterator for non-default values means external clients lose the advantage of sparseness - only internal methods can skip around.  </p>

<p>Extending the RealVector interface with sparse (and dense) iterator methods would fix this: </p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
  <span class="code-object">double</span> getDefaultValue();
  Iterator&lt;RealVector.Entry&gt; iterator();
  Iterator&lt;RealVector.Entry&gt; nonDefaultIterator();
</pre>
</div></div> 

<p>but there is another way to deal with vector data as well: instead of passing iterators around, and worrying about all the lovely ConcurrentModification and unsupported "remove" methods (which aren't the end of the world), we can instead expose generic map functions:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
  RealVector map(UnivariateRealFunction f);
  RealVector mapToSelf(UnivariateRealFunction f);
</pre>
</div></div>

<p>where RealVector mapToSelf(UnivariateRealFunction), which applies the function to the vector's entries (checking whether the function preserves the default value up front allows it to chose between the sparse or dense iterator), and map just applies mapToSelf to a copy.</p>

<p>This doesn't exhaust all possible places where Iterators could be used helpfully (there's also combining two vectors together via a </p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">map(BinaryRealFunction, RealVector other)</pre>
</div></div>
<p> which could be specialized nonlinear forms of addition or subtraction, and </p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"><span class="code-object">double</span> collect(UnivariateRealFunction, BinaryRealFunction)</pre>
</div></div>
<p> which uses the iterates over all of the entries, applying the first unary function to each entry, and then applying the binary function to combine this value with the previous accumulated value - with "pow(2)", and "<ins>" as the two functions, you get L2 norm, with "abs()" and "</ins>", you get L1 norm, etc...)</p></description><environment><p>all</p></environment><key id="12439377">MATH-312</key><summary>RealVector interface could use some iterators (dense and sparse) and generic map() and collect() methods.</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="jake.mannix">Jake Mannix</reporter><labels>
                    </labels><created>Thu, 29 Oct 2009 07:45:33 +0000</created><updated>Sat, 3 Apr 2010 21:51:50 +0100</updated><resolved>Sun, 27 Dec 2009 19:16:43 +0000</resolved><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12771316" author="jake.mannix" created="Thu, 29 Oct 2009 07:48:18 +0000"><p>Initial patch - sorry about my formatting, I haven't got checkstyle quite playing nice enough to just reformat all the time correctly for me.</p>

<p>This patch has an AbstractRealVector which implements the iterators and map functions, as well as faster iterators in ArrayRealVector and OpenMapRealVector.</p></comment><comment id="12771317" author="jake.mannix" created="Thu, 29 Oct 2009 07:51:41 +0000"><p>Oh yeah, patch also has a new unit test, which is nowhere near comprehensive, but does the basic sanity check.  All previous tests still pass, of course.</p></comment><comment id="12772474" author="jake.mannix" created="Mon, 2 Nov 2009 09:28:00 +0000"><p>This patch needs revision - the non-zero defaultValue() is not handled properly in OpenMapRealVector in this one.</p></comment><comment id="12772800" author="jake.mannix" created="Tue, 3 Nov 2009 00:56:40 +0000"><p>New patch. This one has no reference to the "nonzero default values" for sparse vectors, which can be addressed in another JIRA ticket.  This patch now only deals with the following files:</p>

<ul>
	<li>src/main/java/org/apache/commons/math/linear/RealVector.java only methods added are iterator(), sparseIterator(), map(UnivariateRealFunction), mapToSelf(UnivariateRealFunction)</li>
	<li>src/main/java/org/apache/commons/math/analysis/UnivariateRealFunctions.java - a collection of UnivariateRealFunction wrappers to java.lang.Math static methods.</li>
	<li>src/main/java/org/apache/commons/math/linear/AbstractRealVector.java - implements the above methods, plus a ton more in the general case, so new implementations don't need to.</li>
	<li>src/main/java/org/apache/commons/math/linear/ArrayRealVector.java - primary change is to extend AbstractRealVector</li>
	<li>src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java - ditto</li>
	<li>src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java - tests for the new AbstractRealVector's new methods</li>
	<li>src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java - update the inner interface</li>
	<li>src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java - ditto</li>
</ul>
</comment><comment id="12774695" author="billbarker" created="Sun, 8 Nov 2009 00:49:14 +0000"><p>The patch could use a lot more JavaDoc comments, but since they are mostly InheritDoc, I can live with putting them in myself.</p>

<p>What I do have a problem with is generalizing OpenMapRealVector to allow for different default values then zero.  This means that you get different results (in the sense of equals) if you try and operate with two vectors that have different default values depending on which is LHS and which is RHS.  I would need a use case to commit that can of worms.</p>
</comment><comment id="12774710" author="jake.mannix" created="Sun, 8 Nov 2009 03:00:23 +0000"><p>Bill, I thought I removed all reference to the nonzero default values idea, are you using the latest patch on there?</p></comment><comment id="12788370" author="luc" created="Wed, 9 Dec 2009 22:58:46 +0000"><p>fixed in trunk as of r889008.<br/>
Patch applied with checkstyle changes (whitespace, curly braces, missing javadocs, fields visibility ...)<br/>
Thanks for the patch<br/>
Sorry for the delay</p></comment><comment id="12789246" author="psteitz" created="Fri, 11 Dec 2009 11:19:06 +0000">
<p>Still TODO:<br/>
1) add unit tests<br/>
2) remove *mapTo and *mapToSelf from OpenMapRealVector<br/>
3) fix javadocs<br/>
4) remove support for non-zero default values in OpenMapRealVector </p></comment><comment id="12794713" author="luc" created="Sun, 27 Dec 2009 18:51:42 +0000"><p>Is this OK now after Bill changes in r890023, r890159 and my changes in r894093 ?</p></comment><comment id="12794717" author="psteitz" created="Sun, 27 Dec 2009 19:16:43 +0000"><p>Looks good now.  Thanks!</p></comment></comments><issuelinks><issuelinktype id="10032"><name>Blocker</name><outwardlinks description="blocks"><issuelink><issuekey id="12439381">MATH-314</issuekey></issuelink></outwardlinks></issuelinktype></issuelinks><attachments><attachment id="12423871" name="MATH-312.patch" size="77759" author="jake.mannix" created="Tue, 3 Nov 2009 00:56:40 +0000"/><attachment id="12423555" name="MATH-312.patch" size="48855" author="jake.mannix" created="Thu, 29 Oct 2009 07:48:18 +0000"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 8 Nov 2009 00:49:14 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150493</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160704</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-311] Replaced the BinomialDistribution existing PDF with Catherine Loader's algorithm (as per wishlist on the wiki page)</title><link>https://issues.apache.org/jira/browse/MATH-311</link><project id="12310485" key="MATH">Commons Math</project><description><p>The existing PDF for Binomial distributions cannot handle n&gt;1029. This implementation of Catherine Loader's algorithm can handle n upto and larger than 1000000. The Commons-Math wiki page has a wishlist entry asking for this, with a link to the paper describing the new algorithm:  <a href="http://projects.scipy.org/scipy/raw-attachment/ticket/620/loader2000Fast.pdf" class="external-link" rel="nofollow">http://projects.scipy.org/scipy/raw-attachment/ticket/620/loader2000Fast.pdf</a></p>

<p>I've updated the probability() function in BInomialDistributionImpl.java, as well as the unit test for this method. The updated unit test has higher precision expected values, which were calculated with Mathematica 6.</p></description><environment/><key id="12439222">MATH-311</key><summary>Replaced the BinomialDistribution existing PDF with Catherine Loader's algorithm (as per wishlist on the wiki page)</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="njawalkar">Nipun Jawalkar</reporter><labels>
                    </labels><created>Tue, 27 Oct 2009 21:16:53 +0000</created><updated>Sat, 3 Apr 2010 21:52:25 +0100</updated><resolved>Wed, 28 Oct 2009 20:03:29 +0000</resolved><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12770647" author="njawalkar" created="Tue, 27 Oct 2009 21:18:06 +0000"><p>Patch to update both BinomialDistributionImpl.java as well as the matching unit test, BinomialDistributionTest.java</p></comment><comment id="12770976" author="brentworden" created="Wed, 28 Oct 2009 16:21:35 +0000"><p>Thanks for the contribution.  This definitely improves the implementation.  If I may be so bold, I would prefer the utility methods you have created, stirlerr and bd0, be placed in their own utility class.  That way, those methods and this technique can more easily be leveraged by other distributions.</p>

<p>What do others think?</p></comment><comment id="12771066" author="luc" created="Wed, 28 Oct 2009 19:10:58 +0000"><p>I agree with Brent.</p></comment><comment id="12771087" author="brentworden" created="Wed, 28 Oct 2009 20:03:29 +0000"><ul class="alternate" type="square">
	<li>Made the SaddlePointExpansion (probably not the best name) utility class that implements Catheline Loader's saddle point expansion approximation.</li>
	<li>Utilized this new class in the Binomial, Hypergeometric, and Poisson distributions.</li>
	<li>Updated the Binomial test cases with the data provided by Nipun.</li>
</ul>


<p>Changes are all checked in and critiques are welcome.</p></comment><comment id="12771135" author="luc" created="Wed, 28 Oct 2009 21:58:44 +0000"><p>Thanks to Nipun for the contribution and to Brent for the checking.<br/>
I have checked in minor editions to fix checkstyle and findbugs errors.</p></comment></comments><attachments><attachment id="12423358" name="BinomialDistributionPatch.txt" size="5831" author="njawalkar" created="Tue, 27 Oct 2009 21:18:06 +0000"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 28 Oct 2009 16:21:35 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150492</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160705</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-310] Supply nextSample for all distributions with inverse cdf using inverse transform sampling approach</title><link>https://issues.apache.org/jira/browse/MATH-310</link><project id="12310485" key="MATH">Commons Math</project><description><p>To be able to generate samples from the supported probability distributions, a generic function nextSample is implemented in AbstractContinuousDistribution and AbstractIntegerDistribution. This also gives the possibility to override the method if better algorithms are available for specific distributions as shown in the small example with the exponential distribution.</p>

<p>Because the nextExponential is used several places: in nextPoisson it can be replaces by an instance if the ExponentialDistribution and in ValueServer it can as well, although maybe not in as natural maner as the other. </p>

<p>This problem with the Exponential is a special problem. In general the nextSample-approaches immediately gives the possibility the sample from all the distributions with inverse cdf instead just only a couple.</p>

<p>Only AbstractContinuousDistribution and AbstractIntegerDistribution extends AbstractDistribution, and both AbstractIntegerDistribution and AbstractContinuousDistribution has an inverseCumulativeProbability-function. But in AbstractContinuousDistribution the inverse cdf returns a double, and at AbstractIntegerDistribution it - naturally - returns an integer. Therefor the nextSample is not put on AbstractDistribution, but on each extension with different return types.</p>

<p>RandomGenerator as parameter instead of getting a RNG inside the nextSample, because one typically wants to use the same RNG because often several random samples are wanted. Another option is to have a RNG as a field in the class, but that would be more ugly and also result in several RNGs at runtime.</p>

<p>The nextPoisson etc. ought to be moved as well, if the enhancement is accepted, but it should be a quick fix.</p>

<p>Tests has to be written for this change as well.</p></description><environment/><key id="12439178">MATH-310</key><summary>Supply nextSample for all distributions with inverse cdf using inverse transform sampling approach</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="mikl">Mikkel Meyer Andersen</reporter><labels>
                    </labels><created>Tue, 27 Oct 2009 13:28:52 +0000</created><updated>Wed, 23 Mar 2011 19:58:34 +0000</updated><resolved>Tue, 1 Jun 2010 00:50:47 +0100</resolved><version>2.0</version><fixVersion>2.2</fixVersion><due/><votes>0</votes><watches>0</watches><timeoriginalestimate seconds="10800">3h</timeoriginalestimate><timeestimate seconds="10800">3h</timeestimate><comments><comment id="12770513" author="tdunning" created="Tue, 27 Oct 2009 13:58:40 +0000"><p>Looks nice.</p>

<p>A comment on the motivation for the 0 test might be nice, but I was able to figure it out with a moment of reflection so maybe it isn't necessary.</p>
</comment><comment id="12770687" author="mikl" created="Tue, 27 Oct 2009 22:49:52 +0000"><p>Yeah, it probably would be a good idea. Especially when it's implicitly assumed that 1 is not possible to get (because of the RandomGeneratorImpl), but it's really not a contract. Maybe include 1 in the test although it's not possible with traditional RNG. And also write that the nextDouble-method in the RandomNumber generator should provide a double between 0 and 1, either in- or exclusive.</p></comment><comment id="12842500" author="psteitz" created="Sun, 7 Mar 2010 23:03:50 +0000"><p>See discussion here: <a href="http://markmail.org/message/kolivuytbt5cj25s" class="external-link" rel="nofollow">http://markmail.org/message/kolivuytbt5cj25s</a></p>

<p>As stated on the mailing list, I am +0/1 on the idea of adding generic inversion-based generators that work with any invertible distribution; but I still do not see attaching them to the distribution implementations as a good idea. This is for three reasons: 0) I see it as poor separation of concerns (admittedly this is a matter of taste, but I do not see sourcing random deviates as an essential behavior of a probability distribution) 1) if the implementation is <b>only</b> inversion-based, it will be naive for some distributions and we do not want users to get a bad impl by default 2) to fix 1) we have to essentially refactor our package structure to place random data generation into the distributions package, causing users to have to instantiate distributions and also configure generators to get deviates. I see it as simpler and more natural to use a RandomData instance. I am -1 on dropping the random package. Therefore, I am not in favor of attaching this functionality to the distributions.   </p>

<p>I propose that we resolve this issue by </p>

<p>1) Extend RandomDataImpl to include deviate generation from all currently implemented distributions, using generic inversion as defined below where this is the best available method, or where we have not yet implemented a better one.  In 3.0, we can either eliminate the RandomData interface or extend it to include the new methods.</p>

<p>2) Add a generic nextInversionDeviate(distribution, generator) method similar to that defined in the patch to RandomDataImpl.  Doc the fact that for distributions having a nextXxx implementation, this should be used in place of nextInversionDeviate unless inversion is specifically desired.</p>
</comment><comment id="12842510" author="erans" created="Mon, 8 Mar 2010 00:11:01 +0000"><p>Wouldn't something along the following lines satisfy everybody's concerns?</p>

<p>In each "...Distribution" interface, add a "nextSample()" (with the appropriate return type). In each "...DistributionImpl", add a "RandomData" instance variable to be used within the "nextSample()" implementation. E.g. in "PoissonDistributionImpl.java"</p>

<div class="code panel" style="border-style: solid;border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;border-bottom-style: solid;"><b>PoissonDistributionImpl.java</b></div><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">import</span> org.apache.commons.math.random.RandomData;
<span class="code-keyword">import</span> org.apache.commons.math.random.RandomDataImpl;

<span class="code-keyword">public</span> class PoissonDistributionImpl <span class="code-keyword">extends</span> ... {
    <span class="code-keyword">private</span> <span class="code-keyword">final</span> RandomData randomData = <span class="code-keyword">new</span> RandomDataImpl();
    <span class="code-comment">// ....
</span>    <span class="code-object">long</span> nextSample() {
        randomData.nextPoisson();
    }   
}
</pre>
</div></div></comment><comment id="12842511" author="psteitz" created="Mon, 8 Mar 2010 00:25:02 +0000"><p>The problem is that to be really useful, this requires that you expose the RandomData instance and allow the RandomGenerator to be configured.   This contributes to the aroma of bad separation of concerns, IMO.    To make it a little clearer why I see this as bad separation of concerns, consider that you could accomplish the same thing by putting the impl in each of the distributions and then having RandomDataImpl use the impls in the distributions.  That seems backwards to me. </p></comment><comment id="12842514" author="erans" created="Mon, 8 Mar 2010 01:08:44 +0000"><p>From what I've read in the ML thread, people that want to have "nextSample()" don't really care about configuring the RNG, so you don't have to expose it to provide that syntactic sugar.<br/>
Those who would like more flexibility (like configuring the RNG) should use "RandomData" explicitely.<br/>
And the concern that all implementations dealing with sampling stay in package "random" is fulfilled.</p></comment><comment id="12842543" author="psteitz" created="Mon, 8 Mar 2010 04:58:54 +0000"><p>Not being able to reseed the PRNG is a pretty serious limitation when generating random data.  Having to maintain and document random data generation in two places is also not something that I personally look forward to.  Making the distribution classes (in my opinion needlessly) stateful and forcing them all to initialize and drag along a RandomData instance is also not a good idea, IMO.  </p></comment><comment id="12842614" author="erans" created="Mon, 8 Mar 2010 10:03:42 +0000"><p>&gt; Not being able to reseed the PRNG is a pretty serious limitation when generating random data.</p>

<p>As I said, for those who need rich features, they can use them with your preferred option, namely through directly instantiating an object of type "RandomData".</p>

<p>&gt; Having to maintain and document random data generation in two places <span class="error">&#91;...&#93;</span></p>

<p>This just reduces to e.g.</p>

<div class="code panel" style="border-style: solid;border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;border-bottom-style: solid;"><b>PoissonDistributionImpl.java</b></div><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> class PoissonDistributionImpl <span class="code-keyword">extends</span> ... {
    /**
      * Provide basic sampling functionality. This method directly calls the
      * the {@link RandomData#nextPoisson() nextPoisson} method in {@link RandomData}.
      * For more control, please use that class directly.
      * @see {@link RandomDataImpl}.
      */
    <span class="code-object">long</span> nextSample() { randomData.nextPoisson(); }
}
</pre>
</div></div>

<p>&gt; Making the distribution classes <span class="error">&#91;...&#93;</span> stateful <span class="error">&#91;...&#93;</span></p>

<p>This is really an "implementation detail"  (as it is completely hidden), that is, if you accept that users cannot access the RNG machinery from this side.</p></comment><comment id="12843204" author="psteitz" created="Tue, 9 Mar 2010 17:29:33 +0000"><p>I guess I am OK with this, as long as RandomDataImpl retains its strategy of lazy initialization of SecureRandom and Random instances - so what is "dragged along" is not a big memory footprint or initialization overhead.  This creates a dependency shared by all distributions, but if we are willing to manage it, then OK.   </p></comment><comment id="12849199" author="erans" created="Wed, 24 Mar 2010 14:27:47 +0000"><p>Shall we implement this feature in 2.1?<br/>
As it is an addition, there isn't a high risk that it'll break existing code. <span class="error">&#91;The only potential problem is if someone created his own implementation of one of the &quot;...Distribution&quot; interfaces. How likely is that?&#93;</span></p></comment><comment id="12873838" author="psteitz" created="Tue, 1 Jun 2010 00:50:46 +0100"><p>Fix completed in r949895.</p></comment><comment id="13010325" author="luc" created="Wed, 23 Mar 2011 19:58:34 +0000"><p>Closing issue as it was included in version 2.2, which has been released</p></comment></comments><attachments><attachment id="12423318" name="patch_proposal" size="4957" author="mikl" created="Tue, 27 Oct 2009 13:29:19 +0000"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 27 Oct 2009 13:58:40 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150491</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160706</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-309] nextExponential parameter check bug - patch supplied</title><link>https://issues.apache.org/jira/browse/MATH-309</link><project id="12310485" key="MATH">Commons Math</project><description><p>Index: src/main/java/org/apache/commons/math/random/RandomDataImpl.java<br/>
===================================================================<br/>
&#8212; src/main/java/org/apache/commons/math/random/RandomDataImpl.java	(revision 830102)<br/>
+++ src/main/java/org/apache/commons/math/random/RandomDataImpl.java	(working copy)<br/>
@@ -462,7 +462,7 @@</p>
<ul>
	<li>@return the random Exponential value<br/>
      */<br/>
     public double nextExponential(double mean) {</li>
</ul>
<ul class="alternate" type="square">
	<li>if (mean &lt; 0.0) {<br/>
+        if (mean &lt;= 0.0) 
<div class="error"><span class="error">Unknown macro: {             throw MathRuntimeException.createIllegalArgumentException(                   &quot;mean must be positive ({0})&quot;, mean);         }</span> </div></li>
</ul>
</description><environment><p>Ubuntu 9.04</p></environment><key id="12439175">MATH-309</key><summary>nextExponential parameter check bug - patch supplied</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="mikl">Mikkel Meyer Andersen</reporter><labels>
                    </labels><created>Tue, 27 Oct 2009 13:20:53 +0000</created><updated>Sat, 3 Apr 2010 21:52:59 +0100</updated><resolved>Sat, 31 Oct 2009 02:33:15 +0000</resolved><version>1.0</version><version>1.1</version><version>1.2</version><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>0</watches><timeoriginalestimate seconds="300">5m</timeoriginalestimate><timeestimate seconds="300">5m</timeestimate><comments><comment id="12772212" author="psteitz" created="Sat, 31 Oct 2009 02:33:15 +0000"><p>Fixed in r831510.  Thanks for reporting this.</p></comment></comments><attachments><attachment id="12423317" name="patch_random_exp" size="630" author="mikl" created="Tue, 27 Oct 2009 13:21:43 +0000"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sat, 31 Oct 2009 02:33:15 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>34214</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160707</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-308] ArrayIndexOutOfBoundException in EigenDecompositionImpl</title><link>https://issues.apache.org/jira/browse/MATH-308</link><project id="12310485" key="MATH">Commons Math</project><description><p>The following test triggers an ArrayIndexOutOfBoundException:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
    <span class="code-keyword">public</span> void testMath308() {

        <span class="code-object">double</span>[] mainTridiagonal = {
            22.330154644539597, 46.65485522478641, 17.393672330044705, 54.46687435351116, 80.17800767709437
        };
        <span class="code-object">double</span>[] secondaryTridiagonal = {
            13.04450406501361, -5.977590941539671, 2.9040909856707517, 7.1570352792841225
        };

        <span class="code-comment">// the reference values have been computed using routine DSTEMR
</span>        <span class="code-comment">// from the fortran library LAPACK version 3.2.1
</span>        <span class="code-object">double</span>[] refEigenValues = {
            14.138204224043099, 18.847969733754262, 52.536278520113882, 53.456697699894512, 82.044413207204002
        };
        RealVector[] refEigenVectors = {
            <span class="code-keyword">new</span> ArrayRealVector(<span class="code-keyword">new</span> <span class="code-object">double</span>[] {  0.584677060845929, -0.367177264979103, -0.721453187784497,  0.052971054621812, -0.005740715188257 }),
            <span class="code-keyword">new</span> ArrayRealVector(<span class="code-keyword">new</span> <span class="code-object">double</span>[] {  0.713933751051495, -0.190582113553930,  0.671410443368332, -0.056056055955050,  0.006541576993581 }),
            <span class="code-keyword">new</span> ArrayRealVector(<span class="code-keyword">new</span> <span class="code-object">double</span>[] {  0.222368839324646,  0.514921891363332, -0.021377019336614,  0.801196801016305, -0.207446991247740 }),
            <span class="code-keyword">new</span> ArrayRealVector(<span class="code-keyword">new</span> <span class="code-object">double</span>[] {  0.314647769490148,  0.750806415553905, -0.167700312025760, -0.537092972407375,  0.143854968127780 }),
            <span class="code-keyword">new</span> ArrayRealVector(<span class="code-keyword">new</span> <span class="code-object">double</span>[] { -0.000462690386766, -0.002118073109055,  0.011530080757413,  0.252322434584915,  0.967572088232592 })
        };

        <span class="code-comment">// the following line triggers the exception
</span>        EigenDecomposition decomposition =
            <span class="code-keyword">new</span> EigenDecompositionImpl(mainTridiagonal, secondaryTridiagonal, MathUtils.SAFE_MIN);

        <span class="code-object">double</span>[] eigenValues = decomposition.getRealEigenvalues();
        <span class="code-keyword">for</span> (<span class="code-object">int</span> i = 0; i &lt; refEigenValues.length; ++i) {
            assertEquals(refEigenValues[i], eigenValues[i], 1.0e-6);
            <span class="code-keyword">if</span> (refEigenVectors[i].dotProduct(decomposition.getEigenvector(i)) &lt; 0) {
                assertEquals(0, refEigenVectors[i].add(decomposition.getEigenvector(i)).getNorm(), 1.0e-6);
            } <span class="code-keyword">else</span> {
                assertEquals(0, refEigenVectors[i].subtract(decomposition.getEigenvector(i)).getNorm(), 1.0e-6);
            }
        }

    }
</pre>
</div></div>

<p>Running the previous method as a Junit test triggers the exception when the EigenDecompositionImpl instance is built. The first few lines of the stack trace are:</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>java.lang.ArrayIndexOutOfBoundsException: -1
	at org.apache.commons.math.linear.EigenDecompositionImpl.computeShiftIncrement(EigenDecompositionImpl.java:1545)
	at org.apache.commons.math.linear.EigenDecompositionImpl.goodStep(EigenDecompositionImpl.java:1072)
	at org.apache.commons.math.linear.EigenDecompositionImpl.processGeneralBlock(EigenDecompositionImpl.java:894)
	at org.apache.commons.math.linear.EigenDecompositionImpl.findEigenvalues(EigenDecompositionImpl.java:658)
	at org.apache.commons.math.linear.EigenDecompositionImpl.decompose(EigenDecompositionImpl.java:246)
	at org.apache.commons.math.linear.EigenDecompositionImpl.&lt;init&gt;(EigenDecompositionImpl.java:205)
	at org.apache.commons.math.linear.EigenDecompositionImplTest.testMath308(EigenDecompositionImplTest.java:136)
</pre>
</div></div>

<p>I'm currently investigating this bug. It is not a simple index translation error between the original fortran (Lapack) and commons-math implementation.</p></description><environment><p>linux</p></environment><key id="12439042">MATH-308</key><summary>ArrayIndexOutOfBoundException in EigenDecompositionImpl</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="luc">Luc Maisonobe</reporter><labels>
                    </labels><created>Sun, 25 Oct 2009 22:25:23 +0000</created><updated>Wed, 14 Apr 2010 01:02:36 +0100</updated><resolved>Tue, 3 Nov 2009 22:19:04 +0000</resolved><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="12773246" author="luc" created="Tue, 3 Nov 2009 22:19:04 +0000"><p>fixed in subversion repository as of r832577<br/>
Many thanks to Dimitri who debugged this with a careful step by step comparison between the original lapack fortran and our translation in Java.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>34207</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160708</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-307] BigReal/Fieldelement divide without setting a proper scale -> exception: no exact representable decimal result</title><link>https://issues.apache.org/jira/browse/MATH-307</link><project id="12310485" key="MATH">Commons Math</project><description><p>BigReal implements the methode divide of Fieldelement. The problem is that there is no scale defined for the BigDecimal so the class will throw an error when the outcome is not a representable decimal result. <br/>
(Exception: no exact representable decimal result)</p>

<p>The workaround for me was to copy the BigReal and set the scale and roundingMode the same as version 1.2.</p>

<p>Maybe is it possible to set the scale in FieldMatrix and implements it also a divide(BigReal b, int scale, int roundMode) ?? </p>
</description><environment><p>independent</p></environment><key id="12438999">MATH-307</key><summary>BigReal/Fieldelement divide without setting a proper scale -> exception: no exact representable decimal result</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="joan">Joan Schipper</reporter><labels>
                    </labels><created>Sat, 24 Oct 2009 15:36:24 +0100</created><updated>Wed, 14 Apr 2010 01:03:39 +0100</updated><resolved>Sun, 24 Jan 2010 10:35:39 +0000</resolved><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>0</watches><timeoriginalestimate seconds="14400">4h</timeoriginalestimate><timeestimate seconds="14400">4h</timeestimate><comments><comment id="12794725" author="luc" created="Sun, 27 Dec 2009 20:04:40 +0000"><p>I have added rounding mode and scale fields in BigReal in subversion tree as of r894107.<br/>
Could you please check if this solves the issue for you ?</p></comment><comment id="12794738" author="joan" created="Sun, 27 Dec 2009 21:00:18 +0000">
<p>Thank you for your reply and effort.</p>

<p>If this method is replaced for the implementation of scale and roundingMode it will certainly work:</p>

<p>old method:</p>

<p>  public BigReal divide(BigReal a) throws ArithmeticException </p>
{
       return new BigReal(d.divide(a.d));
   }

<p>suggested method:</p>

<p>  public BigReal divide(BigReal a) throws ArithmeticException </p>
{
       return new BigReal(d.divide(a.d, scale, roundingMode));
   }

<p>Joan </p></comment><comment id="12794739" author="joan" created="Sun, 27 Dec 2009 21:00:30 +0000">
<p>Thank you for your reply and effort.</p>

<p>If this method is replaced for the implementation of scale and <br/>
roundingMode it will certainly work:</p>

<p>   public BigReal divide(BigReal a) throws ArithmeticException </p>
{
        return new BigReal(d.divide(a.d));
    }

<p>is replaced by:</p>

<p>   public BigReal divide(BigReal a) throws ArithmeticException </p>
{
        return new BigReal(d.divide(a.d, scale, roundingMode));
    }

<p>Joan</p>
</comment><comment id="12794741" author="luc" created="Sun, 27 Dec 2009 21:08:01 +0000"><p>Oops. Sorry for having forgotten this ... I've checked it in now.</p></comment><comment id="12804221" author="luc" created="Sun, 24 Jan 2010 10:35:39 +0000"><p>Fixed since 2009-12-27 as of r894109</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 27 Dec 2009 20:04:40 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150490</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160709</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-306] Method 'divide' in class 'Complex' uses a false formula for a special case resulting in erroneous division by zero.</title><link>https://issues.apache.org/jira/browse/MATH-306</link><project id="12310485" key="MATH">Commons Math</project><description><p>The formula that 'divide' wants to implement is</p>

<p>( a + bi )  /  ( c + di )  =  ( ac + bd + ( bc - ad ) i )  /  ( c^2 + d^2 )</p>

<p>as correctly written in the description.</p>

<p>When c == 0.0 this leads to the special case</p>

<p>( a + bi )  /  di  = ( b / d ) - ( a / d ) i</p>

<p>But the corresponding code is:</p>

<p>if (c == 0.0) </p>
{
    return createComplex(imaginary/d, -real/c);
}

<p>The bug is the last division -real/c, which should obviously be -real/d.</p></description><environment><p>all</p></environment><key id="12438998">MATH-306</key><summary>Method 'divide' in class 'Complex' uses a false formula for a special case resulting in erroneous division by zero.</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="bowman2001">Joerg Huber</reporter><labels>
                    </labels><created>Sat, 24 Oct 2009 15:23:13 +0100</created><updated>Wed, 14 Apr 2010 01:05:17 +0100</updated><resolved>Tue, 27 Oct 2009 01:33:42 +0000</resolved><version>1.1</version><version>1.2</version><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12769657" author="bowman2001" created="Sat, 24 Oct 2009 15:31:19 +0100"><p>Other layout and an additional formula conversion for better readability</p></comment><comment id="12769670" author="psteitz" created="Sat, 24 Oct 2009 16:39:35 +0100"><p>Thanks for reviewing the code.</p>

<p>The code is misleading, but should not lead to incorrect results.  The line you refer to above is actually in a block that will never get executed - so should be deleted.</p>
 <div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
        <span class="code-keyword">if</span> (<span class="code-object">Math</span>.abs(c) &lt; <span class="code-object">Math</span>.abs(d)) {
            <span class="code-keyword">if</span> (d == 0.0) {  &lt;---- impossible to have abs(c) &lt; 0
                <span class="code-keyword">return</span> createComplex(real/c, imaginary/c);
            }
            <span class="code-object">double</span> q = c / d;
            <span class="code-object">double</span> denominator = c * q + d;
            <span class="code-keyword">return</span> createComplex((real * q + imaginary) / denominator,
                (imaginary * q - real) / denominator);
        } <span class="code-keyword">else</span> {
            <span class="code-keyword">if</span> (c == 0.0) {  &lt;-- to get here, we need c = d = 0,  but <span class="code-keyword">this</span> is handled above.
                <span class="code-keyword">return</span> createComplex(imaginary/d, -real/c);  &lt;-- incorrect fmla is harmless because never executed.
            }
</pre>
</div></div>


<p>Interesting that static analyzers did not catch this as dead code.  Unless I am missing something, both of the if(* == 0) tests in the block above can be removed (with no effect on results).</p>

<p>Appreciate comments on this, but leaning toward code cleanup and closing as invalid.</p></comment><comment id="12769675" author="bowman2001" created="Sat, 24 Oct 2009 17:15:18 +0100"><p>Yes, it looks like a twofold check for an already solved problem. By splitting the code up for the two cases<br/>
1. Math.abs(c) &lt; Math.abs(d) <br/>
2. the other way around<br/>
the denominator of q is always non-zero, which would habe been a problem and may have been the reason to apply those extra checks.</p>

<p>The special cases c = 0 and d = 0 lead always to q = 0, in the respective code parts. <br/>
Which is no problem, because there is no division by q. <br/>
Effective code, if the extra checks are omitted.</p>

<p>Thank you Phil, I encourage the code cleanup you proposed.</p></comment><comment id="12769679" author="psteitz" created="Sat, 24 Oct 2009 18:10:21 +0100"><p>Thanks, and thanks again for reviewing the code.   We really appreciate that.</p></comment><comment id="12770352" author="psteitz" created="Tue, 27 Oct 2009 01:33:42 +0000"><p>Removed dead code in r830044.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sat, 24 Oct 2009 15:39:35 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150489</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160710</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-305] NPE in  KMeansPlusPlusClusterer unittest</title><link>https://issues.apache.org/jira/browse/MATH-305</link><project id="12310485" key="MATH">Commons Math</project><description><p>When running this unittest, I am facing this NPE:<br/>
java.lang.NullPointerException<br/>
	at org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer.assignPointsToClusters(KMeansPlusPlusClusterer.java:91)</p>

<p>This is the unittest:</p>


<p>package org.fao.fisheries.chronicles.calcuation.cluster;</p>

<p>import static org.junit.Assert.assertEquals;<br/>
import static org.junit.Assert.assertTrue;</p>

<p>import java.util.Arrays;<br/>
import java.util.List;<br/>
import java.util.Random;</p>

<p>import org.apache.commons.math.stat.clustering.Cluster;<br/>
import org.apache.commons.math.stat.clustering.EuclideanIntegerPoint;<br/>
import org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer;<br/>
import org.fao.fisheries.chronicles.input.CsvImportProcess;<br/>
import org.fao.fisheries.chronicles.input.Top200Csv;<br/>
import org.junit.Test;</p>

<p>public class ClusterAnalysisTest {</p>


<p>	@Test<br/>
	public void testPerformClusterAnalysis2() {<br/>
		KMeansPlusPlusClusterer&lt;EuclideanIntegerPoint&gt; transformer = new KMeansPlusPlusClusterer&lt;EuclideanIntegerPoint&gt;(<br/>
				new Random(1746432956321l));<br/>
		EuclideanIntegerPoint[] points = new EuclideanIntegerPoint[] {<br/>
				new EuclideanIntegerPoint(new int[] </p>
{ 1959, 325100 }
<p>),<br/>
				new EuclideanIntegerPoint(new int[] </p>
{ 1960, 373200 }
<p>), };<br/>
		List&lt;Cluster&lt;EuclideanIntegerPoint&gt;&gt; clusters = transformer.cluster(Arrays.asList(points), 1, 1);<br/>
		assertEquals(1, clusters.size());</p>

<p>	}</p>

<p>}</p></description><environment><p>java 6, eclipse, apache commons math trunk</p></environment><key id="12438781">MATH-305</key><summary>NPE in  KMeansPlusPlusClusterer unittest</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="erikvaningen">Erik van Ingen</reporter><labels>
                    </labels><created>Thu, 22 Oct 2009 07:35:08 +0100</created><updated>Mon, 30 Nov 2009 08:12:50 +0000</updated><resolved>Fri, 27 Nov 2009 21:46:44 +0000</resolved><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>0</watches><timeoriginalestimate seconds="14400">4h</timeoriginalestimate><timeestimate seconds="14400">4h</timeestimate><comments><comment id="12783133" author="psteitz" created="Fri, 27 Nov 2009 16:57:43 +0000"><p>Thanks for reporting this. </p></comment><comment id="12783176" author="psteitz" created="Fri, 27 Nov 2009 21:46:44 +0000"><p>The problem was due to overflow in MathUtils.distance() due to bad typing.  Fixed in r885027.</p></comment><comment id="12783565" author="erikvaningen" created="Mon, 30 Nov 2009 08:12:50 +0000"><p>I have tested the fix and I can confirm that it is working in my environment. Thanks a lot!</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Fri, 27 Nov 2009 16:57:43 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>34189</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160711</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-304] CurveFitter.fit(ParametricRealFunction, double[]) always returns the same value as the initial guess when used with the LevenbergMarquardtOptimizer</title><link>https://issues.apache.org/jira/browse/MATH-304</link><project id="12310485" key="MATH">Commons Math</project><description><p>CurveFitter.fit(ParametricRealFunction, double[]) always returns the same value as the initial guess when used with the LevenbergMarquardtOptimizer and the length of the initial guess array is 1.  Here is my example code:</p>

<div class="code panel" style="border-style: solid;border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;border-bottom-style: solid;"><b>CurveFitter with LevenbergMarquardtOptimizer</b></div><div class="codeContent panelContent">
<pre class="code-java">
  LevenbergMarquardtOptimizer optimizer = <span class="code-keyword">new</span> LevenbergMarquardtOptimizer();
  CurveFitter fitter = <span class="code-keyword">new</span> CurveFitter(optimizer);
  fitter.addObservedPoint(2.805d, 0.6934785852953367d);
  fitter.addObservedPoint(2.74333333333333d, 0.6306772025518496d);
  fitter.addObservedPoint(1.655d, 0.9474675497289684);
  fitter.addObservedPoint(1.725d, 0.9013594835804194d);
  SimpleInverseFunction sif = <span class="code-keyword">new</span> SimpleInverseFunction(); <span class="code-comment">// <span class="code-object">Class</span> provided below
</span>  <span class="code-object">double</span>[] initialguess = <span class="code-keyword">new</span> <span class="code-object">double</span>[1];
  initialguess[0] = 1.0d;
  <span class="code-object">double</span>[] bestCoefficients = fitter.fit(sif, initialguess); <span class="code-comment">// &lt;---- ALWAYS RETURNS A VALUE OF initialguess !
</span>
    /**
     * This is my implementation of ParametricRealFunction
     * Implements y = ax^-1 + b <span class="code-keyword">for</span> use with an Apache CurveFitter implementation
      */
    <span class="code-keyword">private</span> class SimpleInverseFunction <span class="code-keyword">implements</span> ParametricRealFunction
    {
        <span class="code-keyword">public</span> <span class="code-object">double</span> value(<span class="code-object">double</span> x, <span class="code-object">double</span>[] doubles) <span class="code-keyword">throws</span> FunctionEvaluationException
        {
            <span class="code-comment">//y = ax^-1 + b
</span>            <span class="code-comment">//<span class="code-quote">"<span class="code-object">double</span>[] must include at least 1 but not more than 2 coefficients."</span>
</span>            <span class="code-keyword">if</span>(doubles == <span class="code-keyword">null</span> || doubles.length ==0 || doubles.length &gt; 2) <span class="code-keyword">throw</span> <span class="code-keyword">new</span> FunctionEvaluationException(doubles);
            <span class="code-object">double</span> a = doubles[0];
            <span class="code-object">double</span> b = 0;
            <span class="code-keyword">if</span>(doubles.length &gt;= 2) b = doubles[1];
            <span class="code-keyword">return</span> a * <span class="code-object">Math</span>.pow(x, -1d) + b;
        }
        <span class="code-keyword">public</span> <span class="code-object">double</span>[] gradient(<span class="code-object">double</span> x, <span class="code-object">double</span>[] doubles) <span class="code-keyword">throws</span> FunctionEvaluationException
        {
            <span class="code-comment">//derivative: -ax^-2
</span>            <span class="code-comment">//<span class="code-quote">"<span class="code-object">double</span>[] must include at least 1 but not more than 2 coefficients."</span>
</span>            <span class="code-keyword">if</span>(doubles == <span class="code-keyword">null</span> || doubles.length ==0 || doubles.length &gt; 2) <span class="code-keyword">throw</span> <span class="code-keyword">new</span> FunctionEvaluationException(doubles);
            <span class="code-object">double</span> a = doubles[0];
            <span class="code-object">double</span> b = 0;
            <span class="code-keyword">if</span>(doubles.length &gt;= 2) b = doubles[1];
            <span class="code-object">double</span> derivative = -a * <span class="code-object">Math</span>.pow(x, -2d);
            <span class="code-object">double</span>[]gradientVector = <span class="code-keyword">new</span> <span class="code-object">double</span>[1];
            gradientVector[0] = derivative;
            <span class="code-keyword">return</span> gradientVector; 
        }
    }
</pre>
</div></div> </description><environment><p>Java, Ubuntu 9.04 (64 bit)</p></environment><key id="12438499">MATH-304</key><summary>CurveFitter.fit(ParametricRealFunction, double[]) always returns the same value as the initial guess when used with the LevenbergMarquardtOptimizer</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="6">Invalid</resolution><assignee username="-1">Unassigned</assignee><reporter username="ddrummond">Daren Drummond</reporter><labels>
                    </labels><created>Mon, 19 Oct 2009 22:29:24 +0100</created><updated>Wed, 14 Apr 2010 01:06:07 +0100</updated><resolved>Sun, 27 Dec 2009 17:33:58 +0000</resolved><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12794707" author="luc" created="Sun, 27 Dec 2009 17:33:58 +0000"><p>The problem is not in the solver but in the implementation of the gradient method in your SimpleInverseFunction class. The value of the gradient is wrong. The gradient vector is computed with respect to the parameters (which is the reason why lengths must match), not with respect to the independent variable x. So for a function with one parameter p<span class="error">&#91;0&#93;</span> / x, the gradient is </p>
{ 1/x }
<p> and not </p>
{ -p[0]/x^2 }
<p>.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 27 Dec 2009 17:33:58 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150488</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160712</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-303] CurveFitter.fit(ParametricRealFunction, double[]) used with LevenbergMarquardtOptimizer throws ArrayIndexOutOfBoundsException when double[] length > 1 (AbstractLeastSquaresOptimizer.java:187)</title><link>https://issues.apache.org/jira/browse/MATH-303</link><project id="12310485" key="MATH">Commons Math</project><description><p>CurveFitter.fit(ParametricRealFunction, double[]) throws ArrayIndexOutOfBoundsException at AbstractLeastSquaresOptimizer.java:187 when used with the  LevenbergMarquardtOptimizer  and the length of the initial guess array is greater than 1.  The code will run if the initialGuess array is of length 1, but then CurveFitter.fit() just returns the same value as the initialGuess array (I'll file this as a separate issue).  Here is my example code:</p>
<div class="code panel" style="border-style: solid;border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;border-bottom-style: solid;"><b>CurveFitter with LevenbergMarquardtOptimizer and SimpleInverseFunction</b></div><div class="codeContent panelContent">
<pre class="code-java">
  LevenbergMarquardtOptimizer optimizer = <span class="code-keyword">new</span> LevenbergMarquardtOptimizer();
  CurveFitter fitter = <span class="code-keyword">new</span> CurveFitter(optimizer);
  fitter.addObservedPoint(2.805d, 0.6934785852953367d);
  fitter.addObservedPoint(2.74333333333333d, 0.6306772025518496d);
  fitter.addObservedPoint(1.655d, 0.9474675497289684);
  fitter.addObservedPoint(1.725d, 0.9013594835804194d);
  SimpleInverseFunction sif = <span class="code-keyword">new</span> SimpleInverseFunction(); <span class="code-comment">// <span class="code-object">Class</span> provided below
</span>  <span class="code-object">double</span>[] initialguess = <span class="code-keyword">new</span> <span class="code-object">double</span>[2];
  initialguess[0] = 1.0d;
  initialguess[1] = .5d;
  <span class="code-object">double</span>[] bestCoefficients = fitter.fit(sif, initialguess); <span class="code-comment">// &lt;---- <span class="code-keyword">throws</span> exception here
</span>
    /**
     * This is my implementation of ParametricRealFunction
     * Implements y = ax^-1 + b <span class="code-keyword">for</span> use with an Apache CurveFitter implementation
      */
    <span class="code-keyword">private</span> class SimpleInverseFunction <span class="code-keyword">implements</span> ParametricRealFunction
    {
        <span class="code-keyword">public</span> <span class="code-object">double</span> value(<span class="code-object">double</span> x, <span class="code-object">double</span>[] doubles) <span class="code-keyword">throws</span> FunctionEvaluationException
        {
            <span class="code-comment">//y = ax^-1 + b
</span>            <span class="code-comment">//<span class="code-quote">"<span class="code-object">double</span>[] must include at least 1 but not more than 2 coefficients."</span>
</span>            <span class="code-keyword">if</span>(doubles == <span class="code-keyword">null</span> || doubles.length ==0 || doubles.length &gt; 2) <span class="code-keyword">throw</span> <span class="code-keyword">new</span> FunctionEvaluationException(doubles);
            <span class="code-object">double</span> a = doubles[0];
            <span class="code-object">double</span> b = 0;
            <span class="code-keyword">if</span>(doubles.length &gt;= 2) b = doubles[1];
            <span class="code-keyword">return</span> a * <span class="code-object">Math</span>.pow(x, -1d) + b;
        }
        <span class="code-keyword">public</span> <span class="code-object">double</span>[] gradient(<span class="code-object">double</span> x, <span class="code-object">double</span>[] doubles) <span class="code-keyword">throws</span> FunctionEvaluationException
        {
            <span class="code-comment">//derivative: -ax^-2
</span>            <span class="code-comment">//<span class="code-quote">"<span class="code-object">double</span>[] must include at least 1 but not more than 2 coefficients."</span>
</span>            <span class="code-keyword">if</span>(doubles == <span class="code-keyword">null</span> || doubles.length ==0 || doubles.length &gt; 2) <span class="code-keyword">throw</span> <span class="code-keyword">new</span> FunctionEvaluationException(doubles);
            <span class="code-object">double</span> a = doubles[0];
            <span class="code-object">double</span> b = 0;
            <span class="code-keyword">if</span>(doubles.length &gt;= 2) b = doubles[1];
            <span class="code-object">double</span> derivative = -a * <span class="code-object">Math</span>.pow(x, -2d);
            <span class="code-object">double</span>[]gradientVector = <span class="code-keyword">new</span> <span class="code-object">double</span>[1];
            gradientVector[0] = derivative;
            <span class="code-keyword">return</span> gradientVector; 
        }
    }

</pre>
</div></div> 

<p>This is the resulting stack trace:</p>

<p>java.lang.ArrayIndexOutOfBoundsException: 1<br/>
	at org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.updateJacobian(AbstractLeastSquaresOptimizer.java:187)<br/>
	at org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.doOptimize(LevenbergMarquardtOptimizer.java:241)<br/>
	at org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.optimize(AbstractLeastSquaresOptimizer.java:346)<br/>
	at org.apache.commons.math.optimization.fitting.CurveFitter.fit(CurveFitter.java:134)<br/>
	at com.yieldsoftware.analyticstest.tasks.ppcbidder.CurveFittingTest.testFitnessRankCurveIntercept(CurveFittingTest.java:181)</p></description><environment><p>Java, Linux Ubuntu 9.04 (64 bit)</p></environment><key id="12438498">MATH-303</key><summary>CurveFitter.fit(ParametricRealFunction, double[]) used with LevenbergMarquardtOptimizer throws ArrayIndexOutOfBoundsException when double[] length > 1 (AbstractLeastSquaresOptimizer.java:187)</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="6">Invalid</resolution><assignee username="-1">Unassigned</assignee><reporter username="ddrummond">Daren Drummond</reporter><labels>
                    </labels><created>Mon, 19 Oct 2009 22:20:17 +0100</created><updated>Wed, 14 Apr 2010 01:07:56 +0100</updated><resolved>Sun, 27 Dec 2009 17:19:25 +0000</resolved><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12794704" author="luc" created="Sun, 27 Dec 2009 17:19:25 +0000"><p>The problem is not in the solver but in the implementation of the gradient method in your SimpleInverseFunction class. The length of the returned array must match the length of the second argument to the method (which is called parameters in the interface and doubles in your class). In your implementation, the array always has length 1 since it is created by statement:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-object">double</span>[]gradientVector = <span class="code-keyword">new</span> <span class="code-object">double</span>[1];
</pre>
</div></div>

<p>Also note that the value of the gradient is wrong. The gradient vector is computed with respect to the parameters (which is the reason why lengths must match), not with respect to the independent variable x. So for a function with two parameters p<span class="error">&#91;0&#93;</span> / x + p<span class="error">&#91;1&#93;</span>, the gradient is </p>
{ 1/x, 1 }
<p> and not </p>
{ -p[0]/x^2, 0 }
<p>.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 27 Dec 2009 17:19:25 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150487</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160713</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-302] Bugs in Simplex Implementation</title><link>https://issues.apache.org/jira/browse/MATH-302</link><project id="12310485" key="MATH">Commons Math</project><description><p>Simplex routine may return infeasible solution:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Bug1.java</b></div><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">import</span> java.util.ArrayList;
<span class="code-keyword">import</span> org.apache.commons.math.linear.ArrayRealVector;
<span class="code-keyword">import</span> org.apache.commons.math.optimization.GoalType;
<span class="code-keyword">import</span> org.apache.commons.math.optimization.OptimizationException;
<span class="code-keyword">import</span> org.apache.commons.math.optimization.linear.*;

<span class="code-keyword">public</span> class Bug1 {
    
    <span class="code-keyword">public</span> <span class="code-keyword">static</span> void main(<span class="code-object">String</span>[] args) <span class="code-keyword">throws</span> OptimizationException {
        
        LinearObjectiveFunction c = <span class="code-keyword">new</span> LinearObjectiveFunction(<span class="code-keyword">new</span> <span class="code-object">double</span>[7], 0.0d);
        
        ArrayList&lt;LinearConstraint&gt; cnsts = <span class="code-keyword">new</span> ArrayList&lt;LinearConstraint&gt;(5);
        LinearConstraint cnst;
        cnst = <span class="code-keyword">new</span> LinearConstraint(<span class="code-keyword">new</span> <span class="code-object">double</span>[] {1.00d, 1.00d, 0.00d, 0.00d, 0.0d, 0.00d, 0.00d}, Relationship.EQ, 1.0d);
        cnsts.add(cnst);
        cnst = <span class="code-keyword">new</span> LinearConstraint(<span class="code-keyword">new</span> <span class="code-object">double</span>[] {0.00d, 0.00d, 1.00d, 1.00d, 1.0d, 0.00d, 0.00d}, Relationship.EQ, 1.0d);
        cnsts.add(cnst);
        cnst = <span class="code-keyword">new</span> LinearConstraint(<span class="code-keyword">new</span> <span class="code-object">double</span>[] {0.00d, 0.00d, 0.00d, 0.00d, 0.0d, 1.00d, 1.00d}, Relationship.EQ, 1.0d);
        cnsts.add(cnst);
        cnst = <span class="code-keyword">new</span> LinearConstraint(<span class="code-keyword">new</span> <span class="code-object">double</span>[] {0.54d, 0.00d, 0.34d, 0.00d, 0.0d, 0.12d, 0.00d}, Relationship.EQ, 0.54d);
        cnsts.add(cnst);
        cnst = <span class="code-keyword">new</span> LinearConstraint(<span class="code-keyword">new</span> <span class="code-object">double</span>[] {0.00d, 0.54d, 0.00d, 0.34d, 0.0d, 0.00d, 0.12d}, Relationship.EQ, 0.34d);
        cnsts.add(cnst);
        <span class="code-object">System</span>.out.println(<span class="code-quote">"Constraints:"</span>);
        <span class="code-keyword">for</span>(LinearConstraint con : cnsts) {
            <span class="code-object">System</span>.out.println(con.getCoefficients().toString() + <span class="code-quote">" "</span> + con.getRelationship() + <span class="code-quote">" "</span> + con.getValue());
        }
        
        SimplexSolver simplex = <span class="code-keyword">new</span> SimplexSolver();
        <span class="code-object">double</span>[] sol = simplex.optimize(c, cnsts, GoalType.MINIMIZE, <span class="code-keyword">true</span>).getPointRef();
        <span class="code-object">System</span>.out.println(<span class="code-quote">"Solution:\n"</span> + <span class="code-keyword">new</span> ArrayRealVector(sol));
        <span class="code-object">System</span>.out.println(<span class="code-quote">"Third constraint is violated!"</span>);
    }
}
</pre>
</div></div>

<p>or may find no solution where some exist:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;"><b>Bug1.java</b></div><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">import</span> java.util.ArrayList;
<span class="code-keyword">import</span> org.apache.commons.math.linear.ArrayRealVector;
<span class="code-keyword">import</span> org.apache.commons.math.optimization.GoalType;
<span class="code-keyword">import</span> org.apache.commons.math.optimization.OptimizationException;
<span class="code-keyword">import</span> org.apache.commons.math.optimization.linear.*;

<span class="code-keyword">public</span> class Bug2 {
    
    <span class="code-keyword">public</span> <span class="code-keyword">static</span> void main(<span class="code-object">String</span>[] args) <span class="code-keyword">throws</span> OptimizationException {
        
        LinearObjectiveFunction c = <span class="code-keyword">new</span> LinearObjectiveFunction(<span class="code-keyword">new</span> <span class="code-object">double</span>[13], 0.0d);
        
        ArrayList&lt;LinearConstraint&gt; cnsts = <span class="code-keyword">new</span> ArrayList&lt;LinearConstraint&gt;(5);
        LinearConstraint cnst;
        cnst = <span class="code-keyword">new</span> LinearConstraint(<span class="code-keyword">new</span> <span class="code-object">double</span>[] {1.00d, 1.00d, 1.0d, 0.00d, 0.00d, 0.00d, 0.0d, 0.0d, 0.0d, 0.0d, 0.00d, 0.00d, 0.0d}, Relationship.EQ, 1.0d);
        cnsts.add(cnst);
        cnst = <span class="code-keyword">new</span> LinearConstraint(<span class="code-keyword">new</span> <span class="code-object">double</span>[] {0.00d, 0.00d, 0.0d, 1.00d, 1.00d, 1.00d, 1.0d, 0.0d, 0.0d, 0.0d, 0.00d, 0.00d, 0.0d}, Relationship.EQ, 1.0d);
        cnsts.add(cnst);
        cnst = <span class="code-keyword">new</span> LinearConstraint(<span class="code-keyword">new</span> <span class="code-object">double</span>[] {0.00d, 0.00d, 0.0d, 0.00d, 0.00d, 0.00d, 0.0d, 1.0d, 1.0d, 1.0d, 0.00d, 0.00d, 0.0d}, Relationship.EQ, 1.0d);
        cnsts.add(cnst);
        cnst = <span class="code-keyword">new</span> LinearConstraint(<span class="code-keyword">new</span> <span class="code-object">double</span>[] {0.00d, 0.00d, 0.0d, 0.00d, 0.00d, 0.00d, 0.0d, 0.0d, 0.0d, 0.0d, 1.00d, 1.00d, 1.0d}, Relationship.EQ, 1.0d);
        cnsts.add(cnst);
        cnst = <span class="code-keyword">new</span> LinearConstraint(<span class="code-keyword">new</span> <span class="code-object">double</span>[] {0.54d, 0.00d, 0.0d, 0.32d, 0.00d, 0.00d, 0.0d, 0.1d, 0.0d, 0.0d, 0.02d, 0.00d, 0.0d}, Relationship.EQ, 0.54d);
        cnsts.add(cnst);
        cnst = <span class="code-keyword">new</span> LinearConstraint(<span class="code-keyword">new</span> <span class="code-object">double</span>[] {0.00d, 0.54d, 0.0d, 0.00d, 0.32d, 0.00d, 0.0d, 0.0d, 0.1d, 0.0d, 0.00d, 0.02d, 0.0d}, Relationship.EQ, 0.32d);
        cnsts.add(cnst);
        cnst = <span class="code-keyword">new</span> LinearConstraint(<span class="code-keyword">new</span> <span class="code-object">double</span>[] {0.00d, 0.00d, 0.0d, 0.00d, 0.00d, 0.32d, 0.0d, 0.0d, 0.0d, 0.0d, 0.00d, 0.00d, 0.0d}, Relationship.EQ, 0.1d);
        cnsts.add(cnst);
        <span class="code-object">System</span>.out.println(<span class="code-quote">"Constraints:"</span>);
        <span class="code-keyword">for</span>(LinearConstraint con : cnsts) {
            <span class="code-object">System</span>.out.println(con.getCoefficients().toString() + <span class="code-quote">" "</span> + con.getRelationship() + <span class="code-quote">" "</span> + con.getValue());
        }
        
        <span class="code-object">System</span>.out.println(<span class="code-quote">"verifying a known solution:"</span>);
        ArrayRealVector sol = <span class="code-keyword">new</span> ArrayRealVector(<span class="code-keyword">new</span> <span class="code-object">double</span>[] {4.0d/9.0d, 5.0d/9.0d, 0.0d, 11.0d/16.0d, 0.0d, 5.0d/16.0d, 0.0d, 4.0d/5.0d, 0.0d, 1.0d/5.0d, 0.0d, 1.0d, 0.0d});
        <span class="code-object">System</span>.out.println(<span class="code-quote">"sol = "</span> + sol);
        <span class="code-keyword">for</span>(LinearConstraint con : cnsts) {
            <span class="code-object">System</span>.out.println(sol.dotProduct(con.getCoefficients()) + <span class="code-quote">" = "</span> + con.getValue());
        }
        
        SimplexSolver simplex = <span class="code-keyword">new</span> SimplexSolver();
        <span class="code-object">double</span>[] newsol = simplex.optimize(c, cnsts, GoalType.MINIMIZE, <span class="code-keyword">true</span>).getPointRef();
        <span class="code-object">System</span>.out.println(<span class="code-quote">"Solution:\n"</span> + <span class="code-keyword">new</span> ArrayRealVector(newsol));
    }
}
</pre>
</div></div></description><environment/><key id="12438085">MATH-302</key><summary>Bugs in Simplex Implementation</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="cwinter">Christian Winter</reporter><labels>
                    </labels><created>Wed, 14 Oct 2009 14:58:15 +0100</created><updated>Wed, 14 Apr 2010 01:09:59 +0100</updated><resolved>Thu, 15 Oct 2009 09:56:56 +0100</resolved><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12765730" author="bmccann" created="Wed, 14 Oct 2009 21:16:39 +0100"><p>These are likely bugs that have already been fixed in the Subversion repository.  Can you try again with the latest version compiled from SVN?</p>

<p>I've verified that the first problem gives valid output with the SVN version:<br/>
Constraints:</p>
{1; 1; 0; 0; 0; 0; 0}
<p> = 1.0</p>
{0; 0; 1; 1; 1; 0; 0}
<p> = 1.0</p>
{0; 0; 0; 0; 0; 1; 1}
<p> = 1.0</p>
{0.54; 0; 0.34; 0; 0; 0.12; 0}
<p> = 0.54</p>
{0; 0.54; 0; 0.34; 0; 0; 0.12}
<p> = 0.34<br/>
Solution:</p>
{0.37; 0.63; 0.65; 0; 0.35; 1; 0}


<p>I haven't completely checked the second one, but it appears to be correct as well with the SVN version:<br/>
Constraints:</p>
{1; 1; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0}
<p> = 1.0</p>
{0; 0; 0; 1; 1; 1; 1; 0; 0; 0; 0; 0; 0}
<p> = 1.0</p>
{0; 0; 0; 0; 0; 0; 0; 1; 1; 1; 0; 0; 0}
<p> = 1.0</p>
{0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 1}
<p> = 1.0</p>
{0.54; 0; 0; 0.32; 0; 0; 0; 0.1; 0; 0; 0.02; 0; 0}
<p> = 0.54</p>
{0; 0.54; 0; 0; 0.32; 0; 0; 0; 0.1; 0; 0; 0.02; 0}
<p> = 0.32</p>
{0; 0; 0; 0; 0; 0.32; 0; 0; 0; 0; 0; 0; 0}
<p> = 0.1<br/>
Solution:<br/>
<span class="error">&#91;0.3703703703703704, 0.5925925925925926, 0.037037037037037035, 0.6875, 0.0, 0.3125, 0.0, 0.9999999999999999, 0.0, 0.0, 1.0, 0.0, 0.0&#93;</span></p></comment><comment id="12765952" author="cwinter" created="Thu, 15 Oct 2009 08:41:46 +0100"><p>Alright. It works with the version from SVN.<br/>
Thanks.</p></comment><comment id="12765979" author="luc" created="Thu, 15 Oct 2009 09:56:56 +0100"><p>Already fixed in subversion repository by previous changes.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 14 Oct 2009 20:16:39 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>34159</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160714</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-301] Erf(z) should return 1.0 for z 'large' but  fails with a MaxIterationsExceededException for z > 26.0.</title><link>https://issues.apache.org/jira/browse/MATH-301</link><project id="12310485" key="MATH">Commons Math</project><description><p>Erf(z) should return 1.0 for z 'large' but fails with a MaxIterationsExceededException for z &gt; 26.0.</p>

<p>Sample code<br/>
-----------------</p>

<p>import org.apache.commons.math.MathException;<br/>
import org.apache.commons.math.special.Erf;</p>

<p>public class TestErf {</p>

<p>    public TestErf() {<br/>
    }</p>

<p>    public static void main(String[] args) {<br/>
        double z = Double.NEGATIVE_INFINITY;<br/>
        try {<br/>
            for(int i=0; i&lt;100; i++) </p>
{
                z = i;
                System.out.println("z = " + z + "  erf(z) = " + Erf.erf(z));
            }

<p>            System.out.flush();<br/>
        } catch (MathException mex) </p>
{
            System.out.println("z failed = " + z);
            mex.printStackTrace();
        }
<p>    }<br/>
}</p>

<p>Output<br/>
---------</p>

<p>z = 0.0  erf(z) = 0.0<br/>
z = 1.0  erf(z) = 0.842700792949715<br/>
z = 2.0  erf(z) = 0.9953222650189528<br/>
z = 3.0  erf(z) = 0.9999779095030024<br/>
z = 4.0  erf(z) = 0.9999999845827416<br/>
z = 5.0  erf(z) = 0.9999999999984622<br/>
z = 6.0  erf(z) = 0.9999999999999997<br/>
z = 7.0  erf(z) = 1.000000000000001<br/>
z = 8.0  erf(z) = 0.9999999999999986<br/>
z = 9.0  erf(z) = 1.000000000000003<br/>
z = 10.0  erf(z) = 1.0000000000000115<br/>
z = 11.0  erf(z) = 1.0000000000000016<br/>
z = 12.0  erf(z) = 0.9999999999999941<br/>
z = 13.0  erf(z) = 0.9999999999999846<br/>
z = 14.0  erf(z) = 1.0000000000000024<br/>
z = 15.0  erf(z) = 0.9999999999999805<br/>
z = 16.0  erf(z) = 0.9999999999999988<br/>
z = 17.0  erf(z) = 0.9999999999999949<br/>
z = 18.0  erf(z) = 0.9999999999999907<br/>
z = 19.0  erf(z) = 0.9999999999999731<br/>
z = 20.0  erf(z) = 0.9999999999999862<br/>
z = 21.0  erf(z) = 0.9999999999999721<br/>
z = 22.0  erf(z) = 1.000000000000017<br/>
z = 23.0  erf(z) = 1.0000000000000577<br/>
z = 24.0  erf(z) = 1.000000000000054<br/>
z = 25.0  erf(z) = 1.0000000000000262<br/>
z = 26.0  erf(z) = 1.0000000000000735<br/>
z failed = 27.0<br/>
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded<br/>
        at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:181)<br/>
        at org.apache.commons.math.special.Erf.erf(Erf.java:51)<br/>
        at org.fhcrc.math.minimization.TestErf.main(TestErf.java:23)</p></description><environment><p>MacOS and Linux</p></environment><key id="12437655">MATH-301</key><summary>Erf(z) should return 1.0 for z 'large' but  fails with a MaxIterationsExceededException for z > 26.0.</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="milac">Tom Milac</reporter><labels>
                    </labels><created>Thu, 8 Oct 2009 23:47:19 +0100</created><updated>Thu, 9 Dec 2010 11:48:11 +0000</updated><resolved>Mon, 8 Mar 2010 22:59:28 +0000</resolved><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12771637" author="njawalkar" created="Thu, 29 Oct 2009 21:39:58 +0000"><p>Hi,</p>

<p>Here's a patch that uses a different algorithm to calculate erf<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/error.gif" height="16" width="16" align="absmiddle" alt="" border="0"/>. It's adapted from "Handbook of Mathematical Functions: with Formulas, Graphs, and Mathematical Tables, by Milton Abramowitz and Irene A. Stegun".</p>

<p>It no longer throws a MathException if x is too large or small. I've added one test to check erf<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/error.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> for 20&lt;=x&lt;40, and all previous tests pass also.</p></comment><comment id="12833917" author="psteitz" created="Mon, 15 Feb 2010 18:41:32 +0000"><p>This issue and <a href="https://issues.apache.org/jira/browse/MATH-282" title="ChiSquaredDistributionImpl.cumulativeProbability &gt; 1" class="issue-link" data-issue-key="MATH-282"><del>MATH-282</del></a> are both caused by problems handling extreme values in Gamma.</p></comment><comment id="12836187" author="psteitz" created="Sat, 20 Feb 2010 15:14:57 +0000"><p>From commons-user, another example of inaccurate results for extreme erf values:</p>

<p>NormalDistribution normDist = new NormalDistributionImpl(40,1.5)<br/>
;<br/>
try</p>
{
System.out.println("cummulative probability::
"+normDist.cumulativeProbability(0.908789));
}
<p>catch(MathException e)</p>
{
e.printStackTrace();
}

<p><b>Result:</b><br/>
cummulative probability:: <b>-8.104628079763643E-15</b></p></comment><comment id="12842837" author="psteitz" created="Mon, 8 Mar 2010 22:59:28 +0000"><p>Fixed in r920558.</p></comment></comments><issuelinks><issuelinktype id="10030"><name>Reference</name><outwardlinks description="relates to"><issuelink><issuekey id="12432549">MATH-282</issuekey></issuelink><issuelink><issuekey id="12492820">MATH-456</issuekey></issuelink></outwardlinks></issuelinktype></issuelinks><attachments><attachment id="12423626" name="erf.txt" size="3943" author="njawalkar" created="Thu, 29 Oct 2009 21:40:42 +0000"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Thu, 29 Oct 2009 21:39:58 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>34208</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160715</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-300] Multidimensional interpolation</title><link>https://issues.apache.org/jira/browse/MATH-300</link><project id="12310485" key="MATH">Commons Math</project><description><p>A robust interpolation algorithm is explained here:<br/>
  <a href="http://www.dudziak.com/microsphere.php" class="external-link" rel="nofollow">http://www.dudziak.com/microsphere.php</a></p>

<p>Although it is probably not very efficient, it seems interesting in that it provides interpolation in N dimensions.</p></description><environment/><key id="12437022">MATH-300</key><summary>Multidimensional interpolation</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="erans">Gilles</reporter><labels>
                    </labels><created>Thu, 1 Oct 2009 15:40:04 +0100</created><updated>Wed, 14 Apr 2010 01:11:22 +0100</updated><resolved>Sun, 4 Oct 2009 22:59:50 +0100</resolved><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12761230" author="erans" created="Thu, 1 Oct 2009 15:44:44 +0100"><p>Java source files for inclusion in CM.</p></comment><comment id="12762055" author="luc" created="Sun, 4 Oct 2009 22:59:50 +0100"><p>patched applied in subversion with minor changes (javadoc and renamed an internal class for better understanding)<br/>
thanks for both the initial proposal and the implementation!</p></comment></comments><attachments><attachment id="12421023" name="ms_interp.tar.gz" size="4467" author="erans" created="Thu, 1 Oct 2009 15:44:44 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 4 Oct 2009 21:59:50 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150486</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160716</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-299] SimplexSolver returns no feasible solution</title><link>https://issues.apache.org/jira/browse/MATH-299</link><project id="12310485" key="MATH">Commons Math</project><description><p>I am trying to optimize this:</p>

<p>maximize: v</p>

<p>v &lt;= a1*p1 + a2*p2 + a3*p3 + a4*p4<br/>
v &lt;= b1*p1 + b2*p2 + b3*p3 + b4*p4<br/>
v &lt;= c1*p1 + c2*p2 + c3*p3 + c4*p4<br/>
v &lt;= d1*p1 + d2*p2 + d3*p3 + d4*p4</p>

<p>p1 + p2 + p3 + p4 = 1</p>

<p>where a1-d4 are constant specified below by the code (i didn't want to copy and paste them up here. you can look below to see what they are in the objective function). </p>

<p>		LinearObjectiveFunction f = new LinearObjectiveFunction(		<br/>
				new double[] </p>
{ 1,
						0, 
						0, 0, 0}
<p>, 0 );<br/>
		Collection&lt;LinearConstraint&gt;  constraints = new ArrayList&lt;LinearConstraint&gt; ();</p>


<p>		constraints.add(new LinearConstraint(new double[] </p>
{ -1, 
				1.7316145027890766, 
				 1.3584341412980305,
				 0.9305633063383639,
				 1.687117394945513
		}
<p>,<br/>
		Relationship.GEQ, 0));</p>

<p>		constraints.add(new LinearConstraint(new double[] </p>
{ -1, 
				0.6617060079461883, 
				 1.4862459822191323,
				 0.7692647272328988,
				 0.7329140944025636
		}
<p>,<br/>
		Relationship.GEQ, 0));</p>

<p>		constraints.add(new LinearConstraint(new double[] </p>
{ -1, 
				1.3255966888982322, 
				286.21607948837584,
				1.135907611434458,
				0.9803367440299271
		}
<p>,<br/>
		Relationship.GEQ, 0));</p>

<p>		constraints.add(new LinearConstraint(new double[] </p>
{ -1, 
				0.5428682596573682, 
				1.5745685116536952,
				1.4834419186882808,
				1.2884923232048968
		}
<p>,<br/>
		Relationship.GEQ, 0));</p>


<p>		constraints.add(new LinearConstraint(new double[] </p>
{0, 1, 1, 1, 1}
<p>,<br/>
				Relationship.EQ, 1));<br/>
		RealPointValuePair solution = null;<br/>
		try </p>
{
		
			solution = new SimplexSolver().optimize(f, constraints,
					GoalType.MAXIMIZE, true);
		}
<p>		catch (OptimizationException e) </p>
{
			e.printStackTrace();
		}

<p>I get this error back from the SimplexSolver.</p>

<p>org.apache.commons.math.optimization.linear.NoFeasibleSolutionException: no feasible solution<br/>
	at org.apache.commons.math.optimization.linear.SimplexSolver.solvePhase1(SimplexSolver.java:177)<br/>
	at org.apache.commons.math.optimization.linear.SimplexSolver.doOptimize(SimplexSolver.java:187)<br/>
	at org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.optimize(AbstractLinearOptimizer.java:106)<br/>
	at Runner.main(Runner.java:101)</p>

<p>One interesting thing to note is that if you round all the numbers to the nearest 100's place, it works. If you keep it with the floating point precision shown here, it doesn't.</p>
</description><environment><p>Windows XP commons Math 2.0 jre 1.6.0.16</p></environment><key id="12436311">MATH-299</key><summary>SimplexSolver returns no feasible solution</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="davidwilcox">David</reporter><labels>
                    </labels><created>Tue, 22 Sep 2009 15:43:32 +0100</created><updated>Wed, 14 Apr 2010 01:11:57 +0100</updated><resolved>Thu, 24 Sep 2009 23:36:26 +0100</resolved><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>1</watches><timeoriginalestimate seconds="28800">8h</timeoriginalestimate><timeestimate seconds="28800">8h</timeestimate><comments><comment id="12758353" author="luc" created="Tue, 22 Sep 2009 19:43:43 +0100"><p>I have tried to solve your problem with lp_solve to check whether it find a solution. Here is what I have set up using lp_solve lp format:</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedHeader panelHeader" style="border-bottom-width: 1px;"><b>math-299.lp</b></div><div class="preformattedContent panelContent">
<pre>max: v;

-v + 1.7316145027890766 p1 +   1.3584341412980305 p2 + 0.9305633063383639 p3 + 1.687117394945513  p4 &gt;= 0;
-v + 0.6617060079461883 p1 +   1.4862459822191323 p2 + 0.7692647272328988 p3 + 0.7329140944025636 p4 &gt;= 0;
-v + 1.3255966888982322 p1 + 286.21607948837584   p2 + 1.135907611434458  p3 + 0.9803367440299271 p4 &gt;= 0;
-v + 0.5428682596573682 p1 +   1.5745685116536952 p2 + 1.4834419186882808 p3 + 1.2884923232048968 p4 &gt;= 0;

p1 + p2 + p3 + p4 = 1;

free p1, p2, p3, p4;

</pre>
</div></div>

<p>Running lp_solve on this file returns the following error message:</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>%  lp_solve &lt; math-299.lp
This problem is unbounded
</pre>
</div></div>

<p>Could you check the constants and check if the problem really has a feasible finite solution ?</p></comment><comment id="12758444" author="bmccann" created="Tue, 22 Sep 2009 22:21:14 +0100"><p>We might be better than lp_solve on this one!  This worked fine for me and gave me the same answer as Lindo (1.398257)<br/>
David, did you use Commons Math 2.0?  The seemed to work fine for me when I used Commons Math compiled from the Subversion repository.  I'd recommend using the Subversion version because we've fixed numerous bugs that were present in the 2.0 release.</p>

<p>    @Test<br/>
    public void testMath299() throws OptimizationException {<br/>
        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] </p>
{ 1, 0, 0, 0, 0}
<p>, 0 );<br/>
        Collection&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt; ();<br/>
        constraints.add(new LinearConstraint(new double[] </p>
{ -1, 1.7316145027890766, 1.3584341412980305, 0.9305633063383639, 1.687117394945513 }
<p>, Relationship.GEQ, 0));<br/>
        constraints.add(new LinearConstraint(new double[] </p>
{ -1, 0.6617060079461883, 1.4862459822191323, 0.7692647272328988, 0.7329140944025636 }
<p>, Relationship.GEQ, 0));<br/>
        constraints.add(new LinearConstraint(new double[] </p>
{ -1, 1.3255966888982322, 286.21607948837584, 1.135907611434458, 0.9803367440299271 }
<p>, Relationship.GEQ, 0));<br/>
        constraints.add(new LinearConstraint(new double[] </p>
{ -1, 0.5428682596573682, 1.5745685116536952, 1.4834419186882808, 1.2884923232048968 }
<p>, Relationship.GEQ, 0));<br/>
        constraints.add(new LinearConstraint(new double[] </p>
{0, 1, 1, 1, 1}
<p>, Relationship.EQ, 1));<br/>
        RealPointValuePair solution = new SimplexSolver().optimize(f, constraints, GoalType.MAXIMIZE, true);<br/>
        Assert.assertEquals(1.398257, solution.getValue(), .0001);<br/>
    }</p></comment><comment id="12759200" author="luc" created="Thu, 24 Sep 2009 19:15:53 +0100"><p>David, do you consider the version in the subversion repository fixes this bug ?<br/>
Can we change its state to resolved ?</p></comment><comment id="12759214" author="davidwilcox" created="Thu, 24 Sep 2009 20:01:21 +0100"><p>I changed to the subversion repository and it seems fixed.</p>

</comment><comment id="12759292" author="luc" created="Thu, 24 Sep 2009 23:36:26 +0100"><p>already fixed in subversion by previous changes</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 22 Sep 2009 18:43:43 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>34188</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160717</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-298] EmpiriicalDisributionImpl.getUpperBounds does not return upper bounds on data bins</title><link>https://issues.apache.org/jira/browse/MATH-298</link><project id="12310485" key="MATH">Commons Math</project><description><p>Per the javadoc, the getUpperBounds method in the EmpiricalDistribution should return upper bounds for the bins used in computing the empirical distribution and the bin statistics.  What the method actually returns is the upper bounds of the subintervals of <span class="error">&#91;0,1&#93;</span> used in generating data following the empirical distribution.</p></description><environment/><key id="12436158">MATH-298</key><summary>EmpiriicalDisributionImpl.getUpperBounds does not return upper bounds on data bins</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="psteitz">Phil Steitz</reporter><labels>
                    </labels><created>Sun, 20 Sep 2009 15:46:42 +0100</created><updated>Wed, 14 Apr 2010 01:12:54 +0100</updated><resolved>Mon, 21 Sep 2009 02:32:21 +0100</resolved><version>1.0</version><version>1.1</version><version>1.2</version><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12757779" author="psteitz" created="Mon, 21 Sep 2009 02:32:21 +0100"><p>Fixed in r817128.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150485</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160718</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-297] Eigenvector computation incorrectly returning vectors of NaNs</title><link>https://issues.apache.org/jira/browse/MATH-297</link><project id="12310485" key="MATH">Commons Math</project><description><p>As reported by Axel Kramer on commons-dev, the following test case succeeds, but should fail:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> void testEigenDecomposition() {
    <span class="code-object">double</span>[][] m = { { 0.0, 1.0, -1.0 }, { 1.0, 1.0, 0.0 }, { -1.0,0.0, 1.0 } };
    RealMatrix rm = <span class="code-keyword">new</span> Array2DRowRealMatrix(m);
    assertEquals(rm.toString(),
        <span class="code-quote">"Array2DRowRealMatrix{{0.0,1.0,-1.0},{1.0,1.0,0.0},{-1.0,0.0,1.0}}"</span>);
    EigenDecompositionImpl ed = <span class="code-keyword">new</span> EigenDecompositionImpl(rm,
        MathUtils.SAFE_MIN);
    RealVector rv0 = ed.getEigenvector(0);
    assertEquals(rv0.toString(), <span class="code-quote">"{(NaN); (NaN); (NaN)}"</span>);
  }
</pre>
</div></div>

<p>ed.getRealEigenvalues() returns the correct eigenvalues (2, 1, -1), but all three eigenvectors contain only NaNs.</p></description><environment/><key id="12436157">MATH-297</key><summary>Eigenvector computation incorrectly returning vectors of NaNs</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="psteitz">Phil Steitz</reporter><labels>
                    </labels><created>Sun, 20 Sep 2009 15:33:07 +0100</created><updated>Wed, 14 Apr 2010 01:16:55 +0100</updated><resolved>Mon, 25 Jan 2010 17:58:04 +0000</resolved><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>2</watches><comments><comment id="12767159" author="billbarker" created="Mon, 19 Oct 2009 00:33:05 +0100"><p>This is now fixed as of R826550.  Unfortunately, I lack karma to resolve this issue, so will have to hope that somebody else will resolve it for me.</p></comment><comment id="12767433" author="axelclk" created="Mon, 19 Oct 2009 19:14:23 +0100"><p>If I'm expanding my testcase to the snippet below, I'm  now getting an eigenvector with all "negative values" at index 1.<br/>
I think this should be avoided. <br/>
See also the solution computed by Ted Dunning on the mailing list: <br/>
<a href="http://www.mail-archive.com/dev@commons.apache.org/msg12038.html" class="external-link" rel="nofollow">http://www.mail-archive.com/dev@commons.apache.org/msg12038.html</a></p>

<p>    double[][] m = { </p>
{ 0.0, 1.0, -1.0 }
<p>, </p>
{ 1.0, 1.0, 0.0 }
<p>, </p>
{ -1.0, 0.0, 1.0 }
<p> };<br/>
    RealMatrix rm = new Array2DRowRealMatrix(m);<br/>
    assertEquals(rm.toString(),<br/>
        "Array2DRowRealMatrix{{0.0,1.0,-1.0},</p>
{1.0,1.0,0.0}
<p>,{-1.0,0.0,1.0}}");<br/>
    EigenDecompositionImpl ed = new EigenDecompositionImpl(rm,<br/>
        MathUtils.SAFE_MIN);<br/>
    RealVector rv0 = ed.getEigenvector(0);<br/>
    RealVector rv1 = ed.getEigenvector(1);<br/>
    RealVector rv2 = ed.getEigenvector(2);<br/>
    assertEquals(rv0.toString(), "</p>
{0,58; 0,58; -0,58}
<p>");<br/>
    assertEquals(rv1.toString(), "{-0; -0,71; -0,71}");<br/>
    assertEquals(rv2.toString(), "</p>
{0,82; -0,41; 0,41}
<p>");</p></comment><comment id="12770367" author="bjohnson" created="Tue, 27 Oct 2009 03:14:56 +0000"><p>There still seems to be a problem with the decomposition of some matrices.  For example, the decomposition of the identity matrix </p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre> {{1,0},{0,1}}</pre>
</div></div>
<p> yields the correct eigenvalues, but NaN for all the eigenvector elements.<br/>
Crucially, the "isIncludedColumn" in the EigenDecompositionImplTest.java file always returns true (at least on my system) when the calculated eigenvectors have NaN elements, so is useless as a test for this problem.</p>

<p>Also, I discovered this problem when getting NaN values doing an SVD of certain matrices (where each row has only one non-zero value).  Since the SVD algorithm uses the EigenDecompositionImpl code, this seems to be a result of this current  bug.  (And ironically, I just told my students that one reason people love the SVD is that it essentially never fails).</p>




</comment><comment id="12770424" author="luc" created="Tue, 27 Oct 2009 08:43:22 +0000"><p>I will look at this issue one issu <a href="https://issues.apache.org/jira/browse/MATH-308" title="ArrayIndexOutOfBoundException in EigenDecompositionImpl" class="issue-link" data-issue-key="MATH-308"><del>MATH-308</del></a> has been solved.</p></comment><comment id="12770474" author="bjohnson" created="Tue, 27 Oct 2009 11:48:11 +0000"><p>Thanks.</p>

<p>The problem seems to be a divide by zero error with the variable diP1 in the following code, but this is probably as far as I'll get in debugging it:</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>   private void stationaryQuotientDifferenceWithShift(final double[] d, final double[] l,
                                                       final double lambda) {
        final int nM1 = d.length - 1;
        double si = -lambda;
        for (int i = 0, sixI = 0; i &lt; nM1; ++i, sixI += 6) {
            final double di   = d[i];
            final double li   = l[i];
            final double diP1 = di + si;
            final double liP1 = li * di / diP1;
            work[sixI]        = si;
            work[sixI + 1]    = diP1;
            work[sixI + 2]    = liP1;
            si = li * liP1 * si - lambda;
        }
        work[6 * nM1 + 1] = d[nM1] + si;
        work[6 * nM1]     = si;
    }
</pre>
</div></div></comment><comment id="12770601" author="bjohnson" created="Tue, 27 Oct 2009 18:39:01 +0000"><p>..., and I note that what I presume to be the original Fortran code (in dlar1v.f of LAPACK) has several sections of code marked:</p>

<ul>
	<li>Runs a slower version of the above loop if a NaN is detected</li>
</ul>


<p>Hope this helps in resolving the issue,</p>

<p>Bruce</p></comment><comment id="12772913" author="jake.mannix" created="Tue, 3 Nov 2009 07:23:23 +0000"><p>Doing the most trivial fix possible (dividing by the SAFE_MIN if diPl == 0)  on the line which leads to NaN appears to correctly fix this for the particular case of decomposing diagonal matrices (at least for 2x2 and 3x3 cases I checked with a unit test). </p>

<p>I'm not sure if this "fixes" the problem, because I'm not sure if I really grok the algorithm's implementation in this code.</p>

<p>We could see better if I knew how often this pops up (any matrix whose tri-diagonal form is actually diagonal?)...</p></comment><comment id="12772924" author="jake.mannix" created="Tue, 3 Nov 2009 07:42:24 +0000"><p>Ok, well sadly it's easy to find an example which <b>isn't</b> fixed by just removing that one divide-by-zero: </p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java"> { {0, 1, 0}, {1, 0, 0}, {0, 0, 1} } </pre>
</div></div>
<p> leads to perfectly reasonable eigenvalues (1, 1, -1), but NaN again rears its ugly head because findEigenVectors() assumes that, among other things, that the main diagonal does not start with a zero, and then divides by it.</p>

<p>Not sure what the proper solution is to this, but a non-shifted LDL^t decomposition is a lot easier to understand to me than the other place where the NaN pops up, so maybe I can figure this one out on the plane ride down to ApacheCon tomorrow.</p></comment><comment id="12783480" author="luc" created="Sun, 29 Nov 2009 21:27:31 +0000"><p>Another step towards the solution has been checked in as of r885268.<br/>
Just as Bruce noticed one month ago (thanks), there was an improvement in dstqds and dqds algorithms implemented in DLAR1V that are not in Dhillon's thesis.<br/>
The problem is still not completely solved as for example in dimension 3 the decomposition of identity leads to 3 times the same<br/>
vector (0, 0, 1) instead of giving (1, 0, 0), (0, 1, 0) and (0, 0, 1).</p></comment><comment id="12804619" author="luc" created="Mon, 25 Jan 2010 17:58:04 +0000"><p>The original issue as been solved 2009-11-29 as of r885268.<br/>
The remaining problem identified in the last comments has been moved in a separate JIRA issue: <a href="https://issues.apache.org/jira/browse/MATH-333" title="eigenvectors computation is wrong when several vectors share the same eigenvalue" class="issue-link" data-issue-key="MATH-333"><del>MATH-333</del></a></p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 18 Oct 2009 23:33:05 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>34221</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160719</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-296] LoessInterpolator.smooth() not working correctly</title><link>https://issues.apache.org/jira/browse/MATH-296</link><project id="12310485" key="MATH">Commons Math</project><description><p>I have been comparing LoessInterpolator.smooth output with the loessFit output from R (R-project.org, probably the most widely used loess implementation) and have had strangely different numbers. I have created a small set to test the difference and something seems to be wrong with the smooth method but I do no know what and I do not understand the code.<br/>
<b>Example 1</b></p>
<table class='confluenceTable'><tbody>
<tr>
<td class='confluenceTd'>x-input: </td>
<td class='confluenceTd'>1.5</td>
<td class='confluenceTd'> 3.0</td>
<td class='confluenceTd'> 6</td>
<td class='confluenceTd'> 8</td>
<td class='confluenceTd'> 12</td>
<td class='confluenceTd'>13</td>
<td class='confluenceTd'> 22</td>
<td class='confluenceTd'> 24</td>
<td class='confluenceTd'>28</td>
<td class='confluenceTd'>31</td>
</tr>
<tr>
<td class='confluenceTd'>y-input: </td>
<td class='confluenceTd'>3.1</td>
<td class='confluenceTd'>6.1</td>
<td class='confluenceTd'>3.1</td>
<td class='confluenceTd'>2.1</td>
<td class='confluenceTd'>1.4</td>
<td class='confluenceTd'>5.1</td>
<td class='confluenceTd'>5.1</td>
<td class='confluenceTd'>6.1</td>
<td class='confluenceTd'>7.1</td>
<td class='confluenceTd'>7.2</td>
</tr>
<tr>
<td class='confluenceTd'>Output LoessInterpolator.smooth():</td>
<td class='confluenceTd'>NaN</td>
<td class='confluenceTd'>NaN</td>
<td class='confluenceTd'>NaN</td>
<td class='confluenceTd'>NaN</td>
<td class='confluenceTd'>NaN</td>
<td class='confluenceTd'>NaN</td>
<td class='confluenceTd'>NaN</td>
<td class='confluenceTd'>NaN</td>
<td class='confluenceTd'>NaN</td>
<td class='confluenceTd'>NaN</td>
</tr>
<tr>
<td class='confluenceTd'>Output from loessFit() from R: </td>
<td class='confluenceTd'>3.191178027520974</td>
<td class='confluenceTd'>3.0407201231474037</td>
<td class='confluenceTd'>2.7089538903778636</td>
<td class='confluenceTd'>2.7450823274490297</td>
<td class='confluenceTd'>4.388011000549519</td>
<td class='confluenceTd'>4.60078952381848</td>
<td class='confluenceTd'>5.2988217587114805</td>
<td class='confluenceTd'>5.867536388457898</td>
<td class='confluenceTd'>6.7797794777879705</td>
<td class='confluenceTd'>7.444888598397342</td>
</tr>
</tbody></table>


<p><b>Example 2 (same x-values, y-values just floored)</b></p>
<table class='confluenceTable'><tbody>
<tr>
<td class='confluenceTd'>x-input: </td>
<td class='confluenceTd'>1.5</td>
<td class='confluenceTd'> 3.0</td>
<td class='confluenceTd'> 6</td>
<td class='confluenceTd'> 8</td>
<td class='confluenceTd'> 12</td>
<td class='confluenceTd'>13</td>
<td class='confluenceTd'> 22</td>
<td class='confluenceTd'> 24</td>
<td class='confluenceTd'>28</td>
<td class='confluenceTd'>31</td>
</tr>
<tr>
<td class='confluenceTd'>y-input: </td>
<td class='confluenceTd'>3</td>
<td class='confluenceTd'>6</td>
<td class='confluenceTd'>3</td>
<td class='confluenceTd'>2</td>
<td class='confluenceTd'>1</td>
<td class='confluenceTd'>5</td>
<td class='confluenceTd'>5</td>
<td class='confluenceTd'>6</td>
<td class='confluenceTd'>7</td>
<td class='confluenceTd'>7</td>
</tr>
<tr>
<td class='confluenceTd'>Output LoessInterpolator.smooth(): </td>
<td class='confluenceTd'>3</td>
<td class='confluenceTd'>6</td>
<td class='confluenceTd'>3</td>
<td class='confluenceTd'>2</td>
<td class='confluenceTd'>0.9999999999999005</td>
<td class='confluenceTd'>5.0000000000001705</td>
<td class='confluenceTd'>5</td>
<td class='confluenceTd'>5.999999999999972</td>
<td class='confluenceTd'>7</td>
<td class='confluenceTd'>6.999999999999967</td>
</tr>
<tr>
<td class='confluenceTd'>Output from loessFit() from R: </td>
<td class='confluenceTd'>3.091423927353068</td>
<td class='confluenceTd'>2.9411521572524237</td>
<td class='confluenceTd'>2.60967950675505</td>
<td class='confluenceTd'>2.7421759322272248</td>
<td class='confluenceTd'>4.382996912300442</td>
<td class='confluenceTd'>4.646774316632562</td>
<td class='confluenceTd'>5.225153658563424</td>
<td class='confluenceTd'>5.768301917477015</td>
<td class='confluenceTd'>6.637079139313073</td>
<td class='confluenceTd'>7.270482144410326</td>
</tr>
</tbody></table>


<p>As you see the output is practically the replicated y-input.<br/>
At this point this funtionality is critical for us but I could not find any other suitable java-implementation. Help. Maybe this strange behaviour gives someone a clue?</p>
</description><environment><p>Java 1.6 on Vista</p></environment><key id="12435875">MATH-296</key><summary>LoessInterpolator.smooth() not working correctly</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="romeop">Romeo P</reporter><labels>
                    </labels><created>Wed, 16 Sep 2009 22:14:20 +0100</created><updated>Wed, 14 Apr 2010 01:18:11 +0100</updated><resolved>Tue, 26 Jan 2010 21:54:45 +0000</resolved><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>2</watches><comments><comment id="12757189" author="luc" created="Fri, 18 Sep 2009 15:52:52 +0100"><p>What are your settings for bandwidth and robustness iterations ?<br/>
I have tried your examples and the first one doesn't lead to NaN with the default settings for me.</p></comment><comment id="12757216" author="romeop" created="Fri, 18 Sep 2009 16:54:31 +0100"><p>My settings are 0.3 and 4 (these are used as defaults in R). <br/>
If I use the standard values I still get:</p>
<table class='confluenceTable'><tbody>
<tr>
<td class='confluenceTd'>3.100000000000003</td>
<td class='confluenceTd'>6.099999999999999</td>
<td class='confluenceTd'>3.0999999999999996</td>
<td class='confluenceTd'>NaN</td>
<td class='confluenceTd'>NaN</td>
<td class='confluenceTd'>NaN</td>
<td class='confluenceTd'>NaN</td>
<td class='confluenceTd'>NaN</td>
<td class='confluenceTd'>7.1</td>
<td class='confluenceTd'>7.85</td>
</tr>
</tbody></table>


<p>Here is my test code for a quick look:</p>

<p>public void testLoessInterpolator() throws MathException{<br/>
		dataX = new double<span class="error">&#91;10&#93;</span>;<br/>
		dataX<span class="error">&#91;0&#93;</span> = 1.5;<br/>
		dataX<span class="error">&#91;1&#93;</span> = 3.0;<br/>
		dataX<span class="error">&#91;2&#93;</span> = 6;<br/>
		dataX<span class="error">&#91;3&#93;</span> = 8;<br/>
		dataX<span class="error">&#91;4&#93;</span> = 12;		<br/>
		dataX<span class="error">&#91;5&#93;</span> = 13;<br/>
		dataX<span class="error">&#91;6&#93;</span> = 22;<br/>
		dataX<span class="error">&#91;7&#93;</span> = 24;<br/>
		dataX<span class="error">&#91;8&#93;</span> = 28;<br/>
		dataX<span class="error">&#91;9&#93;</span> = 31;</p>


<p>		dataY = new double<span class="error">&#91;10&#93;</span>;<br/>
		dataY<span class="error">&#91;0&#93;</span> = 3.1;<br/>
		dataY<span class="error">&#91;1&#93;</span> = 6.1;<br/>
		dataY<span class="error">&#91;2&#93;</span> = 3.1;<br/>
		dataY<span class="error">&#91;3&#93;</span> = 2.1;<br/>
		dataY<span class="error">&#91;4&#93;</span> = 1.4;		<br/>
		dataY<span class="error">&#91;5&#93;</span> = 5.1;<br/>
		dataY<span class="error">&#91;6&#93;</span> = 5.1;<br/>
		dataY<span class="error">&#91;7&#93;</span> = 6.1;<br/>
		dataY<span class="error">&#91;8&#93;</span> = 7.1;<br/>
		dataY<span class="error">&#91;9&#93;</span> = 7.2;</p>

<p>		LoessInterpolator li = new LoessInterpolator();<br/>
		double[] ly = li.smooth(dataX, dataY);</p>

<p>		for (int i = 0; i &lt; ly.length; i++) </p>
{
			System.out.println(ly[i]);
		}
<p>		<br/>
	}</p>

<p>Is there any obvious error which I do not see? Is it possible (although highely unlikely) that some java floating point operations are broken on Vista64 (which I am using)?<br/>
Can you show your results?</p></comment><comment id="12757338" author="luc" created="Fri, 18 Sep 2009 19:45:17 +0100"><p>OK. I reproduce exactly your results on a Linux computer with openJDK 1.6 on an AMD64 processor.<br/>
I'll have a look at this issue.</p></comment><comment id="12757396" author="luc" created="Fri, 18 Sep 2009 21:31:12 +0100"><p>The math-296-test.patch is a set of two test cases that reproduce the problem.</p>

<p>Running the first test shows that at the end of iteration 0, the weights for points at indices 4 and 5 are set to 0. At iteration 1, when computing point i=4, the bandwidth is such that ileft=3 and iright=4. For k=3, we get w=0 because dist=4 and denom=1/4. For k=4 and k=5, we get w=0 because robustness<span class="error">&#91;k&#93;</span>=0. So all w are 0, sumWeights=0 and since it is used in some divisions, NaN appears.</p>

<p>I think their should be some protection against this case somewhere. I'll ask the author of the original contribution about this.</p></comment><comment id="12758165" author="jkff" created="Tue, 22 Sep 2009 08:49:22 +0100"><p>Thanks for reporting the problem, Romeo. Actually, I did not compare the results of my implementation with those of R's: I purely implemented the algorithm described in the paper, and checked that the results are sensible. Unfortunately I will most probably not have time to debug the issue until weekend, but I can provide explanations to you about the code in case the issue is so critical for you that you urge to fix it yourself <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p></comment><comment id="12759203" author="romeop" created="Thu, 24 Sep 2009 19:22:55 +0100"><p>Eugene, that is great news. I already tried to fix it but did not get very far. <br/>
First of all, please ignore the sample values that are supposed to be from loessFit in the example above, they are not. I have reviewed my code and I can not reproduce those values. Sorry for that. When I try the examples again I get hardly any changes except for the NaN values (perhaps due to the fact that the values are not very close together?). The testcases should be deleted/changed to reflect this  I have compiled a more appropriate testcase:</p>

<table class='confluenceTable'><tbody>
<tr>
<td class='confluenceTd'>xval</td>
<td class='confluenceTd'>0.1</td>
<td class='confluenceTd'>0.2</td>
<td class='confluenceTd'>0.3</td>
<td class='confluenceTd'>0.4</td>
<td class='confluenceTd'>0.5</td>
<td class='confluenceTd'>0.6</td>
<td class='confluenceTd'>0.7</td>
<td class='confluenceTd'>0.8</td>
<td class='confluenceTd'>0.9</td>
<td class='confluenceTd'>1.0</td>
<td class='confluenceTd'>1.1</td>
<td class='confluenceTd'>1.2</td>
<td class='confluenceTd'>1.3</td>
<td class='confluenceTd'>1.4</td>
<td class='confluenceTd'>1.5</td>
<td class='confluenceTd'>1.6</td>
<td class='confluenceTd'>1.7</td>
<td class='confluenceTd'>1.8</td>
<td class='confluenceTd'>1.9</td>
<td class='confluenceTd'>2.0</td>
</tr>
<tr>
<td class='confluenceTd'>yval</td>
<td class='confluenceTd'>0.47</td>
<td class='confluenceTd'>0.48</td>
<td class='confluenceTd'>0.55</td>
<td class='confluenceTd'>0.56</td>
<td class='confluenceTd'>-0.08</td>
<td class='confluenceTd'>-0.04</td>
<td class='confluenceTd'>-0.07</td>
<td class='confluenceTd'>-0.07</td>
<td class='confluenceTd'>-0.56</td>
<td class='confluenceTd'>-0.46</td>
<td class='confluenceTd'>-0.56</td>
<td class='confluenceTd'>-0.52</td>
<td class='confluenceTd'>-3.03</td>
<td class='confluenceTd'>-3.08</td>
<td class='confluenceTd'>-3.09</td>
<td class='confluenceTd'>-3.04</td>
<td class='confluenceTd'>3.54</td>
<td class='confluenceTd'>3.46</td>
<td class='confluenceTd'>3.36</td>
<td class='confluenceTd'>3.35</td>
</tr>
<tr>
<td class='confluenceTd'>result</td>
<td class='confluenceTd'>0.46076343001050907</td>
<td class='confluenceTd'>0.49997135715509317</td>
<td class='confluenceTd'>0.5429801876574236</td>
<td class='confluenceTd'>0.3191000440696382</td>
<td class='confluenceTd'>0.17824135321363765</td>
<td class='confluenceTd'>-0.03999999999999973</td>
<td class='confluenceTd'>-0.0699999999999999</td>
<td class='confluenceTd'>-0.21301261447145203</td>
<td class='confluenceTd'>-0.3260295715150817</td>
<td class='confluenceTd'>-0.45999999999999996</td>
<td class='confluenceTd'>-0.560000000000002</td>
<td class='confluenceTd'>-1.4961752602921834</td>
<td class='confluenceTd'>-2.1317826106042093</td>
<td class='confluenceTd'>-3.0799999999999965</td>
<td class='confluenceTd'>-3.089999999999987</td>
<td class='confluenceTd'>-0.6229499113916326</td>
<td class='confluenceTd'>0.9970283360414918</td>
<td class='confluenceTd'>3.450011252797152</td>
<td class='confluenceTd'>3.3907474604481567</td>
<td class='confluenceTd'>3.336774229999947</td>
</tr>
<tr>
<td class='confluenceTd'>loessFit</td>
<td class='confluenceTd'>0.4609008580907899</td>
<td class='confluenceTd'>0.4985267031275769</td>
<td class='confluenceTd'>0.5408291873645029</td>
<td class='confluenceTd'>0.308077939113221</td>
<td class='confluenceTd'>0.1754074466314782</td>
<td class='confluenceTd'>-0.0419929152622151</td>
<td class='confluenceTd'>-0.07205683451999362</td>
<td class='confluenceTd'>-0.19661654144034335</td>
<td class='confluenceTd'>-0.31073415047540565</td>
<td class='confluenceTd'>-0.44615854234427305</td>
<td class='confluenceTd'>-0.5567051673879394</td>
<td class='confluenceTd'>-1.4972970376332615</td>
<td class='confluenceTd'>-2.1330233520442317</td>
<td class='confluenceTd'>-3.08</td>
<td class='confluenceTd'>-3.0900000000000043</td>
<td class='confluenceTd'>-0.6208045742447532</td>
<td class='confluenceTd'>0.9823842010251099</td>
<td class='confluenceTd'>3.449395357814414</td>
<td class='confluenceTd'>3.389793487936696</td>
<td class='confluenceTd'>3.3359749840089385</td>
</tr>
<tr>
<td class='confluenceTd'>weight(see below)</td>
<td class='confluenceTd'>1.0</td>
<td class='confluenceTd'>1.0</td>
<td class='confluenceTd'>1.0</td>
<td class='confluenceTd'>1.0</td>
<td class='confluenceTd'>1.0</td>
<td class='confluenceTd'>1.0</td>
<td class='confluenceTd'>1.0</td>
<td class='confluenceTd'>1.0</td>
<td class='confluenceTd'>1.0</td>
<td class='confluenceTd'>1.0</td>
<td class='confluenceTd'>1.0</td>
<td class='confluenceTd'>1.0</td>
<td class='confluenceTd'>0.0</td>
<td class='confluenceTd'>0.0</td>
<td class='confluenceTd'>1.0</td>
<td class='confluenceTd'>1.0</td>
<td class='confluenceTd'>0.0</td>
<td class='confluenceTd'>0.0</td>
<td class='confluenceTd'>1.0</td>
<td class='confluenceTd'>1.0</td>
</tr>
<tr>
<td class='confluenceTd'>loessFit with weights</td>
<td class='confluenceTd'>0.4780117093745368</td>
<td class='confluenceTd'>0.4924876444111407</td>
<td class='confluenceTd'>0.48398021996388496</td>
<td class='confluenceTd'>0.3201446090891406</td>
<td class='confluenceTd'>0.17880078999161195</td>
<td class='confluenceTd'>-0.003305611690841502</td>
<td class='confluenceTd'>-0.08829472923805592</td>
<td class='confluenceTd'>-0.20902549447499932</td>
<td class='confluenceTd'>-0.3267558674057103</td>
<td class='confluenceTd'>-0.45542226638134214</td>
<td class='confluenceTd'>-0.518369970805548</td>
<td class='confluenceTd'>-0.5365908808969353</td>
<td class='confluenceTd'>-1.492628917733731</td>
<td class='confluenceTd'>-2.1151751796193703</td>
<td class='confluenceTd'>-3.09</td>
<td class='confluenceTd'>-3.0400000000000005</td>
<td class='confluenceTd'>-2.9899999999999998</td>
<td class='confluenceTd'>0.15500000000000005</td>
<td class='confluenceTd'>1.7524999999999986</td>
<td class='confluenceTd'>3.3499999999999996</td>
</tr>
</tbody></table>



<p>The results do not differ very much and there are no NaN, if the values are close together. Can this be explained by a slightly different algorithm in R?</p>

<p>For easy copy and paste:<br/>
double[] yval=</p>
{0.47, 0.48, 0.55, 0.56,-0.08,-0.04,-0.07,-0.07,-0.56,-0.46,-0.56,-0.52,-3.03,-3.08,-3.09,-3.04, 3.54, 3.46, 3.36, 3.35}
<p>;<br/>
double[] xval=</p>
{0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0}
<p>;<br/>
double[] weights = </p>
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1}
<p>;<br/>
LoessInterpolator li = new LoessInterpolator(0.3,4);<br/>
result = li.smooth(xval, yval);</p>


<p>Another related thing. A very common use of the R-function is with weights (that is how we use it as well): <br/>
<b>loessFit(yValues, xValues, weights)</b><br/>
where weights are the values 0 or 1, I dont know if some are using weights between 0 and 1 <br/>
If a spot has weight 0 it still gets loessfitted but does not affect his neighbours. This way you can specifiy more relevant points and have the complete data set interpolate around these.</p>

<p>In your implementation you use robustnessWeights and set them initially to 1. Do I understand this correctly that these are actually the same weights as the ones mentioned above?<br/>
Would it be possible to add a function with a third parameter and have the weights provided by the user? I tried just passing them trough as a parameter instead of initializing with 1 but it did not do the trick.</p></comment><comment id="12759623" author="jkff" created="Fri, 25 Sep 2009 17:56:11 +0100"><p>Romeo,<br/>
Here is a patch that implements the weighted loess fit (the results agree reasonably with R's implementation).<br/>
Also, the patch fixes some numeric instability by introducing an 'accuracy' parameter.</p>

<p>Luc,<br/>
Could you please review the patch and probably apply it?</p></comment><comment id="12759682" author="luc" created="Fri, 25 Sep 2009 19:35:08 +0100"><p>solved in subversion repository as of r818942.<br/>
patch applied with slight changes<br/>
thanks for the report and thanks for the patch</p></comment><comment id="12760030" author="romeop" created="Sun, 27 Sep 2009 15:12:39 +0100"><p>Eugene, Luc, thanks. Great news. I have been testing this with some bigger real-life datasets (~800 points) and the results seem to be very close to R).<br/>
There is one more problem though but I think I have already found the fix. You can still get NaN-results. <br/>
The reason is that sumWeights can become 0 and there are a couple of divisions with sumWeights. This multiplies to the degree that the complete result set is an array of NaN.<br/>
I think (but am not sure) that this happens if you have a long series of 0-weights which is bigger then the amount of points you get through the bandwidth.</p>

<p>I have just added the following lines after these sumWeights divisions:<br/>
after: <b>double meanXSquared = sumXSquared / sumWeights;</b></p>

<p>                if(sumWeights==0)</p>
{
                	meanX=0;
                	meanY=0;
                	meanXY=0;
                	meanXSquared=0;
                }
<p>That did the trick for me and the results seem accurate. I will test more during the next week with even more datasets. I hope I do not make any fundamental thinking error.</p>

<p>If you think this is correct please add it to the code.</p></comment><comment id="12760921" author="jkff" created="Wed, 30 Sep 2009 15:25:04 +0100"><p>Romeo, I am not sure about whether this behavior should be considered correct. <br/>
It essentially means that there is no data inside an approximation window at all, so why should we make the data appear to be zero? <br/>
How about a variant "express the approximation window in terms of the number of points with non-zero weights"?</p></comment><comment id="12761022" author="romeop" created="Wed, 30 Sep 2009 23:13:24 +0100"><p>Sorry, maybe I was a little unclear in my explanation. <br/>
Actually there is data, there are just no weights in the approximation window. Lets say we have 300 point and the first 100 are weighted 0, the others are weighted 1, they are still valid data points. Being weighted 0 does not mean the data point can be deleted, it just means it does not affect his neighbours in terms of normalization (that is how the concept of normalization weights was explained to me)<br/>
What happens currently is the first ones become NaN and their neighbours become NaN to the point that <b>all</b> points become NaN. This shouldn't happen.<br/>
But do not misunderstand me, I am just assuming that the reason is because of the bandwidth as my dataset has this structure, I am not really sure about it. <br/>
I have done some debugging on the code but there are really a lot of loops so I could not pinpoint when and why exactly this is starting to happen as it is not right from the beginning.</p></comment><comment id="12761237" author="jkff" created="Thu, 1 Oct 2009 16:00:27 +0100"><p>Romeo, have I understood you correctly that you'd like the data points with zero weights to not influence the approximation <b>coefficients</b> at all, but to still have computed approximation <b>values</b> for them?</p></comment><comment id="12763126" author="romeop" created="Wed, 7 Oct 2009 17:58:56 +0100"><p>Yes. I think that is correct. No influence on the approximation coefficients but still getting normalized (getting approximation values). </p>

<p>Here is an except from the userguide for the R-limma package, which uses the loessFit function for some operations:</p>

<blockquote><p>Any spot quality weights found in RG will be used in the normalization by default. This means for example that spots with zero weight (flagged out) will not influence the normalization of other spots. The use of spot quality weights will not however result in any spots being removed from the data object. Even spots with zero weight will be normalized and will appear in the output object, such spots will simply not have any influence on the other spots.</p></blockquote>

<p>However I am not sure how to handle the bandwidth. Example: if you have a bandwidth of 0.3, how do you compute the relevant points?<br/>
1. Find the 30% in the complete set and the use only the weighted ones inside this set<br/>
2. Look at all weighted ones and use 30% of them</p>

<p>To me the first one sounds like the logical one but I am not sure.</p></comment><comment id="12767886" author="jkff" created="Tue, 20 Oct 2009 18:45:19 +0100"><p>Sorry for the delay again: I just forgot about the issue. Don't hesitate to ping me, I am not a very organized person.</p>

<p>Adding zero-weighted points <b>must not</b> change the result in non-zero-weighted points and the approximation coefficients.<br/>
Thus, zero-weighted points must not participate in computing the bandwidth, and generally in computing anything at all: that is the <b>second</b> approach.</p>

<p>However, seems like R takes the <b>first</b> one, because I've implemented the second one and results disagreed with R on the testcase above.</p>

<p>Are you OK with having a more logical implementation that disagrees with R? <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p></comment><comment id="12793869" author="psteitz" created="Wed, 23 Dec 2009 01:19:41 +0000"><p>Eugene's reasoning sounds correct to me.  I am inclined to say we document carefully and resolve this issue.  Any objections?</p></comment><comment id="12794171" author="luc" created="Wed, 23 Dec 2009 19:21:29 +0000"><p>I agree, but would like to know what R produces when a large (read larger than bandwidth) chunk of zero weights occurs.</p></comment><comment id="12804620" author="luc" created="Mon, 25 Jan 2010 18:07:44 +0000"><p>Coming back to this issue.<br/>
Eugene, as you said you implemented the second approach and people agree with your reasoning,<br/>
could you provide a patch using this second approach so we can apply it ?</p></comment><comment id="12805039" author="jkff" created="Tue, 26 Jan 2010 14:27:21 +0000"><p>Here is the patch.</p></comment><comment id="12805227" author="luc" created="Tue, 26 Jan 2010 21:54:45 +0000"><p>second patch applied as of r903440<br/>
thanks for the patch</p></comment></comments><attachments><attachment id="12431424" name="MATH-296.2.patch" size="7096" author="jkff" created="Tue, 26 Jan 2010 14:27:21 +0000"/><attachment id="12420070" name="math-296-test.patch" size="2192" author="luc" created="Fri, 18 Sep 2009 21:31:12 +0100"/><attachment id="12420572" name="math-296.patch" size="12945" author="jkff" created="Fri, 25 Sep 2009 17:56:11 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>3.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Fri, 18 Sep 2009 14:52:52 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>34191</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160720</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-295] RandomDataImpl.nextPoisson fails for means in range 6.0 - 19.99</title><link>https://issues.apache.org/jira/browse/MATH-295</link><project id="12310485" key="MATH">Commons Math</project><description><p>RandomDataImpl.nextPoission(double mean) fails frequently (but not every time) from calls with mean &gt;= 6.0 and &lt; 20.0<br/>
Below 6.0 and above 20 it seems fine, as far as I can tell by testing values at random.</p>

<p>When it fails, the exception is as follows  - this from calling nextPoisson(6.0)</p>

<p>org.apache.commons.math.MathRuntimeException$4: must have n &gt;= 0 for n!, got n = -2<br/>
	at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:282)<br/>
	at org.apache.commons.math.util.MathUtils.factorialLog(MathUtils.java:561)<br/>
	at org.apache.commons.math.random.RandomDataImpl.nextPoisson(RandomDataImpl.java:434)</p>

<p>ie it's calling MathUtils.factorialLog with a negative argument.</p>
</description><environment><p>Java 1.6 on Mac 0S X</p></environment><key id="12435450">MATH-295</key><summary>RandomDataImpl.nextPoisson fails for means in range 6.0 - 19.99</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="3">Duplicate</resolution><assignee username="-1">Unassigned</assignee><reporter username="mcfall">Jason McFall</reporter><labels>
                    </labels><created>Fri, 11 Sep 2009 18:40:24 +0100</created><updated>Wed, 14 Apr 2010 01:18:51 +0100</updated><resolved>Fri, 11 Sep 2009 18:44:55 +0100</resolved><version>1.2</version><version>2.0</version><due/><votes>0</votes><watches>0</watches><comments><comment id="12754247" author="mcfall" created="Fri, 11 Sep 2009 18:43:29 +0100"><p>Sorry, duplicate of Math 294 (got a 'server down for maintenance' error message when raising 294 but obviously it did get stored)</p></comment><comment id="12754248" author="mcfall" created="Fri, 11 Sep 2009 18:44:55 +0100"><p>Duplicate of Math 294</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150484</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160721</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-294] RandomDataImpl.nextPoisson fails for means in range 6.0 - 19.99</title><link>https://issues.apache.org/jira/browse/MATH-294</link><project id="12310485" key="MATH">Commons Math</project><description><p>math.random.RandomDataImpl.nextPoisson(double mean) fails frequently (but not always) for values of mean between 6.0 and 19.99 inclusive. For values below 6.0 (where I see there is a branch in the logic) and above 20.0 it seems to be okay (though I've only randomly sampled the space and run a million trials for the values I've tried)</p>

<p>When it fails, the exception is as follows (this for a mean of 6.0)</p>

<p>org.apache.commons.math.MathRuntimeException$4: must have n &gt;= 0 for n!, got n = -2<br/>
	at org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(MathRuntimeException.java:282)<br/>
	at org.apache.commons.math.util.MathUtils.factorialLog(MathUtils.java:561)<br/>
	at org.apache.commons.math.random.RandomDataImpl.nextPoisson(RandomDataImpl.java:434) </p>

<p>ie MathUtils.factorialLog is being called with a negative input</p>

<p>To reproduce:</p>

<p>    JDKRandomGenerator random = new JDKRandomGenerator();<br/>
    random.setSeed(123456);<br/>
    RandomData randomData = new RandomDataImpl(random);</p>

<p>    for (int i=0; i&lt; 1000000; i++)</p>
{
        randomData.nextPoisson(6.0);
    }</description><environment><p>Java 1.6 on mac osX</p></environment><key id="12435449">MATH-294</key><summary>RandomDataImpl.nextPoisson fails for means in range 6.0 - 19.99</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="mcfall">Jason McFall</reporter><labels>
                    </labels><created>Fri, 11 Sep 2009 18:34:29 +0100</created><updated>Wed, 14 Apr 2010 01:20:03 +0100</updated><resolved>Mon, 12 Oct 2009 03:08:12 +0100</resolved><version>1.2</version><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12754704" author="luc" created="Sun, 13 Sep 2009 15:45:08 +0100"><p>The failure seems to be related with a wrong detection of out of bound cases.<br/>
In the example given the failure occurs at iteration 125 on my computer (Open JDK 1.6, Linux, 64bits). At the beginning of the loop, the u = nextUniform(0.0, c) random drawing leads to a value u smaller than c1. So the first branch of the if is taken and another random drawing is done : z = nextGaussian(0.0, 1.0) which leads to a value for x far below mu (x = -8, mu = 2).</p>

<p>This is detected as w is set to positive infinity, but in fact this is not sufficient. The "accept" boolean is still computed despite it will always be false.</p>

<p>The attached patch is an attempt to compute "accept" only in some cases and to force it to "false" in other cases without computation.</p>

<p>I did <b>not</b> check this in subversion because I would like some other people to have a look at it. I am not sure it does work properly because when I compute for example the mean of 200, 100000, 1000000 or 10000000 calls to nextPoisson(6.0), I always get values between 14.7 and 15.2. I have seen the variance of a Poisson distribution is the same as its mean and so could expect a large value, but this still looked strange to me.</p></comment><comment id="12755314" author="psteitz" created="Tue, 15 Sep 2009 03:30:11 +0100"><p>Lets hold on the patch for now.  We need to understand why the rejection algorithm is failing.  Based on a quick review of the reference in the javadoc (p. 511, X.3), it looks like the following line in the u &lt; c_1 case should not be subtracting 1.0 at the end.</p>

<p>y = -Math.abs(z) * Math.sqrt(mu) - 1.0;</p>

<p>I have not tested the effect dropping the -1 here as I am still working through the algorithm.</p></comment><comment id="12760210" author="psteitz" created="Mon, 28 Sep 2009 11:45:17 +0100"><p>In r819492, I committed a goodness of fit test (testNextPoissionConistency) for the values generated by nextPoisson.  Currently, it tests only values up to 5.  When this issue is resolved, the upper bound in the test needs to be increased.</p>

<p>I have not been able to rectify the current code so that it succeeds for all values and passes the test.  The implementation does not match the reference in the javadoc and the reference appears to contain errors.  If someone does not beat me to it or supply a patch that passes the test, I will find and implement a different version of the rejection algorithm for means &gt; 6.</p></comment><comment id="12764528" author="psteitz" created="Mon, 12 Oct 2009 03:08:12 +0100"><p>Fixed in r824214</p></comment></comments><attachments><attachment id="12419421" name="math-294.patch" size="2530" author="luc" created="Sun, 13 Sep 2009 15:45:08 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 13 Sep 2009 14:45:08 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>34180</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160722</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-293] Matrix's "OutOfBoundException" in SimplexSolver</title><link>https://issues.apache.org/jira/browse/MATH-293</link><project id="12310485" key="MATH">Commons Math</project><description><p>Hi all,<br/>
This bug is somehow related to incident <a href="https://issues.apache.org/jira/browse/MATH-286" title="SimplexSolver not working as expected?" class="issue-link" data-issue-key="MATH-286"><del>MATH-286</del></a>, but not necessarily...</p>

<p>Let's say I have an LP and I solve it using SimplexSolver. Then I create a second LP similar to the first one, but with "stronger" constraints. The second LP has the following properties:</p>
<ul>
	<li>the only point in the feasible region for the second LP is the solution returned for the first LP</li>
	<li>the solution returned for the first LP is also the (only possible) solution to the second LP</li>
</ul>


<p>This shows the problem:</p>

<div class="code panel" style="border-style: solid;border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
LinearObjectiveFunction f = <span class="code-keyword">new</span> LinearObjectiveFunction(<span class="code-keyword">new</span> <span class="code-object">double</span>[] { 0.8, 0.2, 0.7, 0.3, 0.4, 0.6}, 0 );
Collection&lt;LinearConstraint&gt; constraints = <span class="code-keyword">new</span> ArrayList&lt;LinearConstraint&gt;();
constraints.add(<span class="code-keyword">new</span> LinearConstraint(<span class="code-keyword">new</span> <span class="code-object">double</span>[] { 1, 0, 1, 0, 1, 0 }, Relationship.EQ, 30.0));
constraints.add(<span class="code-keyword">new</span> LinearConstraint(<span class="code-keyword">new</span> <span class="code-object">double</span>[] { 0, 1, 0, 1, 0, 1 }, Relationship.EQ, 30.0));
constraints.add(<span class="code-keyword">new</span> LinearConstraint(<span class="code-keyword">new</span> <span class="code-object">double</span>[] { 0.8, 0.2, 0.0, 0.0, 0.0, 0.0 }, Relationship.GEQ, 10.0));
constraints.add(<span class="code-keyword">new</span> LinearConstraint(<span class="code-keyword">new</span> <span class="code-object">double</span>[] { 0.0, 0.0, 0.7, 0.3, 0.0, 0.0 }, Relationship.GEQ, 10.0));
constraints.add(<span class="code-keyword">new</span> LinearConstraint(<span class="code-keyword">new</span> <span class="code-object">double</span>[] { 0.0, 0.0, 0.0, 0.0, 0.4, 0.6 }, Relationship.GEQ, 10.0));

RealPointValuePair solution = <span class="code-keyword">new</span> SimplexSolver().optimize(f, constraints, GoalType.MAXIMIZE, <span class="code-keyword">true</span>);

<span class="code-object">double</span> valA = 0.8 * solution.getPoint()[0] + 0.2 * solution.getPoint()[1];
<span class="code-object">double</span> valB = 0.7 * solution.getPoint()[2] + 0.3 * solution.getPoint()[3];
<span class="code-object">double</span> valC = 0.4 * solution.getPoint()[4] + 0.6 * solution.getPoint()[5];

f = <span class="code-keyword">new</span> LinearObjectiveFunction(<span class="code-keyword">new</span> <span class="code-object">double</span>[] { 0.8, 0.2, 0.7, 0.3, 0.4, 0.6}, 0 );
constraints = <span class="code-keyword">new</span> ArrayList&lt;LinearConstraint&gt;();
constraints.add(<span class="code-keyword">new</span> LinearConstraint(<span class="code-keyword">new</span> <span class="code-object">double</span>[] { 1, 0, 1, 0, 1, 0 }, Relationship.EQ, 30.0));
constraints.add(<span class="code-keyword">new</span> LinearConstraint(<span class="code-keyword">new</span> <span class="code-object">double</span>[] { 0, 1, 0, 1, 0, 1 }, Relationship.EQ, 30.0));
constraints.add(<span class="code-keyword">new</span> LinearConstraint(<span class="code-keyword">new</span> <span class="code-object">double</span>[] { 0.8, 0.2, 0.0, 0.0, 0.0, 0.0 }, Relationship.GEQ, valA));
constraints.add(<span class="code-keyword">new</span> LinearConstraint(<span class="code-keyword">new</span> <span class="code-object">double</span>[] { 0.0, 0.0, 0.7, 0.3, 0.0, 0.0 }, Relationship.GEQ, valB));
constraints.add(<span class="code-keyword">new</span> LinearConstraint(<span class="code-keyword">new</span> <span class="code-object">double</span>[] { 0.0, 0.0, 0.0, 0.0, 0.4, 0.6 }, Relationship.GEQ, valC));

solution = <span class="code-keyword">new</span> SimplexSolver().optimize(f, constraints, GoalType.MAXIMIZE, <span class="code-keyword">true</span>);
</pre>
</div></div> 

<p>Instead of returning the solution, SimplexSolver throws an Exception:</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre> Exception in thread "main" org.apache.commons.math.linear.MatrixIndexException: no entry at indices (0, 7) in a 6x7 matrix
	at org.apache.commons.math.linear.Array2DRowRealMatrix.getEntry(Array2DRowRealMatrix.java:356)
	at org.apache.commons.math.optimization.linear.SimplexTableau.getEntry(SimplexTableau.java:408)
	at org.apache.commons.math.optimization.linear.SimplexTableau.getBasicRow(SimplexTableau.java:258)
	at org.apache.commons.math.optimization.linear.SimplexTableau.getSolution(SimplexTableau.java:336)
	at org.apache.commons.math.optimization.linear.SimplexSolver.doOptimize(SimplexSolver.java:182)
	at org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.optimize(AbstractLinearOptimizer.java:106)</pre>
</div></div> 

<p>I was too optimistic with the bug <a href="https://issues.apache.org/jira/browse/MATH-286" title="SimplexSolver not working as expected?" class="issue-link" data-issue-key="MATH-286"><del>MATH-286</del></a> <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p></description><environment><p>java 1.6 on Windows XP 32-Bit</p></environment><key id="12435216">MATH-293</key><summary>Matrix's "OutOfBoundException" in SimplexSolver</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="ciaccia">Andrea</reporter><labels>
                    </labels><created>Wed, 9 Sep 2009 15:07:53 +0100</created><updated>Wed, 14 Apr 2010 01:21:37 +0100</updated><resolved>Thu, 10 Sep 2009 09:23:11 +0100</resolved><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12753207" author="bmccann" created="Wed, 9 Sep 2009 19:39:26 +0100"><p>Here's the standard LP description of the problem:<br/>
max .8 x0 + .2 x1 + .7 x2 + .3 x3 + .4 x4 + .6 x5<br/>
s.t.<br/>
x0 + x2 + x4 = 30<br/>
x1 + x3 + x5 = 30<br/>
.8 x0 + .2 x1 &gt;= 10<br/>
.7 x2 + .3 x3 &gt;= 10<br/>
.4 x4 + .6 x5 &gt;= 10</p></comment><comment id="12753213" author="ciaccia" created="Wed, 9 Sep 2009 20:00:50 +0100"><p>Hi Ben,<br/>
Just to be clear, the first LP is solved correctly with the following solution:</p>

<p>Value: 40.57142857142857</p>

<p>x0: 15.714285714285714<br/>
x1: 0.0<br/>
x2: 14.285714285714286<br/>
x3: 0.0<br/>
x4: 0.0<br/>
x5: 30.0</p>

<p>Then I create new constraints that are satisfied by the solution here above:<br/>
c3: 0.8 * x0 + 0.2 * x1 &gt;= 0.8 * 15.714285714285714 ( = 12.571428571428571)<br/>
c4: 0.7 * x2 + 0.3 * x3 &gt;= 0.7 * 14.285714285714286 ( = 10.0)<br/>
c5: 0.4 * x4 + 0.6 * x5 &gt;= 0.6 * 30.0 ( = 18.0)</p>

<p>Note that by its construction, the solution above satisfies the constraints c3, c4, and c5.</p>

<p>If I try to solve the new LP, a "OutOfBoundException" is thrown...</p></comment><comment id="12753475" author="bmccann" created="Thu, 10 Sep 2009 08:28:17 +0100"><p>Thanks for the bug report Andrea.  I was expecting this problem when I submitted the patch for <a href="https://issues.apache.org/jira/browse/MATH-286" title="SimplexSolver not working as expected?" class="issue-link" data-issue-key="MATH-286"><del>MATH-286</del></a>, but didn't have a good test case to work against and verify the fix.  This is largely what I was thinking of when I mentioned we should test some more, but didn't think you'd beat me to it in finding a good example to work off of :o)  When I changed the columns being dropped in the patch for <a href="https://issues.apache.org/jira/browse/MATH-286" title="SimplexSolver not working as expected?" class="issue-link" data-issue-key="MATH-286"><del>MATH-286</del></a> it meant there wasn't always a way to always tell which variable each column of the tableau represented.  This patch creates a mapping between column index and variable label so that when we can read the final solution out of the tableau.  I feel much better about this now.  Thanks!</p></comment><comment id="12753500" author="luc" created="Thu, 10 Sep 2009 09:23:11 +0100"><p>patch applied in subversion repository as of r813301<br/>
thanks to Andrea and Ben</p></comment></comments><attachments><attachment id="12419148" name="SimplexSolverTest.patch" size="3388" author="bmccann" created="Thu, 10 Sep 2009 08:28:17 +0100"/><attachment id="12419147" name="SimplexTableau.patch" size="4339" author="bmccann" created="Thu, 10 Sep 2009 08:28:17 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 9 Sep 2009 18:39:26 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>34198</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160723</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-292] TestUtils.assertRelativelyEquals() generates misleading error on failure</title><link>https://issues.apache.org/jira/browse/MATH-292</link><project id="12310485" key="MATH">Commons Math</project><description><p>TestUtils.assertRelativelyEquals() generates misleading error on failure.</p>

<p>For example:</p>

<p>TestUtils.assertRelativelyEquals(1.0, 0.10427661385154971, 1.0e-9)</p>

<p>generates the error message:</p>

<p>junit.framework.AssertionFailedError: expected:&lt;0.0&gt; but was:&lt;0.8957233861484503&gt;</p>

<p>which is not very helpful.</p></description><environment/><key id="12434957">MATH-292</key><summary>TestUtils.assertRelativelyEquals() generates misleading error on failure</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="sebb@apache.org">Sebb</reporter><labels>
                    </labels><created>Sun, 6 Sep 2009 23:04:34 +0100</created><updated>Wed, 14 Apr 2010 01:25:38 +0100</updated><resolved>Wed, 9 Sep 2009 11:12:01 +0100</resolved><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12752132" author="sebb@apache.org" created="Mon, 7 Sep 2009 14:20:02 +0100"><p>Possible fix which converts the relative error to an absolute error.</p></comment><comment id="12752229" author="luc" created="Mon, 7 Sep 2009 19:03:07 +0100"><p>The patch seems good to me.<br/>
+1 to commit it</p></comment><comment id="12753012" author="sebb@apache.org" created="Wed, 9 Sep 2009 11:12:01 +0100"><p>URL: <a href="http://svn.apache.org/viewvc?rev=812871&amp;view=rev" class="external-link" rel="nofollow">http://svn.apache.org/viewvc?rev=812871&amp;view=rev</a><br/>
Log:<br/>
<a href="https://issues.apache.org/jira/browse/MATH-292" title="TestUtils.assertRelativelyEquals() generates misleading error on failure" class="issue-link" data-issue-key="MATH-292"><del>MATH-292</del></a> TestUtils.assertRelativelyEquals() generates misleading error on failure</p></comment></comments><attachments><attachment id="12418802" name="MATH-292.patch" size="713" author="sebb@apache.org" created="Mon, 7 Sep 2009 14:20:02 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Mon, 7 Sep 2009 18:03:07 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150483</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160724</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-291] ode.nonstiff.AdaptiveStepsizeIntegrator.filterStep(double h, boolean forward, boolean acceptSmall) can generate misleading Exception message</title><link>https://issues.apache.org/jira/browse/MATH-291</link><project id="12310485" key="MATH">Commons Math</project><description><p>ode.nonstiff.AdaptiveStepsizeIntegrator.filterStep(double h, boolean forward, boolean acceptSmall) can generate misleading Exception message, for example:</p>

<p>org.apache.commons.math.ode.IntegratorException: minimal step size (0) reached, integration needs 0</p>

<p>This is because the message uses </p>
{0}
<p> and </p>
{1}
<p> to report the value of doubles.</p>

<p>The code should really use a number format which allows for more decimal places, e.g.</p>

<p>"minimal step size (</p>
{0,number,#.#########}
<p>) reached, integration needs </p>
{1,number,#.##########}
<p>",</p></description><environment/><key id="12434743">MATH-291</key><summary>ode.nonstiff.AdaptiveStepsizeIntegrator.filterStep(double h, boolean forward, boolean acceptSmall) can generate misleading Exception message</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="sebb@apache.org">Sebb</reporter><labels>
                    </labels><created>Thu, 3 Sep 2009 14:40:21 +0100</created><updated>Wed, 14 Apr 2010 01:26:30 +0100</updated><resolved>Fri, 4 Sep 2009 10:46:53 +0100</resolved><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12751400" author="luc" created="Fri, 4 Sep 2009 10:46:53 +0100"><p>fixed in subversion repository as of r811328<br/>
an exponential format has been used to cope with very small steps<br/>
thanks for the report and the fix proposal</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Fri, 4 Sep 2009 09:46:53 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150482</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160725</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-290] NullPointerException in SimplexTableau.initialize</title><link>https://issues.apache.org/jira/browse/MATH-290</link><project id="12310485" key="MATH">Commons Math</project><description><p>SimplexTableau throws a NullPointerException when no solution can be found instead of a NoFeasibleSolutionException</p>

<p>Here is the code that causes the NullPointerException:</p>

<p>LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] </p>
{ 1, 5 }
<p>, 0 );<br/>
Collection&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt;();<br/>
constraints.add(new LinearConstraint(new double[] </p>
{ 2, 0 }
<p>, Relationship.GEQ, -1.0));</p>

<p>RealPointValuePair solution = new SimplexSolver().optimize(f, constraints, GoalType.MINIMIZE, true);</p>

<p>Note: Tested both with Apache Commons Math 2.0 release and SVN trunk</p></description><environment><p>Java 1.6.0_13 on Windows XP 32-bit </p></environment><key id="12433932">MATH-290</key><summary>NullPointerException in SimplexTableau.initialize</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="ciaccia">Andrea</reporter><labels>
                    </labels><created>Tue, 25 Aug 2009 11:53:33 +0100</created><updated>Wed, 14 Apr 2010 01:27:17 +0100</updated><resolved>Thu, 27 Aug 2009 09:08:17 +0100</resolved><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12747629" author="bmccann" created="Tue, 25 Aug 2009 21:43:17 +0100"><p>Thanks for the bug report.  I'm glad to be finding these bugs (hopefully the last of them :o)  That was the point in open sourcing this, so looks like that was a good decision!<br/>
Problem here was that when the constraint's right hand side is negative, we need to flip the constraint around so that it is positive.  We were doing that too late during the initialization and it should have been done at the very beginning, so that we only deal with the normalized version instead of both versions.</p></comment><comment id="12747692" author="bmccann" created="Tue, 25 Aug 2009 23:28:29 +0100"><p>The original patch is sufficient, but I'm attaching a new one that also cleans up some code formatting (weird spacing in SimplexTableau) and also provides a little bit better test.<br/>
Andrea, the correct solution for the example you provided is 0.  You restricted the variables to be non-negative and are trying to minimize the objective function, so the best you can do is make both variables 0 for an objective function value of 0.</p></comment><comment id="12747797" author="ciaccia" created="Wed, 26 Aug 2009 07:35:11 +0100"><p>Hi Ben, what you say in your last comment is not true. There is no feasible solution to my problem...<br/>
Maybe I should have expressed it in "human" readable format:</p>

<p>min: 1 x + 5 y;<br/>
r1: 2 x + 0 y &lt;= -1;<br/>
x &gt;= 0;<br/>
y &gt;= 0;</p>

<p>x = 0 and y = 0 is not a valid solution since 2 * 0 + 0 * 0 (=0) is not &lt;= -1...</p>

<p>The "trick" is that there will be never non-negative variables (in this case <span class="error">&#91;x, y&#93;</span>) that multiplied with non-negative coefficients (here <span class="error">&#91;2, 0&#93;</span>) will produce a negative result.</p>

<p>Do you agree?</p></comment><comment id="12747993" author="bmccann" created="Wed, 26 Aug 2009 16:49:31 +0100"><p>You originally wrote &gt;= in the constraint and now you're writing &lt;=.  Perhaps that's where the confusion is?  The answer is 0 when you use &lt;=.</p></comment><comment id="12747996" author="ciaccia" created="Wed, 26 Aug 2009 16:56:42 +0100"><p>Ops... I found the bug with the &lt;= but then I transcribed it wrongly... Sorry.</p>

<p>Another thing I found that is not related to this bug, are the comments in the SimplexTableau. JavaDoc for divideRow was copied from substractRow without being changed <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p></comment><comment id="12748296" author="luc" created="Thu, 27 Aug 2009 09:08:17 +0100"><p>fixed in subversion repository as of r808313<br/>
latest version of patch applied and two tests used (one with &lt;= as the constraint and one with &gt;= as the constraint)<br/>
thanks to Andrea for the report<br/>
thanks to Ben for the patch</p></comment></comments><attachments><attachment id="12417671" name="SimplexSolverTest.patch" size="4049" author="bmccann" created="Tue, 25 Aug 2009 23:28:29 +0100"/><attachment id="12417670" name="SimplexTableau.patch" size="8240" author="bmccann" created="Tue, 25 Aug 2009 23:28:29 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 25 Aug 2009 20:43:17 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>34153</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160726</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-289] SimplexTableau's arrayCopy could be wrong</title><link>https://issues.apache.org/jira/browse/MATH-289</link><project id="12310485" key="MATH">Commons Math</project><description><p>The private method copyArray in file SimplexTableau at line 329 takes 3 parameters src, dest and destPos but the last one is never used/read.</p>

<p>private void copyArray(final double[] src, final double[] dest, final int destPos) </p>
{
    System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length); 
}

<p>The behavior of this method doesn't reflect its JavaDoc description, and "misleads" createTableau at line 157 that passes 1 as destPos.</p>

<p>I don't think this leads to a wrong result, but the method signature/implementation is misleading for a future reuse.</p>

<p>I suggest either to remove the destPos argument or use it in the method body.</p></description><environment><p>Java 1.6.0_13 on Windows XP 32-bit </p></environment><key id="12433909">MATH-289</key><summary>SimplexTableau's arrayCopy could be wrong</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="ciaccia">Andrea</reporter><labels>
                    </labels><created>Tue, 25 Aug 2009 07:23:24 +0100</created><updated>Wed, 14 Apr 2010 01:27:57 +0100</updated><resolved>Thu, 27 Aug 2009 08:58:39 +0100</resolved><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12747633" author="bmccann" created="Tue, 25 Aug 2009 21:56:05 +0100"><p>Good catch.  We should get rid of the last argument to the function.  Like you said, it's not affecting the answer, but it's still a good code cleanup action to take.</p></comment><comment id="12748292" author="luc" created="Thu, 27 Aug 2009 08:58:39 +0100"><p>fixed in subversion repository as of r808311<br/>
thanks for the report</p></comment></comments><attachments><attachment id="12417656" name="SimplexTableau.patch" size="4945" author="bmccann" created="Tue, 25 Aug 2009 21:56:05 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 25 Aug 2009 20:56:05 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150481</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160727</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-288] SimplexSolver not working as expected 2</title><link>https://issues.apache.org/jira/browse/MATH-288</link><project id="12310485" key="MATH">Commons Math</project><description><p>SimplexSolver didn't find the optimal solution.</p>

<p>Program for Lpsolve:<br/>
=====================<br/>
/* Objective function */<br/>
max: 7 a 3 b;</p>

<p>/* Constraints */<br/>
R1: +3 a -5 c &lt;= 0;<br/>
R2: +2 a -5 d &lt;= 0;<br/>
R3: +2 b -5 c &lt;= 0;<br/>
R4: +3 b -5 d &lt;= 0;<br/>
R5: +3 a +2 b &lt;= 5;<br/>
R6: +2 a +3 b &lt;= 5;</p>

<p>/* Variable bounds */<br/>
a &lt;= 1;<br/>
b &lt;= 1;<br/>
=====================<br/>
Results(correct): a = 1, b = 1, value = 10</p>


<p>Program for SimplexSolve:<br/>
=====================<br/>
LinearObjectiveFunction kritFcia = new LinearObjectiveFunction(new double[]</p>
{7, 3, 0, 0}
<p>, 0);<br/>
Collection&lt;LinearConstraint&gt; podmienky = new ArrayList&lt;LinearConstraint&gt;();<br/>
podmienky.add(new LinearConstraint(new double[]</p>
{1, 0, 0, 0}
<p>, Relationship.LEQ, 1));<br/>
podmienky.add(new LinearConstraint(new double[]</p>
{0, 1, 0, 0}
<p>, Relationship.LEQ, 1));<br/>
podmienky.add(new LinearConstraint(new double[]</p>
{3, 0, -5, 0}
<p>, Relationship.LEQ, 0));<br/>
podmienky.add(new LinearConstraint(new double[]</p>
{2, 0, 0, -5}
<p>, Relationship.LEQ, 0));<br/>
podmienky.add(new LinearConstraint(new double[]</p>
{0, 2, -5, 0}
<p>, Relationship.LEQ, 0));<br/>
podmienky.add(new LinearConstraint(new double[]</p>
{0, 3, 0, -5}
<p>, Relationship.LEQ, 0));<br/>
podmienky.add(new LinearConstraint(new double[]</p>
{3, 2, 0, 0}
<p>, Relationship.LEQ, 5));<br/>
podmienky.add(new LinearConstraint(new double[]</p>
{2, 3, 0, 0}
<p>, Relationship.LEQ, 5));<br/>
SimplexSolver solver = new SimplexSolver();<br/>
RealPointValuePair result = solver.optimize(kritFcia, podmienky, GoalType.MAXIMIZE, true);<br/>
=====================<br/>
Results(incorrect): a = 1, b = 0.5, value = 8.5</p>

<p>P.S. I used the latest software from the repository (including <a href="https://issues.apache.org/jira/browse/MATH-286" title="SimplexSolver not working as expected?" class="issue-link" data-issue-key="MATH-286"><del>MATH-286</del></a> fix).</p></description><environment><p>Java 1.6.0_13 on Windows XP 32-bit </p></environment><key id="12433883">MATH-288</key><summary>SimplexSolver not working as expected 2</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="kefa">Stefan Radacovsky</reporter><labels>
                    </labels><created>Mon, 24 Aug 2009 23:31:11 +0100</created><updated>Wed, 14 Apr 2010 01:30:17 +0100</updated><resolved>Tue, 25 Aug 2009 19:10:08 +0100</resolved><version>2.1</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>1</watches><timeoriginalestimate seconds="28800">8h</timeoriginalestimate><timeestimate seconds="28800">8h</timeestimate><comments><comment id="12747167" author="bmccann" created="Tue, 25 Aug 2009 02:06:07 +0100"><p>Thanks for the bug report.  I've confirmed this is an issue.</p>

<p>Here's a slightly smaller version of the problem that causes the same bug, which might be easier for debugging:</p>

<p>MAX 7 a + 3 b<br/>
s.t.<br/>
3 a -5 c &lt;= 0<br/>
2 a -5 d &lt;= 0<br/>
3 b -5 d &lt;= 0<br/>
a &lt;= 1<br/>
b &lt;= 1</p>

<p>        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] </p>
{ 7, 3, 0, 0 }
<p>, 0 );<br/>
        Collection&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt;();<br/>
        constraints.add(new LinearConstraint(new double[] </p>
{ 3, 0, -5, 0 }
<p>, Relationship.LEQ, 0.0));<br/>
        constraints.add(new LinearConstraint(new double[] </p>
{ 2, 0, 0, -5 }
<p>, Relationship.LEQ, 0.0));<br/>
        constraints.add(new LinearConstraint(new double[] </p>
{ 0, 3, 0, -5 }
<p>, Relationship.LEQ, 0.0));<br/>
        constraints.add(new LinearConstraint(new double[] </p>
{ 1, 0, 0, 0 }
<p>, Relationship.LEQ, 1.0));<br/>
        constraints.add(new LinearConstraint(new double[] </p>
{ 0, 1, 0, 0 }
<p>, Relationship.LEQ, 1.0));</p>

<p>        SimplexSolver solver = new SimplexSolver();<br/>
        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);<br/>
        assertEquals(10.0, solution.getValue(), .0000001);</p></comment><comment id="12747192" author="bmccann" created="Tue, 25 Aug 2009 03:17:05 +0100"><p>Patch attached.  It was a 1 character bug.  I was saying to only do the minimum ratio test if the entry is &gt;= 0, but it should have been &gt; 0 (dividing by 0 is never good :o)<br/>
Thanks again for the bug report.</p></comment><comment id="12747531" author="luc" created="Tue, 25 Aug 2009 19:10:08 +0100"><p>resolved in subversion repository as of r807738<br/>
patch applied (except for debug print function)<br/>
thanks for the repoart and thanks for the patch</p></comment></comments><attachments><attachment id="12417557" name="SimplexSolver.patch" size="822" author="bmccann" created="Tue, 25 Aug 2009 03:17:05 +0100"/><attachment id="12417558" name="SimplexSolverTest.patch" size="3232" author="bmccann" created="Tue, 25 Aug 2009 03:17:05 +0100"/><attachment id="12417559" name="SimplexTableau.patch" size="1877" author="bmccann" created="Tue, 25 Aug 2009 03:17:05 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>3.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 25 Aug 2009 01:06:07 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>34178</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160728</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-287] Add support for weighted descriptive statistics</title><link>https://issues.apache.org/jira/browse/MATH-287</link><project id="12310485" key="MATH">Commons Math</project><description><p>Add support for weighted descriptive statistics, such as weighted variance.</p>

<p>An example method call would be Variance.evaluate(double[] values, double[] weights, int begin, int length)</p>


<ul class="alternate" type="square">
	<li>Suggested by  mickeydog@taosnet.com on the mailing list.</li>
</ul>

</description><environment/><key id="12433642">MATH-287</key><summary>Add support for weighted descriptive statistics</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status><statusCategory id="2" key="new" colorName="blue-gray"/><resolution id="-1">Unresolved</resolution><assignee username="-1">Unassigned</assignee><reporter username="masher">Matthew Rowles</reporter><labels>
                    </labels><created>Fri, 21 Aug 2009 06:33:11 +0100</created><updated>Mon, 20 Jan 2014 22:54:43 +0000</updated><version>2.0</version><due/><votes>1</votes><watches>3</watches><comments><comment id="12745812" author="masher" created="Fri, 21 Aug 2009 06:48:35 +0100"><p>I've added weighted evaluate methods for Mean, Product, Sum and Variance. I've also added a test method to AbstractUnivariateStatistic.</p>

<p>When I run svn diff to generate a patch file, there are a lot of "changes" that I haven't done (lots of - a line followed by + the same line), and as a result, the file is about 27k. I don't know what I did wrong...</p>

<p>In my first pass at this problem, the test method tests that the weights array isn't null, is the same length as the values array, and checks each value to ensure they aren't negative. This last check could get a bit time consuming - weighted variance needs a weighted mean needs a weighted sum - all checking the same weights array... The check itself is necessary; I can't see any way around it other than making up a Weights class that knows that it is correct.</p>

<p>Additionally, the new evaluate methods essentially duplicate that of the existing methods, with only the bits that are affected by the weighting being changed. I had an idea that you could have a call to evaluate(values, begin, length) be sent off to evaluate(values, null, begin, length) and have appropriate null checks being done to decide whether or not to do a weighted/unweighted analysis, but I thought that may not be appropriate.</p>


<p>Feedback more than welcome...</p></comment><comment id="12746466" author="psteitz" created="Sat, 22 Aug 2009 16:14:34 +0100"><p>Thanks for the patch!</p>

<p>Looks good.  Don't worry about the extraneous diffs in this case, as it looks to me like what is going on is that your editor is stripping trailing spaces, which is a good thing.  These should not be in the source, so this is a (trivial) improvement.</p>

<p>Here are some comments.</p>

<p>1) unit tests.  We need unit tests before we can apply this patch.  See the src/tests directory for examples.  Adding unit tests to the patch would be most appreciated.  Once we have these, I can commit the code.</p>

<p>Before resolving this issue, we should consider</p>

<p>2) adding the capability to other statistics and to the "storeless" versions (i.e., add an increment(value, weight) method<br/>
3) once we have covered all statistics that they contain,  add new addValue(-, weight) methods to the statistical aggregate classes (DescriptiveStatistics, SummaryStatistics)</p>

<p>Thanks again for the patch.</p></comment><comment id="12746521" author="masher" created="Sun, 23 Aug 2009 00:17:59 +0100"><p>(1) Currently working on unit tests; should be done within the week. I need to figure out how they work first.</p>

<p>(2) I've started looking at adding the capability to increment(v,w) (and the like) but I wanted to put this patch up to make sure that I'm going in the right direction....</p>

<p>(3) A little while down the track....   <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p>

</comment><comment id="12746727" author="masher" created="Mon, 24 Aug 2009 05:32:54 +0100"><p>Here is a patch that also has new tests for Mean, Variance, Product and Sum (as well as the changes in those classes).</p>

<p>The tests test that the expectedWeightedValue is  what it's supposed to be and that expectedWeightedValue == expectedValue  when all weights are either the same (Mean, Variance) or equal to 1 (Sum, Product).</p>

<p>I calculated the expected values using the definitional formulae with BigDecimals (and lots of decimal places). I rounded the answers to the number of decimal places that were already present in UnivariateStatisticAbstractTest.</p></comment><comment id="12749356" author="psteitz" created="Mon, 31 Aug 2009 03:17:10 +0100"><p>I committed a modified version of the patches above in r809448.  Changes from the patch are:</p>
<ul>
	<li>Clarified javadoc in test(values, weights, begin, end) added to AbstractUnivariateStatistic.</li>
	<li>Added requirements that weights cannot be infinite or NaN and not all weights can be zero.</li>
	<li>Added a test to UnivariateStatisticAbstractTest to verify that when weights are frequency counts, weighted stats behave as expected.</li>
	<li>Changed formula in weighted product to exponentiate rather than multiply the weights.</li>
	<li>Changed and documented the formula used in weighted variance.</li>
</ul>


<p>More things to do on these (and others to add):</p>
<ul>
	<li>Add evaluate(values, weights)  - i.e., versions with no start, length parameters.</li>
	<li>Add tests to verify correct exception behavior on all bad parameter combinations.</li>
	<li>Replace naive loop in weighted variance with updating formula similar to unweighted.  I committed naive version so the formula would be clear and we could argue about it <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></li>
</ul>


<p>Re the weighted variance computation: there is no standard formula, as what E(X - E(X))^2 means based on a weighted sample depends on how you look at the weights.  The formula that I used is what the R hmisc package uses by default and is correct if the weights are frequency counts.  The normalization in the javadoc gives the same result as R when normwt=true.</p></comment><comment id="12795435" author="psteitz" created="Wed, 30 Dec 2009 20:30:40 +0000"><p>As of r894705,  all problems with the initial commit on this feature have been resolved.  My recommendation is that we release the initial set of weighted stats in 2.1, but keep this issue open and target 2.2 for extension to other statistics and introduction of weighted increment methods for StorelessUnivariateStatistics.</p></comment><comment id="12901247" author="psteitz" created="Mon, 23 Aug 2010 04:18:18 +0100"><p>Moving extensions to 3.0</p></comment><comment id="13082200" author="psteitz" created="Wed, 10 Aug 2011 08:08:21 +0100"><p>Enhancements can be done without breaking compat, so pushing to 3.1</p></comment><comment id="13415759" author="erans" created="Mon, 16 Jul 2012 23:55:09 +0100"><p>The files currently attached to this issue are very old.<br/>
Is this issue still valid?<br/>
If so we probably need an updated patch.</p>
</comment><comment id="13420224" author="tn" created="Sun, 22 Jul 2012 17:09:13 +0100"><p>The original patch has already been included in CM since 2.1.</p></comment><comment id="13420276" author="erans" created="Sun, 22 Jul 2012 20:12:32 +0100"><p>Removing the "fix" version since there is nothing to fix for 3.1.<br/>
Further improvements should be provided in a patch, and can be added later.</p></comment><comment id="13876945" author="brian44" created="Mon, 20 Jan 2014 22:54:43 +0000"><p>I also would like this for SummaryStatistics and/or storeless ones as well.  I have to calculate weighted statistics from a large set for a current project and wanted to use the commons library for streaming calculations - I don't want to have to copy all the values into memory.</p></comment></comments><attachments><attachment id="12417437" name="weightTests.patch" size="49194" author="masher" created="Mon, 24 Aug 2009 05:32:54 +0100"/><attachment id="12417226" name="weighted.patch" size="32292" author="masher" created="Fri, 21 Aug 2009 06:48:35 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sat, 22 Aug 2009 15:14:34 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2248</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>11086</customfieldvalue></customfieldvalues></customfield></customfields></item><item><title>[MATH-286] SimplexSolver not working as expected?</title><link>https://issues.apache.org/jira/browse/MATH-286</link><project id="12310485" key="MATH">Commons Math</project><description><p>I guess (but I could be wrong) that SimplexSolver does not always return the optimal solution, nor satisfies all the constraints...</p>

<p>Consider this LP:</p>

<p>max: 0.8 x0 + 0.2 x1 + 0.7 x2 + 0.3 x3 + 0.6 x4 + 0.4 x5;<br/>
r1: x0 + x2 + x4 = 23.0;<br/>
r2: x1 + x3 + x5 = 23.0;<br/>
r3: x0 &gt;= 10.0;<br/>
r4: x2 &gt;= 8.0;<br/>
r5: x4 &gt;= 5.0;</p>

<p>LPSolve returns 25.8, with x0 = 10.0, x1 = 0.0, x2 = 8.0, x3 = 0.0, x4 = 5.0, x5 = 23.0;</p>

<p>The same LP expressed in Apache commons math is:</p>

<p>LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] </p>
{ 0.8, 0.2, 0.7, 0.3, 0.6, 0.4 }
<p>, 0 );<br/>
Collection&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt;();<br/>
constraints.add(new LinearConstraint(new double[] </p>
{ 1, 0, 1, 0, 1, 0 }
<p>, Relationship.EQ, 23.0));<br/>
constraints.add(new LinearConstraint(new double[] </p>
{ 0, 1, 0, 1, 0, 1 }
<p>, Relationship.EQ, 23.0));<br/>
constraints.add(new LinearConstraint(new double[] </p>
{ 1, 0, 0, 0, 0, 0 }
<p>, Relationship.GEQ, 10.0));<br/>
constraints.add(new LinearConstraint(new double[] </p>
{ 0, 0, 1, 0, 0, 0 }
<p>, Relationship.GEQ, 8.0));<br/>
constraints.add(new LinearConstraint(new double[] </p>
{ 0, 0, 0, 0, 1, 0 }
<p>, Relationship.GEQ, 5.0));</p>

<p>RealPointValuePair solution = new SimplexSolver().optimize(f, constraints, GoalType.MAXIMIZE, true);</p>

<p>that returns 22.20, with x0 = 15.0, x1 = 23.0, x2 = 8.0, x3 = 0.0, x4 = 0.0, x5 = 0.0;</p>

<p>Is it possible SimplexSolver is buggy that way? The returned value is 22.20 instead of 25.8, and the last constraint (x4 &gt;= 5.0) is not satisfied...</p>

<p>Am I using the interface wrongly?</p></description><environment><p>Java 1.6.0_13 on  Windows XP 32-bit</p></environment><key id="12433578">MATH-286</key><summary>SimplexSolver not working as expected?</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="ciaccia">Andrea</reporter><labels>
                    </labels><created>Thu, 20 Aug 2009 16:04:09 +0100</created><updated>Wed, 14 Apr 2010 01:30:57 +0100</updated><resolved>Thu, 10 Sep 2009 09:22:11 +0100</resolved><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12746199" author="bmccann" created="Fri, 21 Aug 2009 21:25:41 +0100"><p>I have confirmed this is an issue.</p></comment><comment id="12746207" author="bmccann" created="Fri, 21 Aug 2009 21:38:24 +0100"><p>Here's a smaller version of the problem that also fails:</p>

<p>max 0.8 x0 + 0.2 x1 + 0.7 x2 + 0.3 x3<br/>
s.t. <br/>
x0 + x2 = 23.0<br/>
x1 + x3 = 23.0</p>

<p>    @Test<br/>
    public void testMath268() throws OptimizationException {<br/>
      LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] </p>
{ 0.8, 0.2, 0.7, 0.3 }
<p>, 0 );<br/>
      Collection&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt;();<br/>
      constraints.add(new LinearConstraint(new double[] </p>
{ 1, 0, 1, 0 }
<p>, Relationship.EQ, 23.0));<br/>
      constraints.add(new LinearConstraint(new double[] </p>
{ 0, 1, 0, 1 }
<p>, Relationship.EQ, 23.0));</p>

<p>      SimplexSolver solver = new SimplexSolver();<br/>
      RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);<br/>
      assertEquals(25.3, solution.getValue(), .0000001);<br/>
    }</p>
</comment><comment id="12746219" author="bmccann" created="Fri, 21 Aug 2009 21:50:06 +0100"><p>And a yet smaller version that is failing:</p>

<p>max 0.2 x1 + 0.3 x3<br/>
s.t. <br/>
x1 + x3 = 23.0</p>

<p>    @Test<br/>
    public void testMath268() throws OptimizationException {<br/>
      LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] </p>
{ 0.2, 0.3 }
<p>, 0 );<br/>
      Collection&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt;();<br/>
      constraints.add(new LinearConstraint(new double[] </p>
{ 1, 1 }
<p>, Relationship.EQ, 23.0));</p>

<p>      SimplexSolver solver = new SimplexSolver();<br/>
      RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);<br/>
      assertEquals(6.9, solution.getValue(), .0000001);<br/>
    }</p></comment><comment id="12746223" author="ciaccia" created="Fri, 21 Aug 2009 22:06:31 +0100"><p>Hi Ben,<br/>
Your test here above is wrong, the GoalType should be MAXIMIZE and not MINIMIZE...<br/>
The MINIMIZE returns 4.6 which is the expected value.</p></comment><comment id="12746242" author="bmccann" created="Fri, 21 Aug 2009 22:32:00 +0100"><p>Whoops, right you are.  Thanks for catching that.<br/>
This should be a better example for debugging:</p>

<p>max 0.2 x1 + 0.3 x3<br/>
s.t.<br/>
x1 + x3 = 23.0</p>

<p>    @Test<br/>
    public void testMath268() throws OptimizationException {<br/>
      LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] </p>
{ 0.2, 0.3 }
<p>, 0 );<br/>
      Collection&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt;();<br/>
      constraints.add(new LinearConstraint(new double[] </p>
{ 1, 1 }
<p>, Relationship.EQ, 23.0));</p>

<p>      RealPointValuePair solution = new SimplexSolver().optimize(f, constraints, GoalType.MAXIMIZE, true);<br/>
      assertEquals(6.9, solution.getValue(), .0000001);<br/>
    }</p>
</comment><comment id="12746245" author="bmccann" created="Fri, 21 Aug 2009 22:38:32 +0100"><p>The solution is being calculated correctly, but the wrong thing is being returned.  The bug is in SimplexTableau.getSolution()</p></comment><comment id="12746285" author="bmccann" created="Fri, 21 Aug 2009 23:11:56 +0100"><p>Here's the fix.<br/>
Note that the test case I posted in the comment was named dyslexically.  It should be math286 not math268.</p></comment><comment id="12746350" author="luc" created="Sat, 22 Aug 2009 00:09:57 +0100"><p>Fixed in subversion repository as of r806753.<br/>
Patch applied.<br/>
Thanks to Andrea for the report and thanks to Ben for the fix</p></comment><comment id="12748826" author="ciaccia" created="Fri, 28 Aug 2009 15:12:43 +0100"><p>Hi all,<br/>
Maybe I'm doing something wrong extracting the latest version from the SVN repository, but the original issue is still not working on my apache commons math working copy <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/sad.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p>

<p>Here is what I did:<br/>
-I extracted the latest version from the SVN repository<br/>
-I executed the original problematic LP for this bug and it still fails. Anyway, the simplified version (but maybe incompatible) succeeds...</p>

<p>Could please anyone look at that?<br/>
Thanks<br/>
Andrea</p></comment><comment id="12749538" author="bmccann" created="Mon, 31 Aug 2009 17:41:43 +0100"><p>Yes, there is still an error with this example. The bug for the smaller example was fixed, but there's something still affecting the larger one. I haven't been able to figure it out yet, but here's another smaller example that is also failing:</p>

<p>    @Test<br/>
    public void testMath286Reopened() throws OptimizationException {<br/>
        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] </p>
{ 0.8, 0.7 }
<p>, 0 );<br/>
        Collection&lt;LinearConstraint&gt; constraints = new ArrayList&lt;LinearConstraint&gt;();<br/>
        constraints.add(new LinearConstraint(new double[] </p>
{ 1, 1 }
<p>, Relationship.LEQ, 18.0));<br/>
        constraints.add(new LinearConstraint(new double[] </p>
{ 1, 0 }
<p>, Relationship.GEQ, 10.0));<br/>
        constraints.add(new LinearConstraint(new double[] </p>
{ 0, 1 }
<p>, Relationship.GEQ, 8.0));</p>

<p>        SimplexSolver solver = new SimplexSolver();<br/>
        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);<br/>
        assertEquals(13.6, solution.getValue(), .0000001);<br/>
    } </p></comment><comment id="12749548" author="bmccann" created="Mon, 31 Aug 2009 18:24:04 +0100"><p>Here are the corresponding Simplex tableaus.  Let me know if you spot the error.</p></comment><comment id="12749580" author="ciaccia" created="Mon, 31 Aug 2009 20:11:24 +0100"><p>Hi all,<br/>
What I wrote before doesn't really make sense... </p>

<p>Look at this LP simplex solver:</p>

<p><a href="http://www.phpsimplex.com/simplex/page2.php?objetivo=max&amp;x1=0.8&amp;x2=0.7&amp;restricciones=3&amp;variables=2&amp;l=en&amp;x11=1&amp;x12=1&amp;desigualdad1=-1&amp;y1=18&amp;x21=1&amp;x22=0&amp;desigualdad2=1&amp;y2=10&amp;x31=0&amp;x32=1&amp;desigualdad3=1&amp;y3=8&amp;Submit=Continue" class="external-link" rel="nofollow">http://www.phpsimplex.com/simplex/page2.php?objetivo=max&amp;x1=0.8&amp;x2=0.7&amp;restricciones=3&amp;variables=2&amp;l=en&amp;x11=1&amp;x12=1&amp;desigualdad1=-1&amp;y1=18&amp;x21=1&amp;x22=0&amp;desigualdad2=1&amp;y2=10&amp;x31=0&amp;x32=1&amp;desigualdad3=1&amp;y3=8&amp;Submit=Continue</a></p>

<p>why after the first phase is over the coefficients for x1 and x2 are set to 0.8 and 0.7 while here they are 0? Couldn't be the SimplexTableau's discardArtificialVariables doesn't do everything correct?</p>

<p>Just guessing...</p></comment><comment id="12749762" author="bmccann" created="Tue, 1 Sep 2009 06:09:24 +0100"><p>If I remember correctly phpsimplex formed the tableau a bit differently.  Instead of creating the tableau from the beginning with two objective functions, they only use one at the beginning, and then insert the phase 2 objective function later.  As a result, the tableaus aren't directly comparable.<br/>
I emailed Professor Chinneck at Carleton University for some help because I retaught myself a lot of this using a draft of a book he's working on.  He suggested looking into ways to deal with degenerate solutions, so I'll see if I can read up on that a bit:<br/>
"You've hit a degeneracy (which means that there are multiple solutions with the same value of objective function). The problem came when, in your second tableau, you pivoted on the third row (corresponding to s1) instead of the last row (corresponding to a2). Understandable since the minimum ratio test came out tied."</p></comment><comment id="12750120" author="bmccann" created="Tue, 1 Sep 2009 22:39:58 +0100"><p>phpsimplex said that when there's a tie, they make the artificial variable leave the basis, which we're not doing and would solve the problem in this case:<br/>
<a href="http://www.phpsimplex.com/en/simplex_method_theory.htm#anomalous" class="external-link" rel="nofollow">http://www.phpsimplex.com/en/simplex_method_theory.htm#anomalous</a><br/>
i'll try putting together a patch, likely this weekend, to do that</p></comment><comment id="12752288" author="bmccann" created="Tue, 8 Sep 2009 01:16:06 +0100"><p>Happy Labor Day!  To celebrate, here's a new set of patches that adds the ability to deal with degeneracy in the SimplexTableau.<br/>
The test includes four tests: the two bugs in <a href="https://issues.apache.org/jira/browse/MATH-286" title="SimplexSolver not working as expected?" class="issue-link" data-issue-key="MATH-286"><del>MATH-286</del></a>, the bug from <a href="https://issues.apache.org/jira/browse/MATH-288" title="SimplexSolver not working as expected 2" class="issue-link" data-issue-key="MATH-288"><del>MATH-288</del></a>, and the bug from <a href="https://issues.apache.org/jira/browse/MATH-290" title="NullPointerException in SimplexTableau.initialize" class="issue-link" data-issue-key="MATH-290"><del>MATH-290</del></a>.  I think they should all go in to prevent a regression in the future.  They all run very quickly and there are a lot of edge cases in the Simplex algorithm, so I'd prefer to be safe.</p></comment><comment id="12752387" author="luc" created="Tue, 8 Sep 2009 09:42:51 +0100"><p>resolved in subversion repository as of r812390<br/>
Benjamin's patches from 2009-09-07 have been committed with very slight changes<br/>
(an == test between Integer instances replaced by a call to equals)<br/>
thanks for the patches</p></comment><comment id="12752393" author="ciaccia" created="Tue, 8 Sep 2009 09:51:14 +0100"><p>Hi all,<br/>
I'm still not convinced the original problem is correct... Could you please try?</p>

<p>I would add the original LP with 6 variables and 5 restrictions to the test cases, since I'm not completely sure the "smaller examples" address exactly the same problem I posted weeks ago.</p></comment><comment id="12752662" author="bmccann" created="Tue, 8 Sep 2009 19:24:28 +0100"><p>Wow, sorry, I'll take another look and make sure to test against the original problem this time as well.</p></comment><comment id="12752797" author="bmccann" created="Tue, 8 Sep 2009 23:35:56 +0100"><p>The problem still exists when we are dropping columns moving between phase 1 and phase 2.  I was pointed towards this book for possible solutions (p80-82):<br/>
<a href="http://www.amazon.com/Linear-Programming-Introduction-Operations-Engineering/dp/0387948333#reader" class="external-link" rel="nofollow">http://www.amazon.com/Linear-Programming-Introduction-Operations-Engineering/dp/0387948333#reader</a></p></comment><comment id="12752862" author="bmccann" created="Wed, 9 Sep 2009 02:54:40 +0100"><p>Here's a patch that correctly solves the problem Andrea posted (sorry for not completely fixing the problem with my earlier patches.)  It's mostly refactoring to make the solution easier, which was to drop positive cost non-artificial variables and nonbasic artificial variables at the end of phase 1 instead of all artificial variables.<br/>
There are some practical problems with degeneracy and redundant constraints that were not obvious to me from the theory when I first started working on this.  We should really test this a bit more with constraints outnumbering variables and redundant constraints to really be comfortable that all the issues are addressed, but we're certainly pretty close now if not there yet.<br/>
Andrea, thanks for the reports and validating fixes (or lack there of).  Luc, thanks for quickly getting these into SVN and letting me know about the problems.</p></comment><comment id="12752986" author="luc" created="Wed, 9 Sep 2009 09:55:25 +0100"><p>The patch from 2009-09-08 has been applied in subversion repository as of r812831.</p>

<p>After the patch, an existing test (SimplexTableauTest.testdiscardArtificialVariables) failed, so I had to update the expected matrix to prevent this failure. <b>This should be validated</b> as I really don't know if the failure were expected after the change or if something wrong occurred. Ben, could you have a look at this ?</p>

<p>This time, I'm not marking the issue as resolved, Andrea I'll wait until you consider it solved by yourself.</p>

<p>Thanks to everybody for their time on this issue, I'm sure we are gradually improving things.</p></comment><comment id="12753053" author="ciaccia" created="Wed, 9 Sep 2009 13:08:22 +0100"><p>Hi Luc, hi Ben,<br/>
This time I can confirm Ben's patch fixes the original problem. <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p>

<p>If I find something else related to this bug (or not) I will let you know, but I'm pretty sure this time the SimplexSolver is much more robust it was a couple of weeks ago!</p>

<p>I "improved" the JUnit test case for this bug, I attach the patch to this message. There are 5 new assertions that check all the constraints are really satisfied.</p>

<p>Thanks again for all the commitment<br/>
Andrea</p>

<p>PS: I don't know if this is somehow related, but I found another bug <a href="https://issues.apache.org/jira/browse/MATH-293" title="Matrix&#39;s &quot;OutOfBoundException&quot; in SimplexSolver" class="issue-link" data-issue-key="MATH-293"><del>MATH-293</del></a>... Ben, please look at that as well.</p></comment><comment id="12753057" author="luc" created="Wed, 9 Sep 2009 13:25:07 +0100"><p>I applied Andrea's patch in subversion as of r812921, thanks for providing it.<br/>
I'll wait for Ben's acknowledgement about the changes I've made in SimplexTableauTest.testdiscardArtificialVariables before marking the issue as resolved.</p></comment><comment id="12753153" author="bmccann" created="Wed, 9 Sep 2009 17:38:28 +0100"><p>Thanks Luc.  You can close this issue.  A note, we might want to rename testdiscardArtificialVariables to testDropPhase1Objective to match the updated method name.  I overlooked this earlier.  I look at <a href="https://issues.apache.org/jira/browse/MATH-293" title="Matrix&#39;s &quot;OutOfBoundException&quot; in SimplexSolver" class="issue-link" data-issue-key="MATH-293"><del>MATH-293</del></a>.</p></comment><comment id="12753498" author="luc" created="Thu, 10 Sep 2009 09:22:11 +0100"><p>fixed now (we hope)</p></comment></comments><attachments><attachment id="12418860" name="SimplexSolver.patch" size="5698" author="bmccann" created="Tue, 8 Sep 2009 01:16:06 +0100"/><attachment id="12419049" name="SimplexSolverTest-Andrea.patch" size="914" author="ciaccia" created="Wed, 9 Sep 2009 13:08:22 +0100"/><attachment id="12418861" name="SimplexSolverTest.patch" size="4713" author="bmccann" created="Tue, 8 Sep 2009 01:16:06 +0100"/><attachment id="12417328" name="SimplexSolverTest.patch" size="1121" author="bmccann" created="Fri, 21 Aug 2009 23:11:56 +0100"/><attachment id="12418862" name="SimplexTableau.patch" size="4286" author="bmccann" created="Tue, 8 Sep 2009 01:16:06 +0100"/><attachment id="12417327" name="SimplexTableau.patch" size="4060" author="bmccann" created="Fri, 21 Aug 2009 23:11:56 +0100"/><attachment id="12419011" name="patch.zip" size="4378" author="bmccann" created="Wed, 9 Sep 2009 02:54:40 +0100"/><attachment id="12418165" name="simplex.txt" size="2859" author="bmccann" created="Mon, 31 Aug 2009 18:24:04 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>8.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Fri, 21 Aug 2009 20:25:41 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>34144</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160729</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-285] FieldElement *interface* method names clash with already used method names</title><link>https://issues.apache.org/jira/browse/MATH-285</link><project id="12310485" key="MATH">Commons Math</project><description><p>This is probably to late to change, because release 2.0 is available now.</p>

<p>But it would be good if the FieldElement <b>interface</b> method names don't clash with already used method names (expecially with the java.util.List#add() method) if you would like to adopt the interface for already existing number type hierarchies.</p>

<p>For my hierachy I refactored the methods like this and could adopt the interface very fast. Otherwise you have to write a lot of wrappers to adopt the FieldElement interface.</p>

<p>public interface FieldElement&lt;T&gt; </p>
{

    /** Compute this + a.
     * @param a element to add
     * @return a new element representing this + a
     */
    T plus(T a);

    /** Compute this - a.
     * @param a element to subtract
     * @return a new element representing this - a
     */
    T minus(T a);

    /** Compute this  a.
     * @param a element to multiply
     * @return a new element representing this  a
     */
    T times(T a);

    /** Compute this  a.
     * @param a element to add
     * @return a new element representing this  a
     * @exception ArithmeticException if a is the zero of the
     * additive operation (i.e. additive identity)
     */
    T div(T a) throws ArithmeticException;

.....
}</description><environment/><key id="12433195">MATH-285</key><summary>FieldElement *interface* method names clash with already used method names</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="2">Won't Fix</resolution><assignee username="-1">Unassigned</assignee><reporter username="khartlage">Klaus</reporter><labels>
                    </labels><created>Sun, 16 Aug 2009 21:13:28 +0100</created><updated>Wed, 14 Apr 2010 01:32:03 +0100</updated><resolved>Sun, 27 Dec 2009 17:36:43 +0000</resolved><version>2.0</version><due/><votes>0</votes><watches>0</watches><comments><comment id="12743887" author="luc" created="Sun, 16 Aug 2009 21:29:31 +0100"><p>The names were chosen for compatibility with existing names in commons-math.<br/>
As an example, the Complex and Fraction classes now implement the interface but existed before that.<br/>
These names are also consistent throughout the library, even for classes that do not implement the Field interface.</p>

<p>I'm not sure many people will have a need to implement themselves this interface. I'm also sure many people would complain against changing the API of Complex and Fraction.</p></comment><comment id="12794708" author="luc" created="Sun, 27 Dec 2009 17:36:43 +0000"><p>Changing this would introduce a major incompatibility since it would change method names for already widely used classes like Complex and Fraction.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 16 Aug 2009 20:29:31 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150480</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160730</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-284] Avoid ArrayStoreException</title><link>https://issues.apache.org/jira/browse/MATH-284</link><project id="12310485" key="MATH">Commons Math</project><description><p>Add a new method<br/>
org.apache.commons.math,Field#getRuntimeClass():<br/>
...<br/>
    /**</p>
<ul>
	<li>Returns the runtime class of the FieldElement.</li>
	<li></li>
	<li>@return The 
{@code Class}
<p> object that represents the runtime</p></li>
	<li>class of this object.<br/>
     */<br/>
    Class&lt;? extends FieldElement&gt; getRuntimeClass();<br/>
...</li>
</ul>


<p>and replace all occurrences of <br/>
  Array.newInstance(field.getZero().getClass(),....)<br/>
with<br/>
  Array.newInstance(field.getRuntimeClass(),....)</p>

<p>to avoid the throwing of ArrayStoreException in the case you have a type hierachy of Fields with a common interface<br/>
and the array should have the interface type at runtime.</p>


</description><environment/><key id="12433194">MATH-284</key><summary>Avoid ArrayStoreException</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="khartlage">Klaus</reporter><labels>
                    </labels><created>Sun, 16 Aug 2009 20:57:58 +0100</created><updated>Sat, 24 Mar 2012 16:16:57 +0000</updated><resolved>Sat, 1 Oct 2011 16:16:05 +0100</resolved><version>2.0</version><fixVersion>3.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12743895" author="luc" created="Sun, 16 Aug 2009 21:55:14 +0100"><p>The patch file above corresponds to your suggested change.<br/>
Could you check if this solves the problem in your case ?</p>

<p>I would like to wait a little before commiting it as it breaks compatibility (we add a method to a public interface). However, this interface is a new one and very few people are likely to implement it (in fact, I'm surprised someone used it so quickly). The compatibility break is easy to solve for users as they mainly have to create a one line method like:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> <span class="code-object">Class</span> SomeTypeField <span class="code-keyword">implements</span> Field&lt;SomeType&gt;, Serializable  {

    ...

    /** {@inheritDoc} */
    <span class="code-keyword">public</span> <span class="code-object">Class</span>&lt;? <span class="code-keyword">extends</span> FieldElement&lt;SomeType&gt;&gt; getRuntimeClass() {
        <span class="code-keyword">return</span> SomeType.class;
    }

}
</pre>
</div></div>

<p>Since the change you suggest is an interesting improvement and the compatibility break is easy to solve, I think it is worth adding it and breaking compatibility.</p>

<p>What do other people think ?</p></comment><comment id="12743900" author="khartlage" created="Sun, 16 Aug 2009 22:11:58 +0100"><p>Thanks.<br/>
Your patch works perfectly for me.</p></comment><comment id="12743932" author="psteitz" created="Mon, 17 Aug 2009 01:00:31 +0100"><p>I am -1 on incompatible change until next major release.  Best to extend with a new interface including the new method.</p></comment><comment id="12794696" author="luc" created="Sun, 27 Dec 2009 16:37:21 +0000"><p>Using a new interface would not help solving this issue as the linear algebra classes that use field elements are declared with respect to FieldElement wich in turns refer to Field and not some new ImprovedField interface.</p>

<p>Klaus, could you tell more about your use case so we can find another way to solve this ?<br/>
If I understand correctly, you have a hierarchy similar to:</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> class Base <span class="code-keyword">implements</span> FieldElement&lt;Base&gt; {

    <span class="code-keyword">public</span> <span class="code-keyword">static</span> <span class="code-keyword">final</span> Base ZERO = <span class="code-keyword">new</span> Base(...);

    <span class="code-keyword">public</span> <span class="code-keyword">static</span> <span class="code-keyword">final</span> Base ONE    = <span class="code-keyword">new</span> Base(...);

    BaseField getField() {
        <span class="code-keyword">return</span> BaseField.getInstance();
    }

}

<span class="code-keyword">public</span> class BaseField <span class="code-keyword">implements</span> Field&lt;Base&gt; {

    <span class="code-keyword">public</span> Base getZero() {
        <span class="code-keyword">return</span> Base.ZERO;
    }

    <span class="code-keyword">public</span> Base getOne() {
        <span class="code-keyword">return</span> Base.ONE;
    }

}

<span class="code-keyword">public</span> class Derived <span class="code-keyword">extends</span> Base {
    ...
}
</pre>
</div></div>

<p>If this is the case could you tell us if your matrices can contain both Base and Derived elements. If so, then Derived should still rely on the base implementation of getField(), which would lead to Base[] arrays being allocated, as such arrays may contain Derived elements. If not, then Derived should implement its own getField() method and a DerivedField class should be created as well as Derived.ZERO and Derived.ONE to get a more specialized class.</p>

</comment><comment id="12804623" author="luc" created="Mon, 25 Jan 2010 18:13:13 +0000"><p>This issue will have to wait at least for 3.0 as it introduces an incompatible change in a user interface.</p></comment><comment id="13083523" author="psteitz" created="Thu, 11 Aug 2011 21:59:47 +0100"><p>Can we just apply original suggestion and resolve this now?</p></comment><comment id="13083677" author="luc" created="Thu, 11 Aug 2011 22:48:41 +0100"><p>If the patch still works, we could add it.</p></comment><comment id="13118831" author="luc" created="Sat, 1 Oct 2011 16:16:05 +0100"><p>Fixed in subversion repository as of r1178009.</p>

<p>Thanks for the report and the fix suggestion.</p></comment></comments><attachments><attachment id="12416722" name="math-284.patch" size="11123" author="luc" created="Sun, 16 Aug 2009 21:55:14 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 16 Aug 2009 20:55:14 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>2249</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160731</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-283] MultiDirectional optimzation loops forver if started at the correct solution</title><link>https://issues.apache.org/jira/browse/MATH-283</link><project id="12310485" key="MATH">Commons Math</project><description><p>MultiDirectional.iterateSimplex loops forever if the starting point is the correct solution.</p>

<p>see the attached test case (testMultiDirectionalCorrectStart) as an example.</p></description><environment><p>none specific for the issue (it's a programming bug)</p></environment><key id="12432884">MATH-283</key><summary>MultiDirectional optimzation loops forver if started at the correct solution</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.png">Blocker</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="michael.nischt">Michael Nischt</reporter><labels>
                    </labels><created>Wed, 12 Aug 2009 15:51:15 +0100</created><updated>Wed, 14 Apr 2010 01:32:33 +0100</updated><resolved>Fri, 14 Aug 2009 20:25:15 +0100</resolved><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>1</watches><timeoriginalestimate seconds="86400">24h</timeoriginalestimate><timeestimate seconds="86400">24h</timeestimate><comments><comment id="12742395" author="michael.nischt" created="Wed, 12 Aug 2009 16:02:33 +0100"><p>the failing unit test</p></comment><comment id="12743378" author="luc" created="Fri, 14 Aug 2009 20:25:15 +0100"><p>fixed in subversion repository as of r804328<br/>
thanks for the report and the fix suggestion</p></comment></comments><attachments><attachment id="12416328" name="MultiDirectionalCorrectStartTest.java" size="2851" author="michael.nischt" created="Wed, 12 Aug 2009 16:02:33 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Fri, 14 Aug 2009 19:25:15 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>34193</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160732</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-282] ChiSquaredDistributionImpl.cumulativeProbability > 1</title><link>https://issues.apache.org/jira/browse/MATH-282</link><project id="12310485" key="MATH">Commons Math</project><description><p>Calling <br/>
new ChiSquaredDistributionImpl(1.0).cumulativeProbability(66.41528551683048)</p>

<p>returns 1.000000000000004, which is bogus (should never be &gt; 1)</p></description><environment><p>called from Scala code</p></environment><key id="12432549">MATH-282</key><summary>ChiSquaredDistributionImpl.cumulativeProbability > 1</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="psteitz">Phil Steitz</assignee><reporter username="akiezun">Adam Kiezun</reporter><labels>
                    </labels><created>Fri, 7 Aug 2009 19:24:07 +0100</created><updated>Tue, 13 Apr 2010 11:26:15 +0100</updated><resolved>Mon, 8 Mar 2010 23:00:26 +0000</resolved><version>1.0</version><version>1.1</version><version>1.2</version><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12740905" author="luc" created="Sat, 8 Aug 2009 17:05:08 +0100"><p>The problem seems to be related to numerical accuracy.<br/>
The computation here involves lots of iterations in the Gamma.regularizedGammaP method (115 iterations on my computer) and the final expression involves several transcendant functions (exp, log and logGamma).</p>

<p>The proposed patch simply filters out the values exceeding 1.0 in the gamma distribution implementation which is used by Chi squared distribution.</p>

<p>I am not sure this is the best fix to this issue, so I won't commit it myself. I prefer someone else could verify it.</p></comment><comment id="12741113" author="psteitz" created="Sun, 9 Aug 2009 19:07:36 +0100"><p>I am working on getting a bound in terms of the arguments for the Gamma distribution similar to what we do for the Normal distribution, so we can return 1 when we know that the tail probability is going to be bounded above by a sufficiently small number - say, 10E-20.   </p></comment><comment id="12741161" author="psteitz" created="Mon, 10 Aug 2009 02:20:00 +0100"><p>Unfortunately, from R and <span class="error">&#91;1&#93;</span>, it looks like the value in the issue report should be ~ 1 - 10^-13, and I don't like the idea of top-coding with such a tight bound. Need to look at the regularized gamma approximation.</p>

<p><span class="error">&#91;1&#93;</span> "The Moment Bound Is Tighter Than Chernoff's Bound for Positive Tail Probabilities", Thomas K Philips, Randolph Nelson,  American Statistician 1995 vol. 49 (May, 1995) pp. 175-178</p></comment><comment id="12764514" author="psteitz" created="Sun, 11 Oct 2009 22:53:35 +0100"><p>The problem in Gamma.regularizedGammaP reported here is also causing incorrect results from PoissonDistributionImpl#cumulativeProbability.  The (currently disabled) test case, testCumulativeProbabilitySpecial() in PoissonDistributionTest illustrates the problem.  For some (not all) large lambda and some (not all) x in (0.9 * lambda, lambda), NaN or zero cumulative probabilities are returned.</p></comment><comment id="12836590" author="psteitz" created="Mon, 22 Feb 2010 12:04:27 +0000"><p>I have narrowed this down to two issues in Gamma</p>

<ul>
	<li>choice of when to use the series expansion vs continued fraction in computing the regularized gamma functions - changing from (a &gt;= 1.0 &amp;&amp; x &gt; a) to (x &gt; a + 1) as criteria for when to use continued fraction reduces incidence of NaN values returned and improves accuracy for some arguments.</li>
	<li>handling the case when the continued fraction diverges.  I am still working on convincing myself that divergence is expected in failing test cases, in which case, logic can be changed to catch the continued fraction divergence and fall back to the series approximation in that case.  This will require refactoring the regularizedGammaP and Q functions to encapsulate the series / fraction computation instead of calling one another based on argument test.</li>
</ul>
</comment><comment id="12839654" author="psteitz" created="Mon, 1 Mar 2010 11:50:49 +0000"><p>The attached patch resolves this issue as well as <a href="https://issues.apache.org/jira/browse/MATH-301" title="Erf(z) should return 1.0 for z &#39;large&#39; but  fails with a MaxIterationsExceededException for z &gt; 26.0." class="issue-link" data-issue-key="MATH-301"><del>MATH-301</del></a> and the problems described above with the Poisson distribution.  The patch bundles quite a few changes, some of which are not strictly necessary to resolve these issues.  The following is a summary.</p>

<ul>
	<li>BrentSolver has been changed to expose its configured absolute accuracy.   This solver is used by the default inverse cum implementation in AbstractContinuousDistribution and the hard-coded setting (1E-6) was limiting accuracy in inverse cumulative probability estimates.  AbstractContinuousDistribution was changed to allow distributions to set this value and NormalDistributionImpl was changed to set it to 1E-9 by default and allow users to configure it via a constructor argument.   If all are happy with this change, I will similarly change other distributions to override the new getSolverAbsoluteAccuracy method and add constructors to configure the value.</li>
</ul>


<ul>
	<li>AbstractContinuousDistribution and AbstractIntegerDistribution inverseCumulativeProbability methods have been modified to check for NaN values returned by cumulativeProbability and throw MathExceptions when this happens.</li>
</ul>


<ul>
	<li>The criteria for choosing between the Lanczos series and continued fraction expansion when computing regularized gamma functions has been changed to (x &gt;= a + 1).  When using the series approximation (regularizedGammaP), divergence to infinity is checked and when this happens, 1 is returned.</li>
</ul>


<ul>
	<li>When scaling continued fractions to (try to) avoid divergence to infinity, the larger of a and b is used as a scale factor and the attempt to scale is repeated up to 5 times, using successive powers of the scale factor.</li>
</ul>


<ul>
	<li>The maximum number of iterations used in estimating cumulative probabilities for PoissonDistributionImpl has been decreased from Integer.MAX_VALUE to 10000000 and made configurable.</li>
</ul>


<p>Review and comment much appreciated.  One thing that I would like improve is to get decent top-coding in place in terms of the arguments to the regularized gamma functions.  The Poisson inverse cum tests take a very long time now because for very large values of x, the continued fractions are taking a long time to converge.  This is needless computation, as the value returned is 1.  We should be able to analytically determine bounds here.</p></comment><comment id="12839809" author="luc" created="Mon, 1 Mar 2010 19:25:39 +0000"><p>This looks fine to me (congrats for the error messages translations).<br/>
I am a little puzzled by the MathException thrown in some methods to be caught in the same method and wrapped in a FunctionEvaluationException. Could the MathException be a FunctionEvaluationException from the start (even if other MathException can be thrown and need to be wrapped by themselves) ?</p></comment><comment id="12839839" author="psteitz" created="Mon, 1 Mar 2010 20:18:25 +0000"><p>Thanks, Luc! </p>

<p>Here is the perhaps strange logic explaining the odd exception nesting that you pointed out.  When a cumulativeProbability function returns NaN in the context of estimating inverse cum, the immediate exception is really a bad-value-returned exception, not a FunctionEvaluationException - there is no exception encountered evaluating the function, it just returns a bad value - so I code it as MathException.  The exception that the caller gets is FunctionEvaluationException, because there is in fact an error evaluating the inverse cum.  Wrapped inside is the MathException with the message indicating that NaN was returned by a cum activation.   </p>

<p>I guess it comes down to how we view FunctionEvaluationException and in particular is it appropriate to throw when NaN is returned by a method that logically should not return NaNs.  Thinking some more about this, I think so, so I will change the patch to throw FunctionEvaluationException in the first incidence.</p>

<p>Thanks again for looking at this carefully.  I am glad I got the translations right - the one I was worried about was as much English as French - "diverge to NaN" makes me cringe a little <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p></comment><comment id="12842838" author="psteitz" created="Mon, 8 Mar 2010 23:00:26 +0000"><p>Fixed in r920558</p></comment></comments><issuelinks><issuelinktype id="10030"><name>Reference</name><inwardlinks description="is related to"><issuelink><issuekey id="12437655">MATH-301</issuekey></issuelink></inwardlinks></issuelinktype></issuelinks><attachments><attachment id="12437474" name="distributions.patch" size="25526" author="psteitz" created="Mon, 1 Mar 2010 11:50:49 +0000"/><attachment id="12415937" name="math-282.patch" size="1898" author="luc" created="Sat, 8 Aug 2009 17:05:08 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sat, 8 Aug 2009 16:05:08 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>34161</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160733</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-281] RealMatrix.subtract javadoc typo</title><link>https://issues.apache.org/jira/browse/MATH-281</link><project id="12310485" key="MATH">Commons Math</project><description><p>I think the javadoc for RealMatrix.subtract is wrong.  It says "@return this + m", which perhaps should be "@return this - m"</p>

<p>Index: src/main/java/org/apache/commons/math/linear/RealMatrix.java<br/>
===================================================================<br/>
&#8212; src/main/java/org/apache/commons/math/linear/RealMatrix.java	(revision 799902)<br/>
+++ src/main/java/org/apache/commons/math/linear/RealMatrix.java	(working copy)<br/>
@@ -60,7 +60,7 @@</p>
<ul>
	<li>Compute this minus m.<br/>
      *</li>
	<li>@param m    matrix to be subtracted</li>
</ul>
<ul class="alternate" type="square">
	<li>* @return     this + m<br/>
+     * @return     this - m</li>
</ul>
<ul>
	<li>@throws  IllegalArgumentException if m is not the same size as this<br/>
      */<br/>
     RealMatrix subtract(RealMatrix m) throws IllegalArgumentException;</li>
</ul>
</description><environment/><key id="12431966">MATH-281</key><summary>RealMatrix.subtract javadoc typo</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="ashuang">Albert Huang</reporter><labels>
                    </labels><created>Sat, 1 Aug 2009 18:45:29 +0100</created><updated>Fri, 7 Aug 2009 10:19:02 +0100</updated><resolved>Sat, 1 Aug 2009 20:03:01 +0100</resolved><fixVersion>2.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12737935" author="luc" created="Sat, 1 Aug 2009 20:03:00 +0100"><p>fixed in subversion repository as of r799906<br/>
thanks for the report</p></comment><comment id="12740475" author="luc" created="Fri, 7 Aug 2009 10:19:02 +0100"><p>closing resolved issue for 2.0 release</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sat, 1 Aug 2009 19:03:00 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150479</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160734</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-280] bug in inverseCumulativeProbability() for Normal Distribution</title><link>https://issues.apache.org/jira/browse/MATH-280</link><project id="12310485" key="MATH">Commons Math</project><description>
<ul>
	<li>@version $Revision: 617953 $ $Date: 2008-02-02 22:54:00 -0700 (Sat, 02 Feb 2008) $<br/>
 */<br/>
public class NormalDistributionImpl extends AbstractContinuousDistribution </li>
</ul>



<ul>
	<li>@version $Revision: 506600 $ $Date: 2007-02-12 12:35:59 -0700 (Mon, 12 Feb 2007) $<br/>
 */<br/>
public abstract class AbstractContinuousDistribution</li>
</ul>



<p>This code:</p>

<p>        	DistributionFactory factory = app.getDistributionFactory();<br/>
        	NormalDistribution normal = factory.createNormalDistribution(0,1);<br/>
        	double result = normal.inverseCumulativeProbability(0.9772498680518209);</p>

<p>gives the exception below. It should return (approx) 2.0000...</p>

<p>normal.inverseCumulativeProbability(0.977249868051820); works fine</p>

<p>These also give errors:<br/>
0.9986501019683698 (should return 3.0000...)<br/>
0.9999683287581673 (should return 4.0000...)</p>

<p>org.apache.commons.math.MathException: Number of iterations=1, maximum iterations=2,147,483,647, initial=1, lower bound=0, upper bound=179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000, final a value=0, final b value=2, f(a)=-0.477, f(b)=0<br/>
	at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:103)<br/>
	at org.apache.commons.math.distribution.NormalDistributionImpl.inverseCumulativeProbability(NormalDistributionImpl.java:145)</p>

</description><environment><p>Java 1.5</p></environment><key id="12429647">MATH-280</key><summary>bug in inverseCumulativeProbability() for Normal Distribution</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="murkle">Michael Borcherds</reporter><labels>
                    </labels><created>Mon, 6 Jul 2009 22:26:57 +0100</created><updated>Fri, 7 Aug 2009 10:18:40 +0100</updated><resolved>Tue, 7 Jul 2009 10:21:22 +0100</resolved><version>1.2</version><fixVersion>2.0</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="12728000" author="luc" created="Tue, 7 Jul 2009 10:21:22 +0100"><p>fixed in subversion repository as of r791766<br/>
thanks for the report</p></comment><comment id="12740474" author="luc" created="Fri, 7 Aug 2009 10:18:40 +0100"><p>closing resolved issue for 2.0 release</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 7 Jul 2009 09:21:22 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>34166</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160735</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-279] MultipleLinearRegression - test for minimum number of samples</title><link>https://issues.apache.org/jira/browse/MATH-279</link><project id="12310485" key="MATH">Commons Math</project><description><p>It's currently possible to pass in so few rows (samples) that there isn't a row for each column (predictor).  Does this look like the right thing to do?</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
Index: AbstractMultipleLinearRegression.java
===================================================================
--- AbstractMultipleLinearRegression.java       (revision 786758)
+++ AbstractMultipleLinearRegression.java       (working copy)
@@ -91,6 +91,9 @@
                   <span class="code-quote">"dimension mismatch {0} != {1}"</span>,
                   (x == <span class="code-keyword">null</span>) ? 0 : x.length,
                   (y == <span class="code-keyword">null</span>) ? 0 : y.length);
+        } <span class="code-keyword">else</span> <span class="code-keyword">if</span> (x[0].length &gt; x.length){
+            <span class="code-keyword">throw</span> MathRuntimeException.createIllegalArgumentException(
+                    <span class="code-quote">"not enough data ("</span> + x.length + <span class="code-quote">" rows) <span class="code-keyword">for</span> <span class="code-keyword">this</span> many predictors ("</span> + x[0].length + <span class="code-quote">" predictors)"</span>);
         }
     }
 </pre>
</div></div>
</description><environment/><key id="12428442">MATH-279</key><summary>MultipleLinearRegression - test for minimum number of samples</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="mbjorkegren">Michael Bjorkegren</reporter><labels>
                    </labels><created>Sat, 20 Jun 2009 08:13:00 +0100</created><updated>Fri, 7 Aug 2009 10:18:13 +0100</updated><resolved>Sun, 5 Jul 2009 14:31:29 +0100</resolved><version>2.0</version><fixVersion>2.0</fixVersion><due/><votes>0</votes><watches>0</watches><timeoriginalestimate seconds="600">10m</timeoriginalestimate><timeestimate seconds="600">10m</timeestimate><comments><comment id="12727333" author="luc" created="Sun, 5 Jul 2009 14:31:29 +0100"><p>fixed in subversion repository as of r791244<br/>
patch was only slightly modified to avoid a NPE<br/>
thanks for the patch</p></comment><comment id="12740473" author="luc" created="Fri, 7 Aug 2009 10:18:13 +0100"><p>closing resolved issue for 2.0 release</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 5 Jul 2009 13:31:29 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150478</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160736</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-278] Robust locally weighted regression (Loess / Lowess)</title><link>https://issues.apache.org/jira/browse/MATH-278</link><project id="12310485" key="MATH">Commons Math</project><description><p>Attached is a patch that implements the robust Loess procedure for smoothing univariate scatterplots with local linear regression ( <a href="http://en.wikipedia.org/wiki/Local_regression" class="external-link" rel="nofollow">http://en.wikipedia.org/wiki/Local_regression</a>) described by William Cleveland in <a href="http://www.math.tau.ac.il/~yekutiel/MA%20seminar/Cleveland%201979.pdf" class="external-link" rel="nofollow">http://www.math.tau.ac.il/~yekutiel/MA%20seminar/Cleveland%201979.pdf</a> , with tests.</p>

<p>(Also, the patch fixes one missing-javadoc checkstyle warning in the AbstractIntegrator class: I wanted to make it so that the code with my patch does not generate any checkstyle warnings at all)</p>

<p>I propose to include the procedure into commons-math because commons-math, as of now, does not possess a method for robust smoothing of noisy data: there is  interpolation (which virtually can't be used for noisy data at all) and there's regression, which has quite different goals. <br/>
Loess allows one to build a smooth curve with a controllable degree of smoothness that approximates the overall shape of the data.</p>

<p>I tried to follow the code requirements as strictly as possible: the tests cover the code completely, there are no checkstyle warnings, etc. The code is completely written by myself from scratch, with no borrowings of third-party licensed code.</p>


<p>The method is pretty computationally intensive (10000 points with a bandwidth of 0.3 and 4 robustness iterations take about 3.7sec on my machine; generally the complexity is O(robustnessIters * n^2 * bandwidth)), but I don't know how to optimize it further; all implementations that I have found use exactly the same algorithm as mine for the unidimensional case.</p>

<p>Some TODOs, in vastly increasing order of complexity:</p>
<ul class="alternate" type="square">
	<li>Make the weight function customizable: according to Cleveland, this is needed in some exotic cases only, like, where the desired approximation is non-continuous, for example.</li>
	<li>Make the degree of the locally fitted polynomial customizable: currently the algorithm does only a linear local regression; it might be useful to make it also use quadratic regression. Higher degrees are not worth it, according to Cleveland.</li>
	<li>Generalize the algorithm to the multidimensional case: this will require A LOT of hard work.</li>
</ul>
</description><environment/><key id="12428403">MATH-278</key><summary>Robust locally weighted regression (Loess / Lowess)</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="jkff">Eugene Kirpichov</reporter><labels>
                    </labels><created>Fri, 19 Jun 2009 21:13:57 +0100</created><updated>Fri, 7 Aug 2009 10:17:45 +0100</updated><resolved>Sat, 20 Jun 2009 14:45:25 +0100</resolved><due/><votes>0</votes><watches>1</watches><comments><comment id="12721976" author="jkff" created="Fri, 19 Jun 2009 21:14:35 +0100"><p>Attached the patch.</p></comment><comment id="12721980" author="jkff" created="Fri, 19 Jun 2009 21:22:18 +0100"><p>Hm, I just understood that the moving weighted regression may be optimized from O(n^2) to O(n log n) by expressing it as a convolution with the weight function and using an FFT, probably. However, let's delay implementing that for some time..</p></comment><comment id="12722001" author="sebb@apache.org" created="Fri, 19 Jun 2009 21:53:27 +0100"><p>serialVersionUID should be private<br/>
The patch includes an unrelated change to AbstractIntegrator.java.</p>

<p>It would be useful to add a constructor which had parameters for bandwidth and roubustnessIterators, and drop the corresponding setxxx() methods<br/>
The fields could then be made final, and the class would then be immutable and thus thread-safe.</p>

<p>The SVN keyword $Date$ causes problems when checking releases, so I'd recommend that it is removed.</p></comment><comment id="12722141" author="jkff" created="Sat, 20 Jun 2009 06:13:17 +0100"><p>Attached a patch that does not change the AbstractIntegrator class, the $Date$ argument is replaced with '???', and parameters are made final and initialized in two constructors. Tests and Javadocs updated accordingly.</p>

<p>Actually, I don't know what the $Revision$ and $Date$ are for and where they come from. Are they filled in automatically by a pre-commit hook? If so, should I leave them like '???' in the patch?<br/>
If I omit them altogether, I get a checkstyle error about the missing @version tag.</p></comment><comment id="12722144" author="jkff" created="Sat, 20 Jun 2009 06:37:19 +0100"><p>(No, the FFT optimization may only be done if the abscissae are an arithmetic progression. Might make sense to include this as a special case in a separate method)</p></comment><comment id="12722165" author="sebb@apache.org" created="Sat, 20 Jun 2009 11:31:04 +0100"><p>SVN keywords are filled in when the code is fetched from the server (and stripped off on upload).</p>

<p>I meant to just remove $Date:$ from the code, leaving:</p>

<ul>
	<li>@version $Revision: $</li>
</ul>


<p>however that can be done when the patch is applied.</p></comment><comment id="12722194" author="luc" created="Sat, 20 Jun 2009 14:45:25 +0100"><p>solved in subversion repository as of r786821<br/>
applied patch with minor changes<br/>
thanks for the patch</p></comment><comment id="12740472" author="luc" created="Fri, 7 Aug 2009 10:17:44 +0100"><p>closing resolved issue for 2.0 release</p></comment></comments><attachments><attachment id="12411258" name="loess.patch" size="25463" author="jkff" created="Fri, 19 Jun 2009 21:14:35 +0100"/><attachment id="12411301" name="loess.patch.v2" size="24539" author="jkff" created="Sat, 20 Jun 2009 06:13:17 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Fri, 19 Jun 2009 20:53:27 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150477</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160737</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-277] Add scalar multiply to Complex</title><link>https://issues.apache.org/jira/browse/MATH-277</link><project id="12310485" key="MATH">Commons Math</project><description><p>Adds a scalar multiply method to Complex class</p></description><environment/><key id="12428377">MATH-277</key><summary>Add scalar multiply to Complex</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="mark@panonet.net">Mark Anderson</reporter><labels>
                    </labels><created>Fri, 19 Jun 2009 16:52:56 +0100</created><updated>Fri, 7 Aug 2009 10:17:09 +0100</updated><resolved>Sun, 5 Jul 2009 13:55:02 +0100</resolved><version>2.0</version><fixVersion>2.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12721834" author="mark@panonet.net" created="Fri, 19 Jun 2009 16:53:34 +0100"><p>Attached patch and test cases</p></comment><comment id="12721838" author="mark@panonet.net" created="Fri, 19 Jun 2009 16:56:44 +0100"><p>Correct version of Complex.patch</p></comment><comment id="12727327" author="luc" created="Sun, 5 Jul 2009 13:55:01 +0100"><p>patch applied, fixed in subversion repository as of r791237<br/>
thanks for the patch</p></comment><comment id="12740471" author="luc" created="Fri, 7 Aug 2009 10:17:09 +0100"><p>closing resolved issue for 2.0 release</p></comment></comments><attachments><attachment id="12411237" name="Complex.patch" size="1814" author="mark@panonet.net" created="Fri, 19 Jun 2009 16:56:44 +0100"/><attachment id="12411236" name="ComplexTest.patch" size="1319" author="mark@panonet.net" created="Fri, 19 Jun 2009 16:53:34 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 5 Jul 2009 12:55:01 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150476</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160738</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-276] Calculate isNan and isFinite in Complex constructor</title><link>https://issues.apache.org/jira/browse/MATH-276</link><project id="12310485" key="MATH">Commons Math</project><description><p>From profiling some code performing a large number of FFT operations I found that due to isNaN being called as part of complex arithmetic a large proportion of time was spent within isNaN.</p>

<p>I would propose calculating isNaN and isFinite in the constructor to save calculating these values each time the methods are called.</p></description><environment/><key id="12428086">MATH-276</key><summary>Calculate isNan and isFinite in Complex constructor</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="mark@panonet.net">Mark Anderson</reporter><labels>
                    </labels><created>Wed, 17 Jun 2009 10:00:45 +0100</created><updated>Fri, 7 Aug 2009 10:16:43 +0100</updated><resolved>Sun, 5 Jul 2009 14:00:58 +0100</resolved><version>2.0</version><fixVersion>2.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12720620" author="psteitz" created="Wed, 17 Jun 2009 12:01:48 +0100"><p>Patch applied in r785552.  Thanks!</p></comment><comment id="12721035" author="psteitz" created="Thu, 18 Jun 2009 03:25:39 +0100"><p>Per Luc's comment on dev list, we need to address serialization overhead issue.  Custom serialization and new fields transient?</p></comment><comment id="12727328" author="luc" created="Sun, 5 Jul 2009 14:00:58 +0100"><p>closing the issue as it was solved some weeks ago (2009-06-23), as of r787521 by Phil and Bill</p></comment><comment id="12740470" author="luc" created="Fri, 7 Aug 2009 10:16:43 +0100"><p>closing resolved issue for 2.0 release</p></comment></comments><attachments><attachment id="12410911" name="Complex.patch" size="1461" author="mark@panonet.net" created="Wed, 17 Jun 2009 10:01:18 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 17 Jun 2009 11:01:48 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150475</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160739</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-275] MANIFEST.MF contains incorrect "Import-Package" OSGi header (makes it unusable for OSGi)</title><link>https://issues.apache.org/jira/browse/MATH-275</link><project id="12310485" key="MATH">Commons Math</project><description><p>The MANIFEST.MF file contains this OSGi header:</p>

<p>Import-Package: org.apache.commons.discovery.tools,<br/>
 org.apache.commons.math;version=1.2,<br/>
 org.apache.commons.math.analysis;version=1.2,<br/>
 org.apache.commons.math.complex;version=1.2,<br/>
...</p>

<p>This header defines what the bundle requires from the OSGi runtime and so it shouldn't include the packages defined in the bundle (i.e. all the org.apache.commons packages). I suspect it shouldn't include the org.apache.commons.discovery.tools package either as I can't see that math has a dependency on that (I could be wrong <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> ).</p>

<p>The presence of this header causes the Math library to be unusable as an OSGi bundle in Eclipse RCP development (and I suspect in any OSGI container).</p></description><environment/><key id="12427239">MATH-275</key><summary>MANIFEST.MF contains incorrect "Import-Package" OSGi header (makes it unusable for OSGi)</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="2">Won't Fix</resolution><assignee username="-1">Unassigned</assignee><reporter username="paulfield">Paul Field</reporter><labels>
                    </labels><created>Fri, 5 Jun 2009 19:36:49 +0100</created><updated>Sun, 14 Jun 2009 19:51:25 +0100</updated><resolved>Sun, 14 Jun 2009 19:51:25 +0100</resolved><version>1.2</version><due/><votes>0</votes><watches>0</watches><comments><comment id="12717102" author="niallp" created="Sun, 7 Jun 2009 23:11:57 +0100"><p>Commons uses the maven-bundle-plugin which is a wrapper for the Bnd tool and this is the default behaviour. This issue has been raised a few times before, I'm not an OSGi expert but we took advice from the Apache Felix project who maintain the maven plugin - in the words of Peter Kriens who is one of the leading OSGi experts and author of the Bnd tool:</p>

<p>"Bnd automatically imports all exports to allow substitutability. If  you do not do this, you create all kinds of standalone class spaces  and things will not work together. It is generally bad practice to  only export a package."</p>

<p><a href="http://commons.markmail.org/message/lgmj7srrxhld42tp" class="external-link" rel="nofollow">http://commons.markmail.org/message/lgmj7srrxhld42tp</a></p></comment><comment id="12717103" author="niallp" created="Sun, 7 Jun 2009 23:20:29 +0100"><p>Also Martin Oberhuber's response indicated the usage patterns with eclipse is different from other OSGi containers</p>

<p><a href="http://commons.markmail.org/message/44llxa5oa4rtefa7" class="external-link" rel="nofollow">http://commons.markmail.org/message/44llxa5oa4rtefa7</a></p>

<p>Seems like we can't satisfy all camps, so we chose to follow the advice from Apache Felix. I would only be in favour of changing what we do here in commons if the experts from Apache Felix changed their advice, so if you want to discuss this further it might be better to do it on the Felix mailing list. If you can persuade them to change their advice then I'm sure we would follow it.</p></comment><comment id="12719316" author="psteitz" created="Sun, 14 Jun 2009 19:51:25 +0100"><p>Agree with Niall's analysis.  We can reopen and change if and when guidance from Felix changes.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 7 Jun 2009 22:11:57 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150474</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160740</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-274] testing for symmetric positive definite matrix in CholeskyDecomposition</title><link>https://issues.apache.org/jira/browse/MATH-274</link><project id="12310485" key="MATH">Commons Math</project><description><p>I used this matrix:</p>

<p>        double[][] cv = {<br/>
            </p>
{0.40434286, 0.09376327, 0.30328980, 0.04909388}
<p>,<br/>
            </p>
{0.09376327, 0.10400408, 0.07137959, 0.04762857}
<p>,<br/>
            </p>
{0.30328980, 0.07137959, 0.30458776, 0.04882449},<br/>
            {0.04909388, 0.04762857, 0.04882449, 0.07543265}<br/>
        };<br/>
<br/>
And it works fine, because it is symmetric positive definite<br/>
<br/>
I tried this matrix:<br/>
<br/>
        double[][] cv = {<br/>
            {0.40434286, -0.09376327, 0.30328980, 0.04909388},<br/>
            {-0.09376327, 0.10400408, 0.07137959, 0.04762857},<br/>
            {0.30328980, 0.07137959, 0.30458776, 0.04882449}
<p>,</p>
            {0.04909388, 0.04762857, 0.04882449, 0.07543265}
<p>        };</p>

<p>And it should throw an exception but it does not.  I tested the matrix in R and R's cholesky decomposition method returns that the matrix is not symmetric positive definite.</p>

<p>Obviously your code is not catching this appropriately.</p>

<p>By the way (in my opinion) the use of exceptions to check these conditions is not the best design or use for exceptions.  If you are going to force the use to try and catch these exceptions at least provide methods  to test the conditions prior to the possibility of the exception.  </p>
</description><environment><p>Mac OS X, NetBeans</p></environment><key id="12427143">MATH-274</key><summary>testing for symmetric positive definite matrix in CholeskyDecomposition</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="rossetti">Manuel Rossetti</reporter><labels>
                    </labels><created>Thu, 4 Jun 2009 20:24:12 +0100</created><updated>Fri, 7 Aug 2009 10:16:16 +0100</updated><resolved>Thu, 4 Jun 2009 21:11:26 +0100</resolved><version>2.0</version><fixVersion>2.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12716383" author="luc" created="Thu, 4 Jun 2009 21:11:26 +0100"><p>fixed in subversion repository as of r 781845<br/>
Concerning the exception, it is not possible to check the matrix without trying to decompose it, so providing an external check would be a waste as it would already do almost everything. In fact, it was exactly the reason for the bug: the check was done too early on the raw matrix, not on the matrix after some changes have been made to its elements.<br/>
thanks for the report</p></comment><comment id="12716402" author="rossetti" created="Thu, 4 Jun 2009 21:57:10 +0100"><p>Luc,</p>

<p>Thanks for fixing the error.</p>

<p>You are missing my point.  You should provide the user the opportunity  <br/>
to check the condition, rather than having to rely on exceptions.  The  <br/>
client can make the decision whether it is a waste or not.</p>

<p>And, we will agree to disagree on how the library is using exceptions.</p>

<p>Regards,<br/>
Manuel</p>



<p>-----------------------------------------------------<br/>
Manuel D. Rossetti, Ph.D., P.E.<br/>
Associate Professor of Industrial Engineering<br/>
University of Arkansas<br/>
Department of Industrial Engineering<br/>
4207 Bell Engineering Center<br/>
Fayetteville, AR 72701<br/>
Phone: (479) 575-6756<br/>
Fax: (479) 575-8431<br/>
email: rossetti@uark.edu<br/>
www: www.uark.edu/~rossetti</p>


</comment><comment id="12740469" author="luc" created="Fri, 7 Aug 2009 10:16:16 +0100"><p>closing resolved issue for 2.0 release</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Thu, 4 Jun 2009 20:11:26 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>34201</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160741</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-273] Basic variable is not found correctly in simplex tableau</title><link>https://issues.apache.org/jira/browse/MATH-273</link><project id="12310485" key="MATH">Commons Math</project><description><p>The last patch to SimplexTableau caused an automated test suite I'm running at work to go down a new code path and uncover what is hopefully the last bug remaining in the Simplex code.<br/>
SimplexTableau was assuming an entry in the tableau had to be nonzero to indicate a basic variable, which is incorrect - the entry should have a value equal to 1.</p></description><environment/><key id="12426998">MATH-273</key><summary>Basic variable is not found correctly in simplex tableau</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="bmccann">Benjamin McCann</reporter><labels>
                    </labels><created>Wed, 3 Jun 2009 06:11:34 +0100</created><updated>Fri, 7 Aug 2009 10:15:43 +0100</updated><resolved>Wed, 3 Jun 2009 10:07:06 +0100</resolved><version>2.0</version><fixVersion>2.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12715805" author="bmccann" created="Wed, 3 Jun 2009 06:12:13 +0100"><p>Here's the patch.</p></comment><comment id="12715875" author="luc" created="Wed, 3 Jun 2009 10:07:06 +0100"><p>fixed in subversion repository as of r781304<br/>
patch applied<br/>
thanks</p></comment><comment id="12740468" author="luc" created="Fri, 7 Aug 2009 10:15:43 +0100"><p>closing resolved issue for 2.0 release</p></comment></comments><attachments><attachment id="12409728" name="SimplexSolverTest.patch" size="1047" author="bmccann" created="Wed, 3 Jun 2009 06:12:13 +0100"/><attachment id="12409727" name="SimplexTableau.patch" size="887" author="bmccann" created="Wed, 3 Jun 2009 06:12:13 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 3 Jun 2009 09:07:06 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>34190</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160742</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-272] Simplex Solver arrives at incorrect solution</title><link>https://issues.apache.org/jira/browse/MATH-272</link><project id="12310485" key="MATH">Commons Math</project><description><p>I have reduced the problem reported to me down to a minimal test case which I will attach.</p></description><environment/><key id="12426720">MATH-272</key><summary>Simplex Solver arrives at incorrect solution</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="bmccann">Benjamin McCann</reporter><labels>
                    </labels><created>Sat, 30 May 2009 02:01:37 +0100</created><updated>Fri, 7 Aug 2009 10:15:24 +0100</updated><resolved>Tue, 2 Jun 2009 20:38:46 +0100</resolved><version>2.0</version><fixVersion>2.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12714641" author="bmccann" created="Sat, 30 May 2009 02:02:41 +0100"><p>Test case to be added to SimplexSolverTest.  It is currently failing and should be fixed.</p></comment><comment id="12714661" author="bmccann" created="Sat, 30 May 2009 04:12:31 +0100"><p>Previously, there was a bug where we could set one of a number of variables equal to some value.  We were setting all the variables instead of choosing one.  When I patched that bug, I did it incorrectly.  This is a correct implementation, which causes the old bug and the attached test to both pass.</p></comment><comment id="12715641" author="luc" created="Tue, 2 Jun 2009 20:38:46 +0100"><p>fixed in subversion repository as of r781135<br/>
patch applied<br/>
thanks</p></comment><comment id="12715648" author="bmccann" created="Tue, 2 Jun 2009 20:53:09 +0100"><p>Thanks!</p>


</comment><comment id="12740467" author="luc" created="Fri, 7 Aug 2009 10:15:24 +0100"><p>closing resolved issue for 2.0 release</p></comment></comments><attachments><attachment id="12409441" name="SimplexSolvetTest.txt" size="939" author="bmccann" created="Sat, 30 May 2009 02:02:41 +0100"/><attachment id="12409449" name="SimplexTableau.patch" size="2879" author="bmccann" created="Sat, 30 May 2009 04:12:31 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 2 Jun 2009 19:38:46 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>34175</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160743</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-271] Take code from matrix-toolkits-java</title><link>https://issues.apache.org/jira/browse/MATH-271</link><project id="12310485" key="MATH">Commons Math</project><description><p>This is part of the proposal to integrate MTJ, netlib-java and commons-math which has been well received on the developers' list, @see <a href="http://www.nabble.com/commons-math,-matrix-toolkits-java-and-consolidation-tt23537813.html" class="external-link" rel="nofollow">http://www.nabble.com/commons-math,-matrix-toolkits-java-and-consolidation-tt23537813.html</a></p>

<p>This depends on issue <a href="https://issues.apache.org/jira/browse/MATH-270" title="Wrapper layer for F2J translations of BLAS/LAPACK" class="issue-link" data-issue-key="MATH-270"><del>MATH-270</del></a>.</p>

<p>Matrix Toolkits for Java has functionality that is missing from commons-math, such as linear solvers, sparse storage classes and efficient implementations of standard algorithms using the BLAS/LAPACK API. As commons-math is starting to expand its linear algebra footprint, it makes a lot of sense for these projects to combine.</p>

<p>The author of matrix-toolkits-java is happy to release all his code under an Apache licence. The maintainer of matrix-toolkits-java (i.e. me!) is happy to direct all future users of matrix-toolkits-java toward commons-math once the functionality is present. MTJ will then make a release with all classes being marked @Deprecated.</p></description><environment/><key id="12426617">MATH-271</key><summary>Take code from matrix-toolkits-java</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="fommil">Sam Halliday</reporter><labels>
                    </labels><created>Thu, 28 May 2009 19:58:09 +0100</created><updated>Sat, 7 Sep 2013 13:12:08 +0100</updated><resolved>Thu, 28 Jan 2010 19:09:02 +0000</resolved><version>2.1</version><due/><votes>0</votes><watches>1</watches><comments><comment id="12806034" author="luc" created="Thu, 28 Jan 2010 19:09:02 +0000"><p>Since neither <a href="https://issues.apache.org/jira/browse/MATH-269" title="Use F2J translated BLAS/LAPACK" class="issue-link" data-issue-key="MATH-269"><del>MATH-269</del></a>, not <a href="https://issues.apache.org/jira/browse/MATH-270" title="Wrapper layer for F2J translations of BLAS/LAPACK" class="issue-link" data-issue-key="MATH-270"><del>MATH-270</del></a> will be fixed, this issue which depends on them cannot be fixed either. </p></comment><comment id="13761010" author="fommil" created="Sat, 7 Sep 2013 13:12:08 +0100"><p>are you really certain that F2J cannot be on the dependency list?</p>

<p>You're missing out on some incredible machine-optimised performance:</p>

<p><a href="http://github.com/fommil/netlib-java/" class="external-link" rel="nofollow">http://github.com/fommil/netlib-java/</a></p></comment></comments><issuelinks><issuelinktype id="10001"><name>dependent</name><outwardlinks description="depends upon"><issuelink><issuekey id="12426616">MATH-270</issuekey></issuelink></outwardlinks></issuelinktype></issuelinks><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Thu, 28 Jan 2010 19:09:02 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150473</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160744</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-270] Wrapper layer for F2J translations of BLAS/LAPACK</title><link>https://issues.apache.org/jira/browse/MATH-270</link><project id="12310485" key="MATH">Commons Math</project><description><p>This is part of the proposal to integrate MTJ, netlib-java and commons-math which has been well received on the developers' list, @see <a href="http://www.nabble.com/commons-math,-matrix-toolkits-java-and-consolidation-tt23537813.html" class="external-link" rel="nofollow">http://www.nabble.com/commons-math,-matrix-toolkits-java-and-consolidation-tt23537813.html</a></p>

<p>This depends on issue <a href="https://issues.apache.org/jira/browse/MATH-269" title="Use F2J translated BLAS/LAPACK" class="issue-link" data-issue-key="MATH-269"><del>MATH-269</del></a>.</p>

<p>Netlib-java provides a wrapper layer around Java implementations of BLAS and LAPACK, the industry standard APIs for linear algebra calculation. This functionality would be of great benefit to commons-math both internally and as part of the public API.</p>

<p>A major advantage of using netlib-java rather than direct access to Java translations of BLAS/LAPACK is that natively optimised implementations can be configured at runtime. For most normal desktop machines, the performance difference is negligible (hey, Java is seriously fast these days!), but for machines with custom hardware and BLAS/LAPACK implementations (e.g. GPU, FPGA, otherwise parallel) the performance difference can be orders of magnitude.</p>

<p>The idea would be that commons-math would define an API and use it internally for linear algebra calculations. The decision to make this part of the public API can be decided afterward.</p>

<p>The author of netlib-java (i.e. me!) is more than happy to release this code under an Apache licence, however the APIs are copyright the authors of BLAS/LAPACK and therefore BSD licenced (which I understand is compatible).</p></description><environment/><key id="12426616">MATH-270</key><summary>Wrapper layer for F2J translations of BLAS/LAPACK</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="2">Won't Fix</resolution><assignee username="-1">Unassigned</assignee><reporter username="fommil">Sam Halliday</reporter><labels>
                    </labels><created>Thu, 28 May 2009 19:52:08 +0100</created><updated>Sat, 7 Sep 2013 20:15:56 +0100</updated><resolved>Thu, 28 Jan 2010 19:07:55 +0000</resolved><version>2.1</version><due/><votes>0</votes><watches>2</watches><comments><comment id="12806033" author="luc" created="Thu, 28 Jan 2010 19:07:55 +0000"><p>Since <a href="https://issues.apache.org/jira/browse/MATH-269" title="Use F2J translated BLAS/LAPACK" class="issue-link" data-issue-key="MATH-269"><del>MATH-269</del></a> will not be fixed, this issue which depends on it cannot be fixed either.</p></comment><comment id="13761011" author="fommil" created="Sat, 7 Sep 2013 13:12:42 +0100"><p>are you really certain that F2J cannot be on the dependency list?<br/>
You're missing out on some incredible machine-optimised performance:<br/>
<a href="http://github.com/fommil/netlib-java/" class="external-link" rel="nofollow">http://github.com/fommil/netlib-java/</a></p></comment><comment id="13761101" author="erans" created="Sat, 7 Sep 2013 20:15:56 +0100"><p>Discussions are better handled on the mailing lists ("dev" in this case).</p></comment></comments><issuelinks><issuelinktype id="10001"><name>dependent</name><outwardlinks description="depends upon"><issuelink><issuekey id="12426615">MATH-269</issuekey></issuelink></outwardlinks><inwardlinks description="is depended upon by"><issuelink><issuekey id="12426617">MATH-271</issuekey></issuelink></inwardlinks></issuelinktype></issuelinks><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Thu, 28 Jan 2010 19:07:55 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150472</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160745</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-269] Use F2J translated BLAS/LAPACK</title><link>https://issues.apache.org/jira/browse/MATH-269</link><project id="12310485" key="MATH">Commons Math</project><description><p>This is part of the proposal to integrate MTJ, netlib-java and commons-math which has been well received on the developers' list, @see <a href="http://www.nabble.com/commons-math,-matrix-toolkits-java-and-consolidation-tt23537813.html" class="external-link" rel="nofollow">http://www.nabble.com/commons-math,-matrix-toolkits-java-and-consolidation-tt23537813.html</a></p>

<p>Commons Math currently uses hand-crafted BLAS/LAPACK-like methods, whereas the F2J has maintained a full Java translation of the BLAS and LAPACK fortran code, and is applicable to most of the scientific code built on top of those libraries (e.g. ARPACK). It enables maintenance to BLAS/LAPACK to be handled by the netlib team, even for the Java translation. BLAS and LAPACK are industry standard APIs.</p>

<p>This proposal is to incorporate the translations into the commons-math project. A follow-up RFE will to define the API to be used in place of the existing code (i.e. incorporate netlib-java). I do not recommend making the F2J translations a part of the public API.</p>

<p>The code translated by F2J follows the same BSD licence as the netlib libraries. I understand this is compatible with the Apache licence.</p>

<p>F2J translations can be directed to any package name, currently they output in the "org.netlib.</p>
{blas,lapack}
<p>" domain, but commons-math may prefer to use "org.apache.commons.math.netlib".</p>

<p>There is a caveat: the translation of Fortran code introduces a language feature not available in Java - the GOTO statement. Java translations are post-compile processed by a "javab" tool (distributed with F2J) which augments the bytecode and allows the code to behave as the Fortran original. This rules out the possibility of simply including the source code in the commons-math tree, unless the javab tool becomes part of the build process.</p>

<p>The alternative is to maintain a custom binary (built using F2J from netlib sources), or to use a maven dependency.</p></description><environment/><key id="12426615">MATH-269</key><summary>Use F2J translated BLAS/LAPACK</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="2">Won't Fix</resolution><assignee username="-1">Unassigned</assignee><reporter username="fommil">Sam Halliday</reporter><labels>
                    </labels><created>Thu, 28 May 2009 19:42:34 +0100</created><updated>Thu, 2 May 2013 03:29:25 +0100</updated><resolved>Thu, 28 Jan 2010 19:06:11 +0000</resolved><version>2.1</version><due/><votes>0</votes><watches>0</watches><comments><comment id="12806032" author="luc" created="Thu, 28 Jan 2010 19:06:10 +0000"><p>On the one hand the F2J classfile processor cannot be published by ASF due to licensing issues. On the other hand commons projects always publish all sources to allow people to modify the code and rebuild it to meet their needs. Since nobody in the project can handle the task to provide another way to create the translated file in an Apache compatible way directly from source, we cannot provide this feature.</p></comment></comments><issuelinks><issuelinktype id="10001"><name>dependent</name><inwardlinks description="is depended upon by"><issuelink><issuekey id="12426616">MATH-270</issuekey></issuelink></inwardlinks></issuelinktype></issuelinks><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Thu, 28 Jan 2010 19:06:10 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150471</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160746</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-268] about your java simplex alg, can I input a solution known to be near-optimal (to speed it up)?  Can I do so even for the dual simplex?</title><link>https://issues.apache.org/jira/browse/MATH-268</link><project id="12310485" key="MATH">Commons Math</project><description/><environment><p>linux or Windows XP</p></environment><key id="12426261">MATH-268</key><summary>about your java simplex alg, can I input a solution known to be near-optimal (to speed it up)?  Can I do so even for the dual simplex?</summary><type id="5" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Wish</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="2">Won't Fix</resolution><assignee username="-1">Unassigned</assignee><reporter username="wniedrin">william niedringhaus</reporter><labels>
                    </labels><created>Sun, 24 May 2009 21:14:11 +0100</created><updated>Wed, 14 Apr 2010 01:38:07 +0100</updated><resolved>Mon, 25 Jan 2010 18:10:28 +0000</resolved><due/><votes>0</votes><watches>0</watches><comments><comment id="12712600" author="luc" created="Sun, 24 May 2009 21:39:24 +0100"><p>If you are thinking about the Nelder-Mead or the Torczon's simplex optimizers, yes you can since there is a start point parameter.</p>

<p>If you are thinking about the Dantzig's simplex for linear models, no you can't since the implementation builds internally the initial feasible solution (if one exists) and then optimizes it.</p></comment><comment id="12712804" author="wniedrin" created="Mon, 25 May 2009 22:40:45 +0100"><p>Actually I was asking about Benjamin McCann's implementation <br/>
(<a href="https://issues.apache.org/jira/browse/MATH-246" class="external-link" rel="nofollow">https://issues.apache.org/jira/browse/MATH-246</a>) </p>

<p>am interested in inputting near-optimal solutions to the dual simplex.<br/>
thanks</p></comment><comment id="12712805" author="wniedrin" created="Mon, 25 May 2009 22:43:49 +0100"><p>am looking for a java implementation.  Have been using GNU Lpkit but can not find anything in the API</p>

<p><a href="http://bjoern.dapnet.de/glpk/javadoc/index.html" class="external-link" rel="nofollow">http://bjoern.dapnet.de/glpk/javadoc/index.html</a></p>

<p>about inputting near-opt solutions</p>

<p>thanks,</p></comment><comment id="12715668" author="bmccann" created="Tue, 2 Jun 2009 21:35:48 +0100"><p>For the Simplex method, the Simplex tableau must express a feasible solution the entire time.  So your near optimal solution would have to be guaranteed to be feasible, which could make it quite difficult to do.  Do you have some way of guaranteeing this?  This isn't supported right now (I've never seen a Simplex implementation that does this).  If you were really interested, you might be able to patch the source so that it builds your own SimplexTableau that starts at some initial feasible solution that you've specified.</p></comment><comment id="12715941" author="wniedrin" created="Wed, 3 Jun 2009 15:49:08 +0100"><p>Yes, the starting solutions are provably feasible.  Each constraint is of form (for lin expr X)</p>

<p>X &gt;= 0 - fudgeFactor</p>

<p>The objective function minimizes a weighted sum of the fudgeFactor's (each &gt;= 0).<br/>
Up front, I know a pretty good solution for the (non - fudgeFactor) variables that makes the LP provably feasible, so long as I set the fudgeFactors sufficiently big (I have an algorithm to do this).</p>

<p>Because the matrix is big but very sparse, and has a recursive structure, I plan to divide it into halves, quarters, eighths, etc.  I solve all the little LP's fast, work my way up the binary tree.  At each step, I can use the solution to the two half-size LPs to form an ever-closer-to optimal starting feasible solution for the full size LP, because only a very few constraints in the full LP involve variables that occur in both half-LPs.  </p>

<p>Although general LP's runtime is proportional to the cube of the problem size, I'm hoping to run in something more like (n squared log n).  </p>

<p>But, I need an (open source) LP algorithm that can be told where to start.  I've tried GNU's glpk (LPKit) (using the Java wrapper), but it does not appear to have this feature.  Any ideas?  </p>

<p>Thanks for your help on this,<br/>
Bill</p>


</comment><comment id="12794709" author="luc" created="Sun, 27 Dec 2009 17:43:38 +0000"><p>I nobody can contribute an implementation for this feature (which would be cool), I'm considering closing this issue as WON'T FIX.<br/>
What do other think about this ?</p></comment><comment id="12804622" author="luc" created="Mon, 25 Jan 2010 18:10:28 +0000"><p>No implementation for this feature has been found.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 24 May 2009 20:39:24 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150470</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160747</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-267] Need a digamma function</title><link>https://issues.apache.org/jira/browse/MATH-267</link><project id="12310485" key="MATH">Commons Math</project><description>
<p>A mahout summer of code student needed a digamma function with Apache permissions so I wrote one.  It includes test cases, correct copyright and seems to work well.  I don't know where in commons math this would go so I figured I would post this and ask for advice.</p></description><environment/><key id="12426209">MATH-267</key><summary>Need a digamma function</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="tdunning">Ted Dunning</reporter><labels>
                    </labels><created>Sun, 24 May 2009 00:40:41 +0100</created><updated>Fri, 7 Aug 2009 10:15:01 +0100</updated><resolved>Mon, 25 May 2009 14:22:22 +0100</resolved><fixVersion>2.0</fixVersion><due/><votes>0</votes><watches>2</watches><comments><comment id="12712474" author="tdunning" created="Sun, 24 May 2009 00:41:49 +0100"><p>Source code for implementation.</p></comment><comment id="12712486" author="psteitz" created="Sun, 24 May 2009 03:45:14 +0100"><p>Thanks!  Have a look at the o.a.c.m.special package,  There is a Gamma class there that could use this,</p></comment><comment id="12712503" author="tdunning" created="Sun, 24 May 2009 05:37:57 +0100"><p>Here is a patch that integrates the digamma function into the normal commons math structure.</p></comment><comment id="12712504" author="tdunning" created="Sun, 24 May 2009 05:40:00 +0100">
<p>I have left this open rather than resolve it because I don't see a "patch available" state such as I am used to on Hadoop and related projects.</p>

<p>The patch is available and should be ready for committing (subject to committers approving, of course).</p></comment><comment id="12712511" author="psteitz" created="Sun, 24 May 2009 07:05:02 +0100"><p>Patch applied in r778091 with only minor changes. thanks!</p></comment><comment id="12712518" author="tdunning" created="Sun, 24 May 2009 07:37:12 +0100"><p>The previous patch lost some comments from my original.</p>

<p>Also, I added a trigramma function.  </p></comment><comment id="12712519" author="tdunning" created="Sun, 24 May 2009 07:39:08 +0100"><p>I improved the javadoc and added a trigamma function with associated tests.</p>

<p>This patch is relative to current trunk which already contains the digamma function that Phil just committed. </p></comment><comment id="12712718" author="psteitz" created="Mon, 25 May 2009 14:22:22 +0100"><p>Second patch applied.  I made a few small changes to the javadoc to match the style of <span class="error">&#91;math&#93;</span>.</p>

<p>Thanks!</p></comment><comment id="12740466" author="luc" created="Fri, 7 Aug 2009 10:15:01 +0100"><p>closing resolved issue for 2.0 release</p></comment></comments><attachments><attachment id="12408900" name="Adds_digamma_function.patch" size="4950" author="tdunning" created="Sun, 24 May 2009 05:37:57 +0100"/><attachment id="12408901" name="Adds_trigamma_function,_improves_comments.patch" size="5777" author="tdunning" created="Sun, 24 May 2009 07:39:07 +0100"/><attachment id="12408892" name="digamma.tgz" size="12482" author="tdunning" created="Sun, 24 May 2009 00:41:49 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>3.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 24 May 2009 02:45:14 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150469</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160748</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-266] Support for Clustering Algorithms</title><link>https://issues.apache.org/jira/browse/MATH-266</link><project id="12310485" key="MATH">Commons Math</project><description><p>It'd be nice if Commons Math could run K-means or some other clustering algorithms.</p></description><environment/><key id="12424433">MATH-266</key><summary>Support for Clustering Algorithms</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="chengas123">Ben McCann</reporter><labels>
                    </labels><created>Sat, 2 May 2009 00:08:56 +0100</created><updated>Fri, 7 Aug 2009 10:14:37 +0100</updated><resolved>Sat, 2 May 2009 20:40:05 +0100</resolved><version>2.0</version><fixVersion>2.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12705174" author="chengas123" created="Sat, 2 May 2009 00:15:02 +0100"><p>Here's an implementation of the k-means++ clustering algorithm.<br/>
I tested it out by using it for image segmentation and it worked well (reducing # of colors in image by clustering on pixel values - for an example see <a href="http://www.leet.it/home/lale/joomla/component/option,com_wrapper/Itemid,50/" class="external-link" rel="nofollow">http://www.leet.it/home/lale/joomla/component/option,com_wrapper/Itemid,50/</a>).  It was much much faster than Rafael Santos's library which I ran as a comparison.  If all looks good and this is committed, then I'll follow up shortly by submitting some unit tests for it.</p></comment><comment id="12705175" author="chengas123" created="Sat, 2 May 2009 00:16:09 +0100"><p>It looks like I accidentally checked the "not intended for inclusion" radio button.  This obviously is intended for inclusion and you have my full permission to commit it.</p></comment><comment id="12705259" author="luc" created="Sat, 2 May 2009 12:21:59 +0100"><p>This is an interesting addition to commons-math.<br/>
I think it would be better to put the clustering package under stat. Perhaps later we could add an EM implementation too.<br/>
Could you rework your patch to include the ASF license header and complete javadoc including algorithms references, parameters and return values descriptions ?</p>

<p>thanks</p></comment><comment id="12705311" author="chengas123" created="Sat, 2 May 2009 17:58:21 +0100"><p>Here are the updated files with the requested changes.  Thanks for taking a look!</p></comment><comment id="12705323" author="luc" created="Sat, 2 May 2009 20:40:05 +0100"><p>fixed in subversion repository as of r770979</p>

<p>I have changed a few things:</p>
<ul>
	<li>renamed the Point interface into Clusterable (not sure this is really english ...)</li>
	<li>use generics</li>
	<li>added missing javadocs (mainly class-level)</li>
	<li>added package.html</li>
	<li>created test</li>
	<li>replaced an Integer parameter with null meaning unlimited by an int parameter with -1 meaning unlimited</li>
	<li>fixed a missing loop in the initial centers computation (only two centers were computed instead of k)</li>
</ul>


<p>Could you please check if everything is fine and either reopen the issue if something is wrong or open a new one if you want to add something ?</p>

<p>thanks for the report and for the patch</p></comment><comment id="12705689" author="ben@benmccann.com" created="Mon, 4 May 2009 20:11:32 +0100"><p>Thanks Luc.  It all looks good to me from what I've seen.  I appreciate the<br/>
quick response.</p>

<p>-Ben</p>


</comment><comment id="12740465" author="luc" created="Fri, 7 Aug 2009 10:14:37 +0100"><p>closing resolved issue for 2.0 release</p></comment></comments><attachments><attachment id="12407092" name="clustering.zip" size="4814" author="chengas123" created="Sat, 2 May 2009 17:58:21 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sat, 2 May 2009 11:21:59 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150468</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160749</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-265] Utility methods for calculating the Euclidean distance between two points</title><link>https://issues.apache.org/jira/browse/MATH-265</link><project id="12310485" key="MATH">Commons Math</project><description/><environment/><key id="12424351">MATH-265</key><summary>Utility methods for calculating the Euclidean distance between two points</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="bmccann">Benjamin McCann</reporter><labels>
                    </labels><created>Thu, 30 Apr 2009 23:52:21 +0100</created><updated>Fri, 7 Aug 2009 10:14:13 +0100</updated><resolved>Fri, 1 May 2009 22:53:46 +0100</resolved><fixVersion>2.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12704831" author="bmccann" created="Thu, 30 Apr 2009 23:53:11 +0100"><p>I didn't see a method like this in Math Utils yet.  It's pretty basic and helpful, so I think it would be beneficial.</p></comment><comment id="12705136" author="luc" created="Fri, 1 May 2009 22:53:46 +0100"><p>fixed in subversion repository as of r770798<br/>
The methods have been put in MathUtils instead of a dedicated GeometryUtil.<br/>
An error in the double version has been fixed (int sum instead of double sum).<br/>
In addition to the L2 (euclidean) distance, the L1 and Linf distances have also been added.<br/>
thanks for the report and for the patch</p></comment><comment id="12705196" author="bmccann" created="Sat, 2 May 2009 01:47:06 +0100"><p>Thanks Luc.<br/>
(FYI, <a href="https://issues.apache.org/jira/browse/MATH-266" title="Support for Clustering Algorithms" class="issue-link" data-issue-key="MATH-266"><del>MATH-266</del></a> made use of GeometryUtil, and will need just a minor tweak to MathUtils in order to compile.)</p></comment><comment id="12740464" author="luc" created="Fri, 7 Aug 2009 10:14:13 +0100"><p>closing resolved issue for 2.0 release</p></comment></comments><attachments><attachment id="12406969" name="GeometryUtil.java" size="921" author="bmccann" created="Thu, 30 Apr 2009 23:53:10 +0100"/><attachment id="12406970" name="GeometryUtilTest.java" size="309" author="bmccann" created="Thu, 30 Apr 2009 23:53:11 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Fri, 1 May 2009 21:53:46 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150467</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160750</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-264] New "equals" method in "MathUtils"</title><link>https://issues.apache.org/jira/browse/MATH-264</link><project id="12310485" key="MATH">Commons Math</project><description><p>Hello.</p>

<p>The article</p>

<p>  <a href="http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm" class="external-link" rel="nofollow">http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm</a></p>

<p>proposes a robust way of comparing floating-point numbers (look for "AlmostEqual2sComplement").<br/>
It provides an implementation (in C) for type "float", which should be adapted to take 2 "double"s instead.</p>

<p>Gilles</p></description><environment/><key id="12424154">MATH-264</key><summary>New "equals" method in "MathUtils"</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="erans">Gilles</reporter><labels>
                    </labels><created>Wed, 29 Apr 2009 12:25:43 +0100</created><updated>Fri, 7 Aug 2009 10:13:54 +0100</updated><resolved>Wed, 29 Apr 2009 19:35:02 +0100</resolved><due/><votes>0</votes><watches>0</watches><comments><comment id="12704241" author="luc" created="Wed, 29 Apr 2009 19:35:02 +0100"><p>fixed in subversion as of r769867<br/>
thanks to Gilles for directly providing the patch</p></comment><comment id="12740463" author="luc" created="Fri, 7 Aug 2009 10:13:54 +0100"><p>closing resolved issue for 2.0 release</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 29 Apr 2009 18:35:02 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150466</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160751</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-263] Various distance methods in "Vector3D"</title><link>https://issues.apache.org/jira/browse/MATH-263</link><project id="12310485" key="MATH">Commons Math</project><description><p>Hi.</p>

<p>As was discussed in the ML (cf. '<span class="error">&#91;math&#93;</span> "equals" in "Vector3D"' thread), it would be useful to add the various distance methods: L1 norm, L2 norm, L-infinity norm.</p>

<p>One suggestion has been to use an enum:</p>

<p>     enum Norm </p>
{ L_0, L_1, L_2, L_infinity }
<p>;<br/>
     static double distance(Vector3D a, Vector3D b, Norm n) </p>
{ ... }<br/>
<br/>
Another, to define several methods:<br/>
<br/>
  a.distance1(b) { ... }
<p>  a.distance(b) </p>
{ ... }<br/>
  a.distanceInf(b) { ... }

<p>At the cost of longer typing (but maybe there are other advantages) the above could also be static.</p>

<p>Best,<br/>
Gilles</p></description><environment/><key id="12424146">MATH-263</key><summary>Various distance methods in "Vector3D"</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="erans">Gilles</reporter><labels>
                    </labels><created>Wed, 29 Apr 2009 10:49:00 +0100</created><updated>Fri, 7 Aug 2009 10:13:32 +0100</updated><resolved>Wed, 29 Apr 2009 20:10:40 +0100</resolved><due/><votes>0</votes><watches>0</watches><comments><comment id="12704263" author="luc" created="Wed, 29 Apr 2009 20:10:40 +0100"><p>fixed in subversion as of r769880</p></comment><comment id="12740462" author="luc" created="Fri, 7 Aug 2009 10:13:32 +0100"><p>closing resolved issue for 2.0 release</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 29 Apr 2009 19:10:40 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150465</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160752</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-262] Utility method to aggregate SummaryStatistics (was MATH-224)</title><link>https://issues.apache.org/jira/browse/MATH-262</link><project id="12310485" key="MATH">Commons Math</project><description><p>As per closed issue <a href="https://issues.apache.org/jira/browse/MATH-224" title="Utility method to aggregate Statistics" class="issue-link" data-issue-key="MATH-224"><del>MATH-224</del></a>, my project also has a requirement to aggregate SummaryStatistics.  That is, I would like to keep track of the mean \bar</p>
{X_i}
<p>, and variance of several different random variables </p>
{ X_1, X_2, .. X_n }
<p> as separate distributions with separate means \bar</p>
{X}
<p>_i, and then later combine these distributions to estimate the mean and variance of the larger combined distribution; eg, the mean and variance of the random variable Y = (X_1 + X_2 .. + X_n) / n.  I am currently using the patch attached to  <a href="https://issues.apache.org/jira/browse/MATH-224" title="Utility method to aggregate Statistics" class="issue-link" data-issue-key="MATH-224"><del>MATH-224</del></a> which works for me, however I would prefer to link with a release version of the library.  Is there any way this issue can be re-opened?</p></description><environment/><key id="12423093">MATH-262</key><summary>Utility method to aggregate SummaryStatistics (was MATH-224)</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="3">Duplicate</resolution><assignee username="-1">Unassigned</assignee><reporter username="sphelps">Steve Phelps</reporter><labels>
                    </labels><created>Fri, 17 Apr 2009 09:04:00 +0100</created><updated>Sat, 18 Apr 2009 22:40:55 +0100</updated><resolved>Sat, 18 Apr 2009 22:40:55 +0100</resolved><version>2.1</version><due/><votes>0</votes><watches>0</watches><comments><comment id="12700538" author="psteitz" created="Sat, 18 Apr 2009 22:40:55 +0100"><p>Reopened <a href="https://issues.apache.org/jira/browse/MATH-224" title="Utility method to aggregate Statistics" class="issue-link" data-issue-key="MATH-224"><del>MATH-224</del></a></p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sat, 18 Apr 2009 21:40:55 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150464</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160753</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-261] Add generics to Frequency</title><link>https://issues.apache.org/jira/browse/MATH-261</link><project id="12310485" key="MATH">Commons Math</project><description><p>I've attempted to add generics to Frequency.</p>

<p>This requires a minor change to the API, in that Objects to be used with the class need to be Comparable.</p>

<p>This will break some code, e.g. one change was needed to the test cases.</p></description><environment/><key id="12422817">MATH-261</key><summary>Add generics to Frequency</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="sebb@apache.org">Sebb</reporter><labels>
                    </labels><created>Tue, 14 Apr 2009 19:14:45 +0100</created><updated>Fri, 7 Aug 2009 10:13:10 +0100</updated><resolved>Sat, 25 Jul 2009 23:42:21 +0100</resolved><fixVersion>2.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12698879" author="luc" created="Tue, 14 Apr 2009 20:03:04 +0100"><p>A first minor comment about the patch content. Wouldn't it be simpler to remove the @SuppressWarnings and replace the two casts by a direct use of the v parameter ?</p>

<p>Now a more important comment. The test don't run under eclipse ganymede with OpenJDK on a 64 bits Linux machine. They fail without any explanation, with just red crosses and no message at all. Trying to compile using maven rather than eclipse fail even earlier: maven does not compile the Frequency.java file with error messages like:</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>/home/luc/.../Frequency.java:[109,12] inconvertible types
found   : T
required: java.lang.Integer

/home/luc/.../Frequency.java:[110,41] inconvertible types
found   : T
required: java.lang.Integer

/home/luc/.../Frequency.java:[202,12] inconvertible types
found   : T
required: java.lang.Integer

/home/luc/.../Frequency.java:[203,39] inconvertible types
found   : T
required: java.lang.Integer

/home/luc/.../Frequency.java:[312,12] inconvertible types
found   : T
required: java.lang.Integer

/home/luc/.../Frequency.java:[313,41] inconvertible types
found   : T
required: java.lang.Integer
</pre>
</div></div>

<p>So it seems some compilers do not like constructs like</p>
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
        <span class="code-keyword">if</span> (v <span class="code-keyword">instanceof</span> <span class="code-object">Integer</span>) {
           obj = <span class="code-object">Long</span>.valueOf(((<span class="code-object">Integer</span>) v).longValue());
        }

</pre>
</div></div>
<p>when v is a parameterized type.</p>

<p>Last a comment on the general idea of the patch. It tries to preserve the fact several integral types can be added while restricting the Object to one specific class. On one hand if people do not want to add any object but want only int, long ... they still have to select one Comparable type to avoid a warning about Frequency being a raw type. On the other hand, if they want the previous behavior allowing almost anything, they cannot do it.</p>

<p>I am uncomfortable with this. I am also umconfortable with the previous behavior. Would'nt it be better to completely change the API and don't allow mixing types at all ?</p></comment><comment id="12698927" author="sebb@apache.org" created="Tue, 14 Apr 2009 22:00:16 +0100"><p>Re removing @SuppressWarnings:<br/>
The (T) casts cannot be removed from the obj parameter - the code won't compile.</p>

<p>Not sure why the compiler is objecting to the "instanceof " check and the (Integer) cast - seems like a bug to me.</p>

<p>Regarding type "mixing": yes, I was trying to preserve the existing (documented) behaviour as far as possible. That was the whole point.<br/>
It would be possible to treat Long and Integer as Objects, and that would simplify the class. <br/>
But what about primitive types - should long and int and short be comparable? Or should they all be treated separately?<br/>
That is a separate discussion, which is probably better dealt with on the mailing list.</p>

<p>AFAICT, the only change is to insist that the Objects added to the class implement Comparable.<br/>
That was true previously, except for the trivial case of adding a single object - but then the getXXX methods could fail to return sensible values, see <a href="https://issues.apache.org/jira/browse/MATH-259" title="Bugs in Frequency API" class="issue-link" data-issue-key="MATH-259"><del>MATH-259</del></a>.<br/>
It was never possible to add two items unless they were both Comparable and also Comparable to each other.<br/>
I don't think that has changed - if you have a test case that worked previously and now fails, please add it.</p></comment><comment id="12698955" author="sebb@apache.org" created="Tue, 14 Apr 2009 22:53:37 +0100"><p>Re compiler error messages:</p>

<p>I get the same error with Sun Java 1.5.0_17 - looks like the Eclipse compiler is more forgiving than it should be...<br/>
I'll see if I can create a better patch.</p></comment><comment id="12699010" author="psteitz" created="Wed, 15 Apr 2009 02:08:04 +0100"><p>I like - and use - the current behavior of being able to add ints, longs and have frequency distributions computed directly.  I am -0 on the patch, but not -1 if it can be done with backward compatibility and no impact to performance.</p></comment><comment id="12699142" author="luc" created="Wed, 15 Apr 2009 11:26:38 +0100"><p>I did not suggest to simply remove the (T) cast and leave the obj parameter, but to replace:</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>  freqTable.put((T)obj, Long ...);
</pre>
</div></div>
<p>by</p>
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>  freqTable.put(v, Long ...);
</pre>
</div></div>

<p>The v parameter already is of type T.</p></comment><comment id="12699144" author="sebb@apache.org" created="Wed, 15 Apr 2009 11:39:01 +0100"><p>OK, but if the v is an Integer, that won't work, as the Integer needs to be converted to a Long first.</p></comment><comment id="12699193" author="luc" created="Wed, 15 Apr 2009 14:42:24 +0100"><p>I don't get it.</p>

<p>The "(T) obj" versus "v" issue is only a syntax issue. If the underlying behavior won't work for Integer instances, then it won't work whatever syntax is used.<br/>
In both case the object put in the map is already an instance of T (or one of its subclasses). In both cases the instance that is put in the map will retain its value because neither the first nor the second cast do really trigger any data conversion. The first cast (from T to Object) only "anonymizes" the v parameter. The second cast (from Object to T) forces it back to its original type. I even think no copy is made and the two references (v and obj) point to the same instance.</p>

<p>Well, it is really a minor issue, so I'll stop arguing. Just do as you want, I won't mind.</p>

<p>Considering the more important overall goal of the patch, since Phil considers the mixing types feature is an useful feature then of course we should preserve it. So ignore my previous concerns about it and apply the patch when you are happy with it, at least making sure non-eclipse compilers don't choke on it.</p></comment><comment id="12699202" author="sebb@apache.org" created="Wed, 15 Apr 2009 15:04:52 +0100"><p>I'm not trying to argue, just understand.</p>

<p>The code currently does:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-object">Object</span> obj = v;
<span class="code-keyword">if</span> (v <span class="code-keyword">instanceof</span> <span class="code-object">Integer</span>) {
  obj = <span class="code-object">Long</span>.valueOf(((<span class="code-object">Integer</span>) v).longValue());
}
</pre>
</div></div>

<p>I.e. when v is an Integer, then obj is not the same as v, so put((T) obj,...) cannot be replaced by put(v,..)</p>

<p>==</p>

<p>Regarding the generics change. It looks like there is no support for changing the API to require Comparable rather than Object. <br/>
This is a pity, as it would improve compile-time safety. if only the original design had used Comparable instead of Object...</p>

<p>I'll see if it is possible to change the patch accordingly, whilst still retaining some of the generics to improve compile-time checking.</p></comment><comment id="12699291" author="luc" created="Wed, 15 Apr 2009 18:52:41 +0100"><p>I finally got it. I was wrong.<br/>
I'm sorry</p></comment><comment id="12700264" author="sebb@apache.org" created="Fri, 17 Apr 2009 19:12:59 +0100"><p>Smaller Generics patch.</p>

<p>Does not change any public methods, except:</p>

<p>public Iterator  valuesIterator()<br/>
   is now<br/>
public Iterator&lt;Comparable&lt;?&gt;&gt; valuesIterator()</p>

<p>I don't think this can cause any problems.</p>

<p>The patch does not address all the generics issues - only the simpler ones - but it is a start.</p></comment><comment id="12701698" author="luc" created="Wed, 22 Apr 2009 22:57:51 +0100"><p>This seems good to me.<br/>
+1 to apply it</p></comment><comment id="12702152" author="sebb@apache.org" created="Thu, 23 Apr 2009 23:53:13 +0100"><p>Patch applied:</p>

<p>URL: <a href="http://svn.apache.org/viewvc?rev=768084&amp;view=rev" class="external-link" rel="nofollow">http://svn.apache.org/viewvc?rev=768084&amp;view=rev</a><br/>
Log:<br/>
<a href="https://issues.apache.org/jira/browse/MATH-261" title="Add generics to Frequency" class="issue-link" data-issue-key="MATH-261"><del>MATH-261</del></a> - start adding some generics to Frequency</p></comment><comment id="12722291" author="psteitz" created="Sun, 21 Jun 2009 03:26:37 +0100"><p>I am OK with this compatibility break, given the advantages.</p></comment><comment id="12735325" author="luc" created="Sat, 25 Jul 2009 23:42:21 +0100"><p>The changes have been included no warnings remains and the API changes have been accepted</p></comment><comment id="12740461" author="luc" created="Fri, 7 Aug 2009 10:13:10 +0100"><p>closing resolved issue for 2.0 release</p></comment></comments><issuelinks><issuelinktype id="10030"><name>Reference</name><inwardlinks description="is related to"><issuelink><issuekey id="12422113">MATH-259</issuekey></issuelink></inwardlinks></issuelinktype></issuelinks><attachments><attachment id="12405791" name="Frequency2.patch" size="3944" author="sebb@apache.org" created="Fri, 17 Apr 2009 19:12:59 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Tue, 14 Apr 2009 19:03:04 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150463</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160754</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-260] Inconsistent API in Frequency</title><link>https://issues.apache.org/jira/browse/MATH-260</link><project id="12310485" key="MATH">Commons Math</project><description><p>The overloaded Frequency methods are not consistent in the parameter types that they handle.</p>

<p>addValue() has an Integer version which converts the parameter to a Long, and then calls addValue(Object).</p>

<p>The various getxxx() methods all handle Integer parameters as an Object.</p>

<p>Seems to me that it would be better to treat Integer consistently.</p>

<p>But perhaps there is a good reason for having an addValue(Integer) method but no getxxx(Integer) methods?<br/>
If so, then it would be helpful to document this.</p></description><environment/><key id="12422791">MATH-260</key><summary>Inconsistent API in Frequency</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="sebb@apache.org">Sebb</reporter><labels>
                    </labels><created>Tue, 14 Apr 2009 14:38:52 +0100</created><updated>Wed, 14 Apr 2010 01:39:55 +0100</updated><resolved>Wed, 30 Dec 2009 20:12:52 +0000</resolved><version>2.0</version><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12699011" author="psteitz" created="Wed, 15 Apr 2009 02:14:36 +0100"><p>the getXxx methods handle Integer arguments by converting them to longs.  See, eg. the test case, testIntegerValues()</p></comment><comment id="12699141" author="sebb@apache.org" created="Wed, 15 Apr 2009 11:23:54 +0100"><p>Yes, I know that the getXXX(Object) methods handle Integer specially; but so does the addValue(Object) method - it has to, in case an Integer is passed as an Object.</p>

<p>But why is there an addValue(Integer) method? What does it achieve?<br/>
There are no corresponding getXXX(Integer) methods.</p></comment><comment id="12794711" author="luc" created="Sun, 27 Dec 2009 17:56:28 +0000"><p>Note: the addValue(Object) has been deprecated as of 2.0 and replaced by addValue(Comparable).<br/>
I think we could also deprecate or even remove addValue(Integer) since addValue(Comparable) is sufficient for all purposes. Removing the method would probably not harm any users if they can recompile their code (but it would harm if they cannot recompile, of course).</p></comment><comment id="12795426" author="psteitz" created="Wed, 30 Dec 2009 20:12:52 +0000"><p>addValue(Integer) has been deprecated, marked for removal in 3.0</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 15 Apr 2009 01:14:36 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150462</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160755</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-259] Bugs in Frequency API</title><link>https://issues.apache.org/jira/browse/MATH-259</link><project id="12310485" key="MATH">Commons Math</project><description><p>I think the existing Frequency API has some bugs in it.</p>

<p>The addValue(Object v) method allows one to add a plain Object, but one cannot add anything further to the instance, as the second add fails with IllegalArgumentException.<br/>
In fact, the problem is with the first call to addValue(Object) which should not allow a plain Object to be added - it should only allow Comparable objects.<br/>
This could be fixed by checking that the object is Comparable.</p>

<p>Similar considerations apply to the getCumFreq(Object) and getCumPct(Object) methods - they will only work with objects that implement Comparable.</p>

<p>The getCount(Object) and getPct(Object) methods don't fail when given a non-Comparable object (because the class cast exception is caught), however they just return 0 as if the object was not present:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
        <span class="code-keyword">final</span> <span class="code-object">Object</span> OBJ = <span class="code-keyword">new</span> <span class="code-object">Object</span>();
        f.addValue(OBJ); <span class="code-comment">// This ought to fail, but doesn't, causing the unexpected behaviour below
</span>        <span class="code-object">System</span>.out.println(f.getCount(OBJ)); <span class="code-comment">// 0
</span>        <span class="code-object">System</span>.out.println(f.getPct(OBJ)); <span class="code-comment">// 0.0</span>
</pre>
</div></div>

<p>Rather than adding extra checks for Comparable, it seems to me that the API would be much improved by using Comparable instead of Object.<br/>
Also, it should make it easier to implement generics.</p>

<p>However, this would cause compilation failures for some programs that pass Object rather than Comparable to the class.<br/>
These would need recoding, but I think they would continue to run OK against the new API.</p>

<p>It would also affect the run-time behaviour slightly, as the first attempt to add a non-Comparable object would fail, rather than the second add of a possibly valid object.<br/>
But is that a viable program? It can only add one object, and any attempt to get statistics will either return 0 or an Exception, and applying the instanceof fix would also cause it to fail.</p></description><environment/><key id="12422113">MATH-259</key><summary>Bugs in Frequency API</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="sebb@apache.org">Sebb</reporter><labels>
                    </labels><created>Mon, 6 Apr 2009 14:16:51 +0100</created><updated>Fri, 7 Aug 2009 10:12:49 +0100</updated><resolved>Sat, 25 Apr 2009 18:52:18 +0100</resolved><due/><votes>0</votes><watches>0</watches><comments><comment id="12699014" author="psteitz" created="Wed, 15 Apr 2009 02:20:49 +0100"><p>I am OK with adding a check and throwing illegalArgumentExeption if an object that does not implement Comparable is supplied to these methods (as indicated in the javadoc), but not keen on introducing the compatibility issue.</p></comment><comment id="12700183" author="sebb@apache.org" created="Fri, 17 Apr 2009 14:55:10 +0100"><p>See:</p>

<p>URL: <a href="http://svn.apache.org/viewvc?rev=765996&amp;view=rev" class="external-link" rel="nofollow">http://svn.apache.org/viewvc?rev=765996&amp;view=rev</a><br/>
Log:<br/>
<a href="https://issues.apache.org/jira/browse/MATH-259" title="Bugs in Frequency API" class="issue-link" data-issue-key="MATH-259"><del>MATH-259</del></a> - check for Comparable when adding values</p>

<p>I overlooked the change of Exception, so there's also:</p>

<p>URL: <a href="http://svn.apache.org/viewvc?rev=766003&amp;view=rev" class="external-link" rel="nofollow">http://svn.apache.org/viewvc?rev=766003&amp;view=rev</a><br/>
Log:<br/>
<a href="https://issues.apache.org/jira/browse/MATH-259" title="Bugs in Frequency API" class="issue-link" data-issue-key="MATH-259"><del>MATH-259</del></a> - throw IllegalArgument rather than ClassCast to better retain original behaviour</p>

<p>==</p>

<p>I added a new method</p>

<p>   public void addValue(Comparable&lt;?&gt; v)</p>

<p>which is called from</p>

<p>   public void addValue(Object v)</p>

<p>which I took the liberty of deprecating, so the compiler will warn users about non-Comparable objects.<br/>
Hope that's OK.</p>

<p>Note that it's still possible for mutually non-Comparable values to be added, because the code does not check comparisons both ways, it relies on HashMap to do so.</p>

<p>I.e. if B.compareTo(A) is OK, but A.compareTo(B) does not exist, then it is possible to add A, then B without any complaints.<br/>
This later causes a ClassCastException in some of the getXXX() methods.<br/>
However this is not a valid Comparable implementation, as they are supposed to be symmetric.</p></comment><comment id="12702738" author="sebb@apache.org" created="Sat, 25 Apr 2009 18:52:18 +0100"><p>API now tidied up as far as possible whilst still being compatible.</p></comment><comment id="12740460" author="luc" created="Fri, 7 Aug 2009 10:12:49 +0100"><p>closing resolved issue for 2.0 release</p></comment></comments><issuelinks><issuelinktype id="10030"><name>Reference</name><outwardlinks description="relates to"><issuelink><issuekey id="12422817">MATH-261</issuekey></issuelink></outwardlinks></issuelinktype></issuelinks><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 15 Apr 2009 01:20:49 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>34203</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160756</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-258] Frequency class Javadoc is ambiguous; need more tests</title><link>https://issues.apache.org/jira/browse/MATH-258</link><project id="12310485" key="MATH">Commons Math</project><description><p><span class="error">&#91;Extracted from mailing list so it does not get lost&#93;</span></p>

<p>The Javadoc is ambiguous - can one add both int and char to the same instance of Frequency?</p>

<p>Depending on how one reads the class Javadoc, this should be allowed,<br/>
as one can compare "int" and "char" in the same way that one can<br/>
compare "int" and "long" - i.e. both are "comparable". Now "int" and<br/>
"char" are not Comparable, but then neither are "int" and "long".</p>

<p>I think the Javadoc needs to make the intention clear, and then the<br/>
tests can be enhanced to enforce the documented behaviour.</p>

<p>At present, there's no check to show what happens when int and char are mixed.</p>

<p>There are other tests that should be added, to show what is expected when mixing different Comparable classes.</p></description><environment/><key id="12422095">MATH-258</key><summary>Frequency class Javadoc is ambiguous; need more tests</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="sebb@apache.org">Sebb</reporter><labels>
                    </labels><created>Mon, 6 Apr 2009 09:55:42 +0100</created><updated>Thu, 23 Apr 2009 03:26:21 +0100</updated><resolved>Sun, 12 Apr 2009 20:33:58 +0100</resolved><fixVersion>2.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12698260" author="psteitz" created="Sun, 12 Apr 2009 20:33:58 +0100"><p>Fixed in r764316</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 12 Apr 2009 19:33:58 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150461</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160757</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-257] FastFourierTransformer.MultiDimensionalComplexMatrix.get() not consistent with FastFourierTransformer.MultiDimensionalComplexMatrix.set()</title><link>https://issues.apache.org/jira/browse/MATH-257</link><project id="12310485" key="MATH">Commons Math</project><description><p>FastFourierTransformer.MultiDimensionalComplexMatrix.get() is not consistent with FastFourierTransformer.MultiDimensionalComplexMatrix.set().</p>

<p>The set() method does not allow a null parameter to get past the first check.</p>

<p>The get() method allows a null parameter provided dimensionSize.length &lt;= 1.</p>

<p>This seems wrong, both because it is inconsistent and because it may allow an NPE later if dimensionSize.length == 1</p></description><environment/><key id="12422072">MATH-257</key><summary>FastFourierTransformer.MultiDimensionalComplexMatrix.get() not consistent with FastFourierTransformer.MultiDimensionalComplexMatrix.set()</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="sebb@apache.org">Sebb</reporter><labels>
                    </labels><created>Sun, 5 Apr 2009 18:35:07 +0100</created><updated>Sun, 14 Mar 2010 01:42:39 +0000</updated><resolved>Sun, 5 Apr 2009 19:43:21 +0100</resolved><fixVersion>2.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12695887" author="luc" created="Sun, 5 Apr 2009 19:43:21 +0100"><p>fixed in subversion repository as of r762131.<br/>
I took the opportunity to also simplify the initialization of the dimensionSize array, using a two passes algorithm.<br/>
The inconsistency by itself was removed by having bot set and get be no-op for null vectors</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 5 Apr 2009 18:43:21 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150460</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160758</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-256] Fraction#toString()</title><link>https://issues.apache.org/jira/browse/MATH-256</link><project id="12310485" key="MATH">Commons Math</project><description><p>Fraction#toString() should be implemented and return a meaningful string in numerator/denominator format.</p></description><environment/><key id="12422059">MATH-256</key><summary>Fraction#toString()</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="thsoft">Dennis Harmath</reporter><labels>
                    </labels><created>Sun, 5 Apr 2009 01:27:04 +0100</created><updated>Thu, 23 Apr 2009 03:26:21 +0100</updated><resolved>Sun, 5 Apr 2009 15:30:07 +0100</resolved><due/><votes>0</votes><watches>0</watches><comments><comment id="12695860" author="luc" created="Sun, 5 Apr 2009 15:30:07 +0100"><p>fixed in subversion repository as of r762095</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 5 Apr 2009 14:30:07 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150459</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160759</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-255] MessagesResources_fr has package-protected mutable static array; should be made private</title><link>https://issues.apache.org/jira/browse/MATH-255</link><project id="12310485" key="MATH">Commons Math</project><description><p>MessagesResources_fr has package-protected mutable static array; this should be made private.</p>

<p>It does not appear to be accessed outside the class, and anyway the getContents() method provides safe access to a clone of the array.</p></description><environment/><key id="12422055">MATH-255</key><summary>MessagesResources_fr has package-protected mutable static array; should be made private</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="sebb@apache.org">Sebb</reporter><labels>
                    </labels><created>Sat, 4 Apr 2009 22:28:30 +0100</created><updated>Thu, 23 Apr 2009 03:26:21 +0100</updated><resolved>Sun, 5 Apr 2009 15:37:08 +0100</resolved><fixVersion>2.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12695863" author="luc" created="Sun, 5 Apr 2009 15:37:08 +0100"><p>fixed in subversion repository as of r762096<br/>
thanks for the report</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 5 Apr 2009 14:37:08 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150458</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160760</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-254] UnivariateRealSolverUtils.factory is a mutable static field which is not initialised safely.</title><link>https://issues.apache.org/jira/browse/MATH-254</link><project id="12310485" key="MATH">Commons Math</project><description><p>UnivariateRealSolverUtils.factory is a mutable static field which is not initialised safely.</p>

<p>Suggest using IODH (init on demand holder) idiom for this, else use synchronized getInstance().</p></description><environment/><key id="12422054">MATH-254</key><summary>UnivariateRealSolverUtils.factory is a mutable static field which is not initialised safely.</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="sebb@apache.org">Sebb</reporter><labels>
                    </labels><created>Sat, 4 Apr 2009 22:24:02 +0100</created><updated>Thu, 23 Apr 2009 03:26:21 +0100</updated><resolved>Sun, 5 Apr 2009 16:18:18 +0100</resolved><fixVersion>2.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12695865" author="luc" created="Sun, 5 Apr 2009 16:18:18 +0100"><p>fixed in subversion repository as of r762102<br/>
thanks for the report and the suggestion. IODH is a pattern I really appreciate, it is neat and elegant.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 5 Apr 2009 15:18:18 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150457</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160761</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-253] MathRuntimeException and MathException are both thread-hostile.</title><link>https://issues.apache.org/jira/browse/MATH-253</link><project id="12310485" key="MATH">Commons Math</project><description><p>MathRuntimeException and MathException are both thread-hostile.</p>

<p>They have a mutable static field cachedResources which is used in performing translations.</p>

<p>If two threads use different locales - which is highly likely in the case of non-US locales, as some methods use Locale.US - then they may get corrupt or incorrect output.</p>

<p>If a cache is really desired, it could either be ThreadLocal, or volatile, but it that case the translate method needs to fetch the value once (and update it once if necessary).</p>

<p>As it stands, the method can check the resource, find it is OK, then fetch it again to use it, by which time it might have changed. Further, one thread may set the variable, and another thread may see a partially constructed Resources object (it's not final).</p></description><environment/><key id="12422053">MATH-253</key><summary>MathRuntimeException and MathException are both thread-hostile.</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="sebb@apache.org">Sebb</reporter><labels>
                    </labels><created>Sat, 4 Apr 2009 22:22:53 +0100</created><updated>Thu, 23 Apr 2009 03:26:20 +0100</updated><resolved>Sun, 5 Apr 2009 16:37:33 +0100</resolved><fixVersion>2.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12695866" author="luc" created="Sun, 5 Apr 2009 16:37:33 +0100"><p>fixed in subversion repository as of r762107.<br/>
The cache has been removed completely, so the bundle is retrieved and used at each request.<br/>
Since this is only used when errors are triggered, there should not be any noticeable drop in performance.<br/>
thanks fo the report.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 5 Apr 2009 15:37:33 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150456</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160762</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-252] Fraction.comparTo returns 0 for some differente fractions</title><link>https://issues.apache.org/jira/browse/MATH-252</link><project id="12310485" key="MATH">Commons Math</project><description><p>If two different fractions evaluate to the same double due to limited precision,<br/>
the compareTo methode returns 0 as if they were identical.</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-comment">// value is roughly PI - 3.07e-18
</span>Fraction pi1 = <span class="code-keyword">new</span> Fraction(1068966896, 340262731);

<span class="code-comment">// value is roughly PI + 1.936e-17
</span>Fraction pi2 = <span class="code-keyword">new</span> Fraction( 411557987, 131002976);

<span class="code-object">System</span>.out.println(pi1.doubleValue() - pi2.doubleValue()); <span class="code-comment">// exactly 0.0 due to limited IEEE754 precision
</span><span class="code-object">System</span>.out.println(pi1.compareTo(pi2)); <span class="code-comment">// display 0 instead of a negative value</span>
</pre>
</div></div></description><environment/><key id="12421502">MATH-252</key><summary>Fraction.comparTo returns 0 for some differente fractions</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="luc">Luc Maisonobe</reporter><labels>
                    </labels><created>Sun, 29 Mar 2009 17:50:35 +0100</created><updated>Thu, 23 Apr 2009 03:26:20 +0100</updated><resolved>Sun, 29 Mar 2009 17:52:34 +0100</resolved><version>1.2</version><fixVersion>2.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12693586" author="luc" created="Sun, 29 Mar 2009 17:52:34 +0100"><p>fixed in subversion as of r759725</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>34164</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160763</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-251] Improve the Fraction class to avoid overflow problems and increase features</title><link>https://issues.apache.org/jira/browse/MATH-251</link><project id="12310485" key="MATH">Commons Math</project><description><p>Hello everybody,</p>

<p>I've improved and extended the <em><b>Fraction</b></em> class for my personal needs, but it could be nice to incorporate it within the <em>commons-math</em> library., either by modifying the current <em><b>Fraction</b></em> class, or by creating a new class which could be called <em><b>AdvancedFraction</b></em> or something like that. I've tried to keep all features from the original <em><b>Fraction</b></em> class.</p>

<p><font color="green">New features :</font></p>
<ul>
	<li>I needed to avoid overflow problem. As a result, I've changed numerator and denominator to <em><b>BigInteger</b></em> and all associated methods / constructors.</li>
	<li>I've also added other methods and static fields such as :
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> <span class="code-object">String</span> toString()
<span class="code-keyword">public</span> Fraction add(<span class="code-object">int</span> i)
<span class="code-keyword">public</span> Fraction subtract(<span class="code-object">int</span> i)
<span class="code-keyword">public</span> Fraction multiply(<span class="code-object">int</span> i)
<span class="code-keyword">public</span> Fraction divide(<span class="code-object">int</span> i)
<span class="code-keyword">public</span> Fraction pow(<span class="code-object">int</span> exponent)
<span class="code-keyword">public</span> <span class="code-object">double</span> pow(Fraction exponent)
<span class="code-keyword">public</span> BigDecimal bigDecimalValue()
<span class="code-keyword">public</span> Fraction clone()
<span class="code-keyword">public</span> <span class="code-object">double</span> percentageValue()
<span class="code-keyword">public</span> <span class="code-keyword">static</span> Fraction ONE_HALF = <span class="code-keyword">new</span> Fraction(1, 2)
<span class="code-keyword">public</span> <span class="code-keyword">static</span> Fraction ONE_QUARTER = <span class="code-keyword">new</span> Fraction(1, 4)</pre>
</div></div></li>
	<li>I've made sure that the original Junit test within the <em><b>FractionTest</b></em> class are all right (I've just commented the overflow tests)</li>
	<li>I've made sure that checkstyle is all right without any tabs</li>
</ul>


<p><font color="red">Obviously, some things need to be reworked or improved :</font></p>
<ul>
	<li>Some methods are still naively implemented, such as
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> Fraction add(Fraction fraction)
<span class="code-keyword">public</span> Fraction subtract(Fraction fraction)
</pre>
</div></div>
<p> because I don't have converted the original <em><b>private Fraction addSub(Fraction fraction, boolean isAdd)</b></em> method.</p></li>
	<li>The original <em><b>private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)</b></em> constructor may use <em><b>BigDecimal</b></em> instead of <em><b>double</b></em>. I'm not sure it is relevant.</li>
	<li>Junit tests have to be written with news methods (such as <em><b>pow</b></em>)</li>
	<li>Some minor adaptations have to be done in the <em><b>FractionFormat</b></em> class (change <em><b>getDenominator()</b></em> by <em><b>getDenominatorAsInt()</b></em> for instance)</li>
</ul>


<p>You'll find my work in the attached zip file :</p>
<ul class="alternate" type="square">
	<li>The <em><b>Fraction</b></em> and <em><b>FractionTest</b></em> classes</li>
	<li>The javadoc generated with public and private fields and methods (to show you a complete overview)</li>
</ul>


<p>Thank you.</p></description><environment><p>java version "1.6.0_12"<br/>
Java(TM) SE Runtime Environment (build 1.6.0_12-b04)<br/>
Java HotSpot(TM) Client VM (build 11.2-b01, mixed mode, sharing)</p>

<p>Windows XP</p>

<p>Eclipse Ganymede 3.4.1</p></environment><key id="12421471">MATH-251</key><summary>Improve the Fraction class to avoid overflow problems and increase features</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="bct">Benjamin Croizet</reporter><labels>
                    </labels><created>Sat, 28 Mar 2009 08:58:43 +0000</created><updated>Sat, 1 Jan 2011 07:13:10 +0000</updated><resolved>Mon, 30 Mar 2009 16:54:21 +0100</resolved><version>1.2</version><fixVersion>2.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12693413" author="bct" created="Sat, 28 Mar 2009 09:00:27 +0000"><p>New <em><b>Fraction</b></em> class and its javadoc documentation.</p></comment><comment id="12693475" author="luc" created="Sat, 28 Mar 2009 18:34:16 +0000"><p>The patch has been checked in the subversion repository as of r759543.</p>

<p>Some changes have been made.<br/>
The class has been renamed BigFraction.<br/>
Some exception handling have been simplified (no special triggering of NullPointerException when the following code would trigger one automatically)<br/>
Some parts have been simplified.<br/>
The constructor from a double without any convergence parameters have been completely change, including its semantic! Since the numerator and denominator are unlimited, it seemed better to do an exact conversion for any regular double (i.e. all numbers except Double.NaN, Double.NEGATIVE_INFINITY and Double.POSITIVE_INFINITY).<br/>
An error in the comparator has been fixed: it considered BigFraction instanes to be equal when they were close enough, i.e. when they differ after the 16th digit approximately. This is even wrong when numerator and denominators are integers, for example 1068966896 / 340262731 and 411557987 / 131002976 evaluate to the same double (roughly PI) but are different fractions.<br/>
The denominator and numerator are now final, ensuring the instances are immutable. Some defensive copying have therefore being removed.<br/>
The test coverage have been improved.</p>

<p>I'm not sure if the clone method is really needed. The class is immutable, couldn't we simply remove this method to avoid people copy everything when they can just share an instance ?</p>

<p>I will wait for the answer to this question before closing the issue.</p>

<p>Thanks for the patch.</p></comment><comment id="12693542" author="bct" created="Sun, 29 Mar 2009 11:58:48 +0100"><p>Ok I completely agree with you :</p>
<ul class="alternate" type="square">
	<li>the <em><b>clone()</b></em> method can be removed, since the class is immutable, it isn't necessary to keep it.</li>
	<li>your improvement about the double constructor makes sens</li>
	<li>indeed, I don't have used the <em><b>MathRuntimeException.createNullPointerException</b></em> method, better to use it as the <em><b>Fraction</b></em> class.</li>
	<li>the <em><b>compareTo</b></em> method was effectively wrong, I just copied the one from the <em><b>Fraction</b></em> class without thinking <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></li>
</ul>


<p>I've just noticed a small improvement which could be done about the <em><b>getReducedFraction()</b></em> method :</p>
<ul class="alternate" type="square">
	<li>we can remove the <em><b>.reduce()</b></em> code since the <em><b>BigFraction(int, int)</b></em> do it</li>
</ul>


<p>I see only few things to do now : </p>
<ul class="alternate" type="square">
	<li>add some tests for new methods in the <em><b>BigFractionTest</b></em> class (such as <em><b>pow</b></em>)</li>
	<li>add two methods in the <em><b>FractionFormat</b></em> class :
<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> <span class="code-keyword">static</span> <span class="code-object">String</span> formatFraction(BigFraction f)
<span class="code-keyword">public</span> <span class="code-object">StringBuffer</span> format(BigFraction fraction, <span class="code-object">StringBuffer</span> toAppendTo, FieldPosition pos)
</pre>
</div></div></li>
</ul>


<p>It is ok for me, you can close this ER when you'll feel it :o)</p>

<p>Nice work Luc.<br/>
Thanks.</p></comment><comment id="12693813" author="luc" created="Mon, 30 Mar 2009 16:54:21 +0100"><p>the modifications discussed previously have been included.<br/>
Instead of adding methods to the existing FractionFormat class, a dedicated BigFractionFormat class has been added, since we need different classes to parse a string and create either a Fraction or a BigFraction depending on the parser used.</p>

<p>The pow methods have been completely rewritten for efficiency (using an algorithm in O(ln<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/thumbs_down.gif" height="16" width="16" align="absmiddle" alt="" border="0"/>) instead of O<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/thumbs_down.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> where n is the exponent value). The underlying integral pow methods have been added to MathUtils as they may be useful elsewhere.</p></comment></comments><issuelinks><issuelinktype id="12310000"><name>Duplicate</name><inwardlinks description="is duplicated by"><issuelink><issuekey id="12492558">LANG-663</issuekey></issuelink></inwardlinks></issuelinktype></issuelinks><attachments><attachment id="12404047" name="NewFraction.zip" size="97150" author="bct" created="Sat, 28 Mar 2009 09:00:27 +0000"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sat, 28 Mar 2009 18:34:16 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150455</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160764</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-250] Solver for rational and other equations</title><link>https://issues.apache.org/jira/browse/MATH-250</link><project id="12310485" key="MATH">Commons Math</project><description><p>In addition to the existing PolynomialFunction class a RationalFunction class would be a good idea.<br/>
<a href="http://en.wikipedia.org/wiki/Rational_function" class="external-link" rel="nofollow">http://en.wikipedia.org/wiki/Rational_function</a></p>


<p>For package:<br/>
<a href="http://commons.apache.org/math/userguide/analysis.html" class="external-link" rel="nofollow">http://commons.apache.org/math/userguide/analysis.html</a></p>


<p>The goal should be to calculate derivates of functions like:</p>

<p>f<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/error.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> = [ x + 2*x^3 ] / [ x -1]</p>

<p>or </p>

<p>f<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/error.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> = [ e^x + 2*x ] / [ cos<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/error.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> ]</p>

<p>Therefore it would be best to have classes for all the inner equations like "e", "sin,cos,tan ...", "sqrt", a.s.o<br/>
These inner equations would then be put together to an outer equation. <br/>
This outer equation can then be derived using the "chain rule", "product rule" and all other rules for getting the derivative.</p>

<p>One of this inner classes is the existing PolynomialFunction class from the analysis package.<br/>
For easy rational functions the outer equation is of the form:</p>

<p>f<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/error.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> = PolynomialFunction / PolynomialFunction</p>

<p>Now just use the rule to derive it:<br/>
f<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/error.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> = g<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/error.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> / h<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/error.gif" height="16" width="16" align="absmiddle" alt="" border="0"/>   =&gt;  f'<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/error.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> = <span class="error">&#91;h(x) * g&#39;(x) - g(x) * h&#39;(x) &#93;</span> / [ h<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/error.gif" height="16" width="16" align="absmiddle" alt="" border="0"/> ]^2</p>

<p>Here we can use the inner derivate of the PolynomialFunction by calling PolynomialFunction.derivative()</p>


<p>That's the idea, now the topics that have to be discussed:</p>

<p>1. We should have a parser that can parse the "standard mathematical notation" into a tree of function classes.<br/>
    <a href="http://en.wikipedia.org/wiki/Mathematical_notation" class="external-link" rel="nofollow">http://en.wikipedia.org/wiki/Mathematical_notation</a></p>

<p>2. A class for every type of function should be implemented with an interface that has the common methods like:<br/>
    add(Object o)<br/>
    subtract(Object o)<br/>
    multiply(Object o)<br/>
    divide(Object o)<br/>
    derivative(Object o)<br/>
    a.s.o</p>

<p>3. We need to implement Excptions that are thrown for sqrt(-1) a.s.o</p>

<p>4. We need a mother class that implements all the complex derivation rules like:<br/>
    <a href="http://en.wikipedia.org/wiki/Chain_rule" class="external-link" rel="nofollow">http://en.wikipedia.org/wiki/Chain_rule</a><br/>
    <a href="http://en.wikipedia.org/wiki/Product_rule" class="external-link" rel="nofollow">http://en.wikipedia.org/wiki/Product_rule</a><br/>
    a.s.o.<br/>
    the sub classes the PolynomialFunction or the RationalFunction just implement their derivation rules, but the mother class implements the complex rules to derivate a complex structure of any type of equation by using the inner derivation rules and the complex chain rules a.s.o</p>


</description><environment/><key id="12417143">MATH-250</key><summary>Solver for rational and other equations</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="6">Invalid</resolution><assignee username="-1">Unassigned</assignee><reporter username="gruenebe">Bernhard Grünewaldt</reporter><labels>
                    </labels><created>Wed, 18 Mar 2009 08:49:21 +0000</created><updated>Thu, 19 Mar 2009 22:29:50 +0000</updated><resolved>Thu, 19 Mar 2009 22:29:50 +0000</resolved><version>2.0</version><fixVersion>2.0</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="12683260" author="gruenebe" created="Thu, 19 Mar 2009 00:46:25 +0000"><p>Here is a short summary what my approach is:</p>

<p><a href="https://www.gruenewaldt.net/2009/03/using-maxima-to-derivate-rational-functions-and-solve-equations/" class="external-link" rel="nofollow">https://www.gruenewaldt.net/2009/03/using-maxima-to-derivate-rational-functions-and-solve-equations/</a></p>

<p>I want to do the same thing mentioned in the blog entry with commons math.</p>
</comment><comment id="12683341" author="luc" created="Thu, 19 Mar 2009 06:32:55 +0000"><p>This comment may be slightly out of scope, but aside from commons-math, we have a project in the commons sandbox which is dedicated to derivatives computations : Nabla <a href="http://commons.apache.org/commons/sandbox/nabla/" class="external-link" rel="nofollow">http://commons.apache.org/commons/sandbox/nabla/</a>.<br/>
The project is not ready for production use and cannot handle some constructs properly yet like temporary variables or loops. But a straightforward implementation of your rational function like the following one is differentiated properly:</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> class MyRationalFunction <span class="code-keyword">implements</span> UnivariateDifferentiable {
            <span class="code-keyword">public</span> <span class="code-object">double</span> f(<span class="code-object">double</span> t) {
                <span class="code-keyword">return</span> <span class="code-object">Math</span>.pow(1 - t, 2) / <span class="code-object">Math</span>.pow(1 + t, 2) - 1;
            }
}
</pre>
</div></div>

<p>This would also work with embedded Math.sin, Math.exp ... </p>

<p>There have been no work on Nabla since months as I was much busy with commons math. I expect to work on it again very soon.</p></comment><comment id="12683380" author="gruenebe" created="Thu, 19 Mar 2009 09:14:06 +0000"><p>Ok, nice.</p>

<p>How can I contribute to nabla?<br/>
Can give me a task of what to do?</p>

<p>And how about having a parser that can parse the "standard mathematical notation" into java form.<br/>
It would be nice to have a method like "eval(...)" that parses the string and creates a java equation.<br/>
Using cglib, velocity or whatever.</p>


</comment><comment id="12683578" author="luc" created="Thu, 19 Mar 2009 19:37:41 +0000"><p>You can start by looking at what is already in and say what you like and dislike.<br/>
I intend to do drastic changes in order to support reverse mode too, so this needs some thoughts.<br/>
The best place to speak about this is the commons developers list (don't forget to put <span class="error">&#91;nabla&#93;</span> in the subject).</p>

<p>Do you still think this issue should remain open ?</p></comment><comment id="12683656" author="gruenebe" created="Thu, 19 Mar 2009 22:29:50 +0000"><p>Ok I will take a look at it and then we go on.</p>

<p>So this issue can be closed, because the solution will take place in the nabla project.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Thu, 19 Mar 2009 06:32:55 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150454</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160765</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-249] Gamma incomplete</title><link>https://issues.apache.org/jira/browse/MATH-249</link><project id="12310485" key="MATH">Commons Math</project><description><p>Hello.</p>

<p>In the class "special.Gamma", there seem to be no explicit way to obtain the incomplete gamma function.<span class="error">&#91;1&#93;</span><br/>
Could you provide it?</p>

<p>Thanks,<br/>
Gilles</p>

<p><span class="error">&#91;1&#93;</span> <a href="http://mathworld.wolfram.com/IncompleteGammaFunction.html" class="external-link" rel="nofollow">http://mathworld.wolfram.com/IncompleteGammaFunction.html</a></p></description><environment/><key id="12416955">MATH-249</key><summary>Gamma incomplete</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="6">Invalid</resolution><assignee username="-1">Unassigned</assignee><reporter username="erans">Gilles</reporter><labels>
                    </labels><created>Mon, 16 Mar 2009 10:15:36 +0000</created><updated>Tue, 17 Mar 2009 16:07:27 +0000</updated><resolved>Tue, 17 Mar 2009 16:07:27 +0000</resolved><version>2.0</version><due/><votes>0</votes><watches>0</watches><comments><comment id="12682490" author="luc" created="Mon, 16 Mar 2009 22:33:43 +0000"><p>Could you check if this simple implementation provides good enough results :</p>

<div class="code panel" style="border-width: 1px;"><div class="codeContent panelContent">
<pre class="code-java">
<span class="code-keyword">public</span> <span class="code-keyword">static</span> <span class="code-object">double</span> incompleteGamma(<span class="code-object">double</span> a, <span class="code-object">double</span> x) {
    <span class="code-keyword">return</span> regularizedGammaQ(a, x) * <span class="code-object">Math</span>.exp(logGamma(a));
}
</pre>
</div></div>

<p>this is basically the inversion of equation (2) in <a href="http://mathworld.wolfram.com/RegularizedGammaFunction.html" class="external-link" rel="nofollow">http://mathworld.wolfram.com/RegularizedGammaFunction.html</a><br/>
If so, I'll check it in.</p></comment><comment id="12682618" author="erans" created="Tue, 17 Mar 2009 10:21:36 +0000"><p>I had noticed this possibility, but having had a (quick) look at the implementation in GSL, I thought that it might be more complicated: They use several different algorithms, depending on the values of the parameters.<br/>
Nevertheless, I'll report your proposal to the user so that he can test whether it's OK for his intended usage.</p></comment><comment id="12682660" author="erans" created="Tue, 17 Mar 2009 12:39:41 +0000"><p>Actually, it was the already existing "regularizedGammaQ" which he needed. <span class="error">&#91;The confusion came from the different naming in &quot;Numerical Recipes&quot;.&#93;</span><br/>
So, this issue can be closed.  Sorry for the noise...</p></comment><comment id="12682708" author="luc" created="Tue, 17 Mar 2009 16:07:27 +0000"><p>No problem.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Mon, 16 Mar 2009 22:33:43 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150453</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160766</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-248] Multiplying sparse matrices is slow</title><link>https://issues.apache.org/jira/browse/MATH-248</link><project id="12310485" key="MATH">Commons Math</project><description><p>The multiplication of sparse real matrices is very slow compared to real matrices: Ten times as slow for size 200, four times as slow for size 400. The time is independent of the number of nonzero entries, because the general algorithm inherited from AbstractRealMatrix is used. I suggest using a specialized multiplication algorithm for matrices that are "sparse enough", walking only over the nonzero entries in one of the matrices.</p></description><environment/><key id="12415323">MATH-248</key><summary>Multiplying sparse matrices is slow</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="chsemrau">Christian Semrau</reporter><labels>
                    </labels><created>Sun, 22 Feb 2009 19:53:07 +0000</created><updated>Thu, 23 Apr 2009 03:26:20 +0100</updated><resolved>Sun, 5 Apr 2009 17:54:29 +0100</resolved><fixVersion>2.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12675698" author="chsemrau" created="Sun, 22 Feb 2009 19:53:52 +0000"><p>According to my little tests, walking in optimized order and adding the pairwise products to the result matrix is much faster for very sparse matrices, but for a full matrix (every entry set to 1), it is about 50% slower than the current implementation. So the implementation might switch between the two algorithms. Also one might wish to walk the other matrix if it is more sparse than this.</p></comment><comment id="12675704" author="luc" created="Sun, 22 Feb 2009 20:36:27 +0000"><p>You are right. It is probably even worse when compared to DenseRealMatrix which should be more cache-friendly than RealMatrixImpl.</p>

<p>It is also possible to walk through non-zero elements of both matrices.</p>

<p>Could you provide a patch for this ?</p></comment><comment id="12695873" author="luc" created="Sun, 5 Apr 2009 17:54:29 +0100"><p>fixed in subversion repository as of r762117<br/>
thanks for the report</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sun, 22 Feb 2009 20:36:27 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150452</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160767</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-247] Add MathUtils method to check equality given some error bounds</title><link>https://issues.apache.org/jira/browse/MATH-247</link><project id="12310485" key="MATH">Commons Math</project><description><p>It would be nice to have a utility method that tests for equality given some range of allowed error to account for floating point error.</p></description><environment/><key id="12415268">MATH-247</key><summary>Add MathUtils method to check equality given some error bounds</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="bmccann">Benjamin McCann</reporter><labels>
                    </labels><created>Sat, 21 Feb 2009 01:52:39 +0000</created><updated>Thu, 2 May 2013 03:29:20 +0100</updated><resolved>Sun, 1 Mar 2009 22:23:37 +0000</resolved><due/><votes>0</votes><watches>0</watches><comments><comment id="12675559" author="luc" created="Sat, 21 Feb 2009 13:36:52 +0000"><p>Fixed in trunk as of  r746506.<br/>
Thanks for the patch</p></comment><comment id="12677828" author="bmccann" created="Sun, 1 Mar 2009 19:02:36 +0000"><p>Adding a compareTo function to go along with the equals function submitted earlier.</p></comment><comment id="12677829" author="bmccann" created="Sun, 1 Mar 2009 19:03:11 +0000"><p>I added a path for a compareTo to go along with the equals method added earlier.</p></comment><comment id="12677860" author="luc" created="Sun, 1 Mar 2009 22:23:37 +0000"><p>applied patch with minor changes to obey javadoc html<br/>
fixed in subversion repository as of r749139</p>

<p>thanks for the patch</p></comment></comments><issuelinks><issuelinktype id="10001"><name>dependent</name><inwardlinks description="is depended upon by"><issuelink><issuekey id="12414707">MATH-246</issuekey></issuelink></inwardlinks></issuelinktype></issuelinks><attachments><attachment id="12400648" name="MathUtils.java.patch" size="838" author="bmccann" created="Sat, 21 Feb 2009 01:53:33 +0000"/><attachment id="12400649" name="MathUtilsTest.java.patch" size="784" author="bmccann" created="Sat, 21 Feb 2009 01:53:34 +0000"/><attachment id="12401204" name="compareTo.patch" size="1797" author="bmccann" created="Sun, 1 Mar 2009 19:02:36 +0000"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>3.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sat, 21 Feb 2009 13:36:52 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150451</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160768</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-246] Simplex Method Implementation</title><link>https://issues.apache.org/jira/browse/MATH-246</link><project id="12310485" key="MATH">Commons Math</project><description><p>I've created an implementation of the Simplex algorithm for optimizing systems of constrained linear equations that I'd like to contribute.</p></description><environment/><key id="12414707">MATH-246</key><summary>Simplex Method Implementation</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="luc">Luc Maisonobe</assignee><reporter username="bmccann">Benjamin McCann</reporter><labels>
                    </labels><created>Thu, 12 Feb 2009 22:52:30 +0000</created><updated>Thu, 2 May 2013 03:29:20 +0100</updated><resolved>Wed, 8 Apr 2009 22:49:10 +0100</resolved><fixVersion>2.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12673084" author="bmccann" created="Thu, 12 Feb 2009 23:00:21 +0000"><p>Also, I forgot to mention for people not familiar with the simplex method that it is used to solve problems such as:<br/>
Maximize 2x+3y<br/>
Subject To:<br/>
x + y &lt;= 10<br/>
7x - 8y &gt;= 3</p></comment><comment id="12673189" author="luc" created="Fri, 13 Feb 2009 09:18:38 +0000"><p>Did you have a look at the existing org.apache.commons.math.optimization.NelderMead class and at the issue <a href="https://issues.apache.org/jira/browse/MATH-196" title="add support to constrained parameter estimation" class="issue-link" data-issue-key="MATH-196"><del>MATH-196</del></a> ?</p></comment><comment id="12673300" author="bmccann" created="Fri, 13 Feb 2009 16:56:43 +0000"><p>Nelder Mead is a nonlinear optimization algorithm vs. the Simplex algorithm which is a linear optimization algorithm, so they're both useful but for solving different types of problems.</p></comment><comment id="12674439" author="bmccann" created="Wed, 18 Feb 2009 03:06:05 +0000"><p>David Wang from MIT discovered a model that caused the code to fail.  This version fixes the bug responsible.</p></comment><comment id="12674486" author="davidcw" created="Wed, 18 Feb 2009 06:28:33 +0000"><p>Just to throw in my two cents: The simplex algorithm forms the core of many scheduling and constraint algorithms. Unfortunately, I haven't found many Java implementations of the simplex method. This version has the understandable object-oriented structure that I've come to expect (and love) from commons-math. And I think it would be very useful to have it incorporated in the next release. Thanks Benjamin.</p></comment><comment id="12674707" author="luc" created="Wed, 18 Feb 2009 17:29:38 +0000"><p>This is scheduled to be included soon, but the interface may be modified. It has not been reviewed yet.<br/>
The issue has been linked to existing ones (<a href="https://issues.apache.org/jira/browse/MATH-177" title="Provide a general minimizing package with a classical Gauss-Newton algorithm" class="issue-link" data-issue-key="MATH-177"><del>MATH-177</del></a> and <a href="https://issues.apache.org/jira/browse/MATH-196" title="add support to constrained parameter estimation" class="issue-link" data-issue-key="MATH-196"><del>MATH-196</del></a>) also concerning minimization. The existing packages (estimation and optimization) are intended to be redesigned for a cleaner organization, simpler API and extended features. <br/>
I intend to start discussing about it on the publicly available developers list shared by all Apache commons components in the next few days. Feel free to contribute to the discussion and make sure your needs are addressed.</p></comment><comment id="12674730" author="bmccann" created="Wed, 18 Feb 2009 18:36:27 +0000"><p>Sounds good.  I'm more than happy to work with you and the rest of the developers on anything that arises during review.</p></comment><comment id="12675472" author="chengas123" created="Fri, 20 Feb 2009 21:05:02 +0000"><p>Is there anything we're waiting for before discussing this issue on the mailing list?</p></comment><comment id="12675477" author="luc" created="Fri, 20 Feb 2009 21:14:59 +0000"><p>Sorry for the delay. I am recovering from a surgical operation and was pretty much tired these days.<br/>
I will launch the discussion in a few minutes.</p></comment><comment id="12675493" author="rubylips" created="Fri, 20 Feb 2009 22:32:28 +0000"><p>Ben,</p>

<p>Thanks for the submission. I'm no expert on the simplex method but I see that the implementation in Numerical Recipes uses 'some small parameter EPS' to test for inequality. I don't see anything similar in your code. Do you think that this is important?</p></comment><comment id="12675525" author="bmccann" created="Sat, 21 Feb 2009 02:00:32 +0000"><p>Rubylips, thanks for the review.  I've created issue Math-247 to implement a utility function with this feature, which I'll look into using in this code.<br/>
Luc, thanks for getting the discussion going.  I realized while reading your message that I should be using RealVector instead of reinventing it.  I'll take a look at doing so and post a new version.</p></comment><comment id="12675593" author="bmccann" created="Sat, 21 Feb 2009 19:42:34 +0000"><p>Here's the latest.  I replaced the LinearExpression class I was using with RealVector for better code reuse and a common interface.<br/>
I also made one of the tests much more complex, so that an epsilon became important.  Then I made use of the new equality util from Math-247 to make it pass again.<br/>
Thanks for helping make the code better!</p></comment><comment id="12679886" author="opal" created="Sat, 7 Mar 2009 16:06:59 +0000"><p>Are there any Javadocs for this project?<br/>
Thanks!</p></comment><comment id="12679923" author="luc" created="Sat, 7 Mar 2009 23:11:22 +0000"><p>The last path file Benjamin contributed on February 21st does contain Javadoc.<br/>
This patch has not been checked into the subversion repository yet because</p>
<ol>
	<li>we are waiting for some signed papers due to the size of the contribution</li>
	<li>we are redesigning the optimization package and will need to adapt slightly the code</li>
</ol>
</comment><comment id="12680357" author="bmccann" created="Tue, 10 Mar 2009 02:23:08 +0000"><p>Anders Hessellund contacted me about solving a model with 216 variables.  I coded up his problem as a test case below and it correctly arrived at a solution given to me by another tool, which gives me confidence in the code.<br/>
Luc, thanks for following up about the paperwork.  I had tried last week, but couldn't reach people out on vacation.</p></comment><comment id="12680684" author="bmccann" created="Tue, 10 Mar 2009 23:06:32 +0000"><p>I realized today that I didn't provide any way for an objective function to have a constant term in it.  For example, in the equation 7x + 8y + 10, I wasn't providing a way to specify the +10.  This is just a small change to the files submitted earlier to fix that.</p></comment><comment id="12681860" author="bmccann" created="Fri, 13 Mar 2009 18:58:44 +0000"><p>I sent Luc the paperwork yesterday, so this should be able to be checked in now.  Let me know if there's anything else you need from me.</p></comment><comment id="12689147" author="luc" created="Wed, 25 Mar 2009 16:05:38 +0000"><p>Apart fro some non-technical changes, here are the changes I would propose to add to this contribution:</p>

<p>Rename LinearEquation into LinearConstraint. It is only used for that purpose and could be confused at first sight with LinearObjectiveFunction.</p>

<p>Remove the LinearModel class, or at least change it to package private. This is an implementation detail. Users should see the simplest possible package and deal directly with objective function a set of constraints, a goal type and an optimizer.</p>

<p>Add a LinearOptimizer interface with an optimize method. This would be more consistent with the new optimization framework. The SimplexSolver would implement this interface. Setting solvers first and having a separate method to actually run them has already been asked for by users for root solvers (see <a href="https://issues.apache.org/jira/browse/MATH-218" title="UnivariateRealSolver: Allow function to be passed as argument to the &quot;solve&quot; method" class="issue-link" data-issue-key="MATH-218"><del>MATH-218</del></a>), it would be more consistent to follow the same pattern.</p>

<p>Remove GoalType from LinearObjectiveFunction. It seems better to pass it along with the objective function and the set of constraints when calling the optimize method.</p>

<p>Does this seems fair ?</p></comment><comment id="12689195" author="chengas123" created="Wed, 25 Mar 2009 18:40:09 +0000"><p>Luc,<br/>
I am okay with you moving the code attributions to a common location (notice.txt).</p>

<p>Thanks,<br/>
Ben</p></comment><comment id="12689202" author="chengas123" created="Wed, 25 Mar 2009 19:17:55 +0000"><p>LinearEquation -&gt; LinearConstraint is fine by me.  My thought with calling it LinearEquation was that it could potentially be reused by other algorithms.<br/>
GoalType moved from LinearObjectiveFunction to SimplexSolver is okay too.<br/>
LinearOptimizer interface is fine (though I'd be curious to see the interface definition and other implementing classes if you want more feedback)</p>

<p>If you were to remove LinearModel, I assume you would merge it into SimplexSolver?  Then the constructor would take:<br/>
GoalType goal, LinearObjectiveFunction objective, List&lt;LinearConstraint&gt; constraints, boolean restrictToNonNeagtive, double epsilon<br/>
That's fine too or did you have other plans to make adhere to the new interface?</p></comment><comment id="12689217" author="luc" created="Wed, 25 Mar 2009 20:04:50 +0000"><p>Instead of the constructor, it would be the optimize method.<br/>
The pattern is the same as the root solvers. They have an empty constructor or may have constructors with configuration parameters. They also have setter for example for convergence thresholds. Once completely setup, possibly in an initialization phase or in a factory or in any way the main application provides, they can be used to repeatedly find roots on a set of functions.</p>

<p>I'll check in a first try on this so you can provide feedback.<br/>
Thanks for this important contribution</p></comment><comment id="12689243" author="bmccann" created="Wed, 25 Mar 2009 21:18:55 +0000"><p>Ok.  Thanks Luc.</p></comment><comment id="12689389" author="luc" created="Thu, 26 Mar 2009 07:56:21 +0000"><p>Another issue that bothers me.<br/>
There is a constructor for a linear constraint with vectors for both left hand side and right hand side that subtracts both and put 0 as the scalar on the right hand side.<br/>
This seems odd to me.<br/>
If for example we call it with lhs = </p>
{ 2, 3 }
<p>, rhs = </p>
{ 1, 1 }
<p>, r = EQ this means we set up the constraint<br/>
(2 - 1) x + (3 - 1)y = 0 or x + 2y = 0. Users may think it would be equivalent to the two constraints 2x=1 and 3y=1 which is not the case. For inequality constraints, this looks even more strange.<br/>
If there is a use for this in a specific context, I suggest the subtraction be done at user code level before calling the constructor rather than providing support in the linear constraint class for this.<br/>
I suggest to drop this constructor, except if you can provide me some hints I will pour in the javadoc to help users.</p></comment><comment id="12689539" author="chengas123" created="Thu, 26 Mar 2009 16:39:45 +0000"><p>That constructor was made so that constraints such as x + 2y &lt;= 3x + 4y could be expressed instead of just scalars on the right hand side (x + 2y &lt;= 9).  The user doesn't have to care about the implementation details which cause one side to be subtracted from the other, but only needs to know how to express their constraint.  I actually would propose a different change to the constructor, which would be to change it to:<br/>
public LinearEquation(RealVector leftHandSide, double lhsConstantTerm, Relationship relationship, RealVector rightHandSide, double rhsConstantTerm)<br/>
That would make it more flexible and allow for constraints such as x + 2y + 7 &lt;= 3x + 4y + 6 which I originally overlooked.  You're correct that the user could do this him/herself, but it seems a common use case (one I will be using frequently to say the least), so I thought it wise to provide the extra convenience.<br/>
And perhaps adding some JavaDocs would clear up any potential confusion that I had not envisioned:<br/>
/**</p>
<ul>
	<li>@param leftHandSide The coefficients of the linear expression on the left hand side of the constraint</li>
	<li>@param lhsConstantTerm The constant term of the linear expression on the left hand side of the constraint</li>
	<li>@param relationship The type of (in)equality used in the constraint</li>
	<li>@param rightHandSide The coefficients of the linear expression on the right hand side of the constraint</li>
	<li>@param rhsConstantTerm The constant term of the linear expression on the right hand side of the constraint<br/>
 */</li>
</ul>
</comment><comment id="12689550" author="luc" created="Thu, 26 Mar 2009 16:55:45 +0000"><p>This is fine, thanks.<br/>
I'll check it in with the appropriate explanation.</p></comment><comment id="12689736" author="luc" created="Thu, 26 Mar 2009 23:36:54 +0000"><p>The contribution has been checked in subversion repository as of r758920.<br/>
I'm not sure I have done it right, in fact I suspect either I blew something or did not understand the meaning of the output value of the solver.</p>

<p>I thought it returned both the optimal point (x1, x2 ..., xn) and the value of the objective function at this point. While adapting signatures and organization to be consistent with the rest of the optimization framework, I had the value of the objective function computed directly by the new method LinearObjectiveFunction.getValue().</p>

<p>The SimplexSolverTest.testLargeModel failed when checking this value. Before all my changes it returned 7518, after my changes it returns 13366. However, the values of all variables are good and if I compute the value in the old code as in the new code, I also get 13366. So I don't understand what this 7518 meant. One puzzling fact is that for some toy problem with two variables and two inequality constraints, both computation methods (the old one and the new one) gave identical results.</p>

<p>Could you check this and explain what I blew ?</p></comment><comment id="12689795" author="bmccann" created="Fri, 27 Mar 2009 03:04:44 +0000"><p>Hi Luc,<br/>
What you did was fine.  It exposed a bug, which I've attached a patch for.<br/>
In the large test, there were multiple variables that could have taken a given value.  For example, when we solved the problem let's say it turned out that one of two cases could be true:<br/>
x2 = 0 and x3 = 49<br/>
x2 = 49 and x3 = 0<br/>
In this ambiguous case, I was setting x2 and x3 to 49.  The patch makes it so that we just choose the first variable when settings its value from the solution.</p></comment><comment id="12689846" author="luc" created="Fri, 27 Mar 2009 07:57:13 +0000"><p>implemented with the final fix from Benjamin in r759045<br/>
thanks for the contribution</p></comment><comment id="12697222" author="bmccann" created="Wed, 8 Apr 2009 22:27:43 +0100"><p>I ran into a case today where the SimplexSolver was failing because I wasn't allowing for error when doing comparisons.  This patch uses MathUtils to do all comparisons.</p></comment><comment id="12697232" author="luc" created="Wed, 8 Apr 2009 22:49:10 +0100"><p>fixed in subversion repository as of r763412.<br/>
I have edited the patch slightly because it lacked javadoc for the epsilon parameter and it broke the SimplexTableau tests (the test class for SimplexTableau was not in the patch).</p>

<p>Please open a new Jira issue when such a problem arise, instead of reopening a resolved issue. It is simpler to track and may be handled by another assignee.</p>

<p>Thanks for the report and for the patch.</p></comment><comment id="12828768" author="jtas" created="Tue, 2 Feb 2010 21:23:13 +0000"><p>Can anybody give me an explanation what the purpose (avoid 'cycling'?) of the the epsilon parameter in the code is? Furthermore, is there a good reference (e.g. Numerical Recipes in C++) exactly describing this Two Phase Simplex algorithm plus the use of the epsilon parameter? I am interested in setting epsilon as optimal as possible depending on the linear program I am providing as input.</p></comment><comment id="12828771" author="bmccann" created="Tue, 2 Feb 2010 21:30:33 +0000"><p>The epsilon is used to decide equality between floating point numbers.  If they are within the epsilon then they are considered equal.  It does help avoid cycling.  I'm not sure how to decide what an optimal value is.</p></comment><comment id="12830716" author="jtas" created="Sun, 7 Feb 2010 15:18:07 +0000"><p>Benjamin thank you for your reaction. However, I am not entirely sure about the use of this epsilon. What is e.g. the relationship  with the status of the system (i.e.ill-conditioning of the constraints matrix) of constraints and the value of epsilon? A small test I did this week was the following:</p>

<p>max (x1 + x2) subject to the following constraints:</p>

<p>x1 + x2 = 1<br/>
(1+delta)x1 + (1-delta)x2 = 1<br/>
x1, x2 &gt;= 0</p>

<p>with delta a small number. The matrix A = [ (1,1), (1+eps, 1-eps)] is ill-conditioned. The epsilon in the simplex algorithm was set on the the default value of 1e-6. I found that for values of delta larger than 1e-6 the simplex algorithm provided an answer that does not obey all the constraints. If delta was smaller than epsilon the solution obeyed all the constraints. </p>

<p>Any idea what this effect is, and how I can detect this for a general problem?</p>

<p>Regards,</p>

<p>Jurgen</p></comment></comments><issuelinks><issuelinktype id="10030"><name>Reference</name><outwardlinks description="relates to"><issuelink><issuekey id="12390589">MATH-196</issuekey></issuelink><issuelink><issuekey id="12386423">MATH-177</issuekey></issuelink></outwardlinks></issuelinktype><issuelinktype id="10001"><name>dependent</name><outwardlinks description="depends upon"><issuelink><issuekey id="12415268">MATH-247</issuekey></issuelink></outwardlinks></issuelinktype></issuelinks><attachments><attachment id="12403773" name="SimplexSolverTest.patch" size="1076" author="bmccann" created="Fri, 27 Mar 2009 03:04:44 +0000"/><attachment id="12403772" name="SimplexTableau.patch" size="1106" author="bmccann" created="Fri, 27 Mar 2009 03:04:44 +0000"/><attachment id="12401879" name="newfiles.zip" size="15482" author="bmccann" created="Tue, 10 Mar 2009 23:06:32 +0000"/><attachment id="12405007" name="simplex.patch" size="4581" author="bmccann" created="Wed, 8 Apr 2009 22:27:43 +0100"/><attachment id="12405008" name="test.patch" size="1768" author="bmccann" created="Wed, 8 Apr 2009 22:27:43 +0100"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>5.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Fri, 13 Feb 2009 09:18:38 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150450</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160769</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-245] introduce getSubVector methods into RealVector interface</title><link>https://issues.apache.org/jira/browse/MATH-245</link><project id="12310485" key="MATH">Commons Math</project><description><p>The RealMatrix interface contains getSubMatrix methods to retrieve submatrices. In the same way, I think it would be helpful to have getSubVector methods in the RealVector interface to retrieve sub vectors.</p>

<p>I know that the get method already does this but I think it would help if the method signatures for the getters/setters in the Vector and Matrix classes were made as similar as possible.</p></description><environment/><key id="12413981">MATH-245</key><summary>introduce getSubVector methods into RealVector interface</summary><type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="jamesh">James Housden</reporter><labels>
                    </labels><created>Wed, 4 Feb 2009 09:53:29 +0000</created><updated>Thu, 23 Apr 2009 03:26:20 +0100</updated><resolved>Wed, 4 Feb 2009 14:01:03 +0000</resolved><version>2.0</version><fixVersion>2.0</fixVersion><due/><votes>0</votes><watches>1</watches><comments><comment id="12670336" author="luc" created="Wed, 4 Feb 2009 14:01:03 +0000"><p>fixed in trunk as of r740744<br/>
thanks for the report</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 4 Feb 2009 14:01:03 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150449</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160770</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-244] Website SVN instructions refer to nonexistent branch</title><link>https://issues.apache.org/jira/browse/MATH-244</link><project id="12310485" key="MATH">Commons Math</project><description><p>On the Source Repository page on the Math website:<br/>
<a href="http://commons.apache.org/math/source-repository.html" class="external-link" rel="nofollow">http://commons.apache.org/math/source-repository.html</a></p>

<p>The SVN checkout instructions refer to the MATH_2_0 branch, which doesn't exist. I substituted the trunk instead.</p></description><environment/><key id="12413112">MATH-244</key><summary>Website SVN instructions refer to nonexistent branch</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="jparker">Joel Parker</reporter><labels>
                    </labels><created>Fri, 23 Jan 2009 17:28:38 +0000</created><updated>Thu, 23 Apr 2009 03:26:20 +0100</updated><resolved>Fri, 23 Jan 2009 19:43:43 +0000</resolved><due/><votes>0</votes><watches>0</watches><comments><comment id="12666670" author="luc" created="Fri, 23 Jan 2009 19:43:43 +0000"><p>Fixed in subversion as of r737149.<br/>
The site has been regenerated, it should be put online in a few hours.<br/>
Thanks.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Fri, 23 Jan 2009 19:43:43 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150448</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160771</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-243] MathUtils.gcd(Integer.MIN_VALUE, 0) should throw an Exception instead of returning Integer.MIN_VALUE</title><link>https://issues.apache.org/jira/browse/MATH-243</link><project id="12310485" key="MATH">Commons Math</project><description><p>The gcd method should throw an Exception for gcd(Integer.MIN_VALUE, 0), like for gcd(Integer.MIN_VALUE, Integer.MIN_VALUE). The method should only return nonnegative results.</p></description><environment/><key id="12412941">MATH-243</key><summary>MathUtils.gcd(Integer.MIN_VALUE, 0) should throw an Exception instead of returning Integer.MIN_VALUE</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="chsemrau">Christian Semrau</reporter><labels>
                    </labels><created>Wed, 21 Jan 2009 21:15:30 +0000</created><updated>Thu, 23 Apr 2009 03:26:20 +0100</updated><resolved>Sat, 21 Feb 2009 13:55:19 +0000</resolved><due/><votes>0</votes><watches>0</watches><comments><comment id="12665978" author="chsemrau" created="Wed, 21 Jan 2009 21:50:48 +0000"><p>Attached is a patch for gcd, and also for lcm, which failed for some special cases: lcm failed for (0,0) and for (Integer.MIN_VALUE, power of 2).</p>

<p>I also added Javadoc for special cases.</p></comment><comment id="12675561" author="luc" created="Sat, 21 Feb 2009 13:55:19 +0000"><p>Fixed in trunk as of r746511.<br/>
Thanks for the patch</p></comment></comments><attachments><attachment id="12398432" name="gcdPatch.txt" size="6345" author="chsemrau" created="Wed, 21 Jan 2009 21:50:48 +0000"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sat, 21 Feb 2009 13:55:19 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>34210</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160772</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-242] Missing tests in MathUtilsTest</title><link>https://issues.apache.org/jira/browse/MATH-242</link><project id="12310485" key="MATH">Commons Math</project><description><p>Using EclEmma, I spotted some methods and special cases in MathUtils that were not tested. I will attach a patch.</p></description><environment/><key id="12412863">MATH-242</key><summary>Missing tests in MathUtilsTest</summary><type id="6" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/requirement.png">Test</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="chsemrau">Christian Semrau</reporter><labels>
                    </labels><created>Tue, 20 Jan 2009 21:05:58 +0000</created><updated>Thu, 23 Apr 2009 03:26:20 +0100</updated><resolved>Wed, 21 Jan 2009 11:32:42 +0000</resolved><version>1.0</version><version>1.1</version><version>1.2</version><fixVersion>2.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12665564" author="chsemrau" created="Tue, 20 Jan 2009 21:11:54 +0000"><p>For binomialCoefficient, I slightly improved the test implementation to reduce stack depth, added some more tests and improved binomialCoefficientLog by using symmetry.</p>

<p>For many methods, I added assertions for untested special cases.</p>

<p>The sign methods were not tested at all.</p></comment><comment id="12665583" author="chsemrau" created="Tue, 20 Jan 2009 21:57:35 +0000"><p>After thinking a bit longer, I think the gcd method should throw an Exception for gcd(Integer.MIN_VALUE, 0) too, like for gcd(Integer.MIN_VALUE, Integer.MIN_VALUE). So my patch verifies the current behaviour, but I suggest changing that: gcd should only return nonnegative results (a result of 0 can come from gcd(0,0)).</p></comment><comment id="12665802" author="psteitz" created="Wed, 21 Jan 2009 11:32:42 +0000"><p>Patch applied.  Thanks!</p>

<p>Regarding the last comment, I agree.  Please open another issue for this.  Patch welcome, of course <img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.gif" height="16" width="16" align="absmiddle" alt="" border="0"/></p></comment><comment id="12665979" author="chsemrau" created="Wed, 21 Jan 2009 21:52:00 +0000"><p>Opened another issue: <a href="https://issues.apache.org/jira/browse/MATH-243" title="MathUtils.gcd(Integer.MIN_VALUE, 0) should throw an Exception instead of returning Integer.MIN_VALUE" class="issue-link" data-issue-key="MATH-243"><del>MATH-243</del></a></p></comment></comments><attachments><attachment id="12398335" name="MathUtilsTestPatch.txt" size="10355" author="chsemrau" created="Tue, 20 Jan 2009 21:11:53 +0000"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Wed, 21 Jan 2009 11:32:42 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150447</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160773</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-241] MathUtils.binomialCoefficient(n,k) fails for large results</title><link>https://issues.apache.org/jira/browse/MATH-241</link><project id="12310485" key="MATH">Commons Math</project><description><p>Probably due to rounding errors, MathUtils.binomialCoefficient(n,k) fails for results near Long.MAX_VALUE.</p>

<p>The existence of failures can be demonstrated by testing the recursive property:</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>         assertEquals(MathUtils.binomialCoefficient(65,32) + MathUtils.binomialCoefficient(65,33),
                 MathUtils.binomialCoefficient(66,33));
</pre>
</div></div>

<p>Or by directly using the (externally calculated and hopefully correct) expected value:</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>         assertEquals(7219428434016265740L, MathUtils.binomialCoefficient(66,33));
</pre>
</div></div>

<p>I suggest a nonrecursive test implementation along the lines of</p>

<div class="code panel" style="border-style: solid;border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width: 1px;border-bottom-style: solid;"><b>MathUtilsTest.java</b></div><div class="codeContent panelContent">
<pre class="code-java">    /**
     * Exact implementation using BigInteger and the explicit formula
     * (n, k) == ((k-1)*...*n) / (1*...*(n-k))
     */
	<span class="code-keyword">public</span> <span class="code-keyword">static</span> <span class="code-object">long</span> binomialCoefficient(<span class="code-object">int</span> n, <span class="code-object">int</span> k) {
		<span class="code-keyword">if</span> (k == 0 || k == n)
			<span class="code-keyword">return</span> 1;
		BigInteger result = BigInteger.ONE;
		<span class="code-keyword">for</span> (<span class="code-object">int</span> i = k + 1; i &lt;= n; i++) {
			result = result.multiply(BigInteger.valueOf(i));
		}
		<span class="code-keyword">for</span> (<span class="code-object">int</span> i = 1; i &lt;= n - k; i++) {
			result = result.divide(BigInteger.valueOf(i));
		}
		<span class="code-keyword">if</span> (result.compareTo(BigInteger.valueOf(<span class="code-object">Long</span>.MAX_VALUE)) &gt; 0) {
			<span class="code-keyword">throw</span> <span class="code-keyword">new</span> ArithmeticException(
                                <span class="code-quote">"Binomial coefficient overflow: "</span> + n + <span class="code-quote">", "</span> + k);
		}
		<span class="code-keyword">return</span> result.longValue();
	}
</pre>
</div></div> 

<p>Which would allow you to test the expected values directly:</p>

<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent panelContent">
<pre>         assertEquals(binomialCoefficient(66,33), MathUtils.binomialCoefficient(66,33));
</pre>
</div></div></description><environment/><key id="12412642">MATH-241</key><summary>MathUtils.binomialCoefficient(n,k) fails for large results</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="psteitz">Phil Steitz</assignee><reporter username="chsemrau">Christian Semrau</reporter><labels>
                    </labels><created>Fri, 16 Jan 2009 23:34:23 +0000</created><updated>Thu, 23 Apr 2009 03:26:20 +0100</updated><resolved>Mon, 19 Jan 2009 23:53:48 +0000</resolved><version>2.0</version><fixVersion>2.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12665187" author="psteitz" created="Mon, 19 Jan 2009 18:40:57 +0000"><p>First, thanks for reporting this.  Due to log/exp rounding and double/long conversion, the current code returns bad values for many long-representable values, starting as low as n = 48.  The returned value can be off by as much as 200,000.  The error in binomial(66, 29) is 214,880.  All b(n,k) for n &lt; 48 are exact.</p>

<p>Attached is a patch that ensures accuracy up to n = 200 (specified as a constant) and allows the user to force exact computation for values beyond this if desired.  For n &lt;= 200, the implementation works like an unwound recursive implementation.   I also improved the accuracy of the double-valued and log versions.   The latter perform better than the current implementations, but the long-valued version is approximately 8x slower than the current version.  I did not benchmark the BigInteger version, but suspect that would be slower still.  The most accurate (for n &lt;= 200) non-recursive formula that I could find is the one that I implemented in the double version.</p>

<p>I also investigated overflow behavior and added tests to confirm correctness.  As stated in the API doc, overflows start at n = 67.  For n = 200,  values of k less than 14 or greater than 186 can still be computed without overflow; but all others throw ArithmeticException.</p>

<p>I would appreciate feedback on the patch and any better ideas on how to fix the problem.</p></comment><comment id="12665249" author="chsemrau" created="Mon, 19 Jan 2009 22:05:59 +0000"><p>Attached is my version of a new binomialCoefficient function.</p></comment><comment id="12665253" author="chsemrau" created="Mon, 19 Jan 2009 22:16:06 +0000"><p>I think the recursive computation of Pascal's triangle (even with caching or dynamic programming) is unnecessarily complicated except to ensure correct values.</p>

<p>The attached patch ensures accuracy for all values that can be represented as a long integer, with a running time proportional to k*log(k) (assuming gcd(i,j) takes log(j) steps). It should be faster than the current version for n &lt;= 61, but for n &gt; 61 my version computes as much as k different gcd values, which might be slower.</p>

<p>I did not modify the double and log version, but your patch can be applied to these.</p></comment><comment id="12665284" author="psteitz" created="Mon, 19 Jan 2009 23:53:48 +0000"><p>Applied second patch along with changes to double, log versions from first patch in r735879.  Many thanks.</p></comment></comments><attachments><attachment id="12398252" name="binomialPatch.txt" size="15426" author="psteitz" created="Mon, 19 Jan 2009 18:40:57 +0000"/><attachment id="12398265" name="binomialPatch_cs.txt" size="7965" author="chsemrau" created="Mon, 19 Jan 2009 22:05:59 +0000"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>2.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Mon, 19 Jan 2009 18:40:57 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>34152</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160774</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-240] MathUtils.factorial(n) fails for n >= 17</title><link>https://issues.apache.org/jira/browse/MATH-240</link><project id="12310485" key="MATH">Commons Math</project><description><p>The result of MathUtils.factorial( n ) for n = 17, 18, 19 is wrong, probably because of rounding errors in the double calculations.</p>

<p>Replace the first line of MathUtilsTest.testFactorial() by</p>

<p>        for (int i = 1; i &lt;= 20; i++) {</p>

<p>to check all valid arguments for the long result and see the failure.</p>

<p>I suggest implementing a simple loop to multiply the long result - or even using a precomputed long[] - instead of adding logarithms.</p></description><environment/><key id="12412638">MATH-240</key><summary>MathUtils.factorial(n) fails for n >= 17</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="psteitz">Phil Steitz</assignee><reporter username="chsemrau">Christian Semrau</reporter><labels>
                    </labels><created>Fri, 16 Jan 2009 22:43:04 +0000</created><updated>Thu, 23 Apr 2009 03:26:20 +0100</updated><resolved>Mon, 19 Jan 2009 19:43:52 +0000</resolved><version>2.0</version><fixVersion>2.0</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12665204" author="psteitz" created="Mon, 19 Jan 2009 19:43:52 +0000"><p>Thanks for reporting this.  Fixed in r735781.</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Mon, 19 Jan 2009 19:43:52 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>34155</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160775</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-239] Add gcd and lcm for long values in MathUtils</title><link>https://issues.apache.org/jira/browse/MATH-239</link><project id="12310485" key="MATH">Commons Math</project><description><p>I suggest adding MathUtils.gcd and MathUtils.lcm for long values in addition to the methods for int values.</p></description><environment/><key id="12412635">MATH-239</key><summary>Add gcd and lcm for long values in MathUtils</summary><type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="psteitz">Phil Steitz</assignee><reporter username="chsemrau">Christian Semrau</reporter><labels>
                    </labels><created>Fri, 16 Jan 2009 22:29:19 +0000</created><updated>Wed, 14 Apr 2010 01:40:37 +0100</updated><resolved>Wed, 30 Dec 2009 23:07:45 +0000</resolved><fixVersion>2.1</fixVersion><due/><votes>0</votes><watches>0</watches><comments><comment id="12664840" author="psteitz" created="Sat, 17 Jan 2009 15:09:59 +0000"><p>Patches welcome!</p>

<p>Putting fix version at 2.1, as this is not a showstopper for 2.0, but will review / apply if we get a patch in time for 2.0</p></comment><comment id="12675694" author="chsemrau" created="Sun, 22 Feb 2009 19:18:07 +0000"><p>The long versions of gcd and lcm are adapted copies of the int versions.</p>

<p>I added some verification of exception messages to the tests, because I saw the change to gcd(int, int) where the exception message now contains the illegal arguments. To facilitate these (and possibly other) verifications, I added TestUtils.assertMessageContains(). Two of these verifications fail, because the exception is thrown by mulAndCheck without the illegal arguments; they are commented.</p></comment><comment id="12794829" author="luc" created="Mon, 28 Dec 2009 15:46:16 +0000"><p>I don't think parsing the error messages for verification is a good thing.<br/>
They are intended for user display, not for automatic parsing. They will also change according to the localization setting of the computer running the test.<br/>
Apart from this, the patch could probably be applied now. Has someone verified it ?</p></comment><comment id="12794837" author="psteitz" created="Mon, 28 Dec 2009 17:21:01 +0000"><p>Not yet.  On my list.  Go ahead if you have the cycles.</p></comment><comment id="12795214" author="sebb@apache.org" created="Wed, 30 Dec 2009 01:27:53 +0000"><p>Note: the @since tags need fixing.</p></comment><comment id="12795481" author="psteitz" created="Wed, 30 Dec 2009 23:07:45 +0000"><p>Pacth applied in r894730 with the following modifications</p>

<ul>
	<li>Removed the test methods that inspect error messages as I agree with Luc's comments on this</li>
	<li>Added an additional test case comparing long and int results</li>
	<li>Updated message resources with the new error messages</li>
</ul>


<p>Thanks for the patch!</p></comment></comments><attachments><attachment id="12400708" name="gcdForLong.txt" size="14195" author="chsemrau" created="Sun, 22 Feb 2009 19:18:07 +0000"/></attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>1.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Sat, 17 Jan 2009 15:09:59 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>150446</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160776</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item><item><title>[MATH-238] MathUtils.gcd(u, v) fails when u and v both contain a high power of 2</title><link>https://issues.apache.org/jira/browse/MATH-238</link><project id="12310485" key="MATH">Commons Math</project><description><p>The test at the beginning of MathUtils.gcd(u, v) for arguments equal to zero fails when u and v contain high enough powers of 2 so that their product overflows to zero.</p>

<p>        assertEquals(3 * (1&lt;&lt;15), MathUtils.gcd(3 * (1&lt;&lt;20), 9 * (1&lt;&lt;15)));</p>

<p>Fix: Replace the test at the start of MathUtils.gcd()</p>

<p>        if (u * v == 0) {</p>

<p>by</p>

<p>        if (u == 0 || v == 0) {</p></description><environment/><key id="12412633">MATH-238</key><summary>MathUtils.gcd(u, v) fails when u and v both contain a high power of 2</summary><type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type><priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority><status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status><statusCategory id="3" key="done" colorName="green"/><resolution id="1">Fixed</resolution><assignee username="-1">Unassigned</assignee><reporter username="chsemrau">Christian Semrau</reporter><labels>
                    </labels><created>Fri, 16 Jan 2009 22:24:24 +0000</created><updated>Thu, 23 Apr 2009 03:26:20 +0100</updated><resolved>Fri, 16 Jan 2009 23:07:17 +0000</resolved><version>2.0</version><due/><votes>0</votes><watches>0</watches><comments><comment id="12664729" author="luc" created="Fri, 16 Jan 2009 23:07:17 +0000"><p>fixed in trunk as of r73517</p>

<p>thanks for the report</p></comment></comments><attachments>
                    </attachments><subtasks>
                    </subtasks><customfields><customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments"><customfieldname>Attachment count</customfieldname><customfieldvalues><customfieldvalue>0.0</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate"><customfieldname>Date of First Response</customfieldname><customfieldvalues><customfieldvalue>Fri, 16 Jan 2009 23:07:17 +0000</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Global Rank</customfieldname><customfieldvalues><customfieldvalue>34222</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank"><customfieldname>Rank</customfieldname><customfieldvalues></customfieldvalues></customfield><customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank"><customfieldname>Rank (Obsolete)</customfieldname><customfieldvalues><customfieldvalue>160777</customfieldvalue></customfieldvalues></customfield><customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus"><customfieldname>Time in Status</customfieldname><customfieldvalues></customfieldvalues></customfield></customfields></item></channel></rss>